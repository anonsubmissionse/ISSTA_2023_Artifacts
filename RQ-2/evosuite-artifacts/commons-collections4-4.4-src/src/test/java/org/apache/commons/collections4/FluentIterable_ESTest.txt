 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of((Iterable<Predicate<Object>>) arrayList0);
      fluentIterable0.spliterator();
      fluentIterable0.iterator();
      FluentIterable<Boolean> fluentIterable1 = new FluentIterable<Boolean>();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      fluentIterable1.skip(1L);
      // Undeclared exception!
      try { 
        fluentIterable1.collate((Iterable<? extends Boolean>) null, comparator0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1543);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) fluentIterable0, comparator0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.filter(predicate0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.append(integerArray0);
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.unmodifiable();
      Integer integer1 = new Integer(1543);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer1);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, transformer0, transformer0);
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.transform((Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      FluentIterable<Integer> fluentIterable5 = fluentIterable4.loop();
      boolean boolean0 = fluentIterable5.anyMatch(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FluentIterable<Boolean> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.append((Iterable<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Integer>) priorityQueue0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.collate((Iterable<? extends Integer>) priorityQueue0, (Comparator<? super Integer>) comparator1);
      fluentIterable2.collate((Iterable<? extends Integer>) fluentIterable1);
      FluentIterable<String> fluentIterable3 = FluentIterable.empty();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      fluentIterable3.anyMatch(predicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      FluentIterable<Locale.Category> fluentIterable4 = FluentIterable.of((Iterable<Locale.Category>) enumSet1);
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.zip((Iterable<? extends Locale.Category>) enumSet1);
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable5.loop();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category3;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category5;
      locale_CategoryArray0[5] = locale_Category1;
      FluentIterable<Locale.Category> fluentIterable7 = fluentIterable6.append(locale_CategoryArray0);
      fluentIterable6.append((Iterable<? extends Locale.Category>) fluentIterable7);
      Boolean[] booleanArray0 = new Boolean[2];
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform("");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform("");
      booleanArray0[1] = boolean1;
      FluentIterable<Boolean> fluentIterable8 = FluentIterable.of(booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.of("Collection must not be null");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<String, String> ifTransformer0 = new IfTransformer<String, String>((Predicate<? super String>) null, transformer0, transformer0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.transform((Transformer<? super String, ? extends String>) ifTransformer0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.reverse();
      FluentIterable<String> fluentIterable3 = fluentIterable2.zip((Iterable<? extends String>) fluentIterable1);
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 3);
      iterableArray0[0] = (Iterable<String>) fluentIterable3;
      iterableArray0[1] = (Iterable<String>) fluentIterable0;
      iterableArray0[2] = (Iterable<String>) fluentIterable2;
      FluentIterable<String> fluentIterable4 = fluentIterable3.zip(iterableArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Collection must not be null";
      stringArray0[1] = "\"6]};;sx^c]";
      stringArray0[2] = "Collection must not be null";
      stringArray0[3] = "Collection must not be null";
      stringArray0[4] = "Collection must not be null";
      stringArray0[5] = "Collection must not be null";
      stringArray0[6] = "Collection must not be null";
      FluentIterable<String> fluentIterable5 = fluentIterable4.append(stringArray0);
      // Undeclared exception!
      try { 
        fluentIterable5.get(1456);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5ly,pm[s8j?";
      stringArray0[1] = "";
      stringArray0[2] = "Collection must not be null";
      stringArray0[3] = "q4QP,st(C";
      stringArray0[4] = "n@p=0X;X}h6";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "#^YAO%u'HXU8T[";
      stringArray0[8] = "! ~Rt38R>Q#'";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      fluentIterable1.zip((Iterable<? extends String>) fluentIterable0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      fluentIterable1.toArray(class0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      FluentIterable<String> fluentIterable0 = FluentIterable.of((Iterable<String>) priorityQueue0);
      int int0 = (-3624);
      Integer integer0 = new Integer((-3624));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.filter(notPredicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(notPredicate0);
      notPredicate0.evaluate(nullIsTruePredicate0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.collate((Iterable<? extends String>) fluentIterable0, (Comparator<? super String>) comparator1);
      fluentIterable2.size();
      FluentIterable<Predicate<Object>> fluentIterable3 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable3.skip((-2211L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "p";
      FluentIterable<String> fluentIterable0 = FluentIterable.of("p");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      FluentIterable<String> fluentIterable1 = fluentIterable0.transform((Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        fluentIterable1.eval();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of((Iterable<Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.append((Iterable<? extends Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.collate((Iterable<? extends Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable3.unique();
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 0);
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.zip(iterableArray0);
      String string0 = fluentIterable5.toString();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FluentIterable.empty();
      FluentIterable<Predicate<Locale.Category>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Predicate<Locale.Category>> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Predicate<Locale.Category>> fluentIterable2 = fluentIterable1.eval();
      FluentIterable<Predicate<Locale.Category>> fluentIterable3 = fluentIterable2.skip(1L);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        fluentIterable3.filter((Predicate<? super Predicate<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"QG55'P0I2>";
      stringArray0[1] = "]`";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      int int0 = 1126;
      fluentIterable0.eval();
      Closure<String> closure0 = ForClosure.forClosure(1126, (Closure<? super String>) null);
      // Undeclared exception!
      fluentIterable1.forEach(closure0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) "S*lJ7");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fluentIterable0;
      objectArray0[1] = (Object) "S*lJ7";
      objectArray0[2] = (Object) "S*lJ7";
      objectArray0[3] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append(objectArray0);
      // Undeclared exception!
      try { 
        fluentIterable1.transform((Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>(stack0);
      FluentIterable<Closure<Object>> fluentIterable0 = FluentIterable.of((Iterable<Closure<Object>>) arrayList0);
      FluentIterable<Closure<Object>> fluentIterable1 = fluentIterable0.unique();
      // Undeclared exception!
      try { 
        fluentIterable1.append((Closure<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.skip(2957L);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.zip((Iterable<? extends Locale.Category>) fluentIterable0);
      Class<Locale.Category> class0 = Locale.Category.class;
      fluentIterable2.toArray(class0);
      // Undeclared exception!
      try { 
        fluentIterable2.skip((-2041L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(547);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = FluentIterable.of(objectArray0);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.skip(547);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      fluentIterable2.copyInto(hashSet0);
      fluentIterable2.zip((Iterable<?>) fluentIterable1);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.limit(547);
      fluentIterable3.skip(547);
      fluentIterable3.reverse();
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      List<Object> list0 = fluentIterable0.toList();
      fluentIterable0.append((Iterable<?>) list0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fluentIterable0;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      FluentIterable<Locale.Category> fluentIterable1 = FluentIterable.of(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        fluentIterable1.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[2] = predicate1;
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[5] = predicate3;
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.unmodifiable();
      fluentIterable1.copyInto(arrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) treeSet0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.eval();
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.collate((Iterable<? extends Integer>) fluentIterable1);
      // Undeclared exception!
      try { 
        fluentIterable3.skip((-4382L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|MTro~|eO";
      stringArray0[1] = "t+?~]#z!";
      String string0 = "Zz1j6PSguGtC($RQ4or";
      stringArray0[2] = "Zz1j6PSguGtC($RQ4or";
      stringArray0[3] = "uuw.qfP%2sb?]u";
      stringArray0[4] = "";
      stringArray0[5] = "Input Object must not be null";
      stringArray0[6] = "Wuurnf!!";
      stringArray0[7] = "Collection must not be null";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      fluentIterable0.size();
      // Undeclared exception!
      try { 
        FluentIterable.of((Predicate<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.append(stringArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      FluentIterable<String> fluentIterable2 = fluentIterable0.loop();
      fluentIterable2.toList();
      fluentIterable1.transform((Transformer<? super String, ? extends String>) transformer0);
      ArrayDeque<Boolean> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<Boolean>((Collection<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(2, 2279.3F);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) hashSet0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.skip(2);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.append((Iterable<?>) hashSet0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      hashSet0.containsAll(arrayDeque0);
      Iterable<Object>[] iterableArray0 = (Iterable<Object>[]) Array.newInstance(Iterable.class, 7);
      iterableArray0[0] = (Iterable<Object>) hashSet0;
      iterableArray0[1] = (Iterable<Object>) fluentIterable1;
      iterableArray0[2] = (Iterable<Object>) fluentIterable2;
      iterableArray0[3] = (Iterable<Object>) fluentIterable1;
      iterableArray0[4] = (Iterable<Object>) fluentIterable2;
      iterableArray0[5] = (Iterable<Object>) fluentIterable1;
      iterableArray0[6] = (Iterable<Object>) hashSet0;
      FluentIterable<Object> fluentIterable3 = fluentIterable2.zip(iterableArray0);
      FluentIterable<Object> fluentIterable4 = fluentIterable3.append((Object[]) iterableArray0);
      fluentIterable4.zip(iterableArray0);
      FluentIterable<Object> fluentIterable5 = fluentIterable4.collate((Iterable<?>) fluentIterable0);
      fluentIterable5.asEnumeration();
      FluentIterable<String> fluentIterable6 = FluentIterable.empty();
      FluentIterable<String> fluentIterable7 = fluentIterable6.limit(0L);
      FluentIterable<String> fluentIterable8 = fluentIterable7.unique();
      // Undeclared exception!
      try { 
        fluentIterable8.zip((Iterable<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      FluentIterable.of(locale_CategoryArray0);
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.empty();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      FluentIterable<Predicate<Object>> fluentIterable1 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Object>> fluentIterable2 = fluentIterable0.collate((Iterable<? extends Predicate<Object>>) fluentIterable1);
      FluentIterable<Predicate<Object>> fluentIterable3 = fluentIterable2.reverse();
      FluentIterable<Predicate<Object>> fluentIterable4 = fluentIterable3.unique();
      FluentIterable<Predicate<Object>> fluentIterable5 = fluentIterable0.unmodifiable();
      FluentIterable<Predicate<Object>> fluentIterable6 = fluentIterable4.zip((Iterable<? extends Predicate<Object>>) fluentIterable5);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) transformedPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) predicateArray0[1], (Closure<? super Object>) closure1, true);
      // Undeclared exception!
      try { 
        fluentIterable6.forEach(closure2);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.empty();
      long long0 = (-4099L);
      // Undeclared exception!
      try { 
        fluentIterable0.limit((-4099L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.load(class0);
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of((Iterable<Locale.Category>) serviceLoader0);
      fluentIterable0.contains(class0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.append((Iterable<? extends Locale.Category>) serviceLoader0);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.unique();
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 2);
      iterableArray0[0] = (Iterable<Locale.Category>) fluentIterable1;
      iterableArray0[1] = (Iterable<Locale.Category>) fluentIterable0;
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.zip(iterableArray0);
      fluentIterable1.reverse();
      Iterable<Locale.Category>[] iterableArray1 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      iterableArray1[0] = (Iterable<Locale.Category>) fluentIterable3;
      iterableArray1[1] = (Iterable<Locale.Category>) fluentIterable0;
      iterableArray1[2] = (Iterable<Locale.Category>) fluentIterable3;
      iterableArray1[3] = (Iterable<Locale.Category>) fluentIterable1;
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable1.zip(iterableArray1);
      fluentIterable4.iterator();
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable3.reverse();
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable5.collate((Iterable<? extends Locale.Category>) fluentIterable1, (Comparator<? super Locale.Category>) comparator0);
      fluentIterable6.contains(serviceLoader0);
      FluentIterable<String> fluentIterable7 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable7.get((-2518));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2518
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, (Closure<? super Object>) null);
      fluentIterable0.forEach((Closure<? super Locale.Category>) forClosure0);
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      int int0 = (-4016);
      fluentIterable0.contains(locale_Category0);
      LinkedHashSet<Object> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Object>((-4016), (-4016));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4016
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      Integer integer0 = new Integer((-1150));
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.unmodifiable();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(fluentIterable2, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Class<String> class0 = String.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate1;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[3]);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable0.filter(nonePredicate0);
      fluentIterable3.allMatch(predicate1);
      fluentIterable0.spliterator();
      fluentIterable0.toString();
      fluentIterable3.anyMatch(predicateArray0[4]);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      FluentIterable<Integer> fluentIterable4 = fluentIterable1.append(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      FluentIterable<String> fluentIterable1 = fluentIterable0.unique();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@bF)o|SC=%q_|q2";
      stringArray0[1] = "org.apache.commons.collections4.functors.AbstractQuantifierPredicate";
      stringArray0[2] = "org.apache.commons.collections4.functors.TransformerClosure";
      stringArray0[3] = "Collection must not be null";
      FluentIterable<String> fluentIterable2 = fluentIterable1.append(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Boolean> vector0 = new Vector<Boolean>(1333, (-2936));
      FluentIterable<Boolean> fluentIterable0 = FluentIterable.of((Iterable<Boolean>) vector0);
      FluentIterable<Boolean> fluentIterable1 = fluentIterable0.skip(2233L);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Predicate<Object>> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Predicate<Object>>((-1315), comparator0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FluentIterable.empty();
      FluentIterable<Boolean>[] fluentIterableArray0 = (FluentIterable<Boolean>[]) Array.newInstance(FluentIterable.class, 1);
      FluentIterable<Boolean> fluentIterable0 = new FluentIterable<Boolean>();
      fluentIterableArray0[0] = fluentIterable0;
      FluentIterable<FluentIterable<Boolean>> fluentIterable1 = FluentIterable.of(fluentIterableArray0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable2 = FluentIterable.of((Iterable<FluentIterable<Boolean>>) fluentIterable1);
      fluentIterable2.get(0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable3 = fluentIterable2.append(fluentIterableArray0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable4 = fluentIterable3.loop();
      fluentIterable2.eval();
      FluentIterable<FluentIterable<Boolean>> fluentIterable5 = fluentIterable4.collate((Iterable<? extends FluentIterable<Boolean>>) fluentIterable3);
      FluentIterable.of("");
      fluentIterable5.iterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable.of(locale_Category0);
      FluentIterable<Predicate<Object>> fluentIterable6 = new FluentIterable<Predicate<Object>>();
      FluentIterable<Predicate<Object>> fluentIterable7 = fluentIterable6.limit(0);
      // Undeclared exception!
      try { 
        fluentIterable7.zip((Iterable<? extends Predicate<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_CategoryArray0);
      fluentIterable0.unmodifiable();
      FluentIterable<String> fluentIterable1 = FluentIterable.empty();
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.collate((Iterable<? extends String>) serviceLoader0);
      Class<Locale.Category> class1 = Locale.Category.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader.load(class1, classLoader1);
      Class<Object> class2 = Object.class;
      ServiceLoader.loadInstalled(class2);
      FluentIterable<String> fluentIterable3 = fluentIterable2.loop();
      // Undeclared exception!
      try { 
        fluentIterable3.append((String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      Integer integer0 = new Integer(5);
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.reverse();
      fluentIterable2.isEmpty();
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      fluentIterable1.collate((Iterable<? extends Integer>) serviceLoader0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      predicateArray0[1] = (Predicate<Integer>) anyPredicate0;
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicateArray0[1]);
      predicateArray0[2] = (Predicate<Integer>) notPredicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Integer> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Integer>>) linkedHashSet0);
      predicateArray0[3] = predicate1;
      HashMap<Predicate<Object>, Transformer<Object, Boolean>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, Boolean>>();
      Transformer<Integer, Boolean> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends Boolean>>) hashMap0);
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      predicateArray0[4] = (Predicate<Integer>) transformerPredicate0;
      WhileClosure<Integer> whileClosure0 = new WhileClosure<Integer>(predicate0, (Closure<? super Integer>) null, false);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(whileClosure0);
      TransformedPredicate<Integer> transformedPredicate0 = new TransformedPredicate<Integer>(closureTransformer0, predicateArray0[2]);
      predicateArray0[5] = (Predicate<Integer>) transformedPredicate0;
      NullIsFalsePredicate<Integer> nullIsFalsePredicate0 = new NullIsFalsePredicate<Integer>(transformedPredicate0);
      predicateArray0[6] = (Predicate<Integer>) nullIsFalsePredicate0;
      Predicate<Integer> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Integer>>) linkedHashSet0);
      predicateArray0[7] = predicate2;
      Predicate<Integer> predicate3 = TruePredicate.truePredicate();
      predicateArray0[8] = predicate3;
      FluentIterable<Predicate<Integer>> fluentIterable3 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Integer>> fluentIterable4 = fluentIterable3.append(predicateArray0);
      int int0 = fluentIterable4.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FluentIterable<Predicate<Object>> fluentIterable0 = new FluentIterable<Predicate<Object>>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.transform((Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      fluentIterable1.collate((Iterable<? extends Predicate<Object>>) fluentIterable0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      FluentIterable<Object> fluentIterable2 = FluentIterable.of((Iterable<Object>) arrayList0);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.loop();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable4 = fluentIterable3.collate((Iterable<?>) fluentIterable0, (Comparator<? super Object>) comparator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(1446);
      FluentIterable<Object> fluentIterable5 = fluentIterable4.zip((Iterable<?>) arrayDeque0);
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 4);
      iterableArray0[0] = (Iterable<String>) arrayDeque0;
      iterableArray0[1] = (Iterable<String>) arrayDeque0;
      iterableArray0[2] = (Iterable<String>) arrayDeque0;
      iterableArray0[3] = (Iterable<String>) arrayDeque0;
      FluentIterable<Object> fluentIterable6 = fluentIterable5.zip(iterableArray0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(1446);
      FluentIterable<Object> fluentIterable7 = fluentIterable6.append((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        fluentIterable7.anyMatch((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FluentIterable.empty();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.unmodifiable();
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.loop();
      // Undeclared exception!
      fluentIterable2.toList();
  }
