/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:12:01 GMT 2022
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Iterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIteratorDecorator_ESTest extends AbstractIteratorDecorator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      SkippingIterator<Integer> skippingIterator0 = new SkippingIterator<Integer>(iterator0, 0L);
      Integer integer0 = skippingIterator0.next();
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      doReturn("").when(iterator0).next();
      SkippingIterator<String> skippingIterator0 = new SkippingIterator<String>(iterator0, 770L);
      String string0 = skippingIterator0.next();
      assertNotNull(string0);
}
}
