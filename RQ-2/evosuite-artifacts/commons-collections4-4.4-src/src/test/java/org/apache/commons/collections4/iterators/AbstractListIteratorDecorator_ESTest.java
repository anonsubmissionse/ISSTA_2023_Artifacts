/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:06:33 GMT 2022
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ListIterator;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.AbstractListIteratorDecorator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractListIteratorDecorator_ESTest extends AbstractListIteratorDecorator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2304, (-3097)).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      int int1 = abstractListIteratorDecorator0.previousIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(3645);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(listIterator0).previous();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.previous();
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2304).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(856);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.next();
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(listIterator0).hasNext();
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer1);
      abstractListIteratorDecorator0.hasNext();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer0);
      boolean boolean0 = abstractListIteratorDecorator0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator1 = new AbstractListIteratorDecorator<Object>(abstractListIteratorDecorator0);
      ListIterator<Object> listIterator1 = abstractListIteratorDecorator1.getListIterator();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = null;
      try {
        abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>((ListIterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractListIteratorDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.set((Object) null);
      assertTrue(abstractListIteratorDecorator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.previous();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.add((Object) null);
      assertFalse(abstractListIteratorDecorator0.hasNext());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.remove();
      assertFalse(abstractListIteratorDecorator0.hasNext());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.next();
      assertNotNull(object0);
}
}
