/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:03:02 GMT 2022
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.map.AbstractSortedMapDecorator;
import org.apache.commons.collections4.map.FixedSizeSortedMap;
import org.apache.commons.collections4.map.UnmodifiableSortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSortedMapDecorator_ESTest extends AbstractSortedMapDecorator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, String>) treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      abstractSortedMapDecorator_SortedMapIterator0.reset();
      assertFalse(abstractSortedMapDecorator_SortedMapIterator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Integer integer0 = new Integer(1);
      SortedMap<Object, String> sortedMap0 = fixedSizeSortedMap0.tailMap(integer0);
      assertTrue(sortedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, Integer>(treeMap0);
      SortedMap<String, Integer> sortedMap0 = fixedSizeSortedMap0.subMap("org.apache.commons.collections4.map.AbstractSortedMapDecorator", "org.apache.commons.collections4.map.AbstractSortedMapDecorator");
      assertEquals(1, sortedMap0.size());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.put("kJ", "kJ");
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Object object0 = fixedSizeSortedMap0.lastKey();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeMap<String, TreeMap<Object, String>> treeMap0 = new TreeMap<String, TreeMap<Object, String>>();
      FixedSizeSortedMap<String, TreeMap<Object, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, TreeMap<Object, String>>(treeMap0);
      SortedMap<String, TreeMap<Object, String>> sortedMap0 = fixedSizeSortedMap0.headMap("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      assertEquals(1, sortedMap0.size());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, Integer>(treeMap0);
      Integer integer0 = new Integer(0);
      treeMap0.put("\"p,i-j90dQ", integer0);
      SortedMap<String, Integer> sortedMap0 = fixedSizeSortedMap0.headMap("SdOLN;,C{?X9LD4n");
      assertEquals(1, sortedMap0.size());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TreeMap<Integer, TreeMap<String, String>> treeMap0 = new TreeMap<Integer, TreeMap<String, String>>();
      FixedSizeSortedMap<Integer, TreeMap<String, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<Integer, TreeMap<String, String>>(treeMap0);
      Integer integer0 = new Integer((-1));
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap0.put(integer0, treeMap1);
      Integer integer1 = fixedSizeSortedMap0.firstKey();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      SortedMap<Integer, Object> sortedMap0 = fixedSizeSortedMap0.decorated();
      assertEquals(1, sortedMap0.size());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap1 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) fixedSizeSortedMap0);
      SortedMap<Integer, Object> sortedMap0 = fixedSizeSortedMap1.decorated();
      assertTrue(sortedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>();
      FixedSizeSortedMap<Object, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Integer>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.tailMap((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FixedSizeSortedMap<String, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, String>(treeMap0);
      SortedMap<String, String> sortedMap0 = fixedSizeSortedMap0.subMap("", "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      FixedSizeSortedMap<String, String> fixedSizeSortedMap1 = FixedSizeSortedMap.fixedSizeSortedMap(sortedMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap1.tailMap("w'qv$C<c8sM:}[F57");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeMap<TreeMap<String, Integer>, Integer> treeMap0 = new TreeMap<TreeMap<String, Integer>, Integer>();
      FixedSizeSortedMap<TreeMap<String, Integer>, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<TreeMap<String, Integer>, Integer>(treeMap0);
      TreeMap<String, Integer> treeMap1 = new TreeMap<String, Integer>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.tailMap(treeMap1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2904);
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Object>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeMap<String, TreeMap<Object, Object>> treeMap0 = new TreeMap<String, TreeMap<Object, Object>>();
      FixedSizeSortedMap<String, TreeMap<Object, Object>> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<String, TreeMap<Object, Object>>) treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap("s=~J^)z5#6Pu#", "&)`8ThF.BL4W9A");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeMap<TreeMap<Object, String>, String> treeMap0 = new TreeMap<TreeMap<Object, String>, String>();
      FixedSizeSortedMap<TreeMap<Object, String>, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<TreeMap<Object, String>, String>) treeMap0);
      TreeMap<Object, String> treeMap1 = new TreeMap<Object, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap(treeMap1, treeMap1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, Object>) treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.previousKey((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Object, TreeMap<Object, String>> treeMap0 = new TreeMap<Object, TreeMap<Object, String>>();
      FixedSizeSortedMap<Object, TreeMap<Object, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, TreeMap<Object, String>>(treeMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.previousKey(object0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer0 = new Integer((-1515));
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey(integer0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$NavigableSubMap$SubMapIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      SortedMap<Integer, Object> sortedMap0 = UnmodifiableSortedMap.unmodifiableSortedMap((SortedMap<Integer, ?>) treeMap0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Integer, Object>(sortedMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey((Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeMap<TreeMap<String, String>, String> treeMap0 = new TreeMap<TreeMap<String, String>, String>();
      FixedSizeSortedMap<TreeMap<String, String>, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<TreeMap<String, String>, String>) treeMap0);
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey(treeMap1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.headMap((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<TreeMap<Object, String>, String> treeMap0 = new TreeMap<TreeMap<Object, String>, String>();
      FixedSizeSortedMap<TreeMap<Object, String>, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<TreeMap<Object, String>, String>(treeMap0);
      TreeMap<Object, String> treeMap1 = new TreeMap<Object, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.headMap(treeMap1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      Integer integer1 = new Integer(572);
      treeMap0.put(integer1, "s");
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer2 = fixedSizeSortedMap0.nextKey(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer1 = fixedSizeSortedMap0.nextKey(integer0);
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer1 = fixedSizeSortedMap0.previousKey(integer0);
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, String>) treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      // Undeclared exception!
      try { 
        abstractSortedMapDecorator_SortedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      boolean boolean0 = abstractSortedMapDecorator_SortedMapIterator0.hasPrevious();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<String, Integer>) treeMap0);
      OrderedMapIterator<String, Integer> orderedMapIterator0 = fixedSizeSortedMap0.mapIterator();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Object>(treeMap0);
      Comparator<? super Object> comparator0 = fixedSizeSortedMap0.comparator();
      assertNotNull(comparator0);
}
}
