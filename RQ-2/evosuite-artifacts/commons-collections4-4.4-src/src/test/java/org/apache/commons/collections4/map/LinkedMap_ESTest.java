/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:02:56 GMT 2022
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedMap_ESTest extends LinkedMap_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(linkedMap0, object0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      assertEquals(linkedMap0, linkedMap3);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(linkedMap1, objectArray1);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      assertTrue(linkedMap4.isEmpty());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      assertEquals(0, linkedMap4.size());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      assertTrue(linkedMap4.isEmpty());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      assertEquals(0, linkedMap4.size());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      assertTrue(linkedMap5.isEmpty());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
      assertNotNull(linkedMap5);
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      assertEquals(linkedMap0, abstractHashedMap0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      assertEquals(0, linkedMap3.size());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      assertEquals(linkedMap3, iterator0);
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      assertEquals(0, linkedMap4.size());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      assertTrue(linkedMap4.isEmpty());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      assertEquals(0, linkedMap4.size());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      assertTrue(linkedMap4.isEmpty());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      assertEquals(0, linkedMap5.size());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      assertTrue(linkedMap5.isEmpty());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      assertTrue(linkedMap4.isEmpty());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      assertTrue(linkedMap5.isEmpty());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      assertEquals(0, int2);
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put("(<)!6)=^", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>((AbstractHashedMap<Object, ?>) null);
      assertEquals(linkedMap5, abstractHashedMap_KeySet0);
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertTrue(listIterator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertEquals(linkedMap0, listIterator0);
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      assertEquals(linkedMap0, object0);
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      assertEquals(linkedMap1, object1);
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(linkedMap0, objectArray1);
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertEquals(linkedMap1, linkedMap_LinkedMapList1);
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(linkedMap0, linkedMap_LinkedMapList2);
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = 1073741824;
      LinkedMap<LinkedMap<String, Object>, String> linkedMap0 = new LinkedMap<LinkedMap<String, Object>, String>(1073741824);
  }
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      assertEquals(linkedMap0, linkedMap1);
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      assertEquals(linkedMap0, set0);
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      assertEquals(linkedMap0, integer0);
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<String, Integer>((Map<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      assertEquals(linkedMap1, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap_LinkedMapList1.size());
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertEquals(0, linkedMap_LinkedMapList1.size());
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertEquals(1, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertEquals(linkedMap0, iterator0);
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      assertEquals(linkedMap1, linkedMap_LinkedMapList1);
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
      assertEquals(0, abstractHashedMap_Values0.size());
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
      assertEquals(linkedMap0, abstractHashedMap_Values0);
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
      ;
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
      ;
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      ;
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      ;
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(1, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertEquals(linkedMap0, list0);
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      ;
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      assertEquals(0, linkedMap_LinkedMapList1.size());
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      assertEquals(linkedMap1, linkedMap_LinkedMapList1);
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(linkedMap0, predicate0);
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(linkedMap0, predicate1);
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      ;
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      ;
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      assertEquals(linkedMap0, linkedMap1);
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      assertEquals(linkedMap0, abstractHashedMap0);
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      assertEquals(linkedMap0, abstractHashedMap_EntrySet0);
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      ;
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      ;
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      ;
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(linkedMap2, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertEquals(linkedMap0, objectArray0);
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      ;
}
 @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(linkedMap0, listIterator0);
}
 @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      ;
}
 @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      ;
}
 @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      ;
}
 @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      ;
}
 @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      ;
}
 @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      ;
}
 @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      ;
}
 @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      ;
}
 @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      ;
}
 @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(0, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(linkedMap0, objectArray1);
}
 @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>((LinkedMap<Integer, ?>) null);
      assertNotNull(linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      ;
}
 @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      assertEquals(linkedMap0, predicate0);
}
 @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals(linkedMap0, predicate1);
}
 @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      assertEquals(linkedMap0, predicate3);
}
 @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
      ;
}
 @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
      ;
}
 @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace("org.apache.commons.collections4.map.LinkedMap", (Integer) null);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace("org.apache.commons.collections4.map.LinkedMap", (Integer) null);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace("org.apache.commons.collections4.map.LinkedMap", (Integer) null);
      ;
}
 @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      ;
}
 @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      ;
}
 @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
      assertEquals(linkedMap0, integer0);
}
 @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(linkedMap1, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      assertEquals(linkedMap0, abstractHashedMap0);
}
 @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap_KeySet0.size());
}
 @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
      assertEquals(linkedMap1, abstractHashedMap_KeySet0);
}
 @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      assertEquals(linkedMap0, linkedMap1);
}
 @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      assertEquals(0, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      ;
}
 @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      ;
}
 @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      ;
}
 @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      ;
}
 @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      assertEquals(linkedMap0, linkedMap_LinkedMapList1);
}
 @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      ;
}
 @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
      ;
}
 @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ;
}
 @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(abstractHashedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(1, abstractHashedMap0.size());
}
 @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      ;
}
 @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
}
 @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertEquals(linkedMap0, listIterator0);
}
 @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      assertEquals(linkedMap0, integer0);
}
 @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      ;
}
 @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(1, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(1, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      assertEquals(linkedMap1, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test977()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      assertEquals(1, linkedMap0.size());
}
 @Test(timeout = 4000)
  public void test978()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      assertTrue(linkedMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test979()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      assertNotNull(linkedMap0);
}
 @Test(timeout = 4000)
  public void test980()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test981()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test982()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      ;
}
 @Test(timeout = 4000)
  public void test983()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test984()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test985()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test986()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test987()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test988()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      ;
}
 @Test(timeout = 4000)
  public void test989()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test990()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertEquals(0, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test991()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test992()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test993()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test994()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test995()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test996()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      ;
}
 @Test(timeout = 4000)
  public void test997()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      assertEquals(linkedMap0, linkedMap_LinkedMapList0);
}
 @Test(timeout = 4000)
  public void test998()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test999()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      assertEquals(linkedMap1, locale0);
}
 @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(linkedMap0, set0);
}
 @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(1, linkedMap1.size());
}
 @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(linkedMap1.isEmpty());
}
 @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(linkedMap2.isEmpty());
}
 @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(0, linkedMap2.size());
}
 @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(0, linkedMap_LinkedMapList0.size());
}
 @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
      assertTrue(linkedMap3.isEmpty());
}
 @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
      assertEquals(1, linkedMap3.size());
}
 @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
      ;
}
 @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>(3119, 5542.538F);
      Object object0 = new Object();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(3119);
      linkedMap0.addMapping(12, (-2881), linkedMap1, integer0);
      linkedMap0.indexOf(object0);
      LinkedMap<Integer, Object> linkedMap2 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      linkedMap1.put("", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1891);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1891);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1891);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      linkedMap_LinkedMapList0.toArray(integerArray0);
      linkedMap_LinkedMapList0.toArray();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }
 @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(1916);
      linkedMap0.asList();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -1 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(26);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        linkedMap0.remove(2797);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 2797 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(601);
      linkedMap0.equals(integer0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(linkedMap1);
      LinkedMap<String, Integer> linkedMap3 = linkedMap2.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap3);
      Integer integer1 = new Integer(4122);
      linkedMap3.getEntry(integer1);
      int int0 = (-710);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList((-710), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -710
         //
         verifyException("java.util.SubList", e);
      }
  }
}
