 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 12;
      HashedMap<Integer, HashedMap<Integer, String>> hashedMap0 = new HashedMap<Integer, HashedMap<Integer, String>>(12);
      HashedMap<String, String> hashedMap1 = new HashedMap<String, String>();
      HashedMap<String, String> hashedMap2 = hashedMap1.clone();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("IIpX'Z^KcO|XG").when(biFunction0).apply(any() , anyString());
      hashedMap1.compute("tLeJ/^*", biFunction0);
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = new AbstractHashedMap<Object, Integer>(12);
      HashedMap<Object, Integer> hashedMap3 = new HashedMap<Object, Integer>(abstractHashedMap0);
      int int1 = (-3866);
      Integer integer0 = new Integer((-3866));
      abstractHashedMap0.put(hashedMap2, integer0);
      HashedMap<Object, Integer> hashedMap4 = hashedMap3.clone();
      hashedMap4.clone();
      hashedMap2.clone();
      HashedMap<Integer, HashedMap<Object, String>> hashedMap5 = new HashedMap<Integer, HashedMap<Object, String>>();
      hashedMap5.data = null;
      // Undeclared exception!
      try { 
        hashedMap5.clone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashedMap<String, HashedMap<String, Object>> hashedMap0 = new HashedMap<String, HashedMap<String, Object>>(1073741824);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 1073741824;
      HashedMap<HashedMap<String, Object>, String> hashedMap0 = new HashedMap<HashedMap<String, Object>, String>(1073741824, 1073741824);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashedMap<Object, HashedMap<String, Object>> hashedMap0 = new HashedMap<Object, HashedMap<String, Object>>(0);
      HashedMap<String, Object> hashedMap1 = new HashedMap<String, Object>();
      hashedMap0.addMapping(0, 0, (Object) null, hashedMap1);
      HashedMap<Object, HashedMap<String, Object>> hashedMap2 = hashedMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 1568;
      HashedMap<Object, String> hashedMap0 = new HashedMap<Object, String>(1568);
      HashedMap<Object, Integer> hashedMap1 = null;
      try {
        hashedMap1 = new HashedMap<Object, Integer>((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashedMap<String, Object> hashedMap0 = null;
      try {
        hashedMap0 = new HashedMap<String, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashedMap0.replaceAll(biFunction0);
      hashedMap0.threshold = 0;
      hashedMap0.clone();
      HashedMap<String, String> hashedMap1 = new HashedMap<String, String>();
      hashedMap1.clone();
      HashedMap<String, Object> hashedMap2 = null;
      try {
        hashedMap2 = new HashedMap<String, Object>((-2223));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashedMap<Integer, Object> hashedMap0 = new HashedMap<Integer, Object>(12, 12);
      HashedMap<Object, Object> hashedMap1 = new HashedMap<Object, Object>(hashedMap0);
      HashedMap<Object, Object> hashedMap2 = hashedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashedMap<Integer, String> hashedMap0 = new HashedMap<Integer, String>(1007);
      assertEquals(0, hashedMap0.size());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashedMap<HashedMap<Object, String>, String> hashedMap0 = new HashedMap<HashedMap<Object, String>, String>();
      HashedMap<String, Integer> hashedMap1 = new HashedMap<String, Integer>();
      HashedMap<String, Integer> hashedMap2 = hashedMap1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashedMap<HashedMap<Object, Object>, Object> hashedMap0 = new HashedMap<HashedMap<Object, Object>, Object>();
      assertTrue(hashedMap0.isEmpty());
}
