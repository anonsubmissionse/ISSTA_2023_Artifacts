/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:35:54 GMT 2022
 */

package org.apache.commons.jcs3.jcache.extras.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InMemoryResponse_ESTest extends InMemoryResponse_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "orgapache.commons.iofilefilter.SuffixFileFilter";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("orgapache.commons.iofilefilter.SuffixFileFilter");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.sendRedirect("orgapache.commons.iofilefilter.SuffixFileFilter");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      servletResponseWrapper0.setBufferSize(2582);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        inMemoryResponse0.setHeader("", "org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "str2";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "str2");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, pipedOutputStream0);
      inMemoryResponse0.getHeaders();
      // Undeclared exception!
      try { 
        inMemoryResponse0.setStatus((-1952257882), "str2");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l^{)z", true);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.sendError((int) '%', "l^{)z");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      httpServletResponseWrapper0.sendError(302);
      ServletResponse servletResponse0 = inMemoryResponse0.getResponse();
      httpServletResponseWrapper0.setResponse(servletResponse0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.addIntHeader("org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1", 3419);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1", "org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.addIntHeader("org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1", 3442);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "orgapache.commons.iofilefilter.SuffixFileFilter";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("orgapache.commons.iofilefilter.SuffixFileFilter");
      mockPrintStream0.println((Object) httpServletResponseWrapper0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      ServletResponse servletResponse0 = inMemoryResponse0.getResponse();
      httpServletResponseWrapper0.setResponse(servletResponse0);
      InMemoryResponse inMemoryResponse1 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        inMemoryResponse1.sendRedirect("orgapache.commons.iofilefilter.SuffixFileFilter");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      httpServletResponseWrapper0.setResponse(inMemoryResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.file.SimplePathVisitor", true);
      mockFileOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.close();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      InMemoryResponse inMemoryResponse1 = new InMemoryResponse(httpServletResponseWrapper0, objectOutputStream0);
      inMemoryResponse1.setResponse(httpServletResponseWrapper0);
      try { 
        inMemoryResponse1.flushBuffer();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      EvoSuiteFile evoSuiteFile0 = null;
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      String string0 = "mlG+";
      // Undeclared exception!
      try { 
        inMemoryResponse0.addDateHeader("mlG+", 0L);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      pipedOutputStream0.flush();
      mockPrintStream0.print('Y');
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.flushBuffer();
      Locale locale0 = Locale.forLanguageTag("68B[GJs]': Q4GS");
      mockPrintStream0.printf(locale0, "68B[GJs]': Q4GS", (Object[]) null);
      inMemoryResponse0.getCookies();
      inMemoryResponse0.getOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      inMemoryResponse0.getHeaders();
      httpServletResponseWrapper0.setResponse(inMemoryResponse0);
      String string0 = "GK*w,";
      inMemoryResponse0.containsHeader("GK*w,");
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).containsHeader(anyString());
      doReturn((String) null).when(httpServletResponse0).encodeUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.containsHeader("]e7nNrj");
      httpServletResponseWrapper0.encodeUrl("]e7nNrj");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      httpServletResponseWrapper0.sendError((-2));
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.setContentLength((-2));
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.getContentLength();
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeader("]e7nNrj");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S|[A=;");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      Cookie cookie0 = new Cookie("", "");
      // Undeclared exception!
      try { 
        inMemoryResponse0.addCookie(cookie0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The wildcard array must not be null");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The wildcard array must not be null");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      httpServletResponseWrapper0.setCharacterEncoding("The wildcard array must not be null");
      httpServletResponseWrapper0.setContentLength(0);
      inMemoryResponse0.sendError(0);
      inMemoryResponse0.setContentType("[)");
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.setDateHeader("org.apache.commons.io.filefilter.DirectoryFileFilter", (-1316L));
      inMemoryResponse0.getStatus();
      inMemoryResponse0.sendError(0);
      Class<Object> class0 = Object.class;
      inMemoryResponse0.isWrapperFor(class0);
      inMemoryResponse0.addDateHeader("", (-1L));
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.flushBuffer();
      inMemoryResponse0.getContentLength();
      inMemoryResponse0.setIntHeader("org.apache.commons.io.filefilter.DirectoryFileFilter", 0);
      Cookie cookie0 = new Cookie("", "");
      inMemoryResponse0.addCookie(cookie0);
      inMemoryResponse0.setIntHeader("[]'$x)eNw/ht3Y[}AL", 1482);
      inMemoryResponse0.getHeaderNames();
      assertEquals(1, inMemoryResponse0.getContentLength());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1678);
      byteArrayOutputStream0.write(1678);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      inMemoryResponse0.getHeaders();
      byte[] byteArray0 = new byte[6];
      ServletOutputStream servletOutputStream0 = inMemoryResponse0.getOutputStream();
      byteArrayOutputStream0.writeTo(servletOutputStream0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-50);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, (int) (byte) (-50), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("INSENSITIVE", 151L);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1449L);
      boolean boolean0 = inMemoryResponse0.containsHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("INSENSITIVE", 151L);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1449L);
      boolean boolean0 = inMemoryResponse0.containsHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn((Locale) null, (Locale) null).when(httpServletResponse0).getLocale();
      doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getLocale();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      httpServletResponseWrapper0.setLocale((Locale) null);
      inMemoryResponse0.sendError((-3407));
      Class<Integer> class0 = Integer.class;
      httpServletResponseWrapper0.getCharacterEncoding();
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.isWrapperFor(class0);
      httpServletResponseWrapper0.encodeRedirectURL((String) null);
      httpServletResponseWrapper0.getLocale();
      inMemoryResponse0.reset();
      String string0 = "{s3qHnP#+iHr";
      inMemoryResponse0.addIntHeader("{s3qHnP#+iHr", 200);
      inMemoryResponse0.setStatus(18);
      httpServletResponseWrapper0.getWriter();
      String string1 = "r|@|V$Unq";
      inMemoryResponse0.addIntHeader("r|@|V$Unq", 200);
      inMemoryResponse0.setContentType("");
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1449L);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1449L);
      String string0 = inMemoryResponse0.getHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1449L);
      String string0 = inMemoryResponse0.getHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      inMemoryResponse0.getCookies();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      doReturn((String) null).when(httpServletResponse0).encodeRedirectUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getContentType();
      String string0 = "?9^P_&9Q";
      MockPrintStream mockPrintStream0 = new MockPrintStream("?9^P_&9Q");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, objectOutputStream0);
      inMemoryResponse0.setHeader("", "");
      inMemoryResponse0.encodeRedirectUrl("");
      httpServletResponseWrapper0.getWriter();
      httpServletResponseWrapper0.addIntHeader("%AnJ[3Yh.-&Aqht/z_", 3167);
      inMemoryResponse0.setStatus((-2331));
      inMemoryResponse0.setContentLength(3167);
      inMemoryResponse0.getCookies();
      String string1 = "iVRG~.l(FNG5X";
      int int0 = 200;
      objectOutputStream0.writeChar(200);
      inMemoryResponse0.encodeRedirectURL("iVRG~.l(FNG5X");
      inMemoryResponse0.getCookies();
      inMemoryResponse0.setStatus((-2331));
      inMemoryResponse0.getCookies();
      inMemoryResponse0.sendRedirect("%AnJ[3Yh.-&Aqht/z_");
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeaders("1q/qI2:}");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.setStatus((-92));
      inMemoryResponse0.addHeader("r", "NOT (");
      inMemoryResponse0.resetBuffer();
      int int0 = inMemoryResponse0.getStatus();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse").when(httpServletResponse0).getCharacterEncoding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponse0, mockPrintStream0);
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(inMemoryResponse0);
      String string1 = "org.apache.commons.io.filefilter.AndFileFilter";
      mockPrintStream0.print("org.apache.commons.io.filefilter.AndFileFilter");
      mockPrintStream0.print(0.0F);
      int int0 = (-2183);
      httpServletResponseWrapper0.setBufferSize((-2183));
      httpServletResponseWrapper0.isWrapperFor((ServletResponse) inMemoryResponse0);
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.sendRedirect("");
      Cookie cookie0 = new Cookie("", "");
      inMemoryResponse0.addCookie(cookie0);
      inMemoryResponse0.sendError(0, "NDg");
      inMemoryResponse0.addHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", (String) null);
      inMemoryResponse0.addHeader("", "");
      inMemoryResponse0.getContentType();
      inMemoryResponse0.getCookies();
      // Undeclared exception!
      try { 
        inMemoryResponse0.setIntHeader((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFile mockFile0 = new MockFile("h>JIr)x5x Xb]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print(false);
      PrintStream printStream0 = mockPrintStream0.append('8');
      mockFile0.toURL();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, printStream0);
      inMemoryResponse0.sendRedirect("");
      mockFile0.setExecutable(true, true);
      inMemoryResponse0.getStatus();
      mockPrintStream0.println((Object) "h>JIr)x5x Xb]");
      inMemoryResponse0.setDateHeader("h>JIr)x5x Xb]", 1984L);
      inMemoryResponse0.getContentLength();
      inMemoryResponse0.setHeader("x~ Ibsp9I!=S", "x~ Ibsp9I!=S");
      mockPrintStream0.println(0);
      inMemoryResponse0.addDateHeader("h>JIr)x5x Xb]", 2208L);
      String string0 = "";
      Cookie cookie0 = null;
      try {
        cookie0 = new Cookie("The wildcard must not be null", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"The wildcard must not be null\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();
      doReturn(false).when(httpServletResponse0).containsHeader(anyString());
      doReturn((Collection) null).when(httpServletResponse0).getHeaders(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getWriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]A|nI*?1z<n");
      mockFileOutputStream0.close();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      httpServletResponseWrapper0.getHeaders("]A|nI*?1z<n");
      httpServletResponseWrapper0.getOutputStream();
      httpServletResponseWrapper0.setIntHeader(":NyJ>?]oy5N'/^V", 2678);
      inMemoryResponse0.setContentType("F4~8>sV");
      inMemoryResponse0.addHeader("]5zi+Bb'1fAzD4n", "]A|nI*?1z<n");
      Cookie cookie0 = new Cookie(":NyJ>?]oy5N'/^V", "]5zi+Bb'1fAzD4n");
      cookie0.isHttpOnly();
      httpServletResponseWrapper0.containsHeader("t[c&lYY<LsY;9S],");
      inMemoryResponse0.addCookie(cookie0);
      inMemoryResponse0.sendRedirect(":a<");
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.getCookies();
      inMemoryResponse0.getContentType();
      inMemoryResponse0.setStatus((-1629), "]5zi+Bb'1fAzD4n");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getResponse();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%,d files, %,d directories, %,d bytes");
      httpServletResponseWrapper0.getOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      httpServletResponseWrapper0.reset();
      filterOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 2211);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      filterOutputStream0.close();
      httpServletResponseWrapper0.reset();
      // Undeclared exception!
      try { 
        inMemoryResponse0.addIntHeader((String) null, 1039);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      String string0 = "gJFG2G,SD(5Bxb5)";
      long long0 = 90L;
      // Undeclared exception!
      try { 
        inMemoryResponse0.addHeader((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.setIntHeader("", (-2849));
      inMemoryResponse0.reset();
      Class<String> class0 = String.class;
      httpServletResponseWrapper0.isWrapperFor(class0);
      Cookie cookie0 = new Cookie("", "Qb");
      inMemoryResponse0.addCookie(cookie0);
      cookie0.clone();
      inMemoryResponse0.setDateHeader("", (-104L));
      cookie0.setMaxAge(0);
      inMemoryResponse0.setContentLength(0);
      inMemoryResponse0.addCookie(cookie0);
      httpServletResponseWrapper0.getCharacterEncoding();
      inMemoryResponse0.getHeaders("");
      inMemoryResponse0.sendError(651, "vNm{~G8#y/C|_FO&");
      inMemoryResponse0.addIntHeader("", 1);
      inMemoryResponse0.setIntHeader("", 127);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).containsHeader(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      String string0 = "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.getStatus();
      httpServletResponseWrapper0.containsHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1");
      inMemoryResponse0.setStatus(200);
      mockPrintStream0.print((float) 200);
      int int0 = 56320;
      inMemoryResponse0.addIntHeader("E$%6!59YOi&A", 56320);
      inMemoryResponse0.setIntHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", 56320);
      mockPrintStream0.print("E$%6!59YOi&A");
      inMemoryResponse0.sendError(1022, (String) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.setDateHeader((String) null, 906L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.setContentLength(0);
      httpServletResponseWrapper0.encodeRedirectURL("");
      Cookie cookie0 = new Cookie("", "");
      inMemoryResponse0.addCookie(cookie0);
      inMemoryResponse0.addCookie(cookie0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.setDateHeader((String) null, (-1L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.flushBuffer();
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      String string0 = "";
      inMemoryResponse0.encodeRedirectUrl("");
      int int0 = 3;
      inMemoryResponse0.setIntHeader("", 3);
      inMemoryResponse0.getStatus();
      // Undeclared exception!
      try { 
        inMemoryResponse0.addDateHeader((String) null, 200);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      inMemoryResponse0.setContentType("org.apache.commons.io.filefilter.CanWriteFileFilter");
      inMemoryResponse0.getResponse();
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", 863L);
      inMemoryResponse0.encodeRedirectURL((String) null);
      inMemoryResponse0.addHeader("9JP7}i (DDJ25(?", (String) null);
      inMemoryResponse0.setContentLength(1218);
      inMemoryResponse0.setContentLength(1218);
      inMemoryResponse0.getContentLength();
      inMemoryResponse0.sendError(1218);
      // Undeclared exception!
      try { 
        inMemoryResponse0.setHeader((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(httpServletResponse0).getLocale();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.setIntHeader("", (-751));
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.getLocale();
      inMemoryResponse0.setContentType((String) null);
      inMemoryResponse0.setContentType((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|UIF");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.flushBuffer();
      Locale locale0 = Locale.CHINESE;
      inMemoryResponse0.sendError(4406);
      inMemoryResponse0.setLocale(locale0);
      mockFileOutputStream0.flush();
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeaders("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o=3={O}F>,C#&");
      mockPrintStream0.print(false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      mockPrintStream0.append((CharSequence) "o=3={O}F>,C#&");
      inMemoryResponse0.setStatus(0);
      inMemoryResponse0.addIntHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", (-541));
      mockPrintStream0.println((-541));
      inMemoryResponse0.getOutputStream();
      httpServletResponseWrapper0.sendError(0);
      httpServletResponseWrapper0.flushBuffer();
      inMemoryResponse0.setIntHeader("o=3={O}F>,C#&", (-541));
      inMemoryResponse0.getCookies();
      mockPrintStream0.print(225.817F);
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.getHeaders();
      inMemoryResponse0.reset();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", true);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.setIntHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", (-2079));
      inMemoryResponse0.addHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1");
      mockFileOutputStream0.write((-2079));
      int int0 = inMemoryResponse0.getContentLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", true);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.setIntHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", (-2079));
      inMemoryResponse0.addHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1", "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse$1");
      mockFileOutputStream0.write((-2079));
      int int0 = inMemoryResponse0.getContentLength();
      inMemoryResponse0.addIntHeader("", 0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      inMemoryResponse0.setStatus(0, "");
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(171);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      inMemoryResponse0.sendError(171, ",nUD]&P`ukC");
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).isCommitted();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.FileEqualsFileFilter");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, dataOutputStream0);
      httpServletResponseWrapper0.isCommitted();
      inMemoryResponse0.getHeaders();
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.addDateHeader("CC&{[H2)J;rR_\"{5", (-722L));
      inMemoryResponse0.isWrapperFor((ServletResponse) httpServletResponseWrapper0);
      inMemoryResponse0.sendRedirect("");
      inMemoryResponse0.setContentLength((-665));
      inMemoryResponse0.containsHeader("E&r)/4c3j|FS");
      inMemoryResponse0.setHeader("E&r)/4c3j|FS", "");
      inMemoryResponse0.getContentType();
      inMemoryResponse0.setHeader("CC&{[H2)J;rR_\"{5", "");
      inMemoryResponse0.getHeaderNames();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, pipedOutputStream0);
      ServletOutputStream servletOutputStream0 = inMemoryResponse0.getOutputStream();
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(httpServletResponse1).getLocale();
      doReturn(servletOutputStream0).when(httpServletResponse1).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponse1);
      httpServletResponseWrapper1.setContentLength(3876);
      ServletOutputStream servletOutputStream1 = httpServletResponseWrapper1.getOutputStream();
      InMemoryResponse inMemoryResponse1 = new InMemoryResponse(httpServletResponseWrapper1, servletOutputStream1);
      inMemoryResponse1.getLocale();
      inMemoryResponse1.setHeader(">a&%9@", "k^j{");
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(=~VH)MCy:-");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.reset();
      inMemoryResponse0.getContentType();
      boolean boolean0 = inMemoryResponse0.containsHeader("6]q.Ln<");
      assertEquals(1, inMemoryResponse0.getContentLength());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(=~VH)MCy:-");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.reset();
      inMemoryResponse0.getContentType();
      boolean boolean0 = inMemoryResponse0.containsHeader("6]q.Ln<");
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(=~VH)MCy:-");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.reset();
      inMemoryResponse0.getContentType();
      boolean boolean0 = inMemoryResponse0.containsHeader("6]q.Ln<");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getResponse();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 3);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.setHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getWriter();
      MockFile mockFile0 = new MockFile("x", "The list of suffixes must not be null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setReadable(false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      mockFile0.mkdirs();
      inMemoryResponse0.setStatus(0);
      mockPrintStream0.close();
      Cookie cookie0 = new Cookie("x", "fev@7HK@zBN25?]");
      inMemoryResponse0.addCookie(cookie0);
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.sendRedirect("fev@7HK@zBN25?]");
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((-2)).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.reset();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      httpServletResponseWrapper0.getStatus();
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.getHeaders();
      httpServletResponseWrapper0.resetBuffer();
      inMemoryResponse0.reset();
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.getOutputStream();
      Cookie cookie0 = new Cookie("", "pathCounter");
      inMemoryResponse0.addCookie(cookie0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((-2)).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.reset();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      httpServletResponseWrapper0.getStatus();
      inMemoryResponse0.getOutputStream();
      inMemoryResponse0.getHeaders();
      httpServletResponseWrapper0.resetBuffer();
      inMemoryResponse0.reset();
      inMemoryResponse0.getHeaderNames();
      inMemoryResponse0.getOutputStream();
      Cookie cookie0 = new Cookie("", "pathCounter");
      inMemoryResponse0.addCookie(cookie0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.addDateHeader((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("S,.Ez");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("S,.Ez", objectArray0);
      InMemoryResponse inMemoryResponse0 = null;
      try {
        inMemoryResponse0 = new InMemoryResponse((HttpServletResponse) null, printStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.encodeRedirectURL("YY");
      httpServletResponseWrapper0.setCharacterEncoding("A>.x:yG83b#");
      // Undeclared exception!
      try { 
        inMemoryResponse0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      Locale locale0 = Locale.JAPANESE;
      httpServletResponseWrapper0.setLocale(locale0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.flushBuffer();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFile mockFile0 = new MockFile("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", "org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      mockFile0.toURI();
      mockFile0.setExecutable(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      String string0 = "/y'HVk";
      int int0 = 0;
      inMemoryResponse0.addIntHeader("/y'HVk", 0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn((String) null).when(httpServletResponse0).encodeRedirectUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.encodeRedirectUrl("");
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, filterOutputStream0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeader("0,1>OR<(oMnX%");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(">|$uI.^~.LKf5p");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.apache.commons.io.file.Counters$NoopPathCounters";
      objectArray0[1] = (Object) ">|$uI.^~.LKf5p";
      objectArray0[2] = (Object) ">|$uI.^~.LKf5p";
      objectArray0[3] = (Object) "org.apache.commons.io.file.Counters$NoopPathCounters";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.io.file.Counters$NoopPathCounters", objectArray0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, printStream0);
      inMemoryResponse0.addIntHeader("Y_8];M]Sj", 0);
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeaders("org.apache.commons.io.file.Counters$NoopPathCounters");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      boolean boolean0 = inMemoryResponse0.containsHeader("org.apache.commons.io.filefilter.MagicNumberFileFilter");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      boolean boolean0 = inMemoryResponse0.containsHeader("org.apache.commons.io.filefilter.MagicNumberFileFilter");
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      // Undeclared exception!
      try { 
        inMemoryResponse0.getHeaders("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_zL?W<fA", false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.setIntHeader("RfG7Szmt>j<X\"R", 773);
      inMemoryResponse0.setContentLength(0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_zL?W<fA", false);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      inMemoryResponse0.setIntHeader("RfG7Szmt>j<X\"R", 773);
      inMemoryResponse0.setContentLength(0);
      assertEquals(1, inMemoryResponse0.getContentLength());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.addIntHeader("bNI9%($5#VnZ7", (-223));
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      inMemoryResponse0.getOutputStream();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(1681);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, byteArrayOutputStream0);
      ServletOutputStream servletOutputStream0 = inMemoryResponse0.getOutputStream();
      byteArrayOutputStream0.writeTo(servletOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1").when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, (OutputStream) null);
      inMemoryResponse0.addIntHeader("org.apache.comxons.jcs3.jcach.extras.web.InMemoryResponse$1", (-1));
      // Undeclared exception!
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("orgapache.commons.iofilefilter.SuffixFileFilter");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("orgapache.commons.iofilefilter.SuffixFileFilter");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.sendRedirect("orgapache.commons.iofilefilter.SuffixFileFilter");
      inMemoryResponse0.setDateHeader("orgapache.commons.iofilefilter.SuffixFileFilter", (-23L));
      int int0 = inMemoryResponse0.getStatus();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("orgapache.commons.iofilefilter.SuffixFileFilter");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.sendRedirect("orgapache.commons.iofilefilter.SuffixFileFilter");
      inMemoryResponse0.setDateHeader("orgapache.commons.iofilefilter.SuffixFileFilter", (-23L));
      int int0 = inMemoryResponse0.getStatus();
      inMemoryResponse0.flushBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1460L);
      String string0 = inMemoryResponse0.getHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, bufferedOutputStream0);
      inMemoryResponse0.addDateHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse", 1460L);
      String string0 = inMemoryResponse0.getHeader("org.apache.commons.jcs3.jcache.extras.web.InMemoryResponse");
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.file.SimplePathVisitor");
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockFileOutputStream0);
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.io.file.SimplePathVisitor").when(httpServletResponse1).encodeRedirectURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponse1);
      httpServletResponseWrapper1.encodeRedirectURL("org.apache.commons.io.file.SimplePathVisitor");
      inMemoryResponse0.addHeader("org.apache.commons.io.file.SimplePathVisitor", "org.apache.commons.io.file.SimplePathVisitor");
      inMemoryResponse0.setContentLength((-68));
      inMemoryResponse0.getContentLength();
      inMemoryResponse0.getHeaders("org.apache.commons.io.file.SimplePathVisitor");
      inMemoryResponse0.setHeader("org.apache.commons.io.file.SimplePathVisitor", "org.apache.commons.io.file.SimplePathVisitor");
      inMemoryResponse0.containsHeader("org.apache.commons.io.file.SimplePathVisitor");
      inMemoryResponse0.getHeader("org.apache.commons.io.file.SimplePathVisitor");
      assertEquals(1, inMemoryResponse0.getContentLength());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l^{)z", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, mockPrintStream0);
      inMemoryResponse0.sendError((int) '%', "l^{)z");
      inMemoryResponse0.flushBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "(t2";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("(t2").when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      InMemoryResponse inMemoryResponse0 = new InMemoryResponse(httpServletResponseWrapper0, pipedOutputStream0);
      inMemoryResponse0.setStatus((-1952257896), "(t2");
      try { 
        inMemoryResponse0.getWriter();
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(UnsupportedEncodingException e) {
      }
  }
}
