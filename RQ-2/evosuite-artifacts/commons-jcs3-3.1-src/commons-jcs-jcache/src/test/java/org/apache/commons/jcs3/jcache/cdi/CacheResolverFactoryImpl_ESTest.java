/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:16:38 GMT 2022
 */

package org.apache.commons.jcs3.jcache.cdi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.cache.annotation.CacheKeyGenerator;
import javax.cache.annotation.CacheMethodDetails;
import javax.cache.annotation.CachePut;
import javax.cache.annotation.CacheRemove;
import javax.cache.annotation.CacheRemoveAll;
import javax.cache.annotation.CacheResult;
import javax.interceptor.InvocationContext;
import org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper;
import org.apache.commons.jcs3.jcache.cdi.CacheInvocationContextImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheKeyGeneratorImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheKeyInvocationContextImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheMethodDetailsImpl;
import org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheResolverFactoryImpl_ESTest extends CacheResolverFactoryImpl_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta((Class<?>[]) null, (List<Set<Annotation>>) null, (Set<Annotation>) null, integerArray0, integer0, integerArray0, ",pF#Jconc40D,f>,", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, ",pF#Jconc40D,f>,", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, ",pF#Jconc40D,f>,", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, ",pF#Jconc40D,f>,", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheInvocationContextImpl<Annotation> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<Annotation>(invocationContext0, (Annotation) null, ",pF#Jconc40D,f>,", cDIJCacheHelper_MethodMeta0);
      InvocationContext invocationContext1 = cacheInvocationContextImpl0.delegate;
      CacheResult cacheResult1 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      doReturn(",pF#Jconc40D,f>,", (String) null).when(cacheResult1).exceptionCacheName();
      CacheKeyInvocationContextImpl<CacheResult> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<CacheResult>(invocationContext1, cacheResult1, ",pF#Jconc40D,f>,", cDIJCacheHelper_MethodMeta0);
      cacheResolverFactoryImpl0.getExceptionCacheResolver(cacheKeyInvocationContextImpl0);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getExceptionCacheResolver(cacheKeyInvocationContextImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // CacheResult.exceptionCacheName() not specified
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getExceptionCacheResolver((CacheMethodDetails<CacheResult>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      cacheResolverFactoryImpl0.release();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = mock(CDIJCacheHelper.MethodMeta.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null, (Set) null).when(cDIJCacheHelper_MethodMeta0).getAnnotations();
      CacheInvocationContextImpl<Annotation> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<Annotation>((InvocationContext) null, cacheResult0, "", cDIJCacheHelper_MethodMeta0);
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta1 = cacheInvocationContextImpl0.meta;
      CacheResult cacheResult1 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl").when(cacheResult1).exceptionCacheName();
      CacheInvocationContextImpl<CacheResult> cacheInvocationContextImpl1 = new CacheInvocationContextImpl<CacheResult>((InvocationContext) null, cacheResult1, "", cDIJCacheHelper_MethodMeta1);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getExceptionCacheResolver(cacheInvocationContextImpl1);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // cache manager closed
         //
         verifyException("org.apache.commons.jcs3.jcache.JCSCachingManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getCacheResolver((CacheMethodDetails<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = mock(CDIJCacheHelper.MethodMeta.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(cDIJCacheHelper_MethodMeta0).getAnnotations();
      Integer integer0 = new Integer(1508);
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheMethodDetailsImpl<Annotation> cacheMethodDetailsImpl0 = new CacheMethodDetailsImpl<Annotation>((InvocationContext) null, cachePut0, "", cDIJCacheHelper_MethodMeta0);
      Annotation annotation0 = cacheMethodDetailsImpl0.getCacheAnnotation();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      CachePut cachePut1 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta1 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, (Integer[]) null, integer0, (Integer[]) null, "{0}: getting item for key {1}", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, cacheResult0, "org.apache.commons.jcs3.log.JulLogAdapter", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, false, cachePut1, "", cacheResolverFactoryImpl0, (CacheKeyGenerator) null, true, cacheRemove0, "{0}: getting item for key {1}", cacheResolverFactoryImpl0, true, (CacheRemoveAll) null);
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>((InvocationContext) null, annotation0, (String) null, cDIJCacheHelper_MethodMeta1);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getCacheResolver(cacheKeyInvocationContextImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cacheName is null
         //
         verifyException("org.apache.commons.jcs3.jcache.Asserts", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cacheResult0).exceptionCacheName();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.valueOf(0);
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, integer0, integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cachePut0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, "", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheInvocationContextImpl<CacheResult> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<CacheResult>((InvocationContext) null, cacheResult0, "", cDIJCacheHelper_MethodMeta0);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getExceptionCacheResolver(cacheInvocationContextImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // CacheResult.exceptionCacheName() not specified
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = mock(CDIJCacheHelper.MethodMeta.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(cDIJCacheHelper_MethodMeta0).getAnnotations();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cacheResult0).exceptionCacheName();
      CacheKeyInvocationContextImpl<CacheResult> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<CacheResult>((InvocationContext) null, cacheResult0, (String) null, cDIJCacheHelper_MethodMeta0);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getExceptionCacheResolver(cacheKeyInvocationContextImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // CacheResult.exceptionCacheName() not specified
         //
         verifyException("org.apache.commons.jcs3.jcache.cdi.CacheResolverFactoryImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      cacheResolverFactoryImpl0.release();
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      Integer[] integerArray0 = new Integer[5];
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, (Set<Annotation>) null, integerArray0, integerArray0[1], integerArray0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "CacheResult.exceptionCacheName() not specified", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, (CachePut) null, "CacheResult.exceptionCacheName() not specified", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, true, cacheRemove0, ".", cacheResolverFactoryImpl0, true, cacheRemoveAll0);
      CacheInvocationContextImpl<Annotation> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<Annotation>(invocationContext0, (Annotation) null, "EOj6A_qz;]6 [", cDIJCacheHelper_MethodMeta0);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getCacheResolver(cacheInvocationContextImpl0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // cache manager closed
         //
         verifyException("org.apache.commons.jcs3.jcache.JCSCachingManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CacheResolverFactoryImpl cacheResolverFactoryImpl0 = new CacheResolverFactoryImpl();
      InvocationContext invocationContext0 = mock(InvocationContext.class, new ViolatedAssumptionAnswer());
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      LinkedList<Set<Annotation>> linkedList0 = new LinkedList<Set<Annotation>>();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      Integer[] integerArray0 = new Integer[7];
      CacheKeyGeneratorImpl cacheKeyGeneratorImpl0 = new CacheKeyGeneratorImpl();
      CacheResult cacheResult0 = mock(CacheResult.class, new ViolatedAssumptionAnswer());
      CachePut cachePut0 = mock(CachePut.class, new ViolatedAssumptionAnswer());
      CacheRemove cacheRemove0 = mock(CacheRemove.class, new ViolatedAssumptionAnswer());
      CacheRemoveAll cacheRemoveAll0 = mock(CacheRemoveAll.class, new ViolatedAssumptionAnswer());
      CDIJCacheHelper.MethodMeta cDIJCacheHelper_MethodMeta0 = new CDIJCacheHelper.MethodMeta(classArray0, linkedList0, linkedHashSet0, integerArray0, (Integer) null, integerArray0, "CacheResult.exceptionCacheName() not specified", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, cacheResult0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cachePut0, "", cacheResolverFactoryImpl0, cacheKeyGeneratorImpl0, false, cacheRemove0, "", cacheResolverFactoryImpl0, false, cacheRemoveAll0);
      CacheInvocationContextImpl<Annotation> cacheInvocationContextImpl0 = new CacheInvocationContextImpl<Annotation>(invocationContext0, (Annotation) null, "org.apache.commons.jcs3.jcache.cdi.CDIJCacheHelper", cDIJCacheHelper_MethodMeta0);
      InvocationContext invocationContext1 = cacheInvocationContextImpl0.delegate;
      CacheKeyInvocationContextImpl<Annotation> cacheKeyInvocationContextImpl0 = new CacheKeyInvocationContextImpl<Annotation>(invocationContext1, (Annotation) null, "K(y!St\"=L", cDIJCacheHelper_MethodMeta0);
      // Undeclared exception!
      try { 
        cacheResolverFactoryImpl0.getCacheResolver(cacheKeyInvocationContextImpl0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid character '\"' in value part of property
         //
         verifyException("org.apache.commons.jcs3.jcache.JCSCache", e);
      }
  }
}
