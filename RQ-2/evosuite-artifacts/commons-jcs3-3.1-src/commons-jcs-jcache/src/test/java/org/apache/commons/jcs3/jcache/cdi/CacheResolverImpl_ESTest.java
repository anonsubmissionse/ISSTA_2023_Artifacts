/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:20:32 GMT 2022
 */

package org.apache.commons.jcs3.jcache.cdi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.annotation.Annotation;
import java.util.Properties;
import java.util.concurrent.Delayed;
import javax.cache.Cache;
import javax.cache.annotation.CacheInvocationContext;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.event.CacheEntryEventFilter;
import javax.cache.expiry.ExpiryPolicy;
import org.apache.commons.jcs3.jcache.JCSCachingManager;
import org.apache.commons.jcs3.jcache.JCSCachingProvider;
import org.apache.commons.jcs3.jcache.cdi.CacheResolverImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheResolverImpl_ESTest extends CacheResolverImpl_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JCSCachingProvider jCSCachingProvider0 = new JCSCachingProvider();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Properties properties0 = jCSCachingProvider0.getDefaultProperties();
      JCSCachingManager jCSCachingManager0 = new JCSCachingManager(jCSCachingProvider0, jCSCachingProvider0.DEFAULT_URI, classLoader0, properties0);
      MutableConfiguration<ExpiryPolicy, Integer> mutableConfiguration0 = new MutableConfiguration<ExpiryPolicy, Integer>();
      Cache<ExpiryPolicy, Integer> cache0 = jCSCachingManager0.createCache("XXL*gp", mutableConfiguration0);
      CacheResolverImpl cacheResolverImpl0 = new CacheResolverImpl(cache0);
      Cache<CacheEntryEventFilter<CacheEntryEventFilter<String, Object>, Object>, ExpiryPolicy> cache1 = cacheResolverImpl0.resolveCache((CacheInvocationContext<? extends Annotation>) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CacheResolverImpl cacheResolverImpl0 = new CacheResolverImpl((Cache<?, ?>) null);
      Cache<Integer, Delayed> cache0 = cacheResolverImpl0.resolveCache((CacheInvocationContext<? extends Annotation>) null);
      assertNotNull(cache0);
}
}
