/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:14:48 GMT 2022
 */

package org.apache.commons.jcs3.jcache;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jcs3.jcache.Statistics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statistics_ESTest extends Statistics_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addPutTime(9223372036854775807L);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addRemoveTime(401L);
      long long0 = statistics0.getTimeTakenForRemovals();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addRemoveTime((-1L));
      long long0 = statistics0.getTimeTakenForRemovals();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addPutTime(236L);
      long long0 = statistics0.getTimeTakenForPuts();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addPutTime((-1071L));
      long long0 = statistics0.getTimeTakenForPuts();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addGetTime(2062L);
      long long0 = statistics0.getTimeTakenForGets();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.addGetTime((-986L));
      long long0 = statistics0.getTimeTakenForGets();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseRemovals(462L);
      long long0 = statistics0.getRemovals();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increasePuts(1881L);
      long long0 = statistics0.getPuts();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increasePuts((-1L));
      long long0 = statistics0.getPuts();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseMisses(883L);
      long long0 = statistics0.getMisses();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseMisses((-110L));
      long long0 = statistics0.getMisses();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseHits(869L);
      long long0 = statistics0.getHits();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseEvictions(1881L);
      long long0 = statistics0.getEvictions();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseEvictions((-651L));
      long long0 = statistics0.getEvictions();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getTimeTakenForRemovals());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getEvictions());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getRemovals());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getHits());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getMisses());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getTimeTakenForGets());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.reset();
      assertEquals(0, statistics0.getTimeTakenForPuts());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.setActive(false);
      statistics0.addGetTime(0L);
      assertEquals(0, statistics0.getTimeTakenForRemovals());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.setActive(false);
      statistics0.increaseMisses((-371L));
      assertEquals(0, statistics0.getMisses());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getRemovals();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getTimeTakenForRemovals();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getTimeTakenForPuts();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getEvictions();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getTimeTakenForGets();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getMisses();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getPuts();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      long long0 = statistics0.getHits();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseHits((-1L));
      long long0 = statistics0.getHits();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseExpiries((-1L));
      assertEquals(1, statistics0.getTimeTakenForRemovals());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Statistics statistics0 = new Statistics();
      statistics0.increaseRemovals((-1L));
      long long0 = statistics0.getRemovals();
      assertEquals(0, long0);
}
}
