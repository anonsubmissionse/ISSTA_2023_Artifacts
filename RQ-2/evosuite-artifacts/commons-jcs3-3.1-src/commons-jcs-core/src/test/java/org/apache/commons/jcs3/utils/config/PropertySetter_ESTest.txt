 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Class<File> class0 = File.class;
      MockFile mockFile0 = (MockFile)propertySetter0.convertArg(" .yXX8WV%Y9#tZ(h?", class0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Class<File> class0 = File.class;
      MockFile mockFile0 = (MockFile)propertySetter0.convertArg(" .yXX8WV%Y9#tZ(h?", class0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PropertySetter propertySetter0 = new PropertySetter(pushbackInputStream0);
      Class<PoolConfiguration.WhenBlockedPolicy> class0 = PoolConfiguration.WhenBlockedPolicy.class;
      // Undeclared exception!
      try { 
        propertySetter0.convertArg("] failed. Reason: ", class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.jcs3.utils.threadpool.PoolConfiguration.WhenBlockedPolicy.] failed. Reason:
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Class<String> class0 = String.class;
      Object object1 = propertySetter0.convertArg("\n Cache Names", class0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Class<String> class0 = String.class;
      Object object1 = propertySetter0.convertArg("\n Cache Names", class0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("");
      PropertyDescriptor propertyDescriptor0 = propertySetter0.getPropertyDescriptor("Was not allowed to read system property \"{0}\".");
      assertNotNull(propertyDescriptor0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetter propertySetter0 = new PropertySetter(class0);
      PropertyDescriptor propertyDescriptor0 = propertySetter0.getPropertyDescriptor("name");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetter propertySetter0 = new PropertySetter(class0);
      PropertyDescriptor propertyDescriptor0 = propertySetter0.getPropertyDescriptor("name");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter((Object) null);
      // Undeclared exception!
      try { 
        propertySetter0.setProperty("$VALUES", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("");
      // Undeclared exception!
      try { 
        propertySetter0.setProperty((PropertyDescriptor) null, "228.5.6.7", "WA'a22p3y +g`5_");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        propertySetter0.setProperties(properties0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        PropertySetter.setProperties(object0, properties0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter((Object) null);
      // Undeclared exception!
      try { 
        propertySetter0.introspect();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("");
      // Undeclared exception!
      try { 
        propertySetter0.getPropertyDescriptor((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      // Undeclared exception!
      try { 
        propertySetter0.convertArg("8Bau]jmU", (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("G,Q^h5+J$(42v");
      PropertySetter propertySetter1 = new PropertySetter(propertySetter0);
      propertySetter1.setProperty("class", "G,Q^h5+J$(42v");
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("Was not allowed to read system property \"{0}\".Was");
      Properties properties0 = new Properties();
      properties0.put("Was not allowed to read system property \"{0}\".Was", "Was not allowed to read system property \"{0}\".Was");
      propertySetter0.setProperties(properties0, "Was not allowed to read system property \"{0}\".Was");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      PropertySetter propertySetter0 = new PropertySetter(object0);
      Properties properties0 = new Properties();
      properties0.put("MB", "MB");
      propertySetter0.setProperties(properties0, "#params for setter != 1");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("org.apache.commonp.jcs3.log.LogManager$Lo6FactdryHolder");
      propertySetter0.setProperty("emlty", "class");
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("Was not allowed to read system property \"{0}\".Was");
      Class<Object> class0 = Object.class;
      Object object0 = propertySetter0.convertArg("[{0}] not in expected format", class0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("Was not allowed to read system property \"{0}\".Was");
      Class<UDPDiscoveryMessage.BroadcastType> class0 = UDPDiscoveryMessage.BroadcastType.class;
      Object object0 = propertySetter0.convertArg("REQUEST", class0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PropertySetter propertySetter0 = new PropertySetter(bufferedInputStream0);
      Class<File> class0 = File.class;
      Object object0 = propertySetter0.convertArg((String) null, class0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("mlK3oh>cQe#q*j:", (Method) null, (Method) null);
      PropertySetter propertySetter0 = new PropertySetter("mlK3oh>cQe#q*j:");
      try { 
        propertySetter0.setProperty(propertyDescriptor0, "mlK3oh>cQe#q*j:", "mlK3oh>cQe#q*j:");
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // No setter for property
         //
         verifyException("org.apache.commons.jcs3.utils.config.PropertySetter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("org.apache.commonp.jcs3.log.LogManager$Lo6FactdryHolder");
      propertySetter0.setProperty("class", "org.apache.commonp.jcs3.log.LogManager$Lo6FactdryHolder");
      propertySetter0.setProperty("emlty", "class");
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PropertySetter propertySetter0 = new PropertySetter(bufferedInputStream0);
      propertySetter0.setProperty("TboundarySize = [", (String) null);
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("");
      Properties properties0 = new Properties();
      properties0.put("W.iAEpd5+)L]", "");
      propertySetter0.setProperties(properties0, "");
      assertEquals(0, properties0.size());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("SeE'p'");
      properties0.load((Reader) stringReader0);
      PropertySetter.setProperties(object0, properties0, "T");
      assertTrue(properties0.isEmpty());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("Was not allowed to read system property \"{0}\".");
      properties0.load((Reader) stringReader0);
      PropertySetter.setProperties(object0, properties0, "");
      assertEquals(1, properties0.size());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertySetter propertySetter0 = new PropertySetter("");
      propertySetter0.introspect();
  }
