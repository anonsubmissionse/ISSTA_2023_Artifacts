 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<ForkJoinTask<RemoteLocation>, RemoteCacheAttributes>> arrayList0 = new ArrayList<RemoteCacheNoWait<ForkJoinTask<RemoteLocation>, RemoteCacheAttributes>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<ForkJoinTask<RemoteLocation>, RemoteCacheAttributes> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<ForkJoinTask<RemoteLocation>, RemoteCacheAttributes>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, standardSerializer0, remoteCacheFactory0);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.failover((RemoteCacheNoWait<ForkJoinTask<RemoteLocation>, RemoteCacheAttributes>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWaitFacade", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Object, Object>> arrayList0 = new ArrayList<RemoteCacheNoWait<Object, Object>>();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Object, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, Object>(arrayList0, (IRemoteCacheAttributes) null, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      // Undeclared exception!
      try { 
        remoteCacheNoWaitFacade0.connectAndRestore();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWaitFacade", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      RemoteCacheNoWaitFacade<Integer, String> remoteCacheNoWaitFacade0 = null;
      try {
        remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, String>((List<RemoteCacheNoWait<Integer, String>>) null, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, standardSerializer0, (RemoteCacheFactory) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      LinkedList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, RemoteCacheAttributes>, Integer>> linkedList0 = new LinkedList<RemoteCacheNoWait<RemoteCacheNoWaitFacade<Object, RemoteCacheAttributes>, Integer>>();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, RemoteCacheAttributes>, Integer> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteCacheNoWaitFacade<Object, RemoteCacheAttributes>, Integer>(linkedList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, encryptingSerializer0, remoteCacheFactory0);
      IElementSerializer iElementSerializer0 = remoteCacheNoWaitFacade0.getElementSerializer();
      LinkedList<RemoteCacheNoWait<Object, RemoteLocation>> linkedList1 = new LinkedList<RemoteCacheNoWait<Object, RemoteLocation>>();
      RemoteCacheNoWaitFacade<Object, RemoteLocation> remoteCacheNoWaitFacade1 = new RemoteCacheNoWaitFacade<Object, RemoteLocation>(linkedList1, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, iElementSerializer0, remoteCacheFactory0);
      ZombieCacheServiceNonLocal<Object, RemoteLocation> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, RemoteLocation>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      remoteCacheAttributes0.setName("e?< AG3_xc");
      RemoteCache<Object, RemoteLocation> remoteCache0 = new RemoteCache<Object, RemoteLocation>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, RemoteLocation>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Object, RemoteLocation> remoteCacheNoWait0 = new RemoteCacheNoWait<Object, RemoteLocation>(remoteCache0);
      cacheEventLoggerDebugLogger0.logApplicationEvent("RemoteCacheAttributes for failover = {0}", "", "U<%gMr(qsAq");
      remoteCacheNoWait0.setCacheEventLogger(cacheEventLoggerDebugLogger0);
      remoteCacheNoWaitFacade1.failover(remoteCacheNoWait0);
      ArrayList<RemoteCacheNoWait<ForkJoinTask<RemoteLocation>, RemoteLocation>> arrayList0 = new ArrayList<RemoteCacheNoWait<ForkJoinTask<RemoteLocation>, RemoteLocation>>();
      RemoteCacheFactory remoteCacheFactory1 = new RemoteCacheFactory();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<Delayed, RemoteLocation>> arrayList0 = new ArrayList<RemoteCacheNoWait<Delayed, RemoteLocation>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      RemoteType remoteType0 = RemoteType.CLUSTER;
      remoteCacheAttributes0.setRemoteType(remoteType0);
      ArrayList<RemoteCacheNoWait<Object, OpenOption>> arrayList1 = new ArrayList<RemoteCacheNoWait<Object, OpenOption>>();
      RemoteCacheNoWaitFacade<Object, OpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Object, OpenOption>(arrayList1, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, (IElementSerializer) null, (RemoteCacheFactory) null);
      remoteCacheNoWaitFacade0.failover((RemoteCacheNoWait<Object, OpenOption>) null);
      ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteLocation>> arrayList2 = new ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteLocation>>();
      ZombieCacheServiceNonLocal<RemoteLocation, RemoteLocation> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteLocation, RemoteLocation>(0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteCacheAttributes>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteCacheAttributes>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<RemoteLocation, RemoteCacheAttributes> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteLocation, RemoteCacheAttributes>(arrayList0, remoteCacheAttributes0, (ICacheEventLogger) null, encryptingSerializer0, remoteCacheFactory0);
      remoteCacheNoWaitFacade0.connectAndRestore();
      ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(1);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer0);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ArrayList<RemoteCacheNoWait<Integer, OpenOption>> arrayList0 = new ArrayList<RemoteCacheNoWait<Integer, OpenOption>>();
      RemoteCacheNoWaitFacade<Integer, OpenOption> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, OpenOption>(arrayList0, remoteCacheAttributes0, (ICacheEventLogger) null, encryptingSerializer0, remoteCacheFactory0);
      RemoteCache<Integer, OpenOption> remoteCache0 = new RemoteCache<Integer, OpenOption>(remoteCacheAttributes0, (ICacheServiceNonLocal<Integer, OpenOption>) null, (IRemoteCacheListener<Integer, OpenOption>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Integer, OpenOption> remoteCacheNoWait0 = new RemoteCacheNoWait<Integer, OpenOption>(remoteCache0);
      remoteCacheNoWaitFacade0.failover(remoteCacheNoWait0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteCacheAttributes>> arrayList0 = new ArrayList<RemoteCacheNoWait<RemoteLocation, RemoteCacheAttributes>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      CompressingSerializer compressingSerializer1 = new CompressingSerializer(compressingSerializer0);
      EncryptingSerializer encryptingSerializer0 = new EncryptingSerializer(compressingSerializer1);
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      ArrayList<RemoteCacheNoWait<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>> arrayList1 = new ArrayList<RemoteCacheNoWait<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>>();
      RemoteCacheNoWaitFacade<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(arrayList1, remoteCacheAttributes0, (ICacheEventLogger) null, encryptingSerializer0, remoteCacheFactory0);
      ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(1);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> remoteCache0 = new RemoteCache<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>> remoteCacheNoWait0 = new RemoteCacheNoWait<RemoteLocation, ForkJoinTask<RemoteCacheAttributes>>(remoteCache0);
      remoteCacheNoWaitFacade0.failover(remoteCacheNoWait0);
      ;
}
