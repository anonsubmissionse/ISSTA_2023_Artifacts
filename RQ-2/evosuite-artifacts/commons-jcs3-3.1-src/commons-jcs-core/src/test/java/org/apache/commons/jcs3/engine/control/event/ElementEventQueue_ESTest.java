/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:59:12 GMT 2022
 */

package org.apache.commons.jcs3.engine.control.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.jcs3.engine.control.event.ElementEvent;
import org.apache.commons.jcs3.engine.control.event.ElementEventQueue;
import org.apache.commons.jcs3.engine.control.event.behavior.ElementEventType;
import org.apache.commons.jcs3.engine.control.event.behavior.IElementEvent;
import org.apache.commons.jcs3.engine.control.event.behavior.IElementEventHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementEventQueue_ESTest extends ElementEventQueue_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ElementEventQueue elementEventQueue0 = new ElementEventQueue();
      IElementEventHandler iElementEventHandler0 = mock(IElementEventHandler.class, new ViolatedAssumptionAnswer());
      ElementEventType elementEventType0 = ElementEventType.EXCEEDED_IDLETIME_ONREQUEST;
      ElementEvent<Object> elementEvent0 = new ElementEvent<Object>(elementEventQueue0, elementEventType0);
      elementEventQueue0.addElementEvent(iElementEventHandler0, (IElementEvent<Object>) elementEvent0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ElementEventQueue elementEventQueue0 = new ElementEventQueue();
      IElementEventHandler iElementEventHandler0 = mock(IElementEventHandler.class, new ViolatedAssumptionAnswer());
      ElementEventType elementEventType0 = ElementEventType.EXCEEDED_IDLETIME_ONREQUEST;
      ElementEvent<Object> elementEvent0 = new ElementEvent<Object>(elementEventQueue0, elementEventType0);
      elementEventQueue0.dispose();
      elementEventQueue0.addElementEvent(iElementEventHandler0, (IElementEvent<Object>) elementEvent0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ElementEventQueue elementEventQueue0 = new ElementEventQueue();
      elementEventQueue0.dispose();
      elementEventQueue0.dispose();
  }
}
