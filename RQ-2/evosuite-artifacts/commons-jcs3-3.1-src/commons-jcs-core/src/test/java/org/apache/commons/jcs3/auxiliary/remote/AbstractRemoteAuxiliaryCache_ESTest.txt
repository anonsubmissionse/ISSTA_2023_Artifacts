 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<SequenceInputStream, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<SequenceInputStream, SequenceInputStream>(2269);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ZombieCacheServiceNonLocal<String, SequenceInputStream> zombieCacheServiceNonLocal1 = new ZombieCacheServiceNonLocal<String, SequenceInputStream>();
      RemoteCache<String, SequenceInputStream> remoteCache0 = new RemoteCache<String, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal1, (IRemoteCacheListener<String, SequenceInputStream>) null, remoteCacheMonitor0);
      remoteCache0.fixCache(zombieCacheServiceNonLocal0);
      assertNotNull(remoteCache0.getCacheName());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>();
      RemoteCache<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>> remoteCache0 = new RemoteCache<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>(remoteCacheAttributes0, (ICacheServiceNonLocal<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>) null, (IRemoteCacheListener<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>) null, (RemoteCacheMonitor) null);
      remoteCache0.fixCache(zombieCacheServiceNonLocal0);
      assertNotNull(remoteCache0.getStatus());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      Set<Delayed> set0 = remoteCache0.getKeySet();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Delayed, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, SequenceInputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, SequenceInputStream> remoteCache0 = new RemoteCache<Delayed, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, SequenceInputStream>) null, remoteCacheMonitor0);
      remoteCache0.setRemoteCacheListener((IRemoteCacheListener<Delayed, SequenceInputStream>) null);
      assertEquals(0, remoteCache0.getSize());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      remoteCache0.setRemoteCacheAttributes(remoteCacheAttributes0);
      assertFalse(remoteCacheAttributes0.getGetOnly());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<InputStream, String> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<InputStream, String>();
      RemoteCache<InputStream, String> remoteCache0 = new RemoteCache<InputStream, String>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<InputStream, String>) null, (RemoteCacheMonitor) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 13);
      boolean boolean0 = remoteCache0.processRemove(pushbackInputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      IStats iStats0 = remoteCache0.getStatistics();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ZombieCacheServiceNonLocal<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object>();
      RemoteCache<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object> remoteCache0 = new RemoteCache<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object>) null, remoteCacheMonitor0);
      ICacheServiceNonLocal<CacheElement<RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>, Object>, Object> iCacheServiceNonLocal0 = remoteCache0.getRemoteCacheService();
      assertNotNull(iCacheServiceNonLocal0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<String, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<String, InputStream>((-459));
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<String, InputStream> remoteCache0 = new RemoteCache<String, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<String, InputStream>) null, remoteCacheMonitor0);
      IRemoteCacheListener<String, InputStream> iRemoteCacheListener0 = remoteCache0.getRemoteCacheListener();
      assertNotNull(iRemoteCacheListener0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<AbstractMap.SimpleImmutableEntry<Object, ZombieCacheWatch>, String> remoteCache0 = new RemoteCache<AbstractMap.SimpleImmutableEntry<Object, ZombieCacheWatch>, String>(remoteCacheAttributes0, (ICacheServiceNonLocal<AbstractMap.SimpleImmutableEntry<Object, ZombieCacheWatch>, String>) null, (IRemoteCacheListener<AbstractMap.SimpleImmutableEntry<Object, ZombieCacheWatch>, String>) null, remoteCacheMonitor0);
      IRemoteCacheAttributes iRemoteCacheAttributes0 = remoteCache0.getRemoteCacheAttributes();
      assertEquals(0, iRemoteCacheAttributes0.getLocalPort());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<SequenceInputStream, ForkJoinTask<OpenOption>> remoteCache0 = new RemoteCache<SequenceInputStream, ForkJoinTask<OpenOption>>(remoteCacheAttributes0, (ICacheServiceNonLocal<SequenceInputStream, ForkJoinTask<OpenOption>>) null, (IRemoteCacheListener<SequenceInputStream, ForkJoinTask<OpenOption>>) null, remoteCacheMonitor0);
      // Undeclared exception!
      try { 
        remoteCache0.processUpdate((ICacheElement<SequenceInputStream, ForkJoinTask<OpenOption>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<SequenceInputStream, ForkJoinTask<OpenOption>> remoteCache0 = new RemoteCache<SequenceInputStream, ForkJoinTask<OpenOption>>(remoteCacheAttributes0, (ICacheServiceNonLocal<SequenceInputStream, ForkJoinTask<OpenOption>>) null, (IRemoteCacheListener<SequenceInputStream, ForkJoinTask<OpenOption>>) null, remoteCacheMonitor0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      ForkJoinTask<OpenOption> forkJoinTask0 = ForkJoinTask.adapt((Runnable) remoteCacheMonitor0, (OpenOption) standardOpenOption0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<SequenceInputStream, ForkJoinTask<OpenOption>> cacheElement0 = new CacheElement<SequenceInputStream, ForkJoinTask<OpenOption>>((String) null, (SequenceInputStream) null, forkJoinTask0, elementAttributes0);
      try { 
        remoteCache0.processUpdate(cacheElement0);
        fail("Expecting exception: NotSerializableException");
      } catch(NotSerializableException e) {
         //
         // org.apache.commons.jcs3.auxiliary.remote.RemoteCacheMonitor
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Object, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, SequenceInputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, SequenceInputStream> remoteCache0 = new RemoteCache<Object, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, SequenceInputStream>) null, remoteCacheMonitor0);
      remoteCache0.setRemoteCacheService((ICacheServiceNonLocal<Object, SequenceInputStream>) null);
      // Undeclared exception!
      try { 
        remoteCache0.processRemoveAll();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<String, CacheElement<Integer, Integer>> remoteCache0 = new RemoteCache<String, CacheElement<Integer, Integer>>(remoteCacheAttributes0, (ICacheServiceNonLocal<String, CacheElement<Integer, Integer>>) null, (IRemoteCacheListener<String, CacheElement<Integer, Integer>>) null, remoteCacheMonitor0);
      // Undeclared exception!
      try { 
        remoteCache0.processRemove("Problem setting listenerId");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>> remoteCache0 = new RemoteCache<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>(remoteCacheAttributes0, (ICacheServiceNonLocal<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>) null, (IRemoteCacheListener<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>) null, remoteCacheMonitor0);
      // Undeclared exception!
      try { 
        remoteCache0.processGetMatching("UV ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCache<String, InputStream> remoteCache0 = new RemoteCache<String, InputStream>(remoteCacheAttributes0, (ICacheServiceNonLocal<String, InputStream>) null, (IRemoteCacheListener<String, InputStream>) null, (RemoteCacheMonitor) null);
      // Undeclared exception!
      try { 
        remoteCache0.processGet((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>, Object> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>, Object>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>, Object> remoteCache0 = new RemoteCache<ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>, Object>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>, Object>) null, remoteCacheMonitor0);
      ZombieCacheServiceNonLocal<Object, ZombieCacheWatch> zombieCacheServiceNonLocal1 = new ZombieCacheServiceNonLocal<Object, ZombieCacheWatch>(0);
      // Undeclared exception!
      try { 
        remoteCache0.getUsingPool(zombieCacheServiceNonLocal1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Object, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, SequenceInputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, SequenceInputStream> remoteCache0 = new RemoteCache<Object, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, SequenceInputStream>) null, remoteCacheMonitor0);
      long long0 = remoteCache0.getListenerId();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<CacheElementSerialized<Integer, StandardOpenOption>, ZombieCacheServiceNonLocal<Integer, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<CacheElementSerialized<Integer, StandardOpenOption>, ZombieCacheServiceNonLocal<Integer, Object>>(1);
      RemoteCache<CacheElementSerialized<Integer, StandardOpenOption>, ZombieCacheServiceNonLocal<Integer, Object>> remoteCache0 = new RemoteCache<CacheElementSerialized<Integer, StandardOpenOption>, ZombieCacheServiceNonLocal<Integer, Object>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<CacheElementSerialized<Integer, StandardOpenOption>, ZombieCacheServiceNonLocal<Integer, Object>>) null, remoteCacheMonitor0);
      AuxiliaryCacheAttributes auxiliaryCacheAttributes0 = remoteCache0.getAuxiliaryCacheAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<RemoteCacheNoWait<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteCacheNoWait<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>();
      RemoteCache<RemoteCacheNoWait<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>> remoteCache0 = new RemoteCache<RemoteCacheNoWait<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<RemoteCacheNoWait<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>) null, (RemoteCacheMonitor) null);
      String string0 = remoteCache0.getCacheName();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<SequenceInputStream, ZombieCacheWatch>> remoteCache0 = new RemoteCache<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<SequenceInputStream, ZombieCacheWatch>>(remoteCacheAttributes0, (ICacheServiceNonLocal<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<SequenceInputStream, ZombieCacheWatch>>) null, (IRemoteCacheListener<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<SequenceInputStream, ZombieCacheWatch>>) null, remoteCacheMonitor0);
      CacheStatus cacheStatus0 = remoteCache0.getStatus();
      assertNotNull(cacheStatus0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCache<String, InputStream> remoteCache0 = new RemoteCache<String, InputStream>(remoteCacheAttributes0, (ICacheServiceNonLocal<String, InputStream>) null, (IRemoteCacheListener<String, InputStream>) null, (RemoteCacheMonitor) null);
      IStats iStats0 = remoteCache0.getStatistics();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<ZombieCacheServiceNonLocal<ZombieCacheWatch, Object>, ZombieCacheServiceNonLocal<String, Integer>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<ZombieCacheServiceNonLocal<ZombieCacheWatch, Object>, ZombieCacheServiceNonLocal<String, Integer>>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<ZombieCacheServiceNonLocal<ZombieCacheWatch, Object>, ZombieCacheServiceNonLocal<String, Integer>> remoteCache0 = new RemoteCache<ZombieCacheServiceNonLocal<ZombieCacheWatch, Object>, ZombieCacheServiceNonLocal<String, Integer>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<ZombieCacheServiceNonLocal<ZombieCacheWatch, Object>, ZombieCacheServiceNonLocal<String, Integer>>) null, remoteCacheMonitor0);
      remoteCache0.setListenerId((-1744L));
      assertEquals(0, remoteCache0.getSize());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Object, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, SequenceInputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, SequenceInputStream> remoteCache0 = new RemoteCache<Object, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, SequenceInputStream>) null, remoteCacheMonitor0);
      ZombieCacheServiceNonLocal<Integer, Integer> zombieCacheServiceNonLocal1 = new ZombieCacheServiceNonLocal<Integer, Integer>(0);
      byte[] byteArray0 = new byte[3];
      ZombieCacheServiceNonLocal<Object, Integer> zombieCacheServiceNonLocal2 = new ZombieCacheServiceNonLocal<Object, Integer>();
      Integer integer0 = new Integer(13);
      CacheElement<ZombieCacheServiceNonLocal<Object, Integer>, Integer> cacheElement0 = new CacheElement<ZombieCacheServiceNonLocal<Object, Integer>, Integer>((String) null, zombieCacheServiceNonLocal2, integer0);
      IElementAttributes iElementAttributes0 = cacheElement0.getElementAttributes();
      CacheElementSerialized<Object, SequenceInputStream> cacheElementSerialized0 = new CacheElementSerialized<Object, SequenceInputStream>((String) null, zombieCacheServiceNonLocal1, byteArray0, iElementAttributes0);
      remoteCache0.processUpdate(cacheElementSerialized0);
      assertEquals(0, remoteCache0.getSize());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      remoteCacheAttributes0.setGetOnly(true);
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 955);
      CacheElement<Delayed, InputStream> cacheElement0 = new CacheElement<Delayed, InputStream>("", (Delayed) null, bufferedInputStream0, (IElementAttributes) null);
      remoteCache0.update(cacheElement0);
      assertNotNull(remoteCache0.getCacheName());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Object, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Object, SequenceInputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Object, SequenceInputStream> remoteCache0 = new RemoteCache<Object, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Object, SequenceInputStream>) null, remoteCacheMonitor0);
      remoteCache0.processRemoveAll();
      assertNotNull(remoteCache0.getCacheType());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      remoteCacheAttributes0.setGetOnly(true);
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      remoteCache0.processRemoveAll();
      assertNotNull(remoteCache0.getCacheType());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      remoteCacheAttributes0.setGetOnly(true);
      ZombieCacheServiceNonLocal<Delayed, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Delayed, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Delayed, InputStream> remoteCache0 = new RemoteCache<Delayed, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Delayed, InputStream>) null, remoteCacheMonitor0);
      boolean boolean0 = remoteCache0.processRemove((Delayed) null);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ZombieCacheServiceNonLocal<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>>();
      RemoteCache<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>> remoteCache0 = new RemoteCache<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>>) null, remoteCacheMonitor0);
      Map<SequenceInputStream, ICacheElement<SequenceInputStream, RemoteCache<Integer, ZombieCacheWatch>>> map0 = remoteCache0.processGetMatching("");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<SequenceInputStream, SequenceInputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<SequenceInputStream, SequenceInputStream>(2269);
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<SequenceInputStream, SequenceInputStream> remoteCache0 = new RemoteCache<SequenceInputStream, SequenceInputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<SequenceInputStream, SequenceInputStream>) null, remoteCacheMonitor0);
      ICacheElement<SequenceInputStream, SequenceInputStream> iCacheElement0 = remoteCache0.processGet((SequenceInputStream) null);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>> remoteCache0 = new RemoteCache<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<RemoteCache<Object, Integer>, CacheElementSerialized<SequenceInputStream, Object>>) null, remoteCacheMonitor0);
      remoteCache0.processDispose();
      assertNotNull(remoteCache0.getCacheName());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ZombieCacheServiceNonLocal<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>();
      RemoteCache<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>> remoteCache0 = new RemoteCache<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>) null, remoteCacheMonitor0);
      int int0 = remoteCache0.getSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      ZombieCacheServiceNonLocal<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>();
      RemoteCache<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>> remoteCache0 = new RemoteCache<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<AbstractMap.SimpleEntry<SequenceInputStream, StandardOpenOption>, AbstractMap.SimpleEntry<Integer, Object>>) null, remoteCacheMonitor0);
      String string0 = remoteCache0.getStats();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>>((-138));
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>> remoteCache0 = new RemoteCache<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>>) null, remoteCacheMonitor0);
      IRemoteCacheListener<ZombieCacheWatch, RemoteCacheNoWait<ZombieCacheService<Object, Object>, CacheElement<String, Integer>>> iRemoteCacheListener0 = remoteCache0.getListener();
      assertNotNull(iRemoteCacheListener0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>> remoteCache0 = new RemoteCache<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>(remoteCacheAttributes0, (ICacheServiceNonLocal<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>) null, (IRemoteCacheListener<SequenceInputStream, ZombieCacheServiceNonLocal<InputStream, String>>) null, remoteCacheMonitor0);
      // Undeclared exception!
      try { 
        remoteCache0.getKeySet();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.remote.AbstractRemoteAuxiliaryCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<InputStream, InputStream> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<InputStream, InputStream>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<InputStream, InputStream> remoteCache0 = new RemoteCache<InputStream, InputStream>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<InputStream, InputStream>) null, remoteCacheMonitor0);
      ICacheType.CacheType iCacheType_CacheType0 = remoteCache0.getCacheType();
      ;
}
