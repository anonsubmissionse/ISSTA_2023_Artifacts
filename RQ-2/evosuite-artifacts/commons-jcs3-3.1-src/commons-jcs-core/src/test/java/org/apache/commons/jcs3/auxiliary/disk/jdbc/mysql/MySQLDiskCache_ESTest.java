/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:48:23 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.TableState;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.SharedPoolDataSourceFactory;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCacheAttributes;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheElementSerialized;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MySQLDiskCache_ESTest extends MySQLDiskCache_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      tableState0.setState(300);
      MySQLDiskCache<Object, CacheElementSerialized<String, Object>> mySQLDiskCache0 = new MySQLDiskCache<Object, CacheElementSerialized<String, Object>>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.deleteExpired();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      tableState0.setState(10);
      MySQLDiskCache<MySQLDiskCache<Delayed, String>, String> mySQLDiskCache0 = new MySQLDiskCache<MySQLDiskCache<Delayed, String>, String>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      MySQLDiskCache<Object, Object> mySQLDiskCache1 = new MySQLDiskCache<Object, Object>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      tableState0.setTableName("x*/sGK2\">U-je^p");
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("jcs", sharedPoolDataSourceFactory0, mySQLDiskCache0);
      // Undeclared exception!
      try { 
        mySQLDiskCache1.processUpdate(cacheElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      MySQLDiskCache<String, CacheElement<Integer, String>> mySQLDiskCache0 = new MySQLDiskCache<String, CacheElement<Integer, String>>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      String string0 = mySQLDiskCache0.constructLikeParameterFromPattern("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCache");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      MySQLDiskCache<ForkJoinTask<Object>, CacheElement<String, String>> mySQLDiskCache0 = new MySQLDiskCache<ForkJoinTask<Object>, CacheElement<String, String>>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      mySQLDiskCacheAttributes0.setMaxTotal(2);
      tableState0.setState(10);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.processGetMatching("B6]~RO'PT.<K)");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("49B>1P%G`SYd]SZ;TZ");
      jndiDataSourceFactory0.initialize(mySQLDiskCacheAttributes0);
      MySQLDiskCache<CacheElement<Integer, Object>, Object> mySQLDiskCache0 = new MySQLDiskCache<CacheElement<Integer, Object>, Object>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      CacheElement<Integer, Object> cacheElement0 = new CacheElement<Integer, Object>("_", (Integer) 1, mySQLDiskCache0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)60;
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<CacheElement<Integer, Object>, Object> cacheElementSerialized0 = new CacheElementSerialized<CacheElement<Integer, Object>, Object>("`a^_2twiWe;R(>", cacheElement0, byteArray0, elementAttributes0);
      mySQLDiskCache0.processUpdate(cacheElementSerialized0);
      MySQLDiskCache<CacheElementSerialized<Object, Delayed>, ForkJoinTask<Object>> mySQLDiskCache1 = new MySQLDiskCache<CacheElementSerialized<Object, Delayed>, ForkJoinTask<Object>>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      assertNotNull(mySQLDiskCache1.getCacheName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      MySQLDiskCache<CacheElementSerialized<Object, Object>, Object> mySQLDiskCache0 = new MySQLDiskCache<CacheElementSerialized<Object, Object>, Object>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      String string0 = mySQLDiskCache0.constructLikeParameterFromPattern("");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      MySQLDiskCache<ForkJoinTask<Object>, CacheElement<String, String>> mySQLDiskCache0 = new MySQLDiskCache<ForkJoinTask<Object>, CacheElement<String, String>>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.processGetMatching("B6]~RO'PT.<K)");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      MySQLDiskCache<ForkJoinTask<Object>, Object> mySQLDiskCache0 = new MySQLDiskCache<ForkJoinTask<Object>, Object>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.deleteExpired();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      MySQLDiskCache<Object, Object> mySQLDiskCache0 = new MySQLDiskCache<Object, Object>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.deleteExpired();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      MySQLDiskCache<String, String> mySQLDiskCache0 = new MySQLDiskCache<String, String>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        mySQLDiskCache0.constructLikeParameterFromPattern((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.mysql.MySQLDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      MySQLDiskCache<CacheElementSerialized<Object, Integer>, String> mySQLDiskCache0 = null;
      try {
        mySQLDiskCache0 = new MySQLDiskCache<CacheElementSerialized<Object, Integer>, String>((MySQLDiskCacheAttributes) null, jndiDataSourceFactory0, tableState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.AbstractDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      sharedPoolDataSourceFactory0.close();
      tableState0.setState(2);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      MySQLDiskCache<String, String> mySQLDiskCache0 = new MySQLDiskCache<String, String>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      int int0 = mySQLDiskCache0.deleteExpired();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      jndiDataSourceFactory0.initialize(mySQLDiskCacheAttributes0);
      TableState tableState0 = new TableState("?*fZ]u$S7l!w");
      MySQLDiskCache<String, Integer> mySQLDiskCache0 = new MySQLDiskCache<String, Integer>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      mySQLDiskCache0.deleteExpired();
      ElementAttributes elementAttributes0 = new ElementAttributes();
      assertTrue(elementAttributes0.getIsLateral());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      sharedPoolDataSourceFactory0.close();
      tableState0.setState(2);
      MySQLDiskCache<MySQLDiskCache<Delayed, String>, String> mySQLDiskCache0 = new MySQLDiskCache<MySQLDiskCache<Delayed, String>, String>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      MySQLDiskCache<Object, Object> mySQLDiskCache1 = new MySQLDiskCache<Object, Object>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      tableState0.setTableName("x*/sGK2\">U-je^p");
      CacheElement<Object, Object> cacheElement0 = new CacheElement<Object, Object>("jcs", sharedPoolDataSourceFactory0, mySQLDiskCache0);
      mySQLDiskCache1.processUpdate(cacheElement0);
      assertNotNull(cacheElement0.getCacheName());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      sharedPoolDataSourceFactory0.close();
      tableState0.setState(2);
      tableState0.setTableName("x*/sGK2\">U-je^p");
      MySQLDiskCache<Object, Integer> mySQLDiskCache0 = new MySQLDiskCache<Object, Integer>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      Map<Object, ICacheElement<Object, Integer>> map0 = mySQLDiskCache0.processGetMatching("");
      assertNotNull(map0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      MySQLDiskCache<Object, String> mySQLDiskCache0 = new MySQLDiskCache<Object, String>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jndiDataSourceFactory0.initialize(mySQLDiskCacheAttributes0);
      mySQLDiskCache0.processGet(mySQLDiskCacheAttributes0.DEFAULT_MAX_TOTAL);
      MySQLDiskCache<Object, Object> mySQLDiskCache1 = new MySQLDiskCache<Object, Object>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      mySQLDiskCache1.constructLikeParameterFromPattern("c'Nv&<6[y=Ixii8@{");
      mySQLDiskCache1.processGetMatching("");
      MySQLDiskCache<String, String> mySQLDiskCache2 = new MySQLDiskCache<String, String>(mySQLDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      assertNotNull(mySQLDiskCache2.getCacheName());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MySQLDiskCacheAttributes mySQLDiskCacheAttributes0 = new MySQLDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("");
      MySQLDiskCache<MySQLDiskCache<Object, Integer>, Integer> mySQLDiskCache0 = new MySQLDiskCache<MySQLDiskCache<Object, Integer>, Integer>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      MySQLDiskCache<Object, Integer> mySQLDiskCache1 = new MySQLDiskCache<Object, Integer>(mySQLDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      mySQLDiskCache1.getStatistics();
      // Undeclared exception!
      try { 
        mySQLDiskCache0.processGet(mySQLDiskCache1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
}
