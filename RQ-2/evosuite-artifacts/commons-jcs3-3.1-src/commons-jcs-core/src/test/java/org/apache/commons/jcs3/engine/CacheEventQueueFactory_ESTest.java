/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 22:00:59 GMT 2022
 */

package org.apache.commons.jcs3.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.concurrent.Delayed;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCache;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheAttributes;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheFactory;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheMonitor;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWait;
import org.apache.commons.jcs3.auxiliary.remote.RemoteCacheNoWaitFacade;
import org.apache.commons.jcs3.auxiliary.remote.behavior.IRemoteCacheListener;
import org.apache.commons.jcs3.engine.CacheAdaptor;
import org.apache.commons.jcs3.engine.CacheEventQueueFactory;
import org.apache.commons.jcs3.engine.CompositeCacheAttributes;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.ZombieCacheServiceNonLocal;
import org.apache.commons.jcs3.engine.behavior.ICache;
import org.apache.commons.jcs3.engine.behavior.ICacheEventQueue;
import org.apache.commons.jcs3.engine.behavior.ICacheListener;
import org.apache.commons.jcs3.engine.control.CompositeCache;
import org.apache.commons.jcs3.engine.logging.CacheEventLoggerDebugLogger;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.EncryptingSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheEventQueueFactory_ESTest extends CacheEventQueueFactory_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CacheEventQueueFactory<Object, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<Object, Object>();
      CacheAdaptor<Object, Object> cacheAdaptor0 = new CacheAdaptor<Object, Object>((ICache<Object, Object>) null);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Object, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Object, Object>) cacheAdaptor0, (-2874L), "h(p}Tv\"Pq", "h(p}Tv\"Pq", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      assertNotNull(iCacheEventQueue0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CacheEventQueueFactory<Object, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<Object, Object>();
      CacheAdaptor<Object, Object> cacheAdaptor0 = new CacheAdaptor<Object, Object>((ICache<Object, Object>) null);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Object, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Object, Object>) cacheAdaptor0, (-2874L), "h(p}Tv\"Pq", "h(p}Tv\"Pq", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CacheEventQueueFactory<Object, RemoteCacheNoWait<Delayed, Object>> cacheEventQueueFactory0 = new CacheEventQueueFactory<Object, RemoteCacheNoWait<Delayed, Object>>();
      CacheAdaptor<Object, RemoteCacheNoWait<Delayed, Object>> cacheAdaptor0 = new CacheAdaptor<Object, RemoteCacheNoWait<Delayed, Object>>((ICache<Object, RemoteCacheNoWait<Delayed, Object>>) null);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Object, RemoteCacheNoWait<Delayed, Object>> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Object, RemoteCacheNoWait<Delayed, Object>>) cacheAdaptor0, 0L, (String) null, 61, 61, "", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      CacheEventQueueFactory<String, Integer> cacheEventQueueFactory0 = new CacheEventQueueFactory<String, Integer>();
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CompositeCache<String, Integer> compositeCache0 = new CompositeCache<String, Integer>(compositeCacheAttributes0, elementAttributes0);
      CacheAdaptor<String, Integer> cacheAdaptor0 = new CacheAdaptor<String, Integer>(compositeCache0);
      ICacheEventQueue<String, Integer> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<String, Integer>) cacheAdaptor0, 20000L, "k0G7-Fo|0lv", 2, 0, "}brr_`GW", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      CacheEventQueueFactory<String, Integer> cacheEventQueueFactory0 = new CacheEventQueueFactory<String, Integer>();
      CompositeCacheAttributes compositeCacheAttributes0 = new CompositeCacheAttributes();
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CompositeCache<String, Integer> compositeCache0 = new CompositeCache<String, Integer>(compositeCacheAttributes0, elementAttributes0);
      CacheAdaptor<String, Integer> cacheAdaptor0 = new CacheAdaptor<String, Integer>(compositeCache0);
      ICacheEventQueue<String, Integer> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<String, Integer>) cacheAdaptor0, 20000L, "k0G7-Fo|0lv", 2, 0, "}brr_`GW", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CacheEventQueueFactory<Integer, String> cacheEventQueueFactory0 = new CacheEventQueueFactory<Integer, String>();
      ArrayList<RemoteCacheNoWait<Integer, String>> arrayList0 = new ArrayList<RemoteCacheNoWait<Integer, String>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Integer, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, String>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      CacheAdaptor<Integer, String> cacheAdaptor0 = new CacheAdaptor<Integer, String>(remoteCacheNoWaitFacade0);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Integer, String> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Integer, String>) cacheAdaptor0, (-1L), "org.apache.commons.jcs3.auxiliary.lateral.LateralElementDescriptor", 0, 0, "", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CacheEventQueueFactory<Integer, String> cacheEventQueueFactory0 = new CacheEventQueueFactory<Integer, String>();
      ArrayList<RemoteCacheNoWait<Integer, String>> arrayList0 = new ArrayList<RemoteCacheNoWait<Integer, String>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<Integer, String> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<Integer, String>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      CacheAdaptor<Integer, String> cacheAdaptor0 = new CacheAdaptor<Integer, String>(remoteCacheNoWaitFacade0);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Integer, String> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Integer, String>) cacheAdaptor0, (-1L), "org.apache.commons.jcs3.auxiliary.lateral.LateralElementDescriptor", 0, 0, "", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CacheEventQueueFactory<CacheEventQueueFactory<Object, Object>, CacheEventQueueFactory<Object, String>> cacheEventQueueFactory0 = new CacheEventQueueFactory<CacheEventQueueFactory<Object, Object>, CacheEventQueueFactory<Object, String>>();
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.POOLED;
      // Undeclared exception!
      try { 
        cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<CacheEventQueueFactory<Object, Object>, CacheEventQueueFactory<Object, String>>) null, 0L, "org.apache.commons.jcs3.engine.CacheEventQueueFactory", "org.apache.commons.jcs3.engine.CacheEventQueueFactory", iCacheEventQueue_QueueType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // listener must not be null
         //
         verifyException("org.apache.commons.jcs3.engine.AbstractCacheEventQueue", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CacheEventQueueFactory<String, Delayed> cacheEventQueueFactory0 = new CacheEventQueueFactory<String, Delayed>();
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.POOLED;
      // Undeclared exception!
      try { 
        cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<String, Delayed>) null, 28L, ";~s E(4.<WtOTuI^", 11, 11, ";~s E(4.<WtOTuI^", iCacheEventQueue_QueueType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // listener must not be null
         //
         verifyException("org.apache.commons.jcs3.engine.AbstractCacheEventQueue", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CacheEventQueueFactory<Integer, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<Integer, Object>();
      CacheAdaptor<Integer, Object> cacheAdaptor0 = new CacheAdaptor<Integer, Object>((ICache<Integer, Object>) null);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Integer, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Integer, Object>) cacheAdaptor0, 1271L, "", "3;_3X(an[4\"C6IxA(K", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      assertNotNull(iCacheEventQueue0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheEventQueueFactory<Integer, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<Integer, Object>();
      CacheAdaptor<Integer, Object> cacheAdaptor0 = new CacheAdaptor<Integer, Object>((ICache<Integer, Object>) null);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.SINGLE;
      ICacheEventQueue<Integer, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<Integer, Object>) cacheAdaptor0, 1271L, "", "3;_3X(an[4\"C6IxA(K", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      assertEquals(0, iCacheEventQueue0.getListenerId());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      ZombieCacheServiceNonLocal<Integer, CacheEventQueueFactory<String, Object>> zombieCacheServiceNonLocal0 = new ZombieCacheServiceNonLocal<Integer, CacheEventQueueFactory<String, Object>>();
      RemoteCacheMonitor remoteCacheMonitor0 = new RemoteCacheMonitor();
      RemoteCache<Integer, CacheEventQueueFactory<String, Object>> remoteCache0 = new RemoteCache<Integer, CacheEventQueueFactory<String, Object>>(remoteCacheAttributes0, zombieCacheServiceNonLocal0, (IRemoteCacheListener<Integer, CacheEventQueueFactory<String, Object>>) null, remoteCacheMonitor0);
      RemoteCacheNoWait<Integer, CacheEventQueueFactory<String, Object>> remoteCacheNoWait0 = new RemoteCacheNoWait<Integer, CacheEventQueueFactory<String, Object>>(remoteCache0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheEventQueueFactory<CacheEventQueueFactory<Integer, String>, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<CacheEventQueueFactory<Integer, String>, Object>();
      ArrayList<RemoteCacheNoWait<CacheEventQueueFactory<Integer, String>, Object>> arrayList0 = new ArrayList<RemoteCacheNoWait<CacheEventQueueFactory<Integer, String>, Object>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<CacheEventQueueFactory<Integer, String>, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheEventQueueFactory<Integer, String>, Object>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      CacheAdaptor<CacheEventQueueFactory<Integer, String>, Object> cacheAdaptor0 = new CacheAdaptor<CacheEventQueueFactory<Integer, String>, Object>(remoteCacheNoWaitFacade0);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.POOLED;
      ICacheEventQueue<CacheEventQueueFactory<Integer, String>, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<CacheEventQueueFactory<Integer, String>, Object>) cacheAdaptor0, 0L, "DiskCache available, but JCS is not configured to use the DiskCache as a swap.", "_,&TJf.w;G<", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheEventQueueFactory<CacheEventQueueFactory<Integer, String>, Object> cacheEventQueueFactory0 = new CacheEventQueueFactory<CacheEventQueueFactory<Integer, String>, Object>();
      ArrayList<RemoteCacheNoWait<CacheEventQueueFactory<Integer, String>, Object>> arrayList0 = new ArrayList<RemoteCacheNoWait<CacheEventQueueFactory<Integer, String>, Object>>();
      RemoteCacheAttributes remoteCacheAttributes0 = new RemoteCacheAttributes();
      CacheEventLoggerDebugLogger cacheEventLoggerDebugLogger0 = new CacheEventLoggerDebugLogger();
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      RemoteCacheFactory remoteCacheFactory0 = new RemoteCacheFactory();
      RemoteCacheNoWaitFacade<CacheEventQueueFactory<Integer, String>, Object> remoteCacheNoWaitFacade0 = new RemoteCacheNoWaitFacade<CacheEventQueueFactory<Integer, String>, Object>(arrayList0, remoteCacheAttributes0, cacheEventLoggerDebugLogger0, compressingSerializer0, remoteCacheFactory0);
      CacheAdaptor<CacheEventQueueFactory<Integer, String>, Object> cacheAdaptor0 = new CacheAdaptor<CacheEventQueueFactory<Integer, String>, Object>(remoteCacheNoWaitFacade0);
      ICacheEventQueue.QueueType iCacheEventQueue_QueueType0 = ICacheEventQueue.QueueType.POOLED;
      ICacheEventQueue<CacheEventQueueFactory<Integer, String>, Object> iCacheEventQueue0 = cacheEventQueueFactory0.createCacheEventQueue((ICacheListener<CacheEventQueueFactory<Integer, String>, Object>) cacheAdaptor0, 0L, "DiskCache available, but JCS is not configured to use the DiskCache as a swap.", "_,&TJf.w;G<", (ICacheEventQueue.QueueType) iCacheEventQueue_QueueType0);
      assertNotNull(iCacheEventQueue0);
}
}
