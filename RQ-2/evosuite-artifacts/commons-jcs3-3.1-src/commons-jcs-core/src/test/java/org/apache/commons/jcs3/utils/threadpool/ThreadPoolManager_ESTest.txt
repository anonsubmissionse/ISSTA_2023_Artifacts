 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      // Undeclared exception!
      try { 
        threadPoolManager0.createSchedulerPool((PoolConfiguration) null, "!pXw", (-3946));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.RUN;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, (-1), (-1), (-323), (-323), poolConfiguration_WhenBlockedPolicy0, 3);
      // Undeclared exception!
      try { 
        threadPoolManager0.createSchedulerPool(poolConfiguration0, "6s.Dr_i", 3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, (-911), 5, (-911), 5, poolConfiguration_WhenBlockedPolicy0, 5);
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool(poolConfiguration0, "", (-1));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // POLICY_WAIT no longer supported
         //
         verifyException("org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool((PoolConfiguration) null, "JCS-ThreadPoolManager-", 373);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.WAIT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 5, 676, (-374), 0, poolConfiguration_WhenBlockedPolicy0, 0);
      PoolConfiguration poolConfiguration1 = poolConfiguration0.clone();
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool(poolConfiguration1, "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // POLICY_WAIT no longer supported
         //
         verifyException("org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool((PoolConfiguration) null, "YIcB$q");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.ABORT;
      ThreadPoolManager.dispose();
      int int0 = (-158);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.DISCARDOLDEST;
      poolConfiguration0.setWhenBlockedPolicy(poolConfiguration_WhenBlockedPolicy0);
      poolConfiguration0.toString();
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool(poolConfiguration0, "!^", (-1602));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.ABORT;
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, 2000, 2000, 2000, 2, poolConfiguration_WhenBlockedPolicy0, 2000);
      poolConfiguration0.setStartUpSize(2000);
      threadPoolManager0.createPool(poolConfiguration0, "}2;ZbA{deBKPX%pY^", 2);
      int int0 = (-158);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration poolConfiguration0 = new PoolConfiguration();
      ExecutorService executorService0 = threadPoolManager0.createPool(poolConfiguration0, "^]}O?", 1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.BLOCK;
      threadPoolManager0.getPoolNames();
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(true, 960, 960, 960, 960, poolConfiguration_WhenBlockedPolicy0, 960);
      String string0 = "";
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool(poolConfiguration0, "", 960);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolManager threadPoolManager0 = ThreadPoolManager.getInstance();
      int int0 = 0;
      PoolConfiguration.WhenBlockedPolicy poolConfiguration_WhenBlockedPolicy0 = PoolConfiguration.WhenBlockedPolicy.BLOCK;
      int int1 = (-871);
      PoolConfiguration poolConfiguration0 = new PoolConfiguration(false, 0, 0, 0, 0, poolConfiguration_WhenBlockedPolicy0, (-871));
      poolConfiguration0.setMaximumPoolSize((-871));
      // Undeclared exception!
      try { 
        threadPoolManager0.createPool(poolConfiguration0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
