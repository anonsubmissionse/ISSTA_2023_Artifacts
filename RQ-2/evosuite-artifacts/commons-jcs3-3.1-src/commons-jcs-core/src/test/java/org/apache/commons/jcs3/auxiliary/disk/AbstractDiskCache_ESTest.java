/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 21:46:27 GMT 2022
 */

package org.apache.commons.jcs3.auxiliary.disk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.file.OpenOption;
import java.nio.file.StandardOpenOption;
import java.util.Map;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.jcs3.auxiliary.disk.AbstractDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.PurgatoryElement;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.indexed.IndexedDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.indexed.IndexedDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCacheAttributes;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.TableState;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.DataSourceFactory;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory;
import org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.SharedPoolDataSourceFactory;
import org.apache.commons.jcs3.engine.CacheElement;
import org.apache.commons.jcs3.engine.CacheElementSerialized;
import org.apache.commons.jcs3.engine.CacheStatus;
import org.apache.commons.jcs3.engine.ElementAttributes;
import org.apache.commons.jcs3.engine.behavior.ICache;
import org.apache.commons.jcs3.engine.behavior.ICacheElement;
import org.apache.commons.jcs3.engine.behavior.ICacheType;
import org.apache.commons.jcs3.engine.behavior.IElementAttributes;
import org.apache.commons.jcs3.utils.serialization.CompressingSerializer;
import org.apache.commons.jcs3.utils.serialization.StandardSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDiskCache_ESTest extends AbstractDiskCache_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState(";");
      tableState0.setState(300);
      tableState0.setTableName(";");
      jDBCDiskCacheAttributes0.setMaxPurgatorySize(0);
      JDBCDiskCache<BlockDiskCache<Object, Integer>, String> jDBCDiskCache0 = new JDBCDiskCache<BlockDiskCache<Object, Integer>, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.getKeySet();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Groups not implemented.
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      TableState tableState0 = new TableState("C9ETkCL`JP}<c");
      JDBCDiskCache<Object, String> jDBCDiskCache0 = new JDBCDiskCache<Object, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      ((AbstractDiskCache)jDBCDiskCache0).doRemoveAll();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      JDBCDiskCache<PurgatoryElement<Object, Object>, Integer> jDBCDiskCache0 = new JDBCDiskCache<PurgatoryElement<Object, Object>, Integer>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, (TableState) null);
      ((AbstractDiskCache)jDBCDiskCache0).doDispose();
      assertNotNull(jDBCDiskCache0.getStatus());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<CacheElement<Integer, String>, String> jDBCDiskCache0 = new JDBCDiskCache<CacheElement<Integer, String>, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, String> cacheElement0 = new CacheElement<Integer, String>("jcs", (Integer) 10, "Purgatory Size", elementAttributes0);
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElement0);
      CacheElement<CacheElement<Integer, String>, String> cacheElement1 = new CacheElement<CacheElement<Integer, String>, String>("jcs", purgatoryElement0, "");
      jDBCDiskCache0.update(cacheElement1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("");
      JDBCDiskCache<InputStream, String> jDBCDiskCache0 = new JDBCDiskCache<InputStream, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      boolean boolean0 = jDBCDiskCache0.isAlive();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<OpenOption, Integer> jDBCDiskCache0 = new JDBCDiskCache<OpenOption, Integer>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      jDBCDiskCache0.setAlive(false);
      boolean boolean0 = jDBCDiskCache0.isAlive();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState((String) null);
      JDBCDiskCache<Delayed, PurgatoryElement<String, String>> jDBCDiskCache0 = new JDBCDiskCache<Delayed, PurgatoryElement<String, String>>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      CacheStatus cacheStatus0 = jDBCDiskCache0.getStatus();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      JDBCDiskCache<Object, OpenOption> jDBCDiskCache0 = new JDBCDiskCache<Object, OpenOption>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      int int0 = jDBCDiskCache0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState(">*8ZyBzg");
      JDBCDiskCache<String, String> jDBCDiskCache0 = new JDBCDiskCache<String, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      String string0 = jDBCDiskCache0.getEventLoggingExtraInfo();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      jDBCDiskCacheAttributes0.setUrl("{ao^RX9-#yv!");
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState(">*8ZyBzg");
      JDBCDiskCache<String, String> jDBCDiskCache0 = new JDBCDiskCache<String, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      String string0 = jDBCDiskCache0.getEventLoggingExtraInfo();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState((String) null);
      JDBCDiskCache<String, JDBCDiskCache<OpenOption, Object>> jDBCDiskCache0 = new JDBCDiskCache<String, JDBCDiskCache<OpenOption, Object>>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      ICacheType.CacheType iCacheType_CacheType0 = jDBCDiskCache0.getCacheType();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      boolean boolean0 = ((AbstractDiskCache)jDBCDiskCache0).doRemove("Putting element in purgatory, cacheName: {0}, key: {1}");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("C9ETkCL`JP}<c");
      JDBCDiskCache<Object, String> jDBCDiskCache0 = new JDBCDiskCache<Object, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.dispose();
      Map<Object, ICacheElement<Object, String>> map0 = ((AbstractDiskCache)jDBCDiskCache0).doGetMatching("\" HgW= &7v_");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      TableState tableState0 = new TableState(";");
      JDBCDiskCache<String, Delayed> jDBCDiskCache0 = new JDBCDiskCache<String, Delayed>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      Map<String, ICacheElement<String, Delayed>> map0 = ((AbstractDiskCache)jDBCDiskCache0).doGetMatching("");
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      ICacheElement<String, DataInputStream> iCacheElement0 = ((AbstractDiskCache)jDBCDiskCache0).doGet("tH?y\b,");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("Putting element in purgatory, cacheName: {0}, key: {1}");
      sharedPoolDataSourceFactory0.close();
      JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption> jDBCDiskCache0 = new JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.removeAll();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.remove("jcs");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("DISPOSED");
      JDBCDiskCache<CacheElementSerialized<Object, Delayed>, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<CacheElementSerialized<Object, Delayed>, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.getSize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.getMatching("{3+vl7vi=/@XX");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 2
         // {3+vl7vi=/@XX
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<Object, OpenOption> jDBCDiskCache0 = new JDBCDiskCache<Object, OpenOption>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.getMatching("jcs");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("p#");
      JDBCDiskCache<Delayed, BlockDiskCache<Object, OpenOption>> jDBCDiskCache0 = new JDBCDiskCache<Delayed, BlockDiskCache<Object, OpenOption>>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.get((Delayed) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("KI)-c `q");
      JDBCDiskCache<Delayed, String> jDBCDiskCache0 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      byte[] byteArray0 = new byte[1];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Delayed, String> cacheElementSerialized0 = new CacheElementSerialized<Delayed, String>("", (Delayed) null, byteArray0, elementAttributes0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doUpdate(cacheElementSerialized0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      jDBCDiskCacheAttributes0.setEventQueuePoolName("a");
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<Integer, CacheElement<String, Object>> jDBCDiskCache0 = new JDBCDiskCache<Integer, CacheElement<String, Object>>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      Integer integer0 = new Integer(1);
      byte[] byteArray0 = new byte[4];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Integer, CacheElement<String, Object>> cacheElementSerialized0 = new CacheElementSerialized<Integer, CacheElement<String, Object>>("jcs", integer0, byteArray0, elementAttributes0);
      PurgatoryElement<Integer, CacheElement<String, Object>> purgatoryElement0 = new PurgatoryElement<Integer, CacheElement<String, Object>>(cacheElementSerialized0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doUpdate(purgatoryElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState((String) null);
      JDBCDiskCache<Delayed, PurgatoryElement<String, String>> jDBCDiskCache0 = new JDBCDiskCache<Delayed, PurgatoryElement<String, String>>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doRemoveAll();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDBCDiskCache<CacheElement<Integer, String>, String> jDBCDiskCache0 = new JDBCDiskCache<CacheElement<Integer, String>, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElement<Integer, String> cacheElement0 = new CacheElement<Integer, String>("jcs", (Integer) jDBCDiskCacheAttributes0.DEFAULT_SHRINKER_INTERVAL_SECONDS, "Purgatory Size", elementAttributes0);
      PurgatoryElement<Integer, String> purgatoryElement0 = new PurgatoryElement<Integer, String>(cacheElement0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doRemove(purgatoryElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<Object, InputStream> jDBCDiskCache0 = new JDBCDiskCache<Object, InputStream>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState((String) null);
      JDBCDiskCache<String, JDBCDiskCache<OpenOption, Object>> jDBCDiskCache0 = new JDBCDiskCache<String, JDBCDiskCache<OpenOption, Object>>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doGetMatching("TableState \n TableName = null\n State = 0");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      jDBCDiskCacheAttributes0.setUseDiskShrinker(true);
      JDBCDiskCache<String, String> jDBCDiskCache0 = new JDBCDiskCache<String, String>(jDBCDiskCacheAttributes0, (DataSourceFactory) null, (TableState) null);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doDispose();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      JDBCDiskCache<Delayed, String> jDBCDiskCache0 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, (DataSourceFactory) null, (TableState) null);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.dispose();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      blockDiskCacheAttributes0.setMaxPurgatorySize((-69));
      BlockDiskCache<CacheElement<DataInputStream, Object>, OpenOption> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<CacheElement<DataInputStream, Object>, OpenOption>(blockDiskCacheAttributes0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<CacheElement<Object, String>, Integer> jDBCDiskCache0 = new JDBCDiskCache<CacheElement<Object, String>, Integer>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.getCacheName();
      BlockDiskCacheAttributes blockDiskCacheAttributes0 = new BlockDiskCacheAttributes();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      BlockDiskCache<Integer, IndexedDiskCache<Object, String>> blockDiskCache0 = null;
      try {
        blockDiskCache0 = new BlockDiskCache<Integer, IndexedDiskCache<Object, String>>(blockDiskCacheAttributes0, standardSerializer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("->D_m<t8RN9_");
      tableState0.toString();
      JDBCDiskCache<String, Object> jDBCDiskCache0 = new JDBCDiskCache<String, Object>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.processDispose();
      jDBCDiskCache0.getStats();
      String string0 = "GroupID.class={0}";
      String string1 = "Element removed, key: ";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("] 7RRi=");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      JDBCDiskCache<Integer, Delayed> jDBCDiskCache0 = new JDBCDiskCache<Integer, Delayed>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      abstractDiskCache_MyCacheListener0.handleDispose("d4CxRX$hCL\"&");
      ElementAttributes elementAttributes0 = new ElementAttributes();
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener1 = jDBCDiskCache0.new MyCacheListener();
      abstractDiskCache_MyCacheListener1.handleRemoveAll("< M#)'SmS");
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("KI)-c `q");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JDBCDiskCache<Delayed, String> jDBCDiskCache0 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.dispose();
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      CacheElement<InputStream, Integer> cacheElement0 = new CacheElement<InputStream, Integer>("nv-s-oP>&=77+6aj'", (InputStream) null, (Integer) 10);
      cacheElement0.getElementAttributes();
      abstractDiskCache_MyCacheListener0.handleDispose("jcs");
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      IndexedDiskCache<JDBCDiskCache<String, String>, OpenOption> indexedDiskCache0 = null;
      try {
        indexedDiskCache0 = new IndexedDiskCache<JDBCDiskCache<String, String>, OpenOption>(indexedDiskCacheAttributes0, standardSerializer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.indexed.IndexedDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      String string0 = ICache.NAME_COMPONENT_DELIMITER;
      tableState0.setTableName("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      byte[] byteArray0 = new byte[1];
      jDBCDiskCache0.getMatching(":");
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Object, Object> cacheElementSerialized0 = new CacheElementSerialized<Object, Object>("jcs", jndiDataSourceFactory0, byteArray0, elementAttributes0);
      abstractDiskCache_MyCacheListener0.handleRemove(":", cacheElementSerialized0);
      abstractDiskCache_MyCacheListener0.getListenerId();
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      assertTrue(indexedDiskCacheAttributes0.isClearDiskOnStartup());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      tableState0.setState(300);
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory1 = new SharedPoolDataSourceFactory();
      JDBCDiskCache<InputStream, Object> jDBCDiskCache0 = new JDBCDiskCache<InputStream, Object>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory1, tableState0);
      assertFalse(jDBCDiskCache0.isAlive());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      tableState0.setState(300);
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory1 = new SharedPoolDataSourceFactory();
      JDBCDiskCache<InputStream, Object> jDBCDiskCache0 = new JDBCDiskCache<InputStream, Object>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory1, tableState0);
      jDBCDiskCache0.dispose();
      sharedPoolDataSourceFactory1.close();
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      abstractDiskCache_MyCacheListener0.handleRemoveAll("registerPool failed");
      abstractDiskCache_MyCacheListener0.handleRemove("registerPool failed", "");
      System.setCurrentTimeMillis(0);
      CompressingSerializer compressingSerializer0 = new CompressingSerializer();
      JDBCDiskCache<Integer, InputStream> jDBCDiskCache1 = new JDBCDiskCache<Integer, InputStream>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      assertNotNull(jDBCDiskCache1.getStatus());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      tableState0.setTableName("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      boolean boolean0 = jDBCDiskCache0.remove("jcs");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      tableState0.setTableName("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      boolean boolean0 = jDBCDiskCache0.remove("jcs");
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      byte[] byteArray0 = new byte[1];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Object, Object> cacheElementSerialized0 = new CacheElementSerialized<Object, Object>("iKy", abstractDiskCache_MyCacheListener0, byteArray0, elementAttributes0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CacheElement<CacheElementSerialized<Object, Object>, InputStream> cacheElement0 = new CacheElement<CacheElementSerialized<Object, Object>, InputStream>("", cacheElementSerialized0, pipedInputStream0);
      PurgatoryElement<CacheElementSerialized<Object, Object>, InputStream> purgatoryElement0 = new PurgatoryElement<CacheElementSerialized<Object, Object>, InputStream>(cacheElement0);
      abstractDiskCache_MyCacheListener0.handlePut(purgatoryElement0);
      assertFalse(jDBCDiskCache0.isAlive());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      tableState0.setTableName("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      boolean boolean0 = jDBCDiskCache0.remove("jcs");
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      byte[] byteArray0 = new byte[1];
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<Object, Object> cacheElementSerialized0 = new CacheElementSerialized<Object, Object>("iKy", abstractDiskCache_MyCacheListener0, byteArray0, elementAttributes0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CacheElement<CacheElementSerialized<Object, Object>, InputStream> cacheElement0 = new CacheElement<CacheElementSerialized<Object, Object>, InputStream>("", cacheElementSerialized0, pipedInputStream0);
      PurgatoryElement<CacheElementSerialized<Object, Object>, InputStream> purgatoryElement0 = new PurgatoryElement<CacheElementSerialized<Object, Object>, InputStream>(cacheElement0);
      abstractDiskCache_MyCacheListener0.handlePut(purgatoryElement0);
      assertNotNull(jDBCDiskCache0.getStatus());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("KI)-c `q");
      JDBCDiskCache<Delayed, String> jDBCDiskCache0 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.dispose();
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<String, Object> cacheElementSerialized0 = new CacheElementSerialized<String, Object>((String) null, (String) null, byteArray0, elementAttributes0);
      CacheElement<InputStream, Integer> cacheElement0 = new CacheElement<InputStream, Integer>("nv-s-oP>&=77+6aj'", (InputStream) null, (Integer) 10);
      PurgatoryElement<InputStream, Integer> purgatoryElement0 = new PurgatoryElement<InputStream, Integer>(cacheElement0);
      IElementAttributes iElementAttributes0 = purgatoryElement0.getElementAttributes();
      CacheElement<CacheElementSerialized<String, Object>, OpenOption> cacheElement1 = new CacheElement<CacheElementSerialized<String, Object>, OpenOption>("", cacheElementSerialized0, (OpenOption) null, iElementAttributes0);
      abstractDiskCache_MyCacheListener0.handlePut(cacheElement1);
      IndexedDiskCacheAttributes indexedDiskCacheAttributes0 = new IndexedDiskCacheAttributes();
      StandardSerializer standardSerializer0 = new StandardSerializer();
      IndexedDiskCache<JDBCDiskCache<String, String>, OpenOption> indexedDiskCache0 = null;
      try {
        indexedDiskCache0 = new IndexedDiskCache<JDBCDiskCache<String, String>, OpenOption>(indexedDiskCacheAttributes0, standardSerializer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.indexed.IndexedDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption> jDBCDiskCache0 = new JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.removeAll();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      SharedPoolDataSourceFactory sharedPoolDataSourceFactory0 = new SharedPoolDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      sharedPoolDataSourceFactory0.close();
      jDBCDiskCacheAttributes0.setAllowRemoveAll(false);
      JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption> jDBCDiskCache0 = new JDBCDiskCache<IndexedDiskCache<OpenOption, String>, OpenOption>(jDBCDiskCacheAttributes0, sharedPoolDataSourceFactory0, tableState0);
      jDBCDiskCache0.getStatistics();
      jDBCDiskCache0.removeAll();
      jDBCDiskCache0.setTableState(tableState0);
      assertNotNull(jDBCDiskCache0.getStatus());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      tableState0.setTableName("jcs");
      jDBCDiskCacheAttributes0.setUseDiskShrinker(true);
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.remove("jcs");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("C9ETkCL`JP}<c");
      jDBCDiskCacheAttributes0.setUrl("");
      JDBCDiskCache<Object, String> jDBCDiskCache0 = new JDBCDiskCache<Object, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.dispose();
      jDBCDiskCache0.getEventLoggingExtraInfo();
      Object object0 = new Object();
      ICacheElement<Object, String> iCacheElement0 = jDBCDiskCache0.get(object0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("C9ETkCL`JP}<c");
      jDBCDiskCacheAttributes0.setUrl("");
      JDBCDiskCache<Object, String> jDBCDiskCache0 = new JDBCDiskCache<Object, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      jDBCDiskCache0.setTableState(tableState0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jDBCDiskCache0.get(object0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDBCDiskCache<CacheElement<Integer, String>, String> jDBCDiskCache0 = new JDBCDiskCache<CacheElement<Integer, String>, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.update((ICacheElement<CacheElement<Integer, String>, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.AbstractDiskCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("jcs");
      JDBCDiskCache<String, DataInputStream> jDBCDiskCache0 = new JDBCDiskCache<String, DataInputStream>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        jDBCDiskCache0.getMatching(":");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("*aOGi$\"x bFt7fn{zuC");
      jndiDataSourceFactory0.initialize(jDBCDiskCacheAttributes0);
      JDBCDiskCache<Integer, Delayed> jDBCDiskCache0 = new JDBCDiskCache<Integer, Delayed>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      byteArray0[0] = (byte)2;
      JDBCDiskCache<Delayed, String> jDBCDiskCache1 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache1.new MyCacheListener();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      abstractDiskCache_MyCacheListener0.handleRemoveAll("*aOGi$\"x bFt7fn{zuC");
      ElementAttributes elementAttributes0 = new ElementAttributes();
      CacheElementSerialized<String, Object> cacheElementSerialized0 = new CacheElementSerialized<String, Object>("", "r~6R", byteArray0, elementAttributes0);
      PurgatoryElement<String, Object> purgatoryElement0 = new PurgatoryElement<String, Object>(cacheElementSerialized0);
      CacheElement<OpenOption, PurgatoryElement<String, Object>> cacheElement0 = new CacheElement<OpenOption, PurgatoryElement<String, Object>>("*aOGi$\"x bFt7fn{zuC", standardOpenOption0, purgatoryElement0);
      abstractDiskCache_MyCacheListener0.handlePut(cacheElement0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener1 = jDBCDiskCache0.new MyCacheListener();
      abstractDiskCache_MyCacheListener1.handleRemoveAll("< M#)'SmS");
      JDBCDiskCache<CacheElementSerialized<String, InputStream>, Object> jDBCDiskCache2 = new JDBCDiskCache<CacheElementSerialized<String, InputStream>, Object>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      assertFalse(jDBCDiskCache2.isAlive());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("*aOGi$\"x bFt7fn{zuC");
      JDBCDiskCache<Integer, Delayed> jDBCDiskCache0 = new JDBCDiskCache<Integer, Delayed>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      AbstractDiskCache.MyCacheListener abstractDiskCache_MyCacheListener0 = jDBCDiskCache0.new MyCacheListener();
      abstractDiskCache_MyCacheListener0.setListenerId(60000L);
      // Undeclared exception!
      try { 
        abstractDiskCache_MyCacheListener0.handleRemove("5U$J$wVhCkr<Z", (DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JndiDataSourceFactory jndiDataSourceFactory0 = new JndiDataSourceFactory();
      TableState tableState0 = new TableState("WLTw'qqV}VYK,N+.,mN");
      JDBCDiskCache<Object, Integer> jDBCDiskCache0 = new JDBCDiskCache<Object, Integer>(jDBCDiskCacheAttributes0, jndiDataSourceFactory0, tableState0);
      // Undeclared exception!
      try { 
        ((AbstractDiskCache)jDBCDiskCache0).doGet("WLTw'qqV}VYK,N+.,mN");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.dsfactory.JndiDataSourceFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDBCDiskCacheAttributes jDBCDiskCacheAttributes0 = new JDBCDiskCacheAttributes();
      JDBCDiskCache<Delayed, String> jDBCDiskCache0 = new JDBCDiskCache<Delayed, String>(jDBCDiskCacheAttributes0, (DataSourceFactory) null, (TableState) null);
      // Undeclared exception!
      try { 
        jDBCDiskCache0.dispose();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jcs3.auxiliary.disk.jdbc.JDBCDiskCache", e);
      }
  }
}
