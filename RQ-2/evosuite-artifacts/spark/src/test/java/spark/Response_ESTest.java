/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:19:10 GMT 2022
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.chrono.JapaneseEra;
import java.time.temporal.TemporalAdjuster;
import java.util.Collection;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.Response;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      Response response0 = new Response(httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.status();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 38;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(38).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status();
      String string0 = "STARTED";
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.isWrapperFor((ServletResponse) httpServletResponseWrapper1);
      response0.redirect("STARTED");
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.header("STARTED", "STARTED");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      int int0 = 1098;
      MockDate mockDate0 = new MockDate(1098, 1098, 1098, 1098, 1098, 1098);
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      mockDate0.after(mockDate0);
      // Undeclared exception!
      try { 
        response0.header("", (Date) mockDate0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("cmNp{/e9!5i;z[[").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      int int0 = 1098;
      MockDate mockDate0 = new MockDate(1098, 1098, 1098, 1098, 1098, 1098);
      mockDate0.after(mockDate0);
      response0.header("cmNp{/e9!5i;z[[", (Date) mockDate0);
      response0.body();
      httpServletResponseWrapper0.sendError(1098);
      ServletResponse servletResponse0 = httpServletResponseWrapper0.getResponse();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.status(1098);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      String string0 = "close";
      int int0 = 40;
      response0.header("close", 40);
      response0.type("close");
      response0.removeCookie("close");
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      ServletResponse servletResponse0 = httpServletResponseWrapper1.getResponse();
      httpServletResponseWrapper0.setResponse(servletResponse0);
      java.sql.Date date0 = new java.sql.Date(40);
      // Undeclared exception!
      try { 
        response0.header("close", date0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 38;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(38).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status();
      String string0 = "STARTED";
      response0.redirect("STARTED");
      response0.header("STARTED", "STARTED");
      response0.redirect("STARTED");
      httpServletResponseWrapper0.addDateHeader("[}-J<=CGOkv4y3||h/", 0L);
      response0.cookie("STARTED", "STARTED");
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.cookie("STARTED", "STARTED", 38);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 43;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status();
      String string0 = "STARTED";
      response0.redirect("STARTED");
      response0.header("STARTED", "STARTED");
      response0.redirect("STARTED");
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.cookie("STARTED", "STARTED");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "Redirecting ({} to {}";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Redirecting ({} to {}");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      String string1 = "close";
      int int0 = 27;
      response0.header("close", 27);
      response0.type("close");
      response0.removeCookie("close");
      java.sql.Date date0 = new java.sql.Date(27);
      date0.getTime();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper1);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.header("close", date0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      System.setCurrentTimeMillis((-1231L));
      System.setCurrentTimeMillis(2036L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2036L);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      Response response0 = new Response(httpServletResponseWrapper0);
      String string0 = "WATCH";
      // Undeclared exception!
      try { 
        response0.redirect("WATCH");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1636L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper1.getCharacterEncoding();
      ServletResponse servletResponse0 = httpServletResponseWrapper1.getResponse();
      httpServletResponseWrapper0.setResponse(servletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      int int0 = 302;
      // Undeclared exception!
      try { 
        response0.status(302);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("k$RVF4").when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      Response response0 = new Response(httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.type("l3p:8rVKLf;fFqT?{");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.type();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-3005L));
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      String string0 = "3~";
      httpServletResponseWrapper0.sendRedirect("3~");
      int int0 = 0;
      httpServletResponseWrapper0.setStatus(0, "UNKNOWN");
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.redirect("3~");
      String string1 = "Redirecting ({} {} to {}";
      httpServletResponseWrapper0.getCharacterEncoding();
      response0.status();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.status();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).isCommitted();
      doReturn((Collection<String>) null).when(httpServletResponse0).getHeaderNames();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getHeaderNames();
      Response response0 = new Response(httpServletResponseWrapper0);
      int int0 = 27;
      response0.header("close", 27);
      response0.type("close");
      response0.removeCookie("close");
      java.sql.Date date0 = new java.sql.Date(27);
      response0.header("close", date0);
      httpServletResponseWrapper0.isCommitted();
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      Instant instant2 = MockInstant.minusMillis(instant1, (-1L));
      MockInstant.plusNanos(instant2, 27);
      response0.cookie("", "close", "", 27, false);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      response0.body("");
      // Undeclared exception!
      try { 
        response0.header("ending {} {}", instant0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getCharacterEncoding();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.raw();
      // Undeclared exception!
      try { 
        response0.redirect("xOe='g6Rcv,uU>+&", 2518);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      String string0 = "9&jaG0u";
      String string1 = null;
      int int0 = 1098;
      MockDate mockDate0 = new MockDate(1098);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      mockDate0.after(mockDate0);
      MockDate.UTC(880, (-2115), 880, 3292, 3292, 0);
      // Undeclared exception!
      try { 
        response0.header("pdUifuNW@Eri", (Date) mockDate0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).isCommitted();
      doReturn((String) null).when(httpServletResponse0).encodeURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getResponse();
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      LocalDate localDate0 = MockLocalDate.now();
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      response0.header("", date0);
      httpServletResponseWrapper1.isCommitted();
      httpServletResponseWrapper1.sendRedirect("h9g]sHlzX!1W2");
      httpServletResponseWrapper1.encodeURL("h9g]sHlzX!1W2");
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.redirect("");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.body("XjG1+%Y8S@;bnG");
      int int0 = 3;
      // Undeclared exception!
      try { 
        response0.redirect("BoWQSbT@ai)GOS,1!", 3);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setContentLengthLong(0L);
      String string0 = "";
      httpServletResponseWrapper0.reset();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.header("", "");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).containsHeader(anyString());
      doReturn((String) null).when(httpServletResponse0).encodeURL(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getOutputStream();
      String string0 = "d]38";
      httpServletResponseWrapper1.containsHeader("d]38");
      int int0 = 45;
      httpServletResponseWrapper1.setStatus(45, "d]38");
      httpServletResponseWrapper1.encodeURL((String) null);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      Response response0 = new Response(httpServletResponseWrapper0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        response0.header("1V_`a'}]9+O|D;", 0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("zF_rXhpv+J9Lm", "", (-710), true, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("WAiq$WDuafLr5P", "WAiq$WDuafLr5P");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getCharacterEncoding();
      doReturn("Connection", (String) null).when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      httpServletResponseWrapper0.flushBuffer();
      response0.body("");
      MockDate mockDate0 = new MockDate(1098);
      mockDate0.getTime();
      mockDate0.after(mockDate0);
      response0.header("", (Date) mockDate0);
      response0.body();
      response0.status(1098);
      httpServletResponseWrapper0.getCharacterEncoding();
      response0.type();
      httpServletResponseWrapper0.getResponse();
      response0.redirect("");
      response0.body();
      // Undeclared exception!
      try { 
        response0.cookie("9&jaG0u", (String) null, "", 1098, true, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      int int0 = (-635);
      String string0 = null;
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.removeCookie("T");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn((String) null).when(httpServletResponse0).encodeUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getOutputStream();
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.encodeUrl("");
      response0.removeCookie("org.eclipse.jetty.http.PathMap$PathSet");
      response0.body();
      String string0 = "/[RvVp%:%N0vQc#n";
      int int0 = (-3225);
      // Undeclared exception!
      try { 
        response0.cookie((String) null, "org.eclipse.jetty.http.PathMap$PathSet", "org.eclipse.jetty.http.PathMap$PathSet", (String) null, (-3225), true, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setContentLengthLong((-1140L));
      response0.status();
      response0.cookie("STARTED", "STARTED", 0);
      String string0 = "";
      response0.cookie("STARTED", "STARTED", "", 3, false);
      response0.redirect("");
      // Undeclared exception!
      try { 
        response0.cookie("", "", 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("a$?!YVS,h", (String) null).when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      response0.status((-635));
      response0.body("la7Ex");
      httpServletResponseWrapper0.setDateHeader((String) null, 1883L);
      response0.cookie("la7Ex", "la7Ex", "la7Ex", 0, false, false);
      response0.status(0);
      response0.type();
      response0.body();
      // Undeclared exception!
      try { 
        response0.cookie("Include Predicate", "T", 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Include Predicate\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((-1969)).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.setContentLengthLong((-1140L));
      response0.status();
      response0.cookie("STARTED", "STARTED", 0);
      String string0 = "";
      // Undeclared exception!
      try { 
        response0.cookie("", "", 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status((-635));
      response0.body("la7Ex");
      httpServletResponseWrapper0.setDateHeader((String) null, 1883L);
      response0.cookie("la7Ex", "la7Ex", "la7Ex", 0, false, false);
      response0.status(0);
      response0.type();
      // Undeclared exception!
      try { 
        response0.cookie("Include Predicate", "T", 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Include Predicate\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(">D").when(httpServletResponse0).getContentType();
      doReturn(3).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      response0.status();
      httpServletResponseWrapper0.reset();
      // Undeclared exception!
      try { 
        JapaneseEra.of(1057);
        fail("Expecting exception: DateTimeException");
      } catch(DateTimeException e) {
         //
         // Invalid era: 1057
         //
         verifyException("java.time.chrono.JapaneseEra", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "&MT#p";
      int int0 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        response0.cookie("&MT#p", "&MT#p", "&MT#p", 0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.cookie("", "Hm", "Hm", "", 2, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status((-635));
      response0.body("la7Ex");
      httpServletResponseWrapper0.setDateHeader((String) null, 1883L);
      response0.cookie("la7Ex", "la7Ex", "la7Ex", 0, false, false);
      response0.status(0);
      response0.type();
      // Undeclared exception!
      try { 
        response0.cookie("Include Predicate", "T", 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Include Predicate\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).isCommitted();
      doReturn((String) null).when(httpServletResponse0).encodeUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.sendRedirect("");
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper0.isCommitted();
      httpServletResponseWrapper0.setContentType("spark.Response");
      httpServletResponseWrapper0.isWrapperFor((ServletResponse) httpServletResponseWrapper1);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.encodeUrl("");
      response0.status((-80));
      response0.raw();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-80));
      response0.header("", instant0);
      // Undeclared exception!
      try { 
        MockLocalDate.of((-80), (-80), (-80));
        fail("Expecting exception: DateTimeException");
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -80
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      String string0 = "Connection";
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      httpServletResponseWrapper1.reset();
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper1);
      // Undeclared exception!
      try { 
        response0.removeCookie("Connection", "Connection");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Response response0 = new Response((HttpServletResponse) null);
      String string0 = "B";
      // Undeclared exception!
      try { 
        response0.cookie("B", "B", (-681));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "9!V^kf4aC";
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        response0.cookie("9!V^kf4aC", "Include Predicate", 1708, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "Found";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        response0.cookie("Found", "Found", "Found", 6706, true, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(httpServletResponse0).getHeaderNames();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getHeaderNames();
      Response response0 = new Response(httpServletResponseWrapper0);
      String string0 = "close";
      response0.header("close", 27);
      response0.type("close");
      // Undeclared exception!
      try { 
        response0.removeCookie((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.body();
      response0.redirect("*R,CSX*}");
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(httpServletResponse0).getHeaders(anyString());
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.body("");
      response0.body("");
      response0.raw();
      response0.header("", (String) null);
      response0.status();
      httpServletResponseWrapper0.getHeaders("Starting java.nio file watching with {}");
      // Undeclared exception!
      try { 
        response0.cookie("", "", 0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Response response0 = new Response();
      String string0 = null;
      // Undeclared exception!
      try { 
        response0.cookie((String) null, "vV~S ", ";| xX3", 0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"vV~S \" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        response0.header((String) null, "*.");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getCharacterEncoding();
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.resetBuffer();
      httpServletResponseWrapper0.getCharacterEncoding();
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getContentType();
      response0.removeCookie("9a0l");
      httpServletResponseWrapper0.getResponse();
      httpServletResponseWrapper0.getStatus();
      response0.status(0);
      response0.body("org.eclipse.jetty.util.InetAddressSet");
      response0.cookie("org.eclipse.jetty.util.InetAddressSet", "8[:pu$0_>4]i", 0, true, true);
      // Undeclared exception!
      try { 
        response0.cookie("", "9a0l", "", "", (-1185), true, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(httpServletResponse0).getHeaderNames();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getHeaderNames();
      response0.header("ySY5LU", "ySY5LU");
      response0.redirect("", 0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Response response0 = new Response();
      int int0 = 0;
      // Undeclared exception!
      try { 
        response0.redirect("O{2D;$A[6VnxzI[2G -", 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Response response0 = new Response();
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      Instant instant2 = MockInstant.plusSeconds(instant1, 536L);
      Instant instant3 = MockInstant.minusNanos(instant2, 536L);
      // Undeclared exception!
      try { 
        response0.header("QCl23ae&[", instant3);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Response response0 = new Response();
      Instant instant0 = MockInstant.ofEpochSecond((-1704L), (-1704L));
      // Undeclared exception!
      try { 
        response0.header("W_", instant0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("h,nP5QQ9qKbD6bF1*WE", "9tB7M**!TT", 2249);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"h,nP5QQ9qKbD6bF1*WE\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((Locale) null).when(httpServletResponse0).getLocale();
      doReturn((Collection) null).when(httpServletResponse0).getHeaderNames();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      httpServletResponseWrapper0.getLocale();
      httpServletResponseWrapper0.getHeaderNames();
      response0.status(2679);
      response0.status(11);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        response0.cookie((String) null, (String) null, 11, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "";
      // Undeclared exception!
      try { 
        response0.type("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("r/a;", "r/a;", ":;dl0jq(V6", 1050, false, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"r/a;\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "";
      String string1 = "\\\\";
      int int0 = 2049;
      // Undeclared exception!
      try { 
        response0.type("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.cookie("org.eclipse.jetty.webapp.ClasspathPattern$ModuleEntry", (String) null, 1073741823, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "qKOB)1omO:h";
      // Undeclared exception!
      try { 
        response0.redirect("qKOB)1omO:h");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.setCharacterEncoding("");
      Response response0 = new Response(httpServletResponseWrapper0);
      String string0 = ";9~3*I";
      response0.header("", (-2707));
      response0.redirect("tBfr~{E|P", (-2707));
      response0.redirect(";9~3*I", (-949));
      // Undeclared exception!
      try { 
        response0.removeCookie("", "n$jA3&`5lG6l_;i+EN");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"n$jA3&`5lG6l_;i+EN\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      response0.redirect("Redirect failure", 0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.redirect("", 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("vuvyRD/<HQj12v&XO", "processPending> {}", (String) null, 6, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"processPending> {}\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Response response0 = new Response();
      HttpServletResponse httpServletResponse0 = response0.raw();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Response response0 = new Response((HttpServletResponse) null);
      // Undeclared exception!
      try { 
        response0.type();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.status(4592);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletResponse0).containsHeader(anyString());
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      String string0 = "Jq7P";
      httpServletResponseWrapper0.containsHeader("Jq7P");
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.encodeRedirectURL("Jq7P");
      response0.status();
      int int0 = (-1025);
      response0.header((String) null, (-1025));
      String string1 = "Redirect failure";
      // Undeclared exception!
      try { 
        response0.cookie("Redirect failure", "Redirect failure");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Redirect failure\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "";
      // Undeclared exception!
      try { 
        response0.removeCookie("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "Redirect failure";
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        response0.status();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("@(u'<%O&[z]v/irnl", "", (-1281), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"@(u'<%O&[z]v/irnl\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "m=";
      // Undeclared exception!
      try { 
        response0.header("m=", "m=");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.status((-5923));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        response0.cookie((String) null, (String) null, "", (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).encodeUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.encodeUrl("jrt");
      response0.redirect((String) null);
      response0.removeCookie(".frbiN8V2l%+h", "Location");
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "#D90)@osT";
      String string1 = "Qg*&JGBcB9XZ";
      int int0 = 3;
      // Undeclared exception!
      try { 
        response0.removeCookie("Qg*&JGBcB9XZ", "spark.Response");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.removeCookie("z7(va=h/Tc2dbq3S");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"z7(va=h/Tc2dbq3S\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getOutputStream();
      response0.redirect((String) null);
      response0.status();
      response0.header((String) null, 93);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      httpServletResponseWrapper0.getStatus();
      java.sql.Date date0 = new java.sql.Date(123L);
      date0.clone();
      date0.toString();
      response0.header("e#c;QShv2Ne+dGlB%G", date0);
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      response0.cookie("1970-01-01", "org.eclipse.jetty.util.PathWatcher");
      response0.header("org.eclipse.jetty.util.PathWatcher", (Date) date0);
      response0.header(")", (Date) date1);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "";
      java.sql.Date date0 = new java.sql.Date((-903L));
      // Undeclared exception!
      try { 
        response0.header("", date0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("]\":_+", "]\":_+", "[!0]HXkFc%", 686, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"]\":_+\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Response response0 = new Response();
      int int0 = (-4326);
      MockDate mockDate0 = new MockDate(2750, 2750, 2750, 2750, (-4326), 2750);
      // Undeclared exception!
      try { 
        response0.header("Null path", (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Response response0 = new Response((HttpServletResponse) null);
      String string0 = "";
      int int0 = (-404);
      // Undeclared exception!
      try { 
        response0.cookie("", "", (-404));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).encodeRedirectURL(anyString());
      doReturn((String) null).when(httpServletResponse0).encodeRedirectUrl(anyString());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.encodeRedirectUrl("Y&`r*@8CZ7V'|");
      httpServletResponseWrapper0.sendRedirect((String) null);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.header("VaI7i&ytR", 0);
      response0.cookie("VaI7i&ytR", "VaI7i&ytR", 3, true);
      httpServletResponseWrapper0.encodeRedirectURL("VaI7i&ytR");
      int int0 = 2936;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        response0.cookie("", "", 2936, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be null or empty
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.header("N.Nf:u&$Ru5Obl7.u", (Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.cookie("Connection", "Connection", (-1183));
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.getContentType();
      httpServletResponseWrapper0.sendError(2346);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.header("", 3);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.header("", (-329));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Response response0 = new Response();
      String string0 = "Exception when trying to redirect permanently";
      response0.body("Exception when trying to redirect permanently");
      // Undeclared exception!
      try { 
        response0.cookie("Exception when trying to redirect permanently", "Exception when trying to redirect permanently", "Exception when trying to redirect permanently", "Exception when trying to redirect permanently", (-4535), false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Exception when trying to redirect permanently\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.cookie("Include Predicate", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"Include Predicate\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Response response0 = new Response();
      response0.body("; 4`yAw;9a'gs mH>");
      // Undeclared exception!
      try { 
        response0.redirect("; 4`yAw;9a'gs mH>");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        response0.status();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.header("close", 56);
      response0.type("close");
      response0.removeCookie("close");
      java.sql.Date date0 = new java.sql.Date(56);
      response0.header("close", date0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instant instant0 = MockInstant.now();
      response0.cookie("close", "close", "close", 56, true);
      response0.body("close");
      response0.header("close", instant0);
      response0.redirect("close", 56);
      assertNotNull(response0.body());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(38).when(httpServletResponse0).getStatus();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.status();
      response0.redirect("STARTED");
      response0.header("STARTED", "STARTED");
      response0.redirect("STARTED");
      response0.cookie("STARTED", "STARTED");
      response0.cookie("STARTED", "STARTED", 38);
      response0.redirect("STARTED", 38);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("/XF1|a$-C$0^_>").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Response response0 = new Response(httpServletResponseWrapper0);
      response0.type();
      MockDate mockDate0 = new MockDate(1098, 1098, 1098, 1098, 1098, 1098);
      mockDate0.after(mockDate0);
      response0.header("/XF1|a$-C$0^_>", (Date) mockDate0);
      response0.body();
      response0.status(1098);
      // Undeclared exception!
      try { 
        response0.cookie("/XF1|a$-C$0^_>", "/XF1|a$-C$0^_>", "/XF1|a$-C$0^_>", 1098, false, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cookie name \"/XF1|a$-C$0^_>\" is a reserved token
         //
         verifyException("javax.servlet.http.Cookie", e);
      }
  }
}
