 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      assertEquals(service0, responseTransformerRouteImpl0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute("", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute("", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "s";
      Route route0 = null;
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("s", "s", (Route) null, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "s";
      Route route0 = null;
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("s", "s", (Route) null, responseTransformer0);
      service0.addRoute("s", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.init();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("connect", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.init();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("connect", routeGroup0);
      service0.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "ZOx4p:Uj5yF!\\JEaB]A";
      Service service1 = service0.ipAddress("ZOx4p:Uj5yF!JEaB]A");
      Service service2 = service1.webSocketIdleTimeoutMillis(3419);
      String string1 = "";
      service2.stop();
      String string2 = "";
      Service service3 = service2.secure(string0, string1, string2, string0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Service service0 = Service.ignite();
      BadMessageException badMessageException0 = new BadMessageException();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("server interrupted").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service1.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      boolean boolean0 = service0.unmap("/GYNN6");
      service1.addFilter("/GYNN6", filterImpl2);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      service0.staticFiles.header("/*", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      service0.staticFiles.header("/*", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      service0.staticFiles.header("/*", (String) null);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service0.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("/*");
      service0.staticFiles.header("/*", (String) null);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service0.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      Service service2 = service1.port(2119);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      service1.addRoute((String) null, (RouteImpl) templateViewRouteImpl0);
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("/GYNN6");
      Service service2 = service1.secure("", "server interrupted", "", "server interrupted");
      Service service3 = service2.port(4567);
      HttpMethod httpMethod0 = HttpMethod.options;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("/GYNN6").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service2.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("server interrupted").when(filterImpl2).getPath();
      List<RouteMatch> list0 = service1.routes();
      service3.addFilter("/GYNN6", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Service service0 = Service.ignite();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@?#>!|B%<");
      Service service1 = service0.port(1);
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      String string0 = "";
      int int0 = Service.SPARK_DEFAULT_PORT;
      String string1 = "spark.Service";
      Service service2 = service0.secure("", "", "", "", "spark.Service");
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      ;
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 60;
      service0.threadIdleTimeoutMillis = 60;
      Service service1 = service0.webSocketIdleTimeoutMillis((-2012));
      String string0 = "Must provide a keystore file to run secured";
      Service service2 = service1.staticFileLocation(string0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Delayed delayed0 = delayQueue0.poll();
      service2.embeddedServerIdentifier((Object) delayed0);
      service2.maxThreads = service0.SPARK_DEFAULT_PORT;
      String string1 = null;
      Service service3 = service1.externalStaticFileLocation(string0);
      Consumer<Exception> consumer0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "http://xmlns.jcp.org/xml/ns/javaee/web-common_3_1.xsd";
      service3.internalServerError(string2);
      service3.initExceptionHandler(consumer0);
      service3.internalServerError(string1);
      service0.embeddedServerIdentifier();
      Service service4 = service3.staticFileLocation(string1);
      String string3 = "^E";
      service4.notFound(string3);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      String string4 = "";
      service_StaticFiles0.externalLocation(string4);
      String string5 = "b@1nhsFUC";
      service_StaticFiles0.expireTime(int0);
      service_StaticFiles0.registerMimeType(string5, string3);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      ;
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      ;
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      ;
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      assertEquals(service0, service1);
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      Service service0 = Service.ignite();
      String string0 = null;
      String string1 = "Static file location has already been set";
      Service service1 = service0.secure("video/mpeg", (String) null, "~XH><Jl!>])1?", "Static file location has already been set", "Static file location has already been set");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("video/mpeg", routeGroup0);
      Service service2 = service1.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIhK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIhK5^ZQYfL");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create((String) null, " 3!bXoIhK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service1.addRoute((String) null, routeImpl0);
      HttpMethod httpMethod0 = HttpMethod.options;
      Service service2 = Service.ignite();
      int int0 = service0.port();
      ;
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      ;
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      ;
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      ;
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      ;
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      ;
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      ;
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      ;
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      ;
}
 @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("nYA\"h", "", "nYA\"h", "Must provide a keystore file to run secured", "");
      service1.webSocketIdleTimeoutMillis = null;
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "", "Must provide a keystore file to run secured", true);
      Service service3 = service2.ipAddress("");
      Service service4 = service3.secure("", "", "Zw", "Zw", "", true);
      Service service5 = service4.externalStaticFileLocation("nYA\"h");
      service5.init();
      int int0 = service5.activeThreadCount();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Specified security context expired", "8 oWdG", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      service1.addRoute("", routeImpl0);
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("8 oWdG").when(filterImpl0).getPath();
      service5.addFilter("8 oWdG", filterImpl0);
      service3.notFound("");
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.header("Zw", "");
      String string0 = service3.getPaths();
      service2.internalServerError("");
      ;
}
 @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      ;
}
 @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      ;
}
 @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      ;
}
 @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      ;
}
 @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      ;
}
 @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      ;
}
 @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1437);
      service1.awaitStop();
      String string0 = "";
      Service service2 = service1.ipAddress(string0);
      String string1 = "gZ";
      String string2 = "";
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.staticFileLocation("");
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.port(4567);
      ;
}
 @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      ;
}
 @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      ;
}
 @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      ;
}
 @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      ;
}
 @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      ;
}
 @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      ;
}
 @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      service0.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      service0.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      service0.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      service0.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" exists", " exists", " exists", "", true);
      Service service2 = service1.threadPool(1249, 4567, 4603);
      boolean boolean0 = false;
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      service2.initialized = boolean0;
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      service_StaticFiles0.expireTime(service3.SPARK_DEFAULT_PORT);
      String string0 = "Uc7(QT*";
      String string1 = "U*QWVX|Z%(DG|<7Q]?7";
      service_StaticFiles0.registerMimeType(string0, string1);
      service0.init();
      String string2 = "";
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      HttpMethod httpMethod0 = HttpMethod.trace;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      List<RouteMatch> list0 = service0.routes();
      service0.addFilter(httpMethod0, filterImpl1);
      service0.pathDeque = (Deque<String>) linkedBlockingDeque0;
      ;
}
 @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test977()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test978()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      ;
}
 @Test(timeout = 4000)
  public void test979()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      ;
}
 @Test(timeout = 4000)
  public void test980()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      ;
}
 @Test(timeout = 4000)
  public void test981()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      ;
}
 @Test(timeout = 4000)
  public void test982()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      ;
}
 @Test(timeout = 4000)
  public void test983()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test984()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test985()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test986()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test987()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test988()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test989()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test990()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test991()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test992()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test993()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test994()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test995()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test996()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test997()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test998()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test999()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      ;
}
 @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      ;
}
 @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">arj+Q$_eK2";
      String string1 = "";
      Service service1 = service0.secure(">arj+Q$_eK2", ">arj+Q$_eK2", "", ">arj+Q$_eK2", true);
      Service service2 = Service.ignite();
      String string2 = "WCQMV_q/C{|ET5";
      Service service3 = service1.secure("o.c", ">arj+Q$_eK2", ">arj+Q$_eK2", ">arj+Q$_eK2", false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Service service4 = service2.ipAddress("WebSocket path cannot be null");
      String string3 = "STARTING";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("STARTING", (Route) null, responseTransformer0);
      service1.addRoute("STARTING", (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      ;
}
 @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      ;
}
 @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      ;
}
 @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      ;
}
 @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      ;
}
 @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      ;
}
 @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      assertEquals(service0, templateViewRouteImpl0);
}
 @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      assertEquals(service3, routeImpl0);
}
 @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2003));
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.secure("I;*cS!`XvHtn", "", "", "WebSocket path cannot be null", true);
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.externalLocation("");
      Service service4 = service2.secure("WebSocket path cannot be null", "", "log", "/.n898\"7# 8S@)", ".L0X5FD%!{mbfA0'j");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("", (Route) templateViewRouteImpl0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, responseTransformer0);
      RouteImpl routeImpl1 = RouteImpl.create("log", "", (Route) responseTransformerRouteImpl0);
      service4.addRoute("", routeImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      ;
}
 @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      ;
}
 @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool(4567, 4567, (-1710));
      Service service3 = service2.secure("spark.Service", "", "", "", true);
      HttpMethod httpMethod0 = HttpMethod.put;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).toString();
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service3.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl2).getAcceptType();
      doReturn((String) null).when(filterImpl2).getPath();
      service2.addFilter("delayDispatchUntilContent=", filterImpl2);
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      ;
}
 @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      ;
}
 @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      ;
}
 @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      ;
}
 @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-5423);
      Service service1 = service0.port((-5423));
      ;
}
 @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      ;
}
 @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      ;
}
 @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      ;
}
 @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      ;
}
 @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      ;
}
 @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      assertEquals(service0, templateViewRouteImpl0);
}
 @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      ;
}
 @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      ;
}
 @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      service0.notFound((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      service0.notFound((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      service0.notFound((String) null);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.secure("", "", "6bUJ3o{3E:+a$", "", " = ? and r.", true);
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      service0.addRoute("V+w", (RouteImpl) templateViewRouteImpl0);
      service0.notFound("STARTED @{}ms {}");
      service0.notFound((String) null);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      ;
}
 @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      ;
}
 @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      ;
}
 @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      ;
}
 @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      ;
}
 @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      ;
}
 @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      ;
}
 @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = service0.activeThreadCount();
      Service service1 = service0.webSocketIdleTimeoutMillis((-3824));
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      String string0 = "[lm=";
      String string1 = "-org.eclipse.jetty.util.log.";
      boolean boolean0 = false;
      SslStores sslStores0 = SslStores.create(string0, string0, string0, string0, string1, boolean0);
      service1.sslStores = sslStores0;
      String string2 = null;
      String string3 = "$#s PJW{3~(";
      service_StaticFiles0.header(string2, string3);
      String string4 = "PEgs";
      service_StaticFiles0.header(string4, string4);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(string4, routeGroup0);
      String string5 = "";
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service1.addFilter(string5, filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      ;
}
 @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      ;
}
 @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      ;
}
 @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      ;
}
 @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      ;
}
 @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      ;
}
 @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = (-43);
      Service service1 = service0.threadPool((-43));
      String string0 = "";
      Service service2 = service1.externalStaticFileLocation("");
      String string1 = "RP*jz/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("ignite failed", "jNtY%XXr-Q<M", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("jNtY%XXr-Q<M");
      service2.addRoute(httpMethod0, routeImpl0);
      Route route0 = null;
      service1.internalServerError((Route) null);
      Service service3 = Service.ignite();
      int int1 = service2.port();
      ;
}
 @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      ;
}
 @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      ;
}
 @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      ;
}
 @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Service$1");
      Service service2 = service1.secure("spark.Service$1", "spark.Service$1", "spark.Service$1", "spark.Service$1", "4r", true);
      Service service3 = service2.secure("spark.Service$1", "spark.Service$1", "_ev]>Vo|6chB", "spark.Service$1", true);
      Service service4 = service3.port(0);
      Service.StaticFiles service_StaticFiles0 = service4.staticFiles;
      service_StaticFiles0.location("vu@FT:cz~_w");
      ;
}
 @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABrm5&%", "8PDABrm5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      ;
}
 @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      ;
}
 @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      ;
}
 @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      ;
}
 @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      ;
}
 @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      ;
}
 @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3936, 3936, 851);
      String string0 = "cl,D:#`]|A_";
      Service service2 = service1.secure("!'", "!'", "!'", "cl,D:#`]|A_", true);
      service0.init();
      ;
}
 @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      ;
}
 @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      ;
}
 @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      ;
}
 @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      ;
}
 @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1799, 1799, 1799);
      Service service2 = service1.secure("This must be done before route mapping has begun", "; Secure", "This must be done before route mapping has begun", "8PDABr\"5&%", "8PDABr\"5&%", false);
      Service service3 = service2.threadPool(1799);
      Service service4 = service3.staticFileLocation("; Secure");
      int int0 = service4.activeThreadCount();
      ;
}
 @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      ;
}
 @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      ;
}
 @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      ;
}
 @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      ;
}
 @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      ;
}
 @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("a|[i7u@", "D)Fr~^'./~8", "Z1\"`e|`d(x}5sy '5", "");
      Service service2 = service1.threadPool(4567);
      service1.init();
      ;
}
 @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      ;
}
 @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      ;
}
 @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      ;
}
 @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      ;
}
 @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      ;
}
 @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      ;
}
 @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("'");
      Service service2 = service1.secure("Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "Ntn;:$mt<oqpHv", "96oC", "}>0sk;Iy~X>T'");
      Service service3 = service2.secure("@f@\\]3ivp]", "EN:q1.e?(y?|yM}u", "}>0sk;Iy~X>T'", "", "}>0sk;Iy~X>T'", false);
      ;
}
 @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1704()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      ;
}
 @Test(timeout = 4000)
  public void test1705()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      ;
}
 @Test(timeout = 4000)
  public void test1706()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      ;
}
 @Test(timeout = 4000)
  public void test1707()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      ;
}
 @Test(timeout = 4000)
  public void test1708()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      ;
}
 @Test(timeout = 4000)
  public void test1709()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1710()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1711()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1712()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1713()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1714()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1715()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1716()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1717()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1718()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test1719()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1720()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1721()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1722()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1723()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1724()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1725()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1726()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1727()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1728()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1729()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1730()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1731()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1732()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1733()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1734()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1735()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      ;
}
 @Test(timeout = 4000)
  public void test1736()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1737()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1738()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1739()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1740()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1741()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1742()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1743()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1744()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1745()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1746()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1747()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1748()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1749()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1750()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1751()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1752()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1753()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1754()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1755()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1756()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1757()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1758()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1759()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1760()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1761()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      ;
}
 @Test(timeout = 4000)
  public void test1762()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1763()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1764()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1765()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1766()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1767()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1768()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1769()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1770()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1771()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1772()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1773()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1774()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1775()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1776()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1777()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1778()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1779()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1780()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1781()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1782()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1783()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1784()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1785()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1786()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1787()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1788()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1789()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1790()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1791()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1792()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1793()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1794()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1795()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1796()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1797()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1798()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test1799()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1800()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1801()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1802()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1803()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1804()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1805()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1806()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1807()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1808()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1809()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1810()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1811()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1812()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1813()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1814()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1815()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1816()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1817()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1818()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1819()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1820()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1821()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1822()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1823()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1824()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1825()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1826()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1827()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1828()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1829()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1830()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1831()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1832()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1833()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1834()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test1835()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1836()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1837()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1838()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1839()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1840()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1841()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1842()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1843()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1844()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1845()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1846()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1847()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1848()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1849()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1850()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1851()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1852()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1853()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1854()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1855()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1856()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1857()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1858()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1859()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1860()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1861()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1862()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1863()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1864()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1865()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1866()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1867()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1868()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1869()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1870()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1871()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1872()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1873()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1874()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1875()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1876()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1877()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1878()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1879()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1880()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1881()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1882()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1883()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1884()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      ;
}
 @Test(timeout = 4000)
  public void test1885()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test1886()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test1887()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test1888()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1889()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1890()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1891()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1892()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test1893()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1894()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1895()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1896()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1897()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1898()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1899()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1900()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1901()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1902()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1903()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1904()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1905()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1906()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1907()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1908()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1909()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1910()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1911()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1912()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1913()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1914()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1915()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1916()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1917()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1918()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1919()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1920()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1921()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1922()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1923()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1924()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1925()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1926()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1927()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1928()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1929()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1930()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1931()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1932()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1933()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1934()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1935()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1936()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1937()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1938()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1939()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1940()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1941()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1942()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1943()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1944()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1945()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1946()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1947()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1948()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1949()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1950()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1951()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1952()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1953()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1954()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = ">_V~N Z_1Gx";
      Service service1 = service0.secure(">_V~N Z_1Gx", "", "", "2agS*N.Mq<\u0002");
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">_V~N Z_1Gx");
      String string1 = "ip-";
      String string2 = null;
      Service service4 = service3.secure("ip-", "Item has no recognized source type prefix: ", (String) null, "ip-", ">_V~N Z_1Gx", true);
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      service5.awaitStop();
      int int0 = 474;
      Service service6 = service5.port(int0);
      String string3 = null;
      String string4 = "::UNKNOWN::";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string4, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(string0, string3, (Route) responseTransformerRouteImpl0);
      service6.addRoute(string2, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test1955()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1956()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test1957()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test1958()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test1959()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test1960()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test1961()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test1962()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1963()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1964()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1965()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1966()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1967()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1968()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1969()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1970()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1971()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test1972()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1973()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1974()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1975()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1976()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1977()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1978()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1979()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1980()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1981()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1982()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1983()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1984()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1985()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1986()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1987()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1988()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      ;
}
 @Test(timeout = 4000)
  public void test1989()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1990()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1991()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1992()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1993()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1994()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1995()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1996()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1997()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1998()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test1999()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2000()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2001()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2002()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2003()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2004()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2005()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2006()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2007()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2008()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2009()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2010()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2011()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2012()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2013()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2014()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      ;
}
 @Test(timeout = 4000)
  public void test2015()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2016()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2017()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2018()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2019()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2020()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2021()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2022()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2023()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2024()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2025()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2026()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2027()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2028()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2029()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2030()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2031()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2032()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2033()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2034()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2035()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2036()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2037()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2038()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2039()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "Zx?mCrJ";
      String string1 = "eW\\9CED@0w,0mFR";
      Service service1 = service0.secure("Zx?mCrJ", "Zx?mCrJ", "eW9CED@0w,0mFR", "eW9CED@0w,0mFR", (String) null, true);
      Service service2 = service1.externalStaticFileLocation("*/*");
      Service service3 = service2.threadPool((-1950));
      Service service4 = service3.externalStaticFileLocation("eW9CED@0w,0mFR");
      service4.notFound("");
      ;
}
 @Test(timeout = 4000)
  public void test2040()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2041()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2042()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      ;
}
 @Test(timeout = 4000)
  public void test2043()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      ;
}
 @Test(timeout = 4000)
  public void test2044()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      ;
}
 @Test(timeout = 4000)
  public void test2045()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      ;
}
 @Test(timeout = 4000)
  public void test2046()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      ;
}
 @Test(timeout = 4000)
  public void test2047()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2048()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2049()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2050()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2051()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2052()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2053()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2054()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2055()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2056()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "=`uwm<)x^O2KPA";
      String string1 = "rK =C.qB=qy[b";
      Service service1 = service0.secure("=`uwm<)x^O2KPA", "Qm>?GffDlyb!L", "rK =C.qB=qy[b", "Static file location has already been set", "Static file location has already been set", true);
      String string2 = "";
      Service service2 = service1.secure("Static file location has already been set", "", "=`uwm<)x^O2KPA", "Static file location has already been set", "No such file {}");
      ;
}
 @Test(timeout = 4000)
  public void test2057()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2058()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2059()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test2060()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test2061()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test2062()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test2063()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test2064()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2065()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2066()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2067()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2068()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2069()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2070()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2071()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2072()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2073()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      ;
}
 @Test(timeout = 4000)
  public void test2074()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2075()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2076()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2077()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2078()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2079()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2080()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2081()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2082()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2083()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2084()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2085()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2086()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2087()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2088()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2089()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2090()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2091()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2092()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2093()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2094()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2095()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2096()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2097()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2098()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2099()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2101()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2102()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2103()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2104()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2105()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2106()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2107()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2108()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2109()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2110()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2111()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2112()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2113()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2115()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2116()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      ;
}
 @Test(timeout = 4000)
  public void test2117()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2118()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2119()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2120()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2121()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2122()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2123()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2124()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2125()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2126()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2127()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2128()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2129()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2130()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2131()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2132()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2133()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2134()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2135()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2136()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2137()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2138()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2139()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2140()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2141()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2142()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2143()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2144()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2145()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2146()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2147()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2148()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2149()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2150()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2151()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2152()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2153()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("=je$}", "=je$}", "=je$}", "", "", true);
      Service service2 = service1.port(1024);
      Service service3 = service2.threadPool(0, 1024, 0);
      Service service4 = service3.secure("org.eclipse.jetty.security.DefaultUserIdentity", "", "=je$}", "7Be)xw}1A'&w7)ylfH", true);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2154()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2155()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2156()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      ;
}
 @Test(timeout = 4000)
  public void test2157()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      ;
}
 @Test(timeout = 4000)
  public void test2158()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      ;
}
 @Test(timeout = 4000)
  public void test2159()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      assertEquals(service0, throwable0);
}
 @Test(timeout = 4000)
  public void test2160()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      ;
}
 @Test(timeout = 4000)
  public void test2161()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      ;
}
 @Test(timeout = 4000)
  public void test2162()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      ;
}
 @Test(timeout = 4000)
  public void test2163()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      ;
}
 @Test(timeout = 4000)
  public void test2164()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertEquals(0, badMessageException0.getCode());
}
 @Test(timeout = 4000)
  public void test2165()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      ;
}
 @Test(timeout = 4000)
  public void test2166()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertNotNull(sQLTransientConnectionException0.toString());
}
 @Test(timeout = 4000)
  public void test2167()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertNotNull(sQLTransientConnectionException0.getMessage());
}
 @Test(timeout = 4000)
  public void test2168()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
}
 @Test(timeout = 4000)
  public void test2169()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      assertNotNull(sQLTransientConnectionException0.getSQLState());
}
 @Test(timeout = 4000)
  public void test2170()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      ;
}
 @Test(timeout = 4000)
  public void test2171()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2172()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2173()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2174()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2175()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2176()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2177()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      BadMessageException badMessageException0 = new BadMessageException();
      Throwable throwable0 = badMessageException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = badMessageException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test2178()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2179()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2180()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2181()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2182()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2183()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2184()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2185()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2186()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2187()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2188()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2189()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test2190()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2191()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2192()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2193()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2194()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2195()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2196()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2197()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2198()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2199()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2200()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2201()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2202()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2203()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2204()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2205()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2206()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2207()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2208()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2209()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2210()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2211()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2212()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2213()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2214()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2215()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2216()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2217()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      ;
}
 @Test(timeout = 4000)
  public void test2218()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      ;
}
 @Test(timeout = 4000)
  public void test2219()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      ;
}
 @Test(timeout = 4000)
  public void test2220()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2221()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2222()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2223()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2224()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test2225()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      assertEquals(service2, routeImpl2);
}
 @Test(timeout = 4000)
  public void test2226()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2227()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2228()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2229()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2230()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2231()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2232()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2233()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2234()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2235()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2236()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2237()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      ;
}
 @Test(timeout = 4000)
  public void test2238()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      assertEquals(service3, routeImpl3);
}
 @Test(timeout = 4000)
  public void test2239()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2240()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2241()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2242()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2243()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2244()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2245()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2246()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2247()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2248()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2249()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2250()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2251()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2252()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2253()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2254()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2255()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2256()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2257()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      ;
}
 @Test(timeout = 4000)
  public void test2258()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2259()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2260()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2261()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2262()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2263()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2264()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2265()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2266()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2267()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2268()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      ;
}
 @Test(timeout = 4000)
  public void test2269()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2270()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2271()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2272()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2273()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2274()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2275()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2276()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2277()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2278()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      service1.maxThreads = 23;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      Service service2 = service0.threadPool(23, 23, 0);
      RouteImpl routeImpl0 = RouteImpl.create("[ms~Zy(", (Route) templateViewRouteImpl0);
      Service service3 = service0.ipAddress("");
      Service service4 = service0.secure("HZdrd", "spark.Spark", "%vPy_OH'*Hy\"h^%]", "J/EVl%*g", "3mscI", true);
      RouteImpl routeImpl1 = templateViewRouteImpl0.withPrefix("");
      RouteImpl routeImpl2 = RouteImpl.create("t:Py&<Jyu(jW\"X!+qaV", "B$s.", (Route) routeImpl0);
      RouteImpl routeImpl3 = routeImpl2.withPrefix("B$s.");
      service1.addRoute("yty|j_=z4o3Q", routeImpl2);
      boolean boolean0 = service1.unmap("t:Py&<Jyu(jW\"X!+qaV");
      service1.stop();
      ;
}
 @Test(timeout = 4000)
  public void test2279()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2280()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2281()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      ;
}
 @Test(timeout = 4000)
  public void test2282()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      ;
}
 @Test(timeout = 4000)
  public void test2283()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      ;
}
 @Test(timeout = 4000)
  public void test2284()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      ;
}
 @Test(timeout = 4000)
  public void test2285()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      ;
}
 @Test(timeout = 4000)
  public void test2286()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2287()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2288()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2289()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2290()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2291()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2292()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2293()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2294()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2295()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test2296()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2297()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2298()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2299()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2300()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2301()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2302()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2303()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2304()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2305()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2306()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2307()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2308()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2309()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2310()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2311()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2312()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("]^Ah");
      Service service2 = service1.secure("", "WebSockets are only supported in the embedded server", "#~^q_+,P/", "0.0.0.0", "", false);
      Service service3 = service2.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2313()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2314()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2315()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      ;
}
 @Test(timeout = 4000)
  public void test2316()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      ;
}
 @Test(timeout = 4000)
  public void test2317()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      ;
}
 @Test(timeout = 4000)
  public void test2318()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      ;
}
 @Test(timeout = 4000)
  public void test2319()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      ;
}
 @Test(timeout = 4000)
  public void test2320()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2321()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2322()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2323()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2324()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2325()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2326()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2327()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2328()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2329()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      ;
}
 @Test(timeout = 4000)
  public void test2330()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2331()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2332()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2333()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2334()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2335()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2336()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2337()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2338()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2339()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2340()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2341()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2342()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2343()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2344()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2345()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2346()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2347()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2348()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2349()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2350()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2351()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2352()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2353()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2354()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2355()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2356()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2357()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2358()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2359()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2360()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2361()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2362()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2363()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2364()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2365()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2366()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2367()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2368()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2369()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2370()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2371()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2372()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test2373()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2374()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2375()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2376()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2377()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2378()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2379()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2380()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2381()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2382()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2383()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2384()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2385()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2386()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2387()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2388()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2389()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2390()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2391()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2392()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2393()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2394()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2395()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2396()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2397()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2398()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2399()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2400()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2401()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2402()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2403()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2404()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2405()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2406()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2407()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2408()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2409()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      ;
}
 @Test(timeout = 4000)
  public void test2410()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2411()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2412()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2413()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2414()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2415()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2416()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test2417()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2418()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2419()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2420()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2421()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2422()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2423()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2424()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2425()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2426()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2427()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2428()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("psW,:8np*&");
      Service service2 = service1.secure("psW,:8np*&", "psW,:8np*&", "setDebugEnabled", "lL", false);
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.secure("psW,:8np*&", "W", "psW,:8np*&", (String) null);
      Service service5 = service4.port(238);
      SslStores sslStores0 = SslStores.create("^4y=pC]J%", (String) null, "tL_y;&", (String) null, (String) null, false);
      service2.initialized = false;
      service5.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2429()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2430()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test2431()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2432()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2433()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2434()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2435()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      ;
}
 @Test(timeout = 4000)
  public void test2436()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2437()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2438()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2439()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2440()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2441()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2442()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2443()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2444()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2445()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2446()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2447()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2448()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2449()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2450()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2451()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2452()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2453()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2454()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2455()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2456()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2457()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2458()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2459()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2460()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2461()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2462()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      ;
}
 @Test(timeout = 4000)
  public void test2463()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2464()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2465()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2466()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2467()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2468()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2469()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2470()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2471()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2472()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2473()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2474()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2475()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2476()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2477()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2478()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2479()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2480()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2481()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2482()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2483()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2484()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2485()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2486()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2487()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2488()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      ;
}
 @Test(timeout = 4000)
  public void test2489()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2490()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2491()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2492()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2493()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2494()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2495()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2496()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2497()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2498()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2499()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2500()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2501()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2502()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2503()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2504()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2505()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2506()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2507()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2508()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2509()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2510()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2511()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2512()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2513()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2514()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2515()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2516()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2517()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2518()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2519()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2520()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2521()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2522()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2523()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2524()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2525()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      ;
}
 @Test(timeout = 4000)
  public void test2526()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2527()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2528()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2529()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2530()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2531()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2532()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2533()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2534()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2535()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2536()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2537()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2538()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2539()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2540()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2541()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2542()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2543()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2544()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2545()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2546()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2547()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2548()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2549()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2550()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2551()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2552()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2553()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2554()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2555()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2556()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2557()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2558()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2559()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2560()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2561()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.secure("Eg_(oF|;~3;Hf;-zw=p", "'", "Eg_(oF|;~3;Hf;-zw=p", "ISHUT", "Eg_(oF|;~3;Hf;-zw=p");
      Service service3 = service2.threadPool(0);
      Service service4 = service3.secure("Eg_(oF|;~3;Hf;-zw=p", "D", "ISHUT", "'", "Eg_(oF|;~3;Hf;-zw=p", false);
      Service service5 = service4.externalStaticFileLocation("Eg_(oF|;~3;Hf;-zw=p");
      service5.initExceptionHandler((Consumer<Exception>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2562()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2563()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test2564()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      ;
}
 @Test(timeout = 4000)
  public void test2565()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      ;
}
 @Test(timeout = 4000)
  public void test2566()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      ;
}
 @Test(timeout = 4000)
  public void test2567()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      ;
}
 @Test(timeout = 4000)
  public void test2568()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      ;
}
 @Test(timeout = 4000)
  public void test2569()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2570()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2571()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2572()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2573()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2574()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2575()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2576()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2577()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2578()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      ;
}
 @Test(timeout = 4000)
  public void test2579()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2580()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2581()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2582()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2583()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2584()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2585()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2586()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2587()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2588()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2589()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2590()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2591()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2592()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2593()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2594()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2595()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-1292), (-3040), (-837));
      Service service2 = service1.secure("", "Must provide a keystore file to run secured", "Content-Length", (String) null, "Must provide a keystore file to run secured");
      String string0 = "9OBpg[}";
      String string1 = "WebSockets are only supported in the embedded server";
      Service service3 = service2.secure("Must provide a keystore file to run secured", "9OBpg[}", "WebSockets are only supported in the embedded server", "9OBpg[}", false);
      ;
}
 @Test(timeout = 4000)
  public void test2596()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2597()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2598()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      ;
}
 @Test(timeout = 4000)
  public void test2599()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      ;
}
 @Test(timeout = 4000)
  public void test2600()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      ;
}
 @Test(timeout = 4000)
  public void test2601()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      ;
}
 @Test(timeout = 4000)
  public void test2602()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      ;
}
 @Test(timeout = 4000)
  public void test2603()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2604()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2605()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2606()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2607()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2608()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2609()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2610()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2611()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2612()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      ;
}
 @Test(timeout = 4000)
  public void test2613()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2614()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2615()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2616()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2617()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2618()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2619()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2620()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2621()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2622()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2623()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2624()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2625()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2626()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2627()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2628()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2629()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      ;
}
 @Test(timeout = 4000)
  public void test2630()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2631()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2632()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2633()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2634()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2635()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2636()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2637()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2638()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2639()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2640()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2641()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2642()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2643()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2644()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2645()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2646()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2647()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2648()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2649()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2650()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2651()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2652()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2653()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2654()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2655()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      ;
}
 @Test(timeout = 4000)
  public void test2656()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test2657()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test2658()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test2659()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test2660()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      ;
}
 @Test(timeout = 4000)
  public void test2661()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test2662()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      ;
}
 @Test(timeout = 4000)
  public void test2663()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test2664()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test2665()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test2666()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test2667()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2668()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test2669()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2670()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2671()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2672()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2673()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2674()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      ;
}
 @Test(timeout = 4000)
  public void test2675()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2676()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2677()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2678()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2679()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2680()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2681()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2682()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2683()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2684()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2685()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2686()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2687()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2688()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2689()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2690()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2691()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2692()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2693()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2694()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2695()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2696()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2697()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2698()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2699()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2700()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2701()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2702()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2703()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2704()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2705()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2706()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2707()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2708()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2709()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2710()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2711()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      ;
}
 @Test(timeout = 4000)
  public void test2712()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2713()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2714()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2715()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2716()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2717()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2718()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2719()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2720()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2721()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2722()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2723()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2724()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2725()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2726()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2727()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2728()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2729()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2730()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2731()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2732()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2733()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2734()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2735()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2736()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2737()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2738()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2739()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2740()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2741()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2742()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2743()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2744()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2745()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2746()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2747()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2748()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2749()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2750()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2751()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2752()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2753()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2754()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2755()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2756()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2757()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2758()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2759()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2760()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2761()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      ;
}
 @Test(timeout = 4000)
  public void test2762()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2763()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2764()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2765()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2766()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2767()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2768()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2769()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2770()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2771()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2772()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2773()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2774()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2775()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2776()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2777()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2778()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      ;
}
 @Test(timeout = 4000)
  public void test2779()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2780()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2781()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2782()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2783()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2784()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2785()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2786()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2787()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2788()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2789()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2790()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2791()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2792()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2793()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2794()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2795()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2796()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2797()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2798()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2799()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2800()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2801()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2802()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2803()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2804()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2805()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2806()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2807()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2808()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2809()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2810()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2811()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2812()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2813()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2814()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2815()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2816()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2817()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2818()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2819()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2820()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2821()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2822()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2823()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2824()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2825()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2826()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("#~?gDA3=\"", "#~?gDA3=\"", "N|Noi1dVKriv", "upgrade {} {}", "N|Noi1dVKriv", true);
      Service service2 = service1.secure("#~?gDA3=\"", "#~?gDA3=\"", "upgrade {} {}", "upgrade {} {}");
      service0.pathDeque = null;
      Service service3 = service2.port((-3617));
      Service service4 = service3.secure("N|Noi1dVKriv", "#~?gDA3=\"", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", "N|Noi1dVKriv", "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n");
      service1.webSocketIdleTimeoutMillis = null;
      SslStores sslStores0 = SslStores.create((String) null, "System Property [%s] has been deprecated! (Use org.eclipse.jetty.LEVEL=DEBUG instead)%n", ";!anPVhcn]2s(", "K F[i1i6Lq5BRq;L/{ ", "K F[i1i6Lq5BRq;L/{ ");
      service3.sslStores = sslStores0;
      Service service5 = service4.threadPool(4567, (-1356), 4695);
      Service service6 = service5.port(324);
      Service service7 = service0.ipAddress("; Path=");
      service5.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test2827()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2828()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2829()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      ;
}
 @Test(timeout = 4000)
  public void test2830()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      ;
}
 @Test(timeout = 4000)
  public void test2831()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      ;
}
 @Test(timeout = 4000)
  public void test2832()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      ;
}
 @Test(timeout = 4000)
  public void test2833()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      ;
}
 @Test(timeout = 4000)
  public void test2834()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2835()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2836()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2837()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2838()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2839()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2840()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2841()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2842()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2843()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2844()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2845()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2846()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2847()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2848()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2849()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2850()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2851()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2852()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2853()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2854()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2855()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2856()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2857()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2858()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2859()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2860()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2861()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2862()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2863()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2864()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2865()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2866()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2867()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2868()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2869()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2870()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2871()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2872()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2873()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2874()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2875()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2876()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2877()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2878()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2879()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2880()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2881()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2882()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2883()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2884()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2885()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2886()  throws Throwable  {
      Service service0 = Service.ignite();
      int int0 = 414;
      Service service1 = service0.threadPool(414);
      int int1 = 0;
      Service service2 = service1.threadPool(414, 593, 0);
      String string0 = "0I5A)EoJU}GU<%F9";
      Service service3 = service2.staticFileLocation("0I5A)EoJU}GU<%F9");
      Service service4 = service3.ipAddress("0I5A)EoJU}GU<%F9");
      ;
}
 @Test(timeout = 4000)
  public void test2887()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2888()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test2889()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2890()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2891()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2892()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2893()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test2894()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2895()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2896()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2897()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2898()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2899()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2900()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      ;
}
 @Test(timeout = 4000)
  public void test2901()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2902()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2903()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2904()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2905()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2906()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2907()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2908()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2909()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2910()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2911()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2912()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2913()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2914()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2915()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2916()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2917()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2918()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2919()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2920()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2921()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2922()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2923()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2924()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2925()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2926()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2927()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      ;
}
 @Test(timeout = 4000)
  public void test2928()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2929()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2930()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2931()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2932()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2933()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2934()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2935()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2936()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2937()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2938()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2939()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2940()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2941()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2942()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2943()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2944()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2945()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2946()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2947()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2948()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2949()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2950()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2951()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2952()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2953()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test2954()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2955()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2956()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2957()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2958()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2959()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2960()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2961()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2962()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2963()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2964()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2965()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2966()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2967()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2968()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2969()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2970()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2971()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2972()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2973()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.secure("spark.Service$StaticFiles", "spark.Service$StaticFiles", "", "");
      String string0 = "";
      Service service3 = service2.secure("", "", "", "", "");
      Service service4 = service3.threadPool(4567);
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test2974()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2975()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test2976()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      ;
}
 @Test(timeout = 4000)
  public void test2977()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      ;
}
 @Test(timeout = 4000)
  public void test2978()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      ;
}
 @Test(timeout = 4000)
  public void test2979()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      ;
}
 @Test(timeout = 4000)
  public void test2980()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      ;
}
 @Test(timeout = 4000)
  public void test2981()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2982()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2983()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2984()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2985()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2986()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2987()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2988()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2989()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2990()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2991()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2992()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2993()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2994()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2995()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2996()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2997()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2998()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test2999()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3000()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3001()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3002()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3003()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3004()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3005()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3006()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3007()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      ;
}
 @Test(timeout = 4000)
  public void test3008()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3009()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3010()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3011()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3012()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3013()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3014()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3015()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3016()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3017()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3018()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3019()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3020()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3021()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3022()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3023()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3024()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3025()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3026()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3027()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3028()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3029()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      String string0 = "No protocol factory for default protocol '";
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("No protocol factory for default protocol '", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test3030()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      String string0 = "No protocol factory for default protocol '";
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("No protocol factory for default protocol '", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test3031()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      String string0 = "No protocol factory for default protocol '";
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("No protocol factory for default protocol '", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test3032()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(500);
      Service service2 = service1.ipAddress("*/*");
      Service service3 = service2.externalStaticFileLocation("*/*");
      Service.StaticFiles service_StaticFiles0 = service3.new StaticFiles();
      service_StaticFiles0.header("~R TGQdg,5=& *", (String) null);
      String string0 = "No protocol factory for default protocol '";
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path("No protocol factory for default protocol '", routeGroup0);
      ;
}
 @Test(timeout = 4000)
  public void test3033()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3034()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3035()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.post;
      String string0 = "[]GgO<*";
      String string1 = "qW*T=j $H";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("[]GgO<*", "qW*T=j $H", templateViewRoute0, templateEngine0);
      assertEquals(service0, templateViewRouteImpl0);
}
 @Test(timeout = 4000)
  public void test3036()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.post;
      String string0 = "[]GgO<*";
      String string1 = "qW*T=j $H";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("[]GgO<*", "qW*T=j $H", templateViewRoute0, templateEngine0);
      service0.addRoute(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3037()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3038()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test3039()  throws Throwable  {
      Service service0 = Service.ignite();
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterImpl0).getAcceptType();
      doReturn((String) null).when(filterImpl0).getPath();
      service0.addFilter("spark.Service", filterImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3040()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3041()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3042()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3043()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3044()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3045()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3046()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3047()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3048()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3049()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3050()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3051()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3052()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3053()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3054()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3055()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3056()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test3057()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3058()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3059()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3060()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3061()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3062()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3063()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3064()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3065()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3066()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3067()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3068()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3069()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3070()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3071()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3072()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3073()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.secure("", "", "", "", (String) null, false);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3074()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3075()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test3076()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      ;
}
 @Test(timeout = 4000)
  public void test3077()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test3078()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test3079()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test3080()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test3081()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test3082()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test3083()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test3084()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3085()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3086()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3087()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3088()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3089()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3090()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test3091()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test3092()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test3093()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test3094()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test3095()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3096()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3097()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3098()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3099()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      ;
}
 @Test(timeout = 4000)
  public void test3101()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      ;
}
 @Test(timeout = 4000)
  public void test3102()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      ;
}
 @Test(timeout = 4000)
  public void test3103()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      ;
}
 @Test(timeout = 4000)
  public void test3104()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      ;
}
 @Test(timeout = 4000)
  public void test3105()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.staticFiles;
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      service_StaticFiles0.expireTime(service0.SPARK_DEFAULT_PORT);
      String string0 = "";
      String string1 = "Must provide a keystore file to run secured";
      Service service2 = Service.ignite();
      service_StaticFiles0.externalLocation(string0);
      service_StaticFiles0.registerMimeType(string0, string1);
      String string2 = "Must provide a keystore file to run secured";
      service_StaticFiles0.header(string2, string2);
      ;
}
 @Test(timeout = 4000)
  public void test3106()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3107()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3108()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3109()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3110()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      ;
}
 @Test(timeout = 4000)
  public void test3111()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      ;
}
 @Test(timeout = 4000)
  public void test3112()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      ;
}
 @Test(timeout = 4000)
  public void test3113()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      ;
}
 @Test(timeout = 4000)
  public void test3114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      ;
}
 @Test(timeout = 4000)
  public void test3115()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3116()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3117()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3118()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3119()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3120()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3121()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3122()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3123()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3124()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3125()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3126()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3127()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3128()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3129()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3130()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3131()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3132()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3133()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3134()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3135()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3136()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3137()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3138()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3139()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3140()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3141()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      ;
}
 @Test(timeout = 4000)
  public void test3142()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3143()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3144()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3145()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3146()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3147()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3148()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3149()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3150()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3151()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3152()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3153()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3154()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3155()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3156()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3157()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3158()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3159()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3160()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3161()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3162()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3163()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3164()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3165()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3166()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3167()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3168()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3169()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3170()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3171()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3172()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3173()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3174()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3175()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3176()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3177()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3178()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3179()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3180()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3181()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3182()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3183()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3184()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3185()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3186()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3187()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3188()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3189()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3190()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3191()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3192()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3193()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3194()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3195()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3196()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3197()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3198()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3199()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3200()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3201()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3202()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3203()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3204()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      ;
}
 @Test(timeout = 4000)
  public void test3205()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      assertEquals(service4, templateViewRouteImpl0);
}
 @Test(timeout = 4000)
  public void test3206()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3207()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3208()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3209()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3210()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3211()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3212()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3213()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3214()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3215()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3216()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3217()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3218()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3219()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3220()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3221()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3222()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3223()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3224()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3225()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3226()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3227()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3228()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3229()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3230()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3231()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3232()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3233()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3234()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3235()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3236()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3237()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3238()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3239()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3240()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3241()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3242()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(561, 561, 104);
      Service service2 = service1.ipAddress("Qbu]4B 8");
      Service service3 = service2.secure("Must provide a keystore file to run secured", "Must provide a keystore file to run secured", "Qbu]4B 8", "login-config", false);
      Service service4 = service3.staticFileLocation("");
      Service service5 = service4.secure("4c#bq6l-5{~IogY", (String) null, (String) null, "Qbu]4B 8");
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Interrupted by another thread", (TemplateViewRoute) null, (TemplateEngine) null);
      service5.addRoute("", (RouteImpl) templateViewRouteImpl0);
      Service.StaticFiles service_StaticFiles0 = service2.staticFiles;
      ;
}
 @Test(timeout = 4000)
  public void test3243()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3244()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3245()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      ;
}
 @Test(timeout = 4000)
  public void test3246()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      ;
}
 @Test(timeout = 4000)
  public void test3247()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      ;
}
 @Test(timeout = 4000)
  public void test3248()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      ;
}
 @Test(timeout = 4000)
  public void test3249()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      ;
}
 @Test(timeout = 4000)
  public void test3250()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      ;
}
 @Test(timeout = 4000)
  public void test3251()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3252()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3253()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3254()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3255()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3256()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3257()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3258()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3259()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3260()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3261()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3262()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3263()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3264()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3265()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3266()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3267()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3268()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3269()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3270()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3271()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3272()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3273()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3274()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3275()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3276()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3277()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Skipping ", "Skipping ", "Skipping ", "Skipping ");
      Routes routes0 = Routes.create();
      service0.routes = routes0;
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation(">=%^/b:; E<");
      ;
}
 @Test(timeout = 4000)
  public void test3278()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3279()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3280()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      ;
}
 @Test(timeout = 4000)
  public void test3281()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      ;
}
 @Test(timeout = 4000)
  public void test3282()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      ;
}
 @Test(timeout = 4000)
  public void test3283()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      ;
}
 @Test(timeout = 4000)
  public void test3284()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      ;
}
 @Test(timeout = 4000)
  public void test3285()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3286()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3287()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3288()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3289()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3290()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3291()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3292()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3293()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3294()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3295()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3296()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3297()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3298()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3299()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3300()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3301()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3302()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3303()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3304()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3305()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3306()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3307()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3308()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3309()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3310()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3311()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3312()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3313()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3314()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3315()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3316()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3317()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3318()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3319()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3320()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3321()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3322()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3323()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3324()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3325()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3326()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3327()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3328()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3329()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3330()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3331()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3332()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3333()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3334()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3335()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3336()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3337()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      ;
}
 @Test(timeout = 4000)
  public void test3338()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3339()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3340()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3341()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3342()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3343()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3344()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3345()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3346()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3347()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3348()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3349()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3350()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3351()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3352()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3353()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3354()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3355()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3356()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3357()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3358()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3359()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3360()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3361()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3362()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3363()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3364()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3365()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3366()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3367()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3368()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3369()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3370()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3371()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3372()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3373()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3374()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(103);
      Service service2 = service1.secure("", "", "", "2mzg!dN~pj(M{N!", "", true);
      Service service3 = service2.externalStaticFileLocation("");
      Service service4 = service3.threadPool((-2712));
      Service service5 = service4.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3375()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3376()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3377()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3378()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3379()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3380()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3381()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3382()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3383()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3384()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3385()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3386()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3387()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3388()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3389()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3390()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      ;
}
 @Test(timeout = 4000)
  public void test3391()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      assertEquals(service0, service2);
}
 @Test(timeout = 4000)
  public void test3392()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3393()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3394()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3395()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3396()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3397()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3398()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3399()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3400()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3401()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3402()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3403()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3404()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3405()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3406()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3407()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3408()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3409()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3410()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3411()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3412()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3413()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3414()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3415()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3416()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3417()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3418()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3419()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3420()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3421()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3422()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3423()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3424()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3425()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      ;
}
 @Test(timeout = 4000)
  public void test3426()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3427()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3428()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3429()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3430()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3431()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3432()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3433()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3434()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3435()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3436()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3437()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3438()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      ;
}
 @Test(timeout = 4000)
  public void test3439()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3440()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3441()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3442()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3443()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3444()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3445()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3446()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3447()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3448()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3449()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3450()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service2 = service1.threadPool(4567, 4567, (-2));
      Service service3 = service1.staticFileLocation("(ar3;&Hj3Xx\"KY4|>");
      Service service4 = service3.secure("", "", "", "<NlkIrv", "(ar3;&Hj3Xx\"KY4|>");
      Service service5 = service0.port((-2));
      service5.embeddedServerIdentifier((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test3451()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3452()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3453()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3454()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3455()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3456()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3457()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3458()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3459()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3460()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test3461()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test3462()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(1, map0.size());
}
 @Test(timeout = 4000)
  public void test3463()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(service0, map0);
}
 @Test(timeout = 4000)
  public void test3464()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test3465()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      assertEquals(1, map0.size());
}
 @Test(timeout = 4000)
  public void test3466()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      ;
}
 @Test(timeout = 4000)
  public void test3467()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      ;
}
 @Test(timeout = 4000)
  public void test3468()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      ;
}
 @Test(timeout = 4000)
  public void test3469()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(404, 404, 404);
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service_StaticFiles0.headers(map0);
      ;
}
 @Test(timeout = 4000)
  public void test3470()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3471()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3472()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      ;
}
 @Test(timeout = 4000)
  public void test3473()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      ;
}
 @Test(timeout = 4000)
  public void test3474()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      ;
}
 @Test(timeout = 4000)
  public void test3475()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      ;
}
 @Test(timeout = 4000)
  public void test3476()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      ;
}
 @Test(timeout = 4000)
  public void test3477()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3478()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3479()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3480()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3481()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3482()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3483()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3484()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3485()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3486()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      ;
}
 @Test(timeout = 4000)
  public void test3487()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3488()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3489()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3490()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3491()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3492()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3493()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3494()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3495()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2799));
      Service service2 = service1.webSocketIdleTimeoutMillis(100);
      service2.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test3496()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3497()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3498()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      ;
}
 @Test(timeout = 4000)
  public void test3499()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      ;
}
 @Test(timeout = 4000)
  public void test3500()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      ;
}
 @Test(timeout = 4000)
  public void test3501()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      ;
}
 @Test(timeout = 4000)
  public void test3502()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      ;
}
 @Test(timeout = 4000)
  public void test3503()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3504()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3505()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3506()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3507()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3508()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3509()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3510()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3511()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3512()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test3513()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3514()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3515()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3516()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3517()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3518()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3519()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3520()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3521()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3522()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3523()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3524()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3525()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3526()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3527()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3528()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3529()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      ;
}
 @Test(timeout = 4000)
  public void test3530()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3531()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3532()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3533()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3534()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3535()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3536()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3537()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3538()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3539()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3540()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3541()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3542()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3543()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3544()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3545()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      ;
}
 @Test(timeout = 4000)
  public void test3546()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3547()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3548()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3549()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3550()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3551()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3552()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3553()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3554()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3555()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3556()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3557()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3558()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3559()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3560()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3561()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3562()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3563()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3564()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3565()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3566()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3567()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3568()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3569()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3570()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3571()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      ;
}
 @Test(timeout = 4000)
  public void test3572()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3573()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3574()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3575()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3576()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3577()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3578()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3579()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3580()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3581()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3582()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3583()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3584()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3585()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3586()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3587()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3588()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3589()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3590()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3591()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3592()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3593()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3594()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3595()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3596()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3597()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3598()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3599()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3600()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3601()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3602()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3603()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3604()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3605()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3606()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3607()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3608()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      ;
}
 @Test(timeout = 4000)
  public void test3609()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      ;
}
 @Test(timeout = 4000)
  public void test3610()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3611()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3612()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3613()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3614()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3615()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3616()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3617()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3618()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3619()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3620()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3621()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3622()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3623()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3624()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3625()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3626()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3627()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("always", "always", "always", "always", "always");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.ipAddress("always");
      service3.stop();
      Service service4 = service3.staticFileLocation("HLM[<,|8)Uzil");
      Service service5 = service4.externalStaticFileLocation("always");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service2.internalServerError((Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test3628()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3629()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3630()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3631()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3632()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3633()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3634()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3635()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3636()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3637()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3638()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3639()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3640()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3641()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3642()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3643()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3644()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      ;
}
 @Test(timeout = 4000)
  public void test3645()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3646()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3647()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3648()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3649()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3650()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3651()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3652()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3653()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3654()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3655()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3656()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3657()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3658()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3659()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3660()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3661()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3662()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3663()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3664()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3665()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3666()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3667()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3668()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3669()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3670()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3671()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3672()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3673()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3674()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3675()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3676()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3677()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3678()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3679()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3680()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3681()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3682()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3683()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3684()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3685()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3686()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3687()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test3688()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3689()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3690()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3691()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3692()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3693()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3694()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3695()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3696()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3697()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3698()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3699()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3700()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3701()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3702()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3703()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3704()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3705()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3706()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3707()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3708()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3709()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3710()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3711()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3712()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3713()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3714()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3715()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3716()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3717()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3718()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3719()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3720()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3721()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3722()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3723()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3724()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      ;
}
 @Test(timeout = 4000)
  public void test3725()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3726()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3727()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3728()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3729()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3730()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3731()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3732()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3733()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3734()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3735()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3736()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3737()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3738()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3739()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3740()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3741()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3742()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3743()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3744()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3745()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3746()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3747()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3748()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3749()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3750()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3751()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3752()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3753()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3754()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3755()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3756()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3757()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3758()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3759()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3760()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("I)ou1i4!,y%!Oq>F", "-]hb8+|He[Z8", "q($Q%\"&sd}8I!0[v%#", "-]hb8+|He[Z8", "erHEW^vwYJ-");
      Service service2 = service1.staticFileLocation(":<=>IY@.dofDCy");
      Service service3 = service2.secure("0.0.0.0", ":<=>IY@.dofDCy", "call servlet {}", ")YIjV!S", "", true);
      Service service4 = service3.threadPool(4567, 4567, 4567);
      Service service5 = service4.secure("erHEW^vwYJ-", "-]hb8+|He[Z8", "Failed to parse system property \"org.freemarker.jsp.metaInfTldSources\"", "`2k", true);
      service5.notFound("erHEW^vwYJ-");
      ;
}
 @Test(timeout = 4000)
  public void test3761()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3762()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3763()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2026));
      ;
}
 @Test(timeout = 4000)
  public void test3764()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2026));
      ;
}
 @Test(timeout = 4000)
  public void test3765()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2026));
      ;
}
 @Test(timeout = 4000)
  public void test3766()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2026));
      ;
}
 @Test(timeout = 4000)
  public void test3767()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port((-2026));
      ;
}
 @Test(timeout = 4000)
  public void test3768()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3769()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3770()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      ;
}
 @Test(timeout = 4000)
  public void test3771()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      ;
}
 @Test(timeout = 4000)
  public void test3772()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      ;
}
 @Test(timeout = 4000)
  public void test3773()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      ;
}
 @Test(timeout = 4000)
  public void test3774()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      ;
}
 @Test(timeout = 4000)
  public void test3775()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3776()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3777()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3778()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3779()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3780()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3781()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3782()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3783()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3784()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      ;
}
 @Test(timeout = 4000)
  public void test3785()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3786()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3787()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3788()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3789()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3790()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3791()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3792()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3793()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3794()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3795()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3796()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3797()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3798()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3799()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3800()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3801()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      ;
}
 @Test(timeout = 4000)
  public void test3802()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3803()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3804()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3805()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3806()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3807()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3808()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3809()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3810()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3811()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3812()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3813()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3814()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3815()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3816()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3817()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3818()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3819()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3820()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3821()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3822()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3823()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3824()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3825()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3826()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3827()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3828()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3829()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3830()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3831()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3832()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3833()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3834()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3835()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3836()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3837()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3838()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3839()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3840()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3841()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3842()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3843()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3844()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3845()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3846()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3847()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3848()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3849()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3850()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3851()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3852()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3853()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3854()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3855()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3856()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3857()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3858()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3859()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3860()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3861()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3862()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3863()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3864()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(3759, 3759, 3759);
      String string0 = ">H\\dqy";
      Service service2 = service1.externalStaticFileLocation(">Hdqy");
      String string1 = "=ghzoY3]84'~^w?";
      Service service3 = service2.secure("=ghzoY3]84'~^w?", "=ghzoY3]84'~^w?", "G9?S}#_C's", ">Hdqy", false);
      Service service4 = service3.threadPool(3759);
      Service service5 = service4.webSocketIdleTimeoutMillis(3759);
      ;
}
 @Test(timeout = 4000)
  public void test3865()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3866()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test3867()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3868()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3869()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3870()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3871()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test3872()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3873()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3874()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3875()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3876()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3877()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3878()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3879()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3880()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3881()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      ;
}
 @Test(timeout = 4000)
  public void test3882()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3883()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3884()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3885()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3886()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3887()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3888()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3889()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3890()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3891()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3892()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3893()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3894()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3895()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3896()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3897()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3898()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      ;
}
 @Test(timeout = 4000)
  public void test3899()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3900()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3901()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3902()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3903()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3904()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3905()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3906()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3907()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3908()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3909()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3910()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3911()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3912()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3913()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3914()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3915()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3916()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3917()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3918()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3919()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3920()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3921()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3922()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3923()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3924()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test3925()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3926()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3927()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3928()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3929()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3930()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3931()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3932()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3933()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3934()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3935()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3936()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3937()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3938()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3939()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3940()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3941()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3942()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3943()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3944()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3945()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3946()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3947()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3948()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3949()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3950()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3951()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3952()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3953()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3954()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3955()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3956()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3957()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3958()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3959()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3960()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3961()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", "", true);
      Service service2 = service1.port((-1683));
      Service service3 = service2.secure("spark.Service", "", (String) null, "spark.Service", "");
      Service service4 = service3.externalStaticFileLocation("");
      Service service5 = service4.secure("", "ALL", (String) null, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3962()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3963()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3964()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      ;
}
 @Test(timeout = 4000)
  public void test3965()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      ;
}
 @Test(timeout = 4000)
  public void test3966()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      ;
}
 @Test(timeout = 4000)
  public void test3967()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      ;
}
 @Test(timeout = 4000)
  public void test3968()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("lpFE^1; w7+`k");
      ;
}
 @Test(timeout = 4000)
  public void test3969()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3970()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test3971()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      ;
}
 @Test(timeout = 4000)
  public void test3972()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      ;
}
 @Test(timeout = 4000)
  public void test3973()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      ;
}
 @Test(timeout = 4000)
  public void test3974()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      ;
}
 @Test(timeout = 4000)
  public void test3975()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      ;
}
 @Test(timeout = 4000)
  public void test3976()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3977()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3978()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3979()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3980()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3981()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3982()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3983()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3984()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3985()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      ;
}
 @Test(timeout = 4000)
  public void test3986()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3987()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3988()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3989()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3990()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3991()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3992()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3993()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3994()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3995()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3996()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3997()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3998()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test3999()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test4000()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test4001()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test4002()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      ;
}
 @Test(timeout = 4000)
  public void test4003()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4004()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4005()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4006()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4007()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4008()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4009()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4010()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4011()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4012()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4013()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4014()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4015()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4016()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4017()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4018()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4019()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4020()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4021()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4022()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4023()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4024()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4025()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4026()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4027()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4028()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      ;
}
 @Test(timeout = 4000)
  public void test4029()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4030()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4031()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4032()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4033()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4034()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4035()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4036()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4037()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4038()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4039()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4040()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4041()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4042()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4043()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4044()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4045()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4046()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4047()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4048()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4049()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4050()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4051()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4052()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4053()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4054()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4055()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4056()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4057()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4058()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4059()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4060()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4061()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4062()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4063()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4064()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4065()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(404);
      Service service2 = service1.secure("", "E*j-O-)Rf", "E*j-O-)Rf", "", "E*j-O-)Rf", true);
      Service service3 = service2.threadPool(4567, 4567, 404);
      Service service4 = service3.threadPool(1384);
      Service service5 = service4.staticFileLocation("E*j-O-)Rf");
      ;
}
 @Test(timeout = 4000)
  public void test4066()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4067()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4068()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test4069()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test4070()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test4071()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test4072()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      Service service1 = service0.staticFileLocation(" 3!bXoIK5^ZQYfL");
      ;
}
 @Test(timeout = 4000)
  public void test4073()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4074()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4075()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4076()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4077()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4078()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4079()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4080()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4081()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4082()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4083()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4084()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4085()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4086()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4087()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4088()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4089()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      ;
}
 @Test(timeout = 4000)
  public void test4090()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4091()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4092()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4093()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4094()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4095()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4096()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4097()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4098()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4099()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4100()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4101()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4102()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4103()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4104()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4105()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4106()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 1, 0);
      Service service2 = service1.secure("", "", "", "jdl72", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test4107()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4108()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test4109()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4110()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4111()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4112()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4113()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4114()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4115()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4116()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4117()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4118()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4119()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4120()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4121()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4122()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4123()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      ;
}
 @Test(timeout = 4000)
  public void test4124()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4125()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4126()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4127()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4128()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4129()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4130()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4131()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4132()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4133()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4134()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4135()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4136()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4137()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4138()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4139()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4140()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      ;
}
 @Test(timeout = 4000)
  public void test4141()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4142()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4143()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4144()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4145()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4146()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4147()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4148()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4149()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4150()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4151()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4152()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4153()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4154()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4155()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4156()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4157()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4158()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4159()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4160()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4161()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4162()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4163()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4164()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4165()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4166()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      ;
}
 @Test(timeout = 4000)
  public void test4167()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4168()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4169()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4170()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4171()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4172()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4173()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4174()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4175()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4176()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4177()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4178()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4179()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4180()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4181()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4182()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4183()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4184()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4185()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4186()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4187()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4188()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4189()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4190()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4191()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4192()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4193()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4194()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4195()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4196()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4197()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4198()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4199()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4200()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4201()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4202()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4203()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("spark.Service$1");
      Service service2 = service1.externalStaticFileLocation("spark.Service$1");
      Service service3 = service2.threadPool(92);
      Service service4 = service3.secure("spark.Service$1", "", "$?P.rC#U'Gu?", "$?P.rC#U'Gu?", false);
      Service service5 = service4.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4204()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4205()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4206()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      ;
}
 @Test(timeout = 4000)
  public void test4207()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      ;
}
 @Test(timeout = 4000)
  public void test4208()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      ;
}
 @Test(timeout = 4000)
  public void test4209()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      ;
}
 @Test(timeout = 4000)
  public void test4210()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      ;
}
 @Test(timeout = 4000)
  public void test4211()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4212()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4213()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4214()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4215()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4216()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4217()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4218()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4219()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4220()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      ;
}
 @Test(timeout = 4000)
  public void test4221()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4222()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4223()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4224()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4225()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4226()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4227()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4228()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4229()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4230()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4231()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4232()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4233()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      ;
}
 @Test(timeout = 4000)
  public void test4234()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4235()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4236()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4237()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4238()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4239()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4240()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4241()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4242()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4243()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4244()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4245()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4246()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4247()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4248()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4249()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4250()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4251()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4252()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4253()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4254()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4255()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4256()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4257()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4258()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4259()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4260()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4261()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4262()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4263()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4264()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4265()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4266()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4267()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4268()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4269()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4270()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4271()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4272()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4273()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4274()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4275()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4276()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4277()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4278()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4279()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4280()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4281()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4282()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4283()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4284()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4285()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = null;
      service0.threadIdleTimeoutMillis = 0;
      Service service1 = service0.secure("z<='LC6pF|N|\",Z", "jetty/", (String) null, "z<='LC6pF|N|\",Z");
      String string1 = "ignore push in {}";
      Service service2 = service1.secure("", "jetty/", "LmMp#=dSB-8jZ;{2", "ignore push in {}", "");
      Service service3 = service1.secure("", (String) null, "jetty/", "[L+N!%", true);
      Service service4 = service2.threadPool(4567);
      Service service5 = service4.secure("z<='LC6pF|N|\",Z", "onKt$0z8`", "Pf^>7Xbyc_7L0\"0T", " could not connect to database; will try later", "ignore push in {}", true);
      ;
}
 @Test(timeout = 4000)
  public void test4286()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4287()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4288()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      ;
}
 @Test(timeout = 4000)
  public void test4289()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      ;
}
 @Test(timeout = 4000)
  public void test4290()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      ;
}
 @Test(timeout = 4000)
  public void test4291()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      ;
}
 @Test(timeout = 4000)
  public void test4292()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      ;
}
 @Test(timeout = 4000)
  public void test4293()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4294()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4295()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4296()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4297()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4298()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4299()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4300()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4301()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4302()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      ;
}
 @Test(timeout = 4000)
  public void test4303()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4304()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4305()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4306()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4307()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4308()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4309()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4310()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4311()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4312()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4313()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4314()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4315()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4316()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4317()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4318()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4319()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      ;
}
 @Test(timeout = 4000)
  public void test4320()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4321()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4322()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4323()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4324()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4325()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4326()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4327()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4328()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4329()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4330()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4331()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4332()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4333()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4334()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4335()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4336()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4337()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4338()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4339()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4340()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4341()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4342()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4343()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4344()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4345()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      ;
}
 @Test(timeout = 4000)
  public void test4346()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      assertEquals(service4, templateViewRouteImpl0);
}
 @Test(timeout = 4000)
  public void test4347()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      assertEquals(service4, responseTransformerRouteImpl0);
}
 @Test(timeout = 4000)
  public void test4348()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4349()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4350()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4351()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4352()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4353()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4354()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4355()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4356()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4357()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4358()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4359()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4360()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4361()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4362()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4363()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4364()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4365()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4366()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4367()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4368()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4369()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4370()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4371()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4372()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure(" '", " '", " '", " '");
      String string0 = "SSLv3";
      String string1 = "Ua*Nl4eb&U";
      boolean boolean0 = true;
      Service service2 = service1.secure(" '", " '", "SSLv3", "Ua*Nl4eb&U", "`ZmVF>", true);
      Service service3 = service2.staticFileLocation("Configuring web-jetty.xml");
      Service service4 = service3.secure("Ua*Nl4eb&U", "`ZmVF>", "", "Ua*Nl4eb&U", false);
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" '", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "`ZmVF>", (Route) templateViewRouteImpl0, responseTransformer0);
      service4.addRoute(httpMethod0, (RouteImpl) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4373()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4374()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4375()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      ;
}
 @Test(timeout = 4000)
  public void test4376()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      ;
}
 @Test(timeout = 4000)
  public void test4377()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      ;
}
 @Test(timeout = 4000)
  public void test4378()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      ;
}
 @Test(timeout = 4000)
  public void test4379()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "SWdOf+E&Pw.${q|=N", "B", " [");
      ;
}
 @Test(timeout = 4000)
  public void test4380()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4381()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4382()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4383()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4384()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4385()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4386()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4387()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4388()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4389()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4390()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4391()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4392()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4393()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4394()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4395()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4396()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      ;
}
 @Test(timeout = 4000)
  public void test4397()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4398()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4399()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4400()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4401()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4402()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4403()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4404()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4405()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4406()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4407()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4408()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4409()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4410()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4411()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4412()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4413()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4414()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4415()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4416()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4417()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4418()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4419()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      ;
}
 @Test(timeout = 4000)
  public void test4420()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4421()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4422()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4423()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4424()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4425()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4426()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4427()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4428()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4429()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4430()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4431()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4432()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4433()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4434()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4435()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4436()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4437()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4438()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4439()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4440()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4441()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4442()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4443()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4444()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4445()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("_eqe2cQz;", "", "", "_eqe2cQz;", "", false);
      Service service2 = service1.secure("_eqe2cQz;", "_eqe2cQz;", "WebSocket path cannot be null", "", false);
      int int0 = 0;
      service1.awaitStop();
      Service service3 = service2.threadPool(0, 4567, (-769));
      String string1 = "Tdb1FI:-oNpBgY}Tn";
      Service service4 = service3.secure("Static file location has already been set", "", "_eqe2cQz;", (String) null, "Tdb1FI:-oNpBgY}Tn");
      ;
}
 @Test(timeout = 4000)
  public void test4446()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4447()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4448()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      ;
}
 @Test(timeout = 4000)
  public void test4449()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      ;
}
 @Test(timeout = 4000)
  public void test4450()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      ;
}
 @Test(timeout = 4000)
  public void test4451()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      ;
}
 @Test(timeout = 4000)
  public void test4452()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      ;
}
 @Test(timeout = 4000)
  public void test4453()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test4454()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4455()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      service1.notFound((Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4456()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      service1.notFound((Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4457()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      service1.notFound((Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4458()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("CAUSED BY %s%n");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("CAUSED BY %s%n", (Route) templateViewRouteImpl0);
      service1.notFound((Route) routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4459()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4460()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4461()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4462()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4463()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4464()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4465()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      ;
}
 @Test(timeout = 4000)
  public void test4466()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4467()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4468()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4469()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4470()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4471()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4472()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4473()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4474()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4475()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      ;
}
 @Test(timeout = 4000)
  public void test4476()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      ;
}
 @Test(timeout = 4000)
  public void test4477()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4478()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4479()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4480()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4481()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4482()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4483()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4484()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4485()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.threadPool(4567, (-4302), (-4302));
      HttpMethod httpMethod0 = HttpMethod.delete;
      RouteImpl routeImpl0 = RouteImpl.create("", "Executor must not be null!", (Route) null);
      service2.addRoute(httpMethod0, routeImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4486()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4487()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4488()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      ;
}
 @Test(timeout = 4000)
  public void test4489()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      ;
}
 @Test(timeout = 4000)
  public void test4490()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      ;
}
 @Test(timeout = 4000)
  public void test4491()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      ;
}
 @Test(timeout = 4000)
  public void test4492()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      ;
}
 @Test(timeout = 4000)
  public void test4493()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4494()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4495()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4496()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4497()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4498()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4499()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4500()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4501()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4502()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      ;
}
 @Test(timeout = 4000)
  public void test4503()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4504()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4505()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4506()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4507()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4508()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4509()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4510()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4511()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4512()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4513()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4514()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4515()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4516()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4517()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4518()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4519()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      ;
}
 @Test(timeout = 4000)
  public void test4520()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4521()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4522()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4523()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4524()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4525()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4526()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4527()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4528()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4529()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4530()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4531()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4532()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4533()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4534()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4535()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4536()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      ;
}
 @Test(timeout = 4000)
  public void test4537()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(81);
      Service service2 = service1.secure("", "($", "", "*/*");
      Service service3 = service2.staticFileLocation("L!tr&xo?CH\"#");
      String string0 = service3.getPaths();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4538()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4539()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4540()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test4541()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test4542()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test4543()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test4544()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      ;
}
 @Test(timeout = 4000)
  public void test4545()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4546()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4547()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4548()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4549()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4550()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4551()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      ;
}
 @Test(timeout = 4000)
  public void test4552()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4553()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4554()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4555()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4556()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4557()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4558()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4559()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4560()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4561()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4562()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4563()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4564()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4565()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4566()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4567()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4568()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4569()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4570()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4571()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4572()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4573()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4574()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4575()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4576()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4577()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4578()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4579()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4580()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4581()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4582()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4583()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4584()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4585()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      ;
}
 @Test(timeout = 4000)
  public void test4586()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4587()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4588()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4589()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4590()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4591()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4592()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4593()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4594()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4595()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4596()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4597()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4598()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4599()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4600()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4601()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4602()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4603()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4604()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4605()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4606()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4607()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4608()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4609()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4610()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4611()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4612()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4613()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4614()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4615()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4616()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      ;
}
 @Test(timeout = 4000)
  public void test4617()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4618()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4619()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4620()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4621()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4622()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4623()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4624()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4625()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4626()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4627()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4628()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4629()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4630()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4631()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4632()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4633()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4634()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      ;
}
 @Test(timeout = 4000)
  public void test4635()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4636()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4637()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4638()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4639()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4640()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4641()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4642()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4643()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4644()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4645()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4646()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4647()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4648()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4649()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4650()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4651()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4652()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "T-\\$0JJ$";
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Service service2 = service0.secure("S2$i #d", "T-$0JJ$", "S2$i #d", "S2$i #d", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      int int0 = 32768;
      Service service4 = service3.threadPool(service2.SPARK_DEFAULT_PORT, service0.SPARK_DEFAULT_PORT, int0);
      Service service5 = service4.externalStaticFileLocation(string0);
      String string1 = "2l/";
      String string2 = "";
      service5.minThreads = service2.SPARK_DEFAULT_PORT;
      service3.init();
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service3.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4653()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4654()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4655()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      ;
}
 @Test(timeout = 4000)
  public void test4656()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      ;
}
 @Test(timeout = 4000)
  public void test4657()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      ;
}
 @Test(timeout = 4000)
  public void test4658()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      ;
}
 @Test(timeout = 4000)
  public void test4659()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      ;
}
 @Test(timeout = 4000)
  public void test4660()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4661()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4662()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4663()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      service_StaticFiles0.expireTime(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4664()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      service_StaticFiles0.expireTime(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4665()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      service_StaticFiles0.expireTime(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4666()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "3c,+^t0oI,FAyv(bH", "9<9Z3\"ZueU<X<W.G%", "H");
      Service.StaticFiles service_StaticFiles0 = service1.new StaticFiles();
      service_StaticFiles0.expireTime(4567);
      ;
}
 @Test(timeout = 4000)
  public void test4667()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4668()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4669()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      ;
}
 @Test(timeout = 4000)
  public void test4670()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      ;
}
 @Test(timeout = 4000)
  public void test4671()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      ;
}
 @Test(timeout = 4000)
  public void test4672()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      ;
}
 @Test(timeout = 4000)
  public void test4673()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "&m9gK<";
      Service service1 = service0.staticFileLocation("&m9gK<");
      ;
}
 @Test(timeout = 4000)
  public void test4674()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4675()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4676()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4677()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4678()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4679()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4680()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      ;
}
 @Test(timeout = 4000)
  public void test4681()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test4682()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      ;
}
 @Test(timeout = 4000)
  public void test4683()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      service1.notFound((Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4684()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      service1.notFound((Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4685()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      service1.notFound((Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4686()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("]4Lr", "]4Lr", "", "", true);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("]4Lr", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("DSTa8!{<_xY|", "NwcqN$1,8Mrt/CoW<", (Route) templateViewRouteImpl0, responseTransformer0);
      service1.notFound((Route) responseTransformerRouteImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test4687()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4688()  throws Throwable  {
      Service service0 = Service.ignite();
      assertNotNull(service0);
}
 @Test(timeout = 4000)
  public void test4689()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4690()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4691()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4692()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4693()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test4694()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4695()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4696()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4697()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4698()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4699()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4700()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4701()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4702()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4703()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Service service2 = service1.webSocketIdleTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4704()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4705()  throws Throwable  {
      Service service0 = Service.ignite();
      ;
}
 @Test(timeout = 4000)
  public void test4706()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4707()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4708()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4709()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4710()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4711()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4712()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4713()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4714()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4715()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4716()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4717()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4718()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4719()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4720()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      ;
}
 @Test(timeout = 4000)
  public void test4721()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4722()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4723()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4724()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      ;
}
 @Test(timeout = 4000)
  public void test4725()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4726()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4727()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4728()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4729()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4730()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4731()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4732()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4733()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "= d3Nn}W-ooKlu", (String) null, "");
      Service service2 = service1.port(276);
      Service.StaticFiles service_StaticFiles0 = service2.new StaticFiles();
      service_StaticFiles0.disableMimeTypeGuessing();
      ;
}
 @Test(timeout = 4000)
  public void test4734()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.embeddedServerIdentifier();
      service0.awaitStop();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service0.path(",$d5s", routeGroup0);
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service0.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test4735()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.path("7D:(yoko:7w=jP8", (RouteGroup) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4736()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.secure("", "", "", "", "");
      Service service3 = service2.webSocketIdleTimeoutMillis(0);
      service3.awaitStop();
      ;
}
 @Test(timeout = 4000)
  public void test4737()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.internalServerError("'O1J<!ch'@(iv#s");
      ;
}
 @Test(timeout = 4000)
  public void test4738()  throws Throwable  {
      Service service0 = Service.ignite();
      Service.StaticFiles service_StaticFiles0 = service0.new StaticFiles();
      service_StaticFiles0.externalLocation("");
  }
 @Test(timeout = 4000)
  public void test4739()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("x6", "x6", "x6", "", false);
      Service service2 = service1.ipAddress("");
      Service service3 = service2.threadPool(4567);
      // Undeclared exception!
      try { 
        service3.halt("x6");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4740()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("U1'W\"7C", "U1'W\"7C", "RH&H,L;SCm(,},V/1xD", "U1'W\"7C", "ignite failed");
      ;
}
 @Test(timeout = 4000)
  public void test4741()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.unmap("&!");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4742()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "5'** 0";
      Service service1 = service0.webSocketIdleTimeoutMillis(4567);
      String string1 = "";
      String string2 = "ignite failed";
      String string3 = "";
      boolean boolean0 = true;
      Service service2 = service1.secure(string0, string1, string2, string0, string3, boolean0);
      String string4 = "`vV^ m]8;Z!B*nT0re";
      Service service3 = service2.secure(string2, string0, string4, string0, boolean0);
      Service service4 = service3.externalStaticFileLocation(string0);
      int int0 = (-155);
      int int1 = 140;
      Service service5 = service4.threadPool(int0, int1, service0.SPARK_DEFAULT_PORT);
      ;
}
 @Test(timeout = 4000)
  public void test4743()  throws Throwable  {
      Service service0 = Service.ignite();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      service0.staticFiles.headers(map0);
      // Undeclared exception!
      try { 
        service0.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4744()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.head;
      FilterImpl filterImpl0 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl0).toString();
      doReturn("").when(filterImpl0).getAcceptType();
      doReturn("/GYNN6").when(filterImpl0).getPath();
      FilterImpl filterImpl1 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn(filterImpl0).when(filterImpl1).withPrefix(anyString());
      service0.addFilter(httpMethod0, filterImpl1);
      FilterImpl filterImpl2 = mock(FilterImpl.class, new ViolatedAssumptionAnswer());
      doReturn("/GYNN6").when(filterImpl2).getAcceptType();
      doReturn("/GYNN6").when(filterImpl2).getPath();
      service0.addFilter("/GYNN6", filterImpl2);
      // Undeclared exception!
      try { 
        service0.threadPool(4567, 124, 4567);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4745()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = " 3!bXoIK5^ZQYfL";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" 3!bXoIK5^ZQYfL", " 3!bXoIK5^ZQYfL", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(" 3!bXoIK5^ZQYfL", (Route) templateViewRouteImpl0, responseTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create(" 3!bXoIK5^ZQYfL", " 3!bXoIK5^ZQYfL", (Route) responseTransformerRouteImpl0);
      service0.addRoute(" 3!bXoIK5^ZQYfL", routeImpl0);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4746()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "";
      Service service1 = service0.secure("", "", "", "", "");
      service1.init();
      // Undeclared exception!
      try { 
        service0.port(4567);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4747()  throws Throwable  {
      Service service0 = Service.ignite();
      HttpMethod httpMethod0 = HttpMethod.connect;
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("n", "n", templateViewRoute0, templateEngine0);
      service0.addRoute(httpMethod0, (RouteImpl) templateViewRouteImpl0);
      // Undeclared exception!
      try { 
        service0.ipAddress("n");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4748()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567, 4567, 4567);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service0.initExceptionHandler(consumer0);
      service1.initialized = true;
      // Undeclared exception!
      try { 
        service1.webSocketIdleTimeoutMillis(0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4749()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(",", templateViewRoute0, templateEngine0);
      service0.threadPool(24, 24, 24);
      service0.activeThreadCount();
      service1.addRoute("yty|j_=z4o3Q", (RouteImpl) templateViewRouteImpl0);
      service1.unmap("yty|j_=z4o3Q");
      service1.stop();
      // Undeclared exception!
      try { 
        service0.halt(0, "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4750()  throws Throwable  {
      Service service0 = Service.ignite();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "", (Route) null, responseTransformer0);
      service0.addRoute("6", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.externalStaticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4751()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "s";
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("s", "s", (Route) null, responseTransformer0);
      service0.addRoute("s", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.externalStaticFileLocation("s");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4752()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "/*";
      service0.staticFiles.header("/*", "/*");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        service0.webSocket("/*", class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test4753()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.awaitStop();
      // Undeclared exception!
      try { 
        service0.routes();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4754()  throws Throwable  {
      Service service0 = Service.ignite();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        service0.secure((String) null, (String) null, (String) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4755()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.halt();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4756()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("always");
      service1.stop();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, (TemplateEngine) null);
      service0.internalServerError((Route) templateViewRouteImpl0);
      // Undeclared exception!
      try { 
        service1.awaitInitialization();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Server has not been properly initialized
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4757()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(" 3!bXoIhK5^ZQYfL", " 3!bXoIhK5^ZQYfL", templateViewRoute0, templateEngine0);
      service0.addRoute(" 3!bXoIhK5^ZQYfL", (RouteImpl) templateViewRouteImpl0);
      service0.port();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.embeddedServerIdentifier((Object) service0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4758()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", (TemplateViewRoute) null, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute("", (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service0.staticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4759()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      String string0 = "'";
      boolean boolean0 = false;
      Service service2 = service1.secure(string0, string0, string0, string0, boolean0);
      String string1 = "";
      TemplateViewRoute templateViewRoute0 = null;
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create(string1, templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(string1, (Route) templateViewRouteImpl0, responseTransformer0);
      service0.addRoute(string0, (RouteImpl) responseTransformerRouteImpl0);
      // Undeclared exception!
      try { 
        service2.staticFileLocation(string0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4760()  throws Throwable  {
      Service service0 = Service.ignite();
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      Class<Exception> class0 = Exception.class;
      service0.exception(class0, (ExceptionHandler<? super Exception>) null);
      service0.activeThreadCount();
      service0.path("", routeGroup0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.halt("");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4761()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "0.0.0.0";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("0.0.0.0", templateViewRoute0, templateEngine0);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("0.0.0.0", "0.0.0.0", (Route) templateViewRouteImpl0, responseTransformer0);
      service0.notFound((Route) responseTransformerRouteImpl0);
      service0.staticFiles.disableMimeTypeGuessing();
      // Undeclared exception!
      try { 
        service0.halt(4567);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4762()  throws Throwable  {
      Service service0 = Service.ignite();
      BadMessageException badMessageException0 = new BadMessageException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"+\"", "", badMessageException0);
      service0.embeddedServerIdentifier((Object) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        service0.unmap("", "\"+\"");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test4763()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(4567);
      Service service2 = Service.ignite();
      service0.internalServerError("Must provide a keystore file to run secured");
      service0.embeddedServerIdentifier();
      Service service3 = service0.staticFileLocation("Must provide a keystore file to run secured");
      service3.notFound("");
      service2.staticFiles.externalLocation("");
      service0.staticFiles.expireTime(4567);
      service0.staticFiles.registerMimeType("Must provide a keystore file to run secured", "");
      service1.staticFiles.location("Must provide a keystore file to run secured");
      service2.externalStaticFileLocation("Must provide a keystore file to run secured");
      // Undeclared exception!
      try { 
        service0.webSocket("Must provide a keystore file to run secured", (Object) service3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test4764()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.port();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // This must be done after route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }
