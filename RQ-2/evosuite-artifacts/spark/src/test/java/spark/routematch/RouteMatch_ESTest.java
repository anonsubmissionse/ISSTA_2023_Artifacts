/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:29 GMT 2022
 */

package spark.routematch;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.route.HttpMethod;
import spark.routematch.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RouteMatch_ESTest extends RouteMatch_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getTarget();
      assertNotNull(routeMatch0.getMatchUri());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getTarget();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getTarget();
      assertNotNull(routeMatch0.getRequestURI());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, (String) null, (String) null, "spark.routematch.RouteMatch");
      String string0 = routeMatch0.getRequestURI();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("spark.route.HttpMethod", "", "", "");
      String string0 = routeMatch0.getRequestURI();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getMatchUri();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getMatchUri();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getMatchUri();
      assertNotNull(routeMatch0.getRequestURI());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("spark.route.HttpMethod", "", "", "");
      String string0 = routeMatch0.getMatchUri();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("spark.route.HttpMethod", "", "", "");
      routeMatch0.getHttpMethod();
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      HttpMethod httpMethod0 = HttpMethod.head;
      RouteMatch routeMatch0 = new RouteMatch(object0, "afterafter", "afterafter", (String) null, httpMethod0);
      String string0 = routeMatch0.getAcceptType();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("spark.route.HttpMethod", "", "", "");
      String string0 = routeMatch0.getAcceptType();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, (String) null, (String) null, "spark.routematch.RouteMatch");
      String string0 = routeMatch0.getAcceptType();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, (String) null, (String) null, "spark.routematch.RouteMatch");
      Object object1 = routeMatch0.getTarget();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, (String) null, (String) null, "spark.routematch.RouteMatch");
      String string0 = routeMatch0.getMatchUri();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getHttpMethod();
      assertNotNull(routeMatch0.getRequestURI());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getHttpMethod();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      routeMatch0.getHttpMethod();
      assertNotNull(routeMatch0.getMatchUri());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getRequestURI();
      assertNotNull(routeMatch0.getMatchUri());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getRequestURI();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "$r", ";", "2?{F,KOK/", httpMethod0);
      String string0 = routeMatch0.getRequestURI();
      ;
}
}
