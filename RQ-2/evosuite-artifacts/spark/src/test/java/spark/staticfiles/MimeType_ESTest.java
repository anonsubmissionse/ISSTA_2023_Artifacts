/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:24 GMT 2022
 */

package spark.staticfiles;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.resource.AbstractFileResolvingResource;
import spark.resource.ClassPathResource;
import spark.staticfiles.MimeType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeType_ESTest extends MimeType_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("spark.resource.AbstractResource");
      String string0 = MimeType.fromResource(classPathResource0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("spark.resource.AbstractResource");
      String string0 = MimeType.fromResource(classPathResource0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = MimeType.getMimeType("");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      String string0 = MimeType.fromResource(classPathResource0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      String string0 = MimeType.fromResource(classPathResource0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.getMimeType((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.staticfiles.MimeType", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.fromResource((AbstractFileResolvingResource) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.staticfiles.MimeType", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.fromPathInfo((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.staticfiles.MimeType", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MimeType mimeType0 = new MimeType();
      MimeType.getMimeType("K@=lh=TRs@)=l");
      MimeType.register("IU", "Wf3zT0xfY: ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setDefaultAssertionStatus(false);
      ClassPathResource classPathResource0 = new ClassPathResource("]Z", classLoader0);
      classLoader0.setDefaultAssertionStatus(false);
      classPathResource0.toString();
      classPathResource0.createRelative("url:");
      MimeType.fromResource(classPathResource0);
      String string0 = MimeType.fromPathInfo("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MimeType mimeType0 = new MimeType();
      MimeType.getMimeType("K@=lh=TRs@)=l");
      MimeType.register("IU", "Wf3zT0xfY: ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setDefaultAssertionStatus(false);
      ClassPathResource classPathResource0 = new ClassPathResource("]Z", classLoader0);
      classLoader0.setDefaultAssertionStatus(false);
      classPathResource0.toString();
      classPathResource0.createRelative("url:");
      MimeType.fromResource(classPathResource0);
      String string0 = MimeType.fromPathInfo("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MimeType mimeType0 = new MimeType();
      MimeType.getMimeType("K@=lh=TRs@)=l");
      MimeType.register("IU", "Wf3zT0xfY: ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setDefaultAssertionStatus(false);
      ClassPathResource classPathResource0 = new ClassPathResource("]Z", classLoader0);
      classLoader0.setDefaultAssertionStatus(false);
      classPathResource0.toString();
      classPathResource0.createRelative("url:");
      MimeType.fromResource(classPathResource0);
      String string0 = MimeType.fromPathInfo("");
      MimeType.register("", (String) null);
      MimeType.getMimeType("0j: |]u5");
      String string1 = MimeType.getMimeType("X");
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = MimeType.shouldGuess();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MimeType.disableGuessing();
      boolean boolean0 = MimeType.shouldGuess();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = MimeType.fromPathInfo("");
      ;
}
}
