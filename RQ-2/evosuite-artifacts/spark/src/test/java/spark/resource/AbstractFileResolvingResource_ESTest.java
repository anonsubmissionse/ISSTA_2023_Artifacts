/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:02:50 GMT 2022
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URLConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.ExternalResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFileResolvingResource_ESTest extends AbstractFileResolvingResource_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(".kSD0:D@NS`");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.customizeConnection(httpURLConnection0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("ghP5@Owa0gJ;%", classLoader0, class0);
      boolean boolean0 = classPathResource0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(".kSD0:D@NS`");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertTrue(file0.isDirectory());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(" cannot be resolved to URL because it does not exist");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" cannot be resolved to URL because it does not exist");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertEquals(0, file0.lastModified());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("HEAD");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("HEAD");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = externalResource0.getFile();
      assertTrue(file0.isDirectory());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("..");
      File file0 = externalResource0.getFile();
      assertEquals(0, file0.lastModified());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFile();
      assertEquals(1, file0.lastModified());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("", (ClassLoader) null);
      boolean boolean0 = classPathResource0.exists();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource("t+}/Fx%", classLoader0, class0);
      boolean boolean0 = classPathResource0.exists();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("spark.resource.AbstractFileResolvingResource");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Z^D7M@3L");
      ExternalResource externalResource0 = new ExternalResource("spark.resource.AbstractFileResolvingResource");
      long long0 = externalResource0.contentLength();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("z%B).4zi7&SUS;}");
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // class path resource [z%B).4zi7&SUS;}] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.isReadable();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("spark.resource.AbstractFileResolvingResource", classLoader0);
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // class path resource [spark.resource.AbstractFileResolvingResource] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader1);
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("&)o");
      // Undeclared exception!
      try { 
        externalResource0.customizeConnection((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("b-Pg&*js`_9=7Xy");
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // class path resource [b-Pg&*js`_9=7Xy] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("jME>w.");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.customizeConnection(httpURLConnection0);
      assertNotNull(externalResource0.getPath());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(" cannot be resolved to URL because it does not exist");
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.customizeConnection(uRLConnection0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(" cannot be resolved to URL because it does not exist");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" cannot be resolved to URL because it does not exist");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " cannot be resolved to URL because it does not exist");
      boolean boolean0 = externalResource0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(" cannot be resolved to URL because it does not exist");
      boolean boolean0 = externalResource0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      boolean boolean0 = externalResource0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      long long0 = externalResource0.lastModified();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      long long0 = classPathResource0.contentLength();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      // Undeclared exception!
      try { 
        classPathResource0.customizeConnection((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.AbstractFileResolvingResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
