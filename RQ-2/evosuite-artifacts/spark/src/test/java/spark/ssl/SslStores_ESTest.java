/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:03 GMT 2022
 */

package spark.ssl;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.ssl.SslStores;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SslStores_ESTest extends SslStores_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      String string0 = sslStores0.trustStorePassword();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      sslStores0.keystoreFile = "?T2z0>Tjb$gCd_pZ6";
      String string0 = sslStores0.keystorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null, "");
      sslStores0.keystoreFile = "?T2z0>Tjb$gCd_pZ6";
      String string0 = sslStores0.keystorePassword();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("8=ib~`j)", "[nDV_a", "[nDV_a", (String) null, "[nDV_a");
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertTrue(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "63VL!k6[!CsZ");
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("Z!8gG*__MQR", "#R9[", "", "spark.ssl.SslStores");
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, (String) null, (String) null);
      String string0 = sslStores0.trustStoreFile();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, (String) null, (String) null);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("&~O!-he[>nsew&cprsp", "spark.ssl.SslStores", "", "spark.ssl.SslStores", "spark.ssl.SslStores", false);
      String string0 = sslStores0.trustStoreFile();
      assertTrue(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, "dp", "", (String) null, true);
      boolean boolean0 = sslStores0.needsClientCert();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, "dp", "", (String) null, true);
      boolean boolean0 = sslStores0.needsClientCert();
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, "dp", "", (String) null, true);
      boolean boolean0 = sslStores0.needsClientCert();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", (String) null, "dp", "", (String) null, true);
      boolean boolean0 = sslStores0.needsClientCert();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(sslStores0.certAlias());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertTrue(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("nbD/Ke:", "nbD/Ke:", "", "", "nbD/Ke:", false);
      String string0 = sslStores0.keystorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, (String) null, (String) null);
      sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("*", "6CHEt&b(A-]r^?<R[:", "*", "6CHEt&b(A-]r^?<R[:", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, "V", (String) null, true);
      String string0 = sslStores0.trustStorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SslStores sslStores0 = SslStores.create((String) null, (String) null, "V", (String) null, true);
      String string0 = sslStores0.trustStorePassword();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("g2", (String) null, "g2", "g2", "g2", true);
      assertTrue(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.keystorePassword());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", ".P%E?IJ545blXmh", false);
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.trustStoreFile());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.keystoreFile());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertTrue(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertNotNull(sslStores0.trustStorePassword());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("($", "($", "($", "[|M+!K+z^D~Zc8!", "($");
      String string0 = sslStores0.certAlias();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystorePassword();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystorePassword();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "", false);
      String string0 = sslStores0.keystoreFile();
      assertFalse(sslStores0.needsClientCert());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "", false);
      String string0 = sslStores0.keystoreFile();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.certAlias();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("", "", "", "", "");
      String string0 = sslStores0.certAlias();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SslStores sslStores0 = SslStores.create("2n*f_y", "2n*f_y", "2n*f_y", "2n*f_y");
      boolean boolean0 = sslStores0.needsClientCert();
      assertTrue(boolean0);
}
}
