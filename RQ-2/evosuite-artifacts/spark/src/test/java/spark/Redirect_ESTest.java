/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:10 GMT 2022
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.Redirect;
import spark.Routable;
import spark.Service;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Redirect_ESTest extends Redirect_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.redirect.put("ZPEM@?`u)V@$rXG&f", "(!NqYv?D>J#>OA^^v");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.redirect.post("TEMPORARY_REDIRECT", "NOT_MODIFIED");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.redirect.any("bN", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Service service0 = Service.ignite();
      Redirect.Status redirect_Status0 = Redirect.Status.FOUND;
      service0.redirect.put("}8rX", "rEzOB4ZA8ntP{-", redirect_Status0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Service service0 = Service.ignite();
      Redirect.Status redirect_Status0 = Redirect.Status.USE_PROXY;
      service0.redirect.post("ra{iyj/h", "ra{iyj/h", redirect_Status0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Service service0 = Service.ignite();
      Redirect.Status redirect_Status0 = Redirect.Status.FOUND;
      service0.redirect.any("G F{_bK", "G F{_bK", redirect_Status0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("javax.servlet.include.request_uri");
      service1.initialized = true;
      // Undeclared exception!
      try { 
        service1.redirect.post("SWITCH_PROXY", "SWITCH_PROXY");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.initialized = true;
      Redirect.Status redirect_Status0 = Redirect.Status.TEMPORARY_REDIRECT;
      // Undeclared exception!
      try { 
        service0.redirect.get((String) null, "a)W#b=IB", redirect_Status0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      // Undeclared exception!
      try { 
        redirect0.get("$VALUES", "$VALUES");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      Redirect.Status redirect_Status0 = Redirect.Status.USE_PROXY;
      // Undeclared exception!
      try { 
        redirect0.delete("9FZ2", "9FZ2", redirect_Status0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      // Undeclared exception!
      try { 
        redirect0.delete("", "text/plain");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      // Undeclared exception!
      try { 
        redirect0.any("q", "q");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      Redirect.Status redirect_Status0 = Redirect.Status.MULTIPLE_CHOICES;
      // Undeclared exception!
      try { 
        redirect0.any("", "f @~<vgrF\"q", redirect_Status0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      Redirect.Status redirect_Status0 = Redirect.Status.PERMANENT_REDIRECT;
      // Undeclared exception!
      try { 
        redirect0.post("V2Bg+4'#d(;#`*", "V2Bg+4'#d(;#`*", redirect_Status0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Service service0 = Service.ignite();
      Redirect.Status redirect_Status0 = Redirect.Status.SEE_OTHER;
      service0.redirect.delete("!|Q(Et", "!|Q(Et", redirect_Status0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Service service0 = Service.ignite();
      Redirect.Status redirect_Status0 = Redirect.Status.SEE_OTHER;
      service0.redirect.get("", "", redirect_Status0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      Redirect.Status redirect_Status0 = Redirect.Status.MULTIPLE_CHOICES;
      // Undeclared exception!
      try { 
        redirect0.put("", "", redirect_Status0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Redirect.Status redirect_Status0 = Redirect.Status.USE_PROXY;
      int int0 = redirect_Status0.intValue();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Redirect redirect0 = Redirect.create((Routable) null);
      // Undeclared exception!
      try { 
        redirect0.put("m-", "m-");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Redirect", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.redirect.delete("N'_ns-8{", "N'_ns-8{");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Service service0 = Service.ignite();
      service0.redirect.get("N'_ns-8{", "N'_ns-8{");
      ;
}
}
