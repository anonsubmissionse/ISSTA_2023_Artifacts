/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 17:21:25 GMT 2022
 */

package spark.embeddedserver.jetty;

import org.junit.Test;
import static org.junit.Assert.*;
import org.eclipse.jetty.util.thread.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.ExceptionMapper;
import spark.embeddedserver.EmbeddedServer;
import spark.embeddedserver.jetty.EmbeddedJettyFactory;
import spark.embeddedserver.jetty.JettyServer;
import spark.route.Routes;
import spark.staticfiles.StaticFilesConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedJettyFactory_ESTest extends EmbeddedJettyFactory_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JettyServer jettyServer0 = new JettyServer();
      EmbeddedJettyFactory embeddedJettyFactory0 = new EmbeddedJettyFactory(jettyServer0);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmbeddedJettyFactory embeddedJettyFactory0 = new EmbeddedJettyFactory();
      Routes routes0 = Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      ExceptionMapper exceptionMapper0 = new ExceptionMapper();
      EmbeddedServer embeddedServer0 = embeddedJettyFactory0.create(routes0, staticFilesConfiguration0, exceptionMapper0, true);
      assertNotNull(embeddedServer0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmbeddedJettyFactory embeddedJettyFactory0 = new EmbeddedJettyFactory();
      EmbeddedJettyFactory embeddedJettyFactory1 = embeddedJettyFactory0.withThreadPool((ThreadPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmbeddedJettyFactory embeddedJettyFactory0 = new EmbeddedJettyFactory();
      EmbeddedJettyFactory embeddedJettyFactory1 = embeddedJettyFactory0.withHttpOnly(true);
      ;
}
}
