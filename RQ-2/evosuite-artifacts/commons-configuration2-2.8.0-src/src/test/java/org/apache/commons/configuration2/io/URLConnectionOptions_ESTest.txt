 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setReadTimeoutMillis(29);
      uRLConnectionOptions0.setUseCaches(true);
      assertEquals(1, uRLConnectionOptions0.getReadTimeoutMillis());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setConnectTimeoutMillis(1801);
      uRLConnectionOptions0.setUseCaches(true);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      uRLConnectionOptions1.setReadTimeoutMillis((-3874));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      uRLConnectionOptions1.setReadTimeoutMillis((-3874));
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions0.setReadTimeoutMillis(3145);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setAllowUserInteraction(true);
      uRLConnectionOptions1.DEFAULT.setUseCaches(true);
      assertTrue(uRLConnectionOptions0.getAllowUserInteraction());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("URLConnectionOptions [allowUserInteraction=false, connectTimeoutMillis=0, readTimeoutMillis=0, useCaches=false]", (String) null, 1511, "ZP", (URLStreamHandler) defaultURLStreamHandler0);
      uRLConnectionOptions0.openConnection(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("", "W4", 1667, "W4", (URLStreamHandler) defaultURLStreamHandler0);
      uRLConnectionOptions0.setReadTimeoutMillis(29);
      uRLConnectionOptions0.openConnection(uRL0);
      assertEquals(0, uRLConnectionOptions0.getReadTimeoutMillis());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("m.~kd1tnul@,+", ".app.log", 0, "", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("m.~kd1tnul@,+", ".app.log", 0, "", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
      assertEquals(0, uRLConnection0.getReadTimeout());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("m.~kd1tnul@,+", ".app.log", 0, "", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
      assertEquals(0, uRLConnection0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setReadTimeoutMillis(3);
      int int0 = uRLConnectionOptions1.getReadTimeoutMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setReadTimeoutMillis((-3874));
      int int0 = uRLConnectionOptions0.getReadTimeoutMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis(1801);
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis((-2078));
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis((-2078));
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.getAllowUserInteraction();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      int int0 = 0;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis(0);
      URLConnectionOptions uRLConnectionOptions2 = uRLConnectionOptions1.DEFAULT.setAllowUserInteraction(false);
      uRLConnectionOptions2.DEFAULT.setAllowUserInteraction(true);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileName) null).when(fileObject0).getName();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject1).getContent();
      FileObject fileObject2 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject2).isFile();
      doReturn(fileObject0).when(fileObject2).resolveFile(anyString());
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject1, fileObject2).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.io.filefilter.AgeFileFilter", "org.apache.commons.io.filefilter.AgeFileFilter", 0, "org.apache.commons.io.filefilter.AgeFileFilter", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      uRLConnectionOptions2.apply(uRLConnection0);
      try { 
        MockURL.URL(uRL0, "org.apache.commons.io.filefilter.AgeFileFilter", (URLStreamHandler) defaultURLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.io.filefilter.AgeFileFilter", "org.apache.commons.io.filefilter.AgeFileFilter", 0, "org.apache.commons.io.filefilter.AgeFileFilter", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
      assertEquals(0, uRLConnection1.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.io.filefilter.AgeFileFilter", "org.apache.commons.io.filefilter.AgeFileFilter", 0, "org.apache.commons.io.filefilter.AgeFileFilter", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
      assertTrue(uRLConnection1.getUseCaches());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.io.filefilter.AgeFileFilter", "org.apache.commons.io.filefilter.AgeFileFilter", 0, "org.apache.commons.io.filefilter.AgeFileFilter", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
      assertEquals(1, uRLConnection1.getReadTimeout());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.openConnection(uRL0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.URLConnectionOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("", "W4", 1667, "W4", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
      assertEquals(0, uRLConnection0.getReadTimeout());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("", "W4", 1667, "W4", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
      assertEquals(0, uRLConnection0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnection uRLConnection0 = null;
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.apply(uRLConnection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.URLConnectionOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = uRLConnectionOptions0.openConnection(uRL0);
      uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.apply(uRLConnection0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = null;
      try {
        uRLConnectionOptions0 = new URLConnectionOptions((URLConnectionOptions) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.URLConnectionOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
      assertFalse(uRLConnectionOptions0.getAllowUserInteraction());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions1.DEFAULT.setAllowUserInteraction(true);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.getUseCaches();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      int int0 = uRLConnectionOptions0.getConnectTimeoutMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = uRLConnectionOptions0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions0);
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      String string0 = uRLConnectionOptions0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.DEFAULT.hashCode();
      assertTrue(uRLConnectionOptions0.getUseCaches());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
      ;
}
