/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:03:57 GMT 2022
 */

package org.apache.commons.configuration2.reloading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.PropertiesConfigurationLayout;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.event.EventListener;
import org.apache.commons.configuration2.event.EventType;
import org.apache.commons.configuration2.io.FileHandler;
import org.apache.commons.configuration2.reloading.ManagedReloadingDetector;
import org.apache.commons.configuration2.reloading.ReloadingController;
import org.apache.commons.configuration2.reloading.ReloadingDetector;
import org.apache.commons.configuration2.reloading.VFSFileHandlerReloadingDetector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReloadingController_ESTest extends ReloadingController_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = propertiesConfiguration0.getLayout();
      reloadingController0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.checkForReloading(managedReloadingDetector0);
      boolean boolean0 = reloadingController0.isInReloadingState();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0, 1048576L);
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      // Undeclared exception!
      try { 
        reloadingController0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerRegistrationData", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      ReloadingDetector reloadingDetector0 = reloadingController0.getDetector();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      boolean boolean0 = reloadingController0.isInReloadingState();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      reloadingController0.resetReloadingState();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.resetReloadingState();
      assertTrue(reloadingController0.isInReloadingState());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.checkForReloading(managedReloadingDetector0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.checkForReloading(managedReloadingDetector0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ReloadingController reloadingController0 = null;
      try {
        reloadingController0 = new ReloadingController((ReloadingDetector) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReloadingDetector must not be null!
         //
         verifyException("org.apache.commons.configuration2.reloading.ReloadingController", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      boolean boolean0 = reloadingController0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      boolean boolean0 = reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      assertTrue(boolean0);
}
}
