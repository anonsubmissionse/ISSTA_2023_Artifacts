/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:04:07 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import javax.naming.CompositeName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.SubsetConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.XMLDocumentHelper;
import org.apache.commons.configuration2.convert.DisabledListDelimiterHandler;
import org.apache.commons.configuration2.convert.ListDelimiterHandler;
import org.apache.commons.configuration2.io.FileLocator;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.InMemoryNodeModel;
import org.apache.commons.configuration2.tree.NodeCombiner;
import org.apache.commons.configuration2.tree.NodeModel;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.ReferenceNodeHandler;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowOutputBinary180;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.EntityResolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLConfiguration_ESTest extends XMLConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPropertyInternal("configuration", "configuration");
      xMLConfiguration0.addPropertyInternal("configuration", xMLConfiguration0);
      xMLConfiguration0.validate();
      assertTrue(xMLConfiguration0.isValidating());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ">*X.-T,by2E_|!AP", "kr$?");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, "", "");
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      NodeSelector nodeSelector0 = new NodeSelector("[%f%/>L4\"b");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      // Undeclared exception!
      try { 
        xMLConfiguration_XMLBuilderVisitor0.insert((ImmutableNode) null, (ImmutableNode) null, (ImmutableNode) null, (ImmutableNode) null, referenceNodeHandler0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine parent! null is not part of this model.
         //
         verifyException("org.apache.commons.configuration2.tree.TreeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument("D7");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, "H;_SjEEXPn.", (String) null);
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      InMemoryNodeModel inMemoryNodeModel0 = xMLConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      // Undeclared exception!
      try { 
        xMLConfiguration_XMLBuilderVisitor0.update((ImmutableNode) null, (Object) null, referenceNodeHandler0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine parent! null is not part of this model.
         //
         verifyException("org.apache.commons.configuration2.tree.TreeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180(1414, 0);
      rowOutputBinary180_0.writeDouble(2.147483649E9);
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException("org.apache.commons.configuration2.XMLConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      boolean boolean0 = xMLConfiguration0.isValidating();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      xMLConfiguration0.setSchemaValidation(true);
      boolean boolean0 = xMLConfiguration0.isSchemaValidation();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID("vfs.operation/operation-provider-already-added.error");
      String string0 = xMLConfiguration0.getSystemID();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID("");
      String string0 = xMLConfiguration0.getSystemID();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName("");
      String string0 = xMLConfiguration0.getRootElementNameInternal();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID("i{");
      String string0 = xMLConfiguration0.getPublicID();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID("");
      String string0 = xMLConfiguration0.getPublicID();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      xMLConfiguration0.setEntityResolver((EntityResolver) null);
      EntityResolver entityResolver0 = xMLConfiguration0.getEntityResolver();
      assertNotNull(entityResolver0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      DocumentBuilder documentBuilder0 = xMLConfiguration0.createDocumentBuilder();
      xMLConfiguration0.setDocumentBuilder(documentBuilder0);
      DocumentBuilder documentBuilder1 = xMLConfiguration0.getDocumentBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName("H;_SjEEXPn.");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      try { 
        xMLConfiguration0.write((Writer) null, transformer0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: Result object passed to ''{0}'' is invalid.
         //
         verifyException("org.apache.commons.configuration2.XMLDocumentHelper", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(dynamicCombinedConfiguration0);
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) null, (Transformer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.XMLDocumentHelper", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      try { 
        xMLConfiguration0.write((Writer) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: Result object passed to ''{0}'' is invalid.
         //
         verifyException("org.apache.commons.configuration2.XMLDocumentHelper", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName("#eGs N=fp{*d2dGb");
      // Undeclared exception!
      try { 
        xMLConfiguration0.validate();
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(combinedConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("SBZHxVLZ9(");
      NodeSelector nodeSelector0 = new NodeSelector("SBZHxVLZ9(");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(subnodeConfiguration1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@47[keys=[SBZHxVLZ9(]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      NodeSelector nodeSelector0 = new NodeSelector("Unable to load the configuration");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ">*X.-T,by2E_|!AP", "kr$?");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, "", "");
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      NodeSelector nodeSelector0 = new NodeSelector("[%f%/>L4\"b");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.handleRemovedNodes(referenceNodeHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(dynamicCombinedConfiguration0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      Document document0 = xMLConfiguration0.getDocument();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      DocumentBuilder documentBuilder0 = xMLConfiguration0.getDocumentBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      boolean boolean0 = xMLConfiguration0.isValidating();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument("KPDSS_SESSSTATE_NO_OPEN_HANDLES");
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, disabledListDelimiterHandler0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("KPDSS_SESSSTATE_NO_OPEN_HANDLES");
      CompositeName compositeName0 = new CompositeName("KPDSS_SESSSTATE_NO_OPEN_HANDLES");
      subnodeConfiguration0.addPropertyDirect("KPDSS_SESSSTATE_NO_OPEN_HANDLES", compositeName0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.processDocument(referenceNodeHandler0);
      assertTrue(xMLConfiguration_XMLBuilderVisitor0.terminate());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument("KPDSS_SESSSTATE_NO_OPEN_HANDLES");
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, disabledListDelimiterHandler0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("KPDSS_SESSSTATE_NO_OPEN_HANDLES");
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.processDocument(referenceNodeHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-2169), (-2169));
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Error parsing null
         //
         verifyException("org.apache.commons.configuration2.XMLConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPropertyInternal("", xMLConfiguration0);
      xMLConfiguration0.validate();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID("(");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      assertNotNull(transformer0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID("");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      assertNotNull(transformer0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter();
      xMLConfiguration0.write((Writer) stringWriter0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setValidating(true);
      xMLConfiguration0.createDocumentBuilder();
      assertTrue(xMLConfiguration0.isValidating());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      DocumentBuilder documentBuilder0 = xMLConfiguration0.createDocumentBuilder();
      xMLConfiguration0.setDocumentBuilder(documentBuilder0);
      DocumentBuilder documentBuilder1 = xMLConfiguration0.createDocumentBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      xMLConfiguration0.setSchemaValidation(false);
      assertFalse(xMLConfiguration0.isValidating());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      xMLConfiguration0.setValidating(true);
      assertTrue(xMLConfiguration0.isSchemaValidation());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName("H;_SjEEXPn.");
      String string0 = xMLConfiguration0.getRootElementNameInternal();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      try { 
        xMLConfiguration0.validate();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Validation failed
         //
         verifyException("org.apache.commons.configuration2.XMLConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      boolean boolean0 = xMLConfiguration0.isSchemaValidation();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      EntityResolver entityResolver0 = xMLConfiguration0.getEntityResolver();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      String string0 = xMLConfiguration0.getSystemID();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-2169), (-2169));
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Load operation not properly initialized! Do not call read(InputStream) directly, but use a FileHandler to load a configuration.
         //
         verifyException("org.apache.commons.configuration2.XMLConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      try { 
        xMLConfiguration0.read((Reader) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Load operation not properly initialized! Do not call read(InputStream) directly, but use a FileHandler to load a configuration.
         //
         verifyException("org.apache.commons.configuration2.XMLConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      String string0 = xMLConfiguration0.getPublicID();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      xMLConfiguration0.setRootElementName("1nZeo4M");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) stringWriter0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
      }
  }
}
