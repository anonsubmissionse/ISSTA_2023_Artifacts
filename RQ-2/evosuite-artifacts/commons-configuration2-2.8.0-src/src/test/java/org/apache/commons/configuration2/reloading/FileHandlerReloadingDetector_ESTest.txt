 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      file0.setLastModified((byte)7);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      file0.setLastModified((byte)7);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      file0.setLastModified(1042L);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.refresh();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.updateLastModified((byte) (-120));
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(xMLConfiguration0);
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-470L));
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 1L);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 1L);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      assertEquals(0, fileHandlerReloadingDetector0.getRefreshDelay());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.getFile();
      assertEquals(1, fileHandlerReloadingDetector0.getRefreshDelay());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hashtable<String, NodeNameMatchers> hashtable0 = new Hashtable<String, NodeNameMatchers>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setPath(".ar");
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 3483L);
      fileHandlerReloadingDetector0.getFile();
      assertEquals(0, fileHandlerReloadingDetector0.getRefreshDelay());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      fileHandler0.setFileName("");
      fileHandlerReloadingDetector0.getFile();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFile();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.reloadingPerformed();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hashtable<String, ConfigurationEvent> hashtable0 = new Hashtable<String, ConfigurationEvent>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-1L));
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2208, "jar", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFileHandler();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("jar", "jar", 2234, "org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile("\u2191", "\u2191");
      fileHandler0.setFile(mockFile0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertEquals(0, fileHandlerReloadingDetector0.getRefreshDelay());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile("\u2191", "\u2191");
      fileHandler0.setFile(mockFile0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileUtil0.openOutputStreamElement("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.updateLastModified(1392409281377L);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileUtil0.openOutputStreamElement("org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.updateLastModified(1392409281377L);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertEquals(0, fileHandlerReloadingDetector0.getRefreshDelay());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.reloadingPerformed();
      assertEquals(0, fileHandlerReloadingDetector0.getRefreshDelay());
}
