/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:04:07 GMT 2022
 */

package org.apache.commons.configuration2.event;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Set;
import org.apache.commons.configuration2.event.Event;
import org.apache.commons.configuration2.event.EventType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventType_ESTest extends EventType_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, "");
      EventType<Event> eventType1 = new EventType<Event>(eventType0, "");
      boolean boolean0 = EventType.isInstanceOf(eventType1, (EventType<?>) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      EventType<Event> eventType1 = new EventType<Event>(eventType0, "");
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType1);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, "");
      EventType<Event> eventType1 = new EventType<Event>(eventType0, "");
      EventType<? super Event> eventType2 = eventType1.getSuperType();
      assertNotNull(eventType2.getName());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      String string0 = eventType0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, "%s [ %s ]");
      String string0 = eventType0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes((EventType<?>) null);
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, "");
      String string0 = eventType0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, "");
      EventType<? super Event> eventType1 = eventType0.getSuperType();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      boolean boolean0 = EventType.isInstanceOf(eventType0, eventType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      String string0 = eventType0.toString();
      assertNotNull(string0);
}
}
