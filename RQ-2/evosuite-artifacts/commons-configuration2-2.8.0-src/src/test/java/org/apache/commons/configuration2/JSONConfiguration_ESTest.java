/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:12:59 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.Writer;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.NodeModel;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONConfiguration_ESTest extends JSONConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(abstractYAMLBasedConfiguration0);
      PipedReader pipedReader0 = new PipedReader(251);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONConfiguration0.write(pipedWriter0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(jSONConfiguration0, "}@Gf*ym");
      TrackedNodeModel trackedNodeModel0 = mock(TrackedNodeModel.class, new ViolatedAssumptionAnswer());
      doReturn((NodeSelector) null).when(trackedNodeModel0).getSelector();
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(patternSubtreeConfigurationWrapper0, trackedNodeModel0);
      JSONConfiguration jSONConfiguration1 = null;
      try {
        jSONConfiguration1 = new JSONConfiguration(subnodeConfiguration0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: null
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      try { 
        jSONConfiguration0.read((InputStream) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException("org.apache.commons.configuration2.AbstractYAMLBasedConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(baseHierarchicalConfiguration0);
      // Undeclared exception!
      try { 
        jSONConfiguration0.write((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // argument \"w\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      try { 
        jSONConfiguration0.read((Reader) null);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException("org.apache.commons.configuration2.AbstractYAMLBasedConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      JSONConfiguration jSONConfiguration0 = null;
      try {
        jSONConfiguration0 = new JSONConfiguration(baseHierarchicalConfiguration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
}
