 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      try { 
        PropertyConverter.toColor(" object");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value  object can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("_am``Trn!\"Q&P");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      try { 
        PropertyConverter.toLocale(" can't be converted to a Path");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Path can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<DefaultLookups> class0 = DefaultLookups.class;
      try { 
        PropertyConverter.toNumber(inetAddress0, class0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Conversion error when trying to convert java.net.Inet4Address@0000000001 to org.apache.commons.configuration2.interpol.DefaultLookups
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1147);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      try { 
        PropertyConverter.toEnum((Object) integer0, class0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 1147 can't be converted to a org.apache.commons.configuration2.tree.NodeNameMatchers
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      try { 
        PropertyConverter.toDate("", "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      try { 
        PropertyConverter.toCalendar("Ambiguous statement, missing ';' between expression@", "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value Ambiguous statement, missing ';' between expression@ can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Calendar calendar0 = PropertyConverter.toCalendar("$", "$");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("jLblu-~aLoujadx1@f", "jLblu-~aLoujadx1@f", 0, "jLblu-~aLoujadx1@f", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, (FileSystemOptions) null);
      URL uRL0 = MockURL.URL("I92XoC6'EX9y;Mk0io", "I92XoC6'EX9y;Mk0io", 3, "I92XoC6'EX9y;Mk0io", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI("S:O");
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI("");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long((-1001L));
      Short short0 = PropertyConverter.toShort(long0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long long0 = new Long(902L);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
      Short short0 = PropertyConverter.toShort(bigDecimal0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("zpP", 4174);
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("`x=}]5tAZ&b;@e", (-1));
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(0L);
      Class<Locale> class0 = Locale.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float(0.75F);
      Class<Integer> class0 = Integer.class;
      Number number0 = PropertyConverter.toNumber(float0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(137438953504L);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Class<URL> class0 = URL.class;
      Number number0 = PropertyConverter.toNumber(double0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-60));
      Long long0 = PropertyConverter.toLong(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = PropertyConverter.toInteger(long0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short) (-4));
      Double double0 = PropertyConverter.toDouble(short0);
      Float float0 = PropertyConverter.toFloat(double0);
      Integer integer0 = PropertyConverter.toInteger(float0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Float float0 = PropertyConverter.toFloat(bigInteger0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-961));
      Float float0 = PropertyConverter.toFloat(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float float1 = PropertyConverter.toFloat(float0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" can't bK converted to a File");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " can't bK converted to a File");
      File file0 = PropertyConverter.toFile(" can't bK converted to a File");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = PropertyConverter.toFile(".X00n$<pJwYay#b[V");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" can't bK converted to a File", " can't bK converted to a File");
      File file0 = PropertyConverter.toFile(mockFile0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = PropertyConverter.toFile("");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = PropertyConverter.toLong(short0);
      Double double0 = PropertyConverter.toDouble(long0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Double double1 = PropertyConverter.toDouble(double0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = PropertyConverter.toColor(color0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Color color0 = Color.YELLOW;
      Color color1 = PropertyConverter.toColor(color0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-23), 1793, (-2048472060));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2048472060));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, "0xjava.util.ArrayList@0000000001");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(70, (-1579), (-1579));
      mockGregorianCalendar0.setFirstDayOfWeek((-1579));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, " can't be converted to a ");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = PropertyConverter.toByte(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = PropertyConverter.toBoolean(boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(double0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-96));
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Long long0 = new Long((-1988L));
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      URL uRL0 = mockFile0.toURL();
      try { 
        PropertyConverter.toShort(uRL0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URL@0000000001 to java.lang.Short
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toShort((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toNumber((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = PropertyConverter.toFile(" can't bK converted to a File");
      try { 
        PropertyConverter.toLong(file0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.io.MockFile@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toLong((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInternetAddress((Object) null, "k");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      try { 
        PropertyConverter.toInteger(mockDate0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockDate@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInteger((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Character character0 = Character.valueOf('\'');
      try { 
        PropertyConverter.toInetAddress(character0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value ' can't be converted to a InetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Character character0 = Character.valueOf('{');
      try { 
        PropertyConverter.toFloat(character0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Character@0000000001 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toFloat((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toEnum((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      try { 
        PropertyConverter.toDouble(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDouble((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate(" can't be converted to a File", " can't be converted to a File");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar("Armenia (``Trn!\"Q&P)", "Armenia (``Trn!\"Q&P)");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.create("jLblu-~aLoujadx1@f");
      try { 
        PropertyConverter.toByte(uRI0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URI@0000000001 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toByte((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      try { 
        PropertyConverter.toBigInteger(locale0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.util.Locale@0000000001 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigInteger((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      try { 
        PropertyConverter.toBigDecimal(boolean0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Boolean@0000000001 to java.math.BigDecimal
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigDecimal((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      // Undeclared exception!
      try { 
        PropertyConverter.to(class0, (Object) null, defaultConversionHandler0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.isEnum((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("L?V`2`G7Xa9c");
      try { 
        PropertyConverter.toCalendar(pattern0, "L?V`2`G7Xa9c");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value L?V`2`G7Xa9c can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      try { 
        PropertyConverter.toDate((Object) null, "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value null can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      try { 
        PropertyConverter.toColor(boolean0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value false can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("lwR1u^,SrJ9P&qsPh3");
      try { 
        PropertyConverter.toLocale(inetAddress0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value lwR1u^,SrJ9P&qsPh3/200.42.42.0 can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      try { 
        PropertyConverter.toPattern(byte0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value -128 can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      try { 
        PropertyConverter.toURL(byte0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Short short0 = new Short((byte)0);
      try { 
        PropertyConverter.toURI(short0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = new Object();
      try { 
        PropertyConverter.toFile(object0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value java.lang.Object@82b4ca9 can't be converted to a File
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(double0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      try { 
        PropertyConverter.toDuration(locale0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value zh_TW can't be converted to a Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Float float0 = PropertyConverter.toFloat(bigDecimal0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      try { 
        PropertyConverter.toCharacter(boolean0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 'true' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(288);
      try { 
        PropertyConverter.toBoolean(charBuffer0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<URL> class0 = URL.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.net.URL can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.util.Calendar can't be converted to a Calendar
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Boolean> class0 = Boolean.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, uRI0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value file:///tmp/foo.bar can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar("0bjava.lang.Object@0000000002", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockDate mockDate0 = new MockDate((byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58);
      Calendar calendar0 = PropertyConverter.toCalendar(mockDate0, "S:O");
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate("3VO)iz.hW0", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = PropertyConverter.toDate(mockGregorianCalendar0, "_am_``Trn!\"Q&P");
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2036015195), (-2036015195), (-2036015195), (-2036015195), (-2036015195));
      Date date0 = PropertyConverter.toDate(mockDate0, "4Pn");
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup0 = PropertyConverter.toEnum((Object) double0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<DummyLookup> class0 = DummyLookup.class;
      try { 
        PropertyConverter.toEnum((Object) "1", class0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 1 can't be converted to a org.apache.commons.configuration2.interpol.DummyLookup
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup1 = PropertyConverter.toEnum((Object) dummyLookup0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      try { 
        PropertyConverter.toInternetAddress("C", "org.apache.commons.jexl2.parser.ParserTreeConstants");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value C can't be converted to an InternetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.toInternetAddress(defaultConversionHandler0, "org.apache.commons.configuration2.convert.DefaultConversionHandler");
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Integer integer0 = new Integer(813);
      try { 
        PropertyConverter.toInternetAddress(integer0, " can't be converted to a File");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 813 can't be converted to an InternetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      URI uRI0 = MockURI.aFTPURI;
      Class<InetAddress> class0 = InetAddress.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toArray(uRI0, class0, configurationInterpolator0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value ftp://foo.bar can't be converted to a InetAddress
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      try { 
        PropertyConverter.toColor("0bjava.lang.Object@0000000002");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 0bjava.lang.Object@0000000002 can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      try { 
        PropertyConverter.toColor("%.'|");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value %.'| can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        PropertyConverter.toColor("");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        PropertyConverter.toColor("#s=!=|s QSLi9+$");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value #s=!=|s QSLi9+$ can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Color color0 = Color.cyan;
      Color color1 = PropertyConverter.toColor(color0);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("&#");
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale("_am_``Trn!\"Q&P");
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = PropertyConverter.toLocale(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        PropertyConverter.toPattern("!:<mQnNTc.(<-N");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value !:<mQnNTc.(<-N can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("^!cDe+4t'5Kn+%");
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        PropertyConverter.toURL("7,lq y&93Mf;Zu-");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 7,lq y&93Mf;Zu- can't be converted to an URL
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = PropertyConverter.toURL(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        PropertyConverter.toURI("|_T|*+6(in:^)O8");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value |_T|*+6(in:^)O8 can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = PropertyConverter.toURI(uRI0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.toPath(defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value org.apache.commons.configuration2.convert.DefaultConversionHandler@1 can't be converted to a Path
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Path path0 = PropertyConverter.toPath("3VO)iz.hW0");
      Path path1 = PropertyConverter.toPath(path0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001", "0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001");
      Path path0 = PropertyConverter.toPath(file0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Path path0 = PropertyConverter.toPath("3VO)iz.hW0");
      File file0 = PropertyConverter.toFile(path0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1508);
      BigDecimal bigDecimal1 = PropertyConverter.toBigDecimal(bigDecimal0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = PropertyConverter.toBigInteger(bigInteger0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        PropertyConverter.toDuration("6");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert 6 to Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = PropertyConverter.toDuration(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(2874.9);
      Double double1 = PropertyConverter.toDouble(double0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Float float1 = PropertyConverter.toFloat(float0);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(1008L);
      Long long1 = PropertyConverter.toLong(long0);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Long long0 = PropertyConverter.toLong(float0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer('j');
      Integer integer1 = PropertyConverter.toInteger(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = PropertyConverter.toShort(short0);
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Byte byte1 = PropertyConverter.toByte(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Byte byte0 = PropertyConverter.toByte(bigDecimal0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Character character0 = PropertyConverter.toCharacter(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        PropertyConverter.toBoolean("java.lang.BDolean");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value java.lang.BDolean can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = PropertyConverter.toBoolean("1");
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      StringWriter stringWriter0 = new StringWriter('j');
      Class<Duration> class0 = Duration.class;
      try { 
        PropertyConverter.to(class0, stringWriter0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Duration
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Inet4Address inet4Address0 = (Inet4Address)PropertyConverter.to(class0, " can't be converted to a Boolean object", defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Color> class0 = Color.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.awt.Color can't be converted to a Color
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Float float0 = new Float(431.86);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, float0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value '431.86' (class java.lang.Float) can't be converted to a java.nio.CharBuffer object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, list0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value [] can't be converted to a Locale
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Pattern> class0 = Pattern.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.util.regex.Pattern can't be converted to a Pattern
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<URI> class0 = URI.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.net.URI can't be converted to an URI
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<File> class0 = File.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class java.io.File can't be converted to a File
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Class<Date> class0 = Date.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, byte0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value -46 can't be converted to a Date
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.math.BigInteger
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(0.0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      BigDecimal bigDecimal0 = (BigDecimal)PropertyConverter.to(class0, double0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000002 to java.lang.Float
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      Integer integer0 = PropertyConverter.toInteger(object0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short) (-1024));
      Object object0 = PropertyConverter.to(class0, short0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short) (-1024));
      Object object0 = PropertyConverter.to(class0, short0, defaultConversionHandler0);
      Double double0 = PropertyConverter.toDouble(object0);
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, dummyLookup0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.apache.commons.configuration2.interpol.DummyLookup@0000000001 to java.lang.Byte
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2763, 1314, 1314, 627, 627, 573);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Class<Long> class0 = Long.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        PropertyConverter.to(class0, inetAddress0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.Inet4Address@0000000001 to java.lang.Integer
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 'char' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Character> class0 = Character.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value 'class java.lang.Character' cannot be converted to a Character object!
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value boolean can't be converted to a Boolean object
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // The value class org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport can't be converted to a org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport
         //
         verifyException("org.apache.commons.configuration2.convert.PropertyConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
      assertTrue(boolean0);
}
