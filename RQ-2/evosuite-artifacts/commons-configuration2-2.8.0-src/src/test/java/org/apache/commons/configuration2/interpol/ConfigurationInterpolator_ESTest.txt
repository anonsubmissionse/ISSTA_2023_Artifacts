 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Object object0 = configurationInterpolator0.resolve(":");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("version");
      configurationInterpolator0.addDefaultLookup(lookup0);
      boolean boolean0 = configurationInterpolator0.removeDefaultLookup(lookup0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = configurationInterpolator0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate((Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.setParentInterpolator(configurationInterpolator0);
      ConfigurationInterpolator configurationInterpolator1 = configurationInterpolator0.getParentInterpolator();
      assertFalse(configurationInterpolator1.isEnableSubstitutionInVariables());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      HashMap<String, DummyLookup> hashMap0 = new HashMap<String, DummyLookup>();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      hashMap0.put("", dummyLookup0);
      configurationInterpolator0.registerLookups(hashMap0);
      Map<String, Lookup> map0 = configurationInterpolator0.getLookups();
      assertEquals(1, map0.size());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      LinkedHashSet<ExprLookup> linkedHashSet0 = new LinkedHashSet<ExprLookup>();
      linkedHashSet0.add(exprLookup0);
      configurationInterpolator0.addDefaultLookups(linkedHashSet0);
      List<Lookup> list0 = configurationInterpolator0.getDefaultLookups();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      ConfigurationInterpolator configurationInterpolator1 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      HashMap<String, ConstantLookup> hashMap0 = new HashMap<String, ConstantLookup>();
      ConstantLookup constantLookup0 = new ConstantLookup();
      hashMap0.put((String) null, constantLookup0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookups(hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        configurationInterpolator0.fetchLookupForPrefix((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.deregisterLookup((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.registerLookups((Map<String, ? extends Lookup>) null);
      assertFalse(configurationInterpolator0.isEnableSubstitutionInVariables());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.setStringConverter((Function<Object, String>) null);
      assertFalse(configurationInterpolator0.isEnableSubstitutionInVariables());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      configurationInterpolator0.setStringConverter(function0);
      assertFalse(configurationInterpolator0.isEnableSubstitutionInVariables());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.addDefaultLookups((Collection<? extends Lookup>) null);
      assertFalse(configurationInterpolator0.isEnableSubstitutionInVariables());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lookup lookup0 = ConfigurationInterpolator.nullSafeLookup((Lookup) null);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ConfigurationInterpolator configurationInterpolator1 = configurationInterpolator0.getParentInterpolator();
      assertEquals(configurationInterpolator0, configurationInterpolator1);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      LinkedHashSet<DummyLookup> linkedHashSet0 = new LinkedHashSet<DummyLookup>(219, 219);
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      linkedHashSet0.add(dummyLookup0);
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      String string0 = function0.apply(linkedHashSet0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      Function<Object, String> function1 = function0.andThen((Function<? super String, ? extends String>) function0);
      ConstantLookup constantLookup0 = new ConstantLookup();
      String string0 = function1.apply(constantLookup0);
      assertEquals(function0, string0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = ConfigurationInterpolator.DefaultPrefixLookupsHolder.INSTANCE;
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn(function0).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.addDefaultLookup(exprLookup0);
      Object object0 = configurationInterpolator0.resolve("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.resolve("S ;BtJ<v#':D%!g");
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.resolve((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookup("RR|p1dq:|--3!eb", (Lookup) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Lookup object must not be null!
         //
         verifyException("org.apache.commons.configuration2.interpol.ConfigurationInterpolator", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookup((String) null, lookup0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Prefix for lookup object must not be null!
         //
         verifyException("org.apache.commons.configuration2.interpol.ConfigurationInterpolator", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate("4{S{ Y)=RU?~}!OepOSD");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate("${S{ Y)=RU?~!OepO8D");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.getStringConverter();
      InterpolatorSpecification interpolatorSpecification1 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification1).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification1).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification1).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification1).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification1).getStringConverter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConfigurationInterpolator configurationInterpolator1 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification1);
      InterpolatorSpecification interpolatorSpecification2 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification2).getInterpolator();
      ConfigurationInterpolator configurationInterpolator2 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification2);
      configurationInterpolator1.setParentInterpolator(configurationInterpolator2);
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.resolve(")LFXV2nF c$b;qSu");
      configurationInterpolator1.getStringConverter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      configurationInterpolator1.getLookups();
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.fetchLookupForPrefix("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.fetchLookupForPrefix(")LFXV2nF c$b;qSu");
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = ConfigurationInterpolator.DefaultPrefixLookupsHolder.INSTANCE;
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn(function0).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.registerLookup("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups", exprLookup0);
      boolean boolean0 = configurationInterpolator0.deregisterLookup("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("");
      Lookup lookup1 = ConfigurationInterpolator.nullSafeLookup(lookup0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationInterpolator.fromSpecification((InterpolatorSpecification) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // InterpolatorSpecification must not be null!
         //
         verifyException("org.apache.commons.configuration2.interpol.ConfigurationInterpolator", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Set<String> set0 = configurationInterpolator0.prefixSet();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      assertEquals(0, map0.size());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      boolean boolean0 = configurationInterpolator0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.getLookups();
      configurationInterpolator0.interpolate("4{S{ Y)=RU?~}!OepOSD");
      configurationInterpolator0.getLookups();
      configurationInterpolator0.setEnableSubstitutionInVariables(true);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("");
      configurationInterpolator0.prefixSet();
      ConfigurationInterpolator.nullSafeLookup(lookup0);
      Properties properties0 = new Properties();
      LinkedHashSet<Lookup> linkedHashSet0 = new LinkedHashSet<Lookup>();
      configurationInterpolator0.getStringConverter();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.resolve("Lookup object must not be null!");
      // Undeclared exception!
      try { 
        properties0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Lookup> linkedHashSet0 = new LinkedHashSet<Lookup>();
      Properties properties0 = new Properties();
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = new ConfigurationInterpolator.DefaultPrefixLookupsHolder(properties0);
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function<Object, String>) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      configurationInterpolator0.addDefaultLookup(lookup0);
      Object object0 = configurationInterpolator0.resolve("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      boolean boolean0 = configurationInterpolator0.removeDefaultLookup(dummyLookup0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      LinkedHashSet<DummyLookup> linkedHashSet0 = new LinkedHashSet<DummyLookup>(219, 219);
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      String string0 = function0.apply(linkedHashSet0);
      assertEquals(function0, string0);
}
