 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      EventType<Event> eventType0 = Event.ANY;
      EventType<Event> eventType1 = new EventType<Event>(eventType0, "o]k,-fT%]uUY\"-m");
      Event event0 = new Event(object0, eventType1);
      String string0 = event0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event(object0, eventType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      event0.appendPropertyRepresentation(stringBuilder0, "org.apache.commons.configuration2.event.EventType", object0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event("", eventType0);
      // Undeclared exception!
      try { 
        event0.appendPropertyRepresentation((StringBuilder) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.event.Event", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = null;
      try {
        event0 = new Event((Object) null, eventType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event("", eventType0);
      EventType<? extends Event> eventType1 = event0.getEventType();
      assertNotNull(eventType1.getName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Event event0 = null;
      try {
        event0 = new Event("", (EventType<? extends Event>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.Event", e);
      }
  }
