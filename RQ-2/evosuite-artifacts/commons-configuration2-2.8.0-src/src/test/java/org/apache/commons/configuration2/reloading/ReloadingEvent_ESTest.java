/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:12:30 GMT 2022
 */

package org.apache.commons.configuration2.reloading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.configuration2.io.FileHandler;
import org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector;
import org.apache.commons.configuration2.reloading.ManagedReloadingDetector;
import org.apache.commons.configuration2.reloading.ReloadingController;
import org.apache.commons.configuration2.reloading.ReloadingEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReloadingEvent_ESTest extends ReloadingEvent_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, "2S&`n^%g01");
      Object object0 = reloadingEvent0.getData();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.checkForReloading(managedReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, managedReloadingDetector0);
      ReloadingController reloadingController1 = reloadingEvent0.getController();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null);
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, (Object) null);
      Object object0 = reloadingEvent0.getData();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null);
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, (Object) null);
      ReloadingController reloadingController1 = reloadingEvent0.getController();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReloadingEvent reloadingEvent0 = null;
      try {
        reloadingEvent0 = new ReloadingEvent((ReloadingController) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
