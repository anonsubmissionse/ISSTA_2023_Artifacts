/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:12:43 GMT 2022
 */

package org.apache.commons.configuration2.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.net.URLStreamHandler;
import org.apache.commons.configuration2.io.DefaultFileSystem;
import org.apache.commons.configuration2.io.FileLocationStrategy;
import org.apache.commons.configuration2.io.FileLocator;
import org.apache.commons.configuration2.io.FileSystem;
import org.apache.commons.configuration2.io.ProvidedURLLocationStrategy;
import org.apache.commons.configuration2.io.URLConnectionOptions;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.provider.DefaultURLStreamHandler;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProvidedURLLocationStrategy_ESTest extends ProvidedURLLocationStrategy_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn((String) null).when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn((FileLocationStrategy) null).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn((URLConnectionOptions) null).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
      assertNotNull(uRL0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn((String) null).when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn((FileLocationStrategy) null).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn((URLConnectionOptions) null).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler", "f[V~g*", 1107, ".data", (URLStreamHandler) defaultURLStreamHandler0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
      assertNotNull(uRL1.getAuthority());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URL uRL0 = MockURL.getFileExample();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator0);
      assertEquals(0, uRL1.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL("org.apache.log4j.RollingFileAppender", "org.apache.commons.configuration2.io.ProvidedURLLocationStrategy", 0, "w5", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = mock(URLConnectionOptions.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.configuration2.io.ProvidedURLLocationStrategy").when(fileLocator0).getBasePath();
      doReturn("w5").when(fileLocator0).getEncoding();
      doReturn("w5").when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn(providedURLLocationStrategy0).when(fileLocator0).getLocationStrategy();
      doReturn(uRL0).when(fileLocator0).getSourceURL();
      doReturn(uRLConnectionOptions0).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
      assertEquals(uRL0, uRL1.getQuery());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        providedURLLocationStrategy0.locate(defaultFileSystem0, (FileLocator) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.io.ProvidedURLLocationStrategy", e);
      }
  }
}
