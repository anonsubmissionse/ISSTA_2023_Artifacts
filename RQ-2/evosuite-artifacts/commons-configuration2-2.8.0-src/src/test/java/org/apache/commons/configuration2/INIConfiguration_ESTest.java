/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:03:45 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Set;
import java.util.Stack;
import javax.naming.CompositeName;
import oracle.jdbc.internal.JMSDequeueOptions;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.InMemoryNodeModel;
import org.apache.commons.configuration2.tree.NodeModel;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class INIConfiguration_ESTest extends INIConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine("#;");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("js=\"&pi&F");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("=\"&dN\"8r");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("='-&&F");
      iNIConfiguration0.read(stringReader0);
      assertTrue(iNIConfiguration0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('G');
      iNIConfiguration0.setListDelimiterHandler(defaultListDelimiterHandler0);
      StringReader stringReader0 = new StringReader("setSeverName");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      iNIConfiguration0.addProperty(".5p L~Znu_gvn>In].p", "Invalid 'any-setter' annotation on method '%s()': first argument not of type String or Object, but %s");
      PipedWriter pipedWriter0 = new PipedWriter();
      iNIConfiguration0.write(pipedWriter0);
      assertTrue(iNIConfiguration0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration(combinedConfiguration0);
      boolean boolean0 = iNIConfiguration0.isSectionLine("[#?~CKk]");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInOutput((String) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInOutput("");
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
      iNIConfiguration0.setSeparatorUsedInInput((String) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
      iNIConfiguration0.setSeparatorUsedInInput("");
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setThrowExceptionOnMissing(true);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("K%f%HM\"h1/");
      assertFalse(subnodeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput((String) null);
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput("");
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      // Undeclared exception!
      try { 
        iNIConfiguration0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        iNIConfiguration0.read((Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        iNIConfiguration0.read(pipedReader0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput((String) null);
      // Undeclared exception!
      try { 
        iNIConfiguration0.isCommentLine(",Vr^K&V");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.INIConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      iNIConfiguration0.copy(systemConfiguration0);
      // Undeclared exception!
      iNIConfiguration0.getSection("q");
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("", "", iNIConfiguration0);
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, abstractYAMLBasedConfiguration0);
      INIConfiguration iNIConfiguration1 = null;
      try {
        iNIConfiguration1 = new INIConfiguration(subnodeConfiguration0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@27[keys=[(0)]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector("[A`jkk):&,b%|XT)|dK");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, false);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      INIConfiguration iNIConfiguration0 = null;
      try {
        iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("[v_Sr@a'(.ok! N");
      StringReader stringReader0 = new StringReader("setSeverName");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("v_Sc@a'(.ok{ N");
      StringReader stringReader0 = new StringReader("c.owner");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection((String) null);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      inMemoryNodeModel0.trackChildNodeWithCreation((String) null, (String) null, iNIConfiguration0);
      iNIConfiguration0.append(subnodeConfiguration0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection((String) null);
      subnodeConfiguration0.addPropertyInternal("Yv+i ", "Yv+i ");
      iNIConfiguration0.append(subnodeConfiguration0);
      assertTrue(iNIConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CompositeName compositeName0 = new CompositeName("=:");
      compositeConfiguration0.addPropertyDirect("=:", compositeName0);
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect("=:", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CompositeName compositeName0 = new CompositeName("=:");
      compositeConfiguration0.addPropertyDirect("=:", compositeName0);
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect("=:", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Stack<SubnodeConfiguration> stack0 = new Stack<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      CompositeName compositeName0 = new CompositeName("getMaxRowSize");
      compositeConfiguration0.addPropertyDirect("tGXO)I${LEMf", compositeName0);
      iNIConfiguration0.getSection("3pUqkHRYd mE");
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Stack<SubnodeConfiguration> stack0 = new Stack<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      CompositeName compositeName0 = new CompositeName("getMaxRowSize");
      compositeConfiguration0.addPropertyDirect("tGXO)I${LEMf", compositeName0);
      iNIConfiguration0.getSection("3pUqkHRYd mE");
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Set<String> set0 = iNIConfiguration0.getSections();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isSectionLine("[V#HIZpN^");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isSectionLine((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("n(\"=#H~^j");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("c.column_name");
      StringReader stringReader0 = new StringReader("c.column_name");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("VDbfH6glV;rLhuz");
      StringReader stringReader0 = new StringReader("c.owner");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("1E(7g0A");
      StringReader stringReader0 = new StringReader("n(\"=#H~\\^j");
      iNIConfiguration0.read(stringReader0);
      assertTrue(iNIConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput("DbfH6glV;rLhuz");
      StringReader stringReader0 = new StringReader("DbfH6glV;rLhuz");
      iNIConfiguration0.read(stringReader0);
      assertFalse(iNIConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("[/yV#HIZpN^]");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect("org.apache.commons.configuration2.INIConfiguration@9(null)", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        iNIConfiguration0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput("org.apache.commons.configuration2.INIConfiguration");
      StringReader stringReader0 = new StringReader(", c.data_precision)\n   AS column_size,\n       0 as buffer_length,\n   c.data_scale ,s decimal_digits,\n   0 as pseudo_column\nFROM all_trigger_cols t, all_tab_columns c\nWHERE t.table_name = :1\n  AND c.owner like :2 escape '/'\n AND t.table_owner = c.owner\n  AND t.table_name = c.table_name\n AND t.column_name = c.column_name\n");
      iNIConfiguration0.read(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader("9\"'");
      iNIConfiguration0.read(stringReader0);
      iNIConfiguration0.getSection("[n(\"=#HIZ&^j");
      PipedWriter pipedWriter0 = new PipedWriter();
      iNIConfiguration0.write(pipedWriter0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      INIConfiguration iNIConfiguration0 = null;
      try {
        iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
}
