/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:42:42 GMT 2022
 */

package org.apache.commons.configuration2.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.ForkJoinTask;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.beanutils.BeanDeclaration;
import org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration;
import org.apache.commons.configuration2.beanutils.ConstructorArg;
import org.apache.commons.configuration2.beanutils.XMLBeanDeclaration;
import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;
import org.apache.commons.configuration2.tree.DefaultExpressionEngine;
import org.apache.commons.configuration2.tree.DefaultExpressionEngineSymbols;
import org.apache.commons.configuration2.tree.ExpressionEngine;
import org.apache.commons.configuration2.tree.ImmutableNode;
import org.apache.commons.configuration2.tree.NodeHandler;
import org.apache.commons.configuration2.tree.NodeModel;
import org.apache.commons.configuration2.tree.OverrideCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLBeanDeclaration_ESTest extends XMLBeanDeclaration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('K');
      combinedConfiguration0.setListDelimiterHandler(defaultListDelimiterHandler0);
      Class<CombinedBeanDeclaration> class0 = CombinedBeanDeclaration.class;
      Class<String> class1 = String.class;
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      Class<String> class2 = String.class;
      yAMLConfiguration0.getList(class2, "");
      combinedConfiguration0.getCollection(class1, "", (Collection<String>) null, (Collection<String>) null);
      combinedConfiguration0.getArray(class0, (String) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) combinedConfiguration0, (String) null, false);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.CombinedConfiguration.class) , anyString());
      xMLBeanDeclaration0.getBeanFactoryName();
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(combinedConfiguration0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.getAttribute("[@config-class]");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, "config-value");
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler1 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(nodeHandler1).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData1 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler1);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration_NodeData1.getChildren();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) "1w't@#F{-qV$m");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class));
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      String string0 = xMLBeanDeclaration_NodeData0.nodeName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      Set<String> set0 = xMLBeanDeclaration_NodeData0.getAttributes();
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedName("config-union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) "1w't@#F{-qV$m");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedName("[@config-");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(jSONConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(jSONConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedChildName("i@{<G!'tDf@$\";b");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) "1w't@#F{-qV$m");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedAttributeName((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HierarchicalConfiguration<YAMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<YAMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      XMLBeanDeclaration.NodeData<?> xMLBeanDeclaration_NodeData0 = xMLBeanDeclaration0.getNode();
      assertNotNull(xMLBeanDeclaration_NodeData0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HierarchicalConfiguration<CombinedConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<CombinedConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      XMLBeanDeclaration.NodeData<?> xMLBeanDeclaration_NodeData1 = xMLBeanDeclaration0.getNode();
      assertNotNull(xMLBeanDeclaration_NodeData1);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<BaseHierarchicalConfiguration> nodeHandler0 = (NodeHandler<BaseHierarchicalConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(dynamicCombinedConfiguration0).when(nodeHandler0).getRootNode();
      NodeModel<BaseHierarchicalConfiguration> nodeModel0 = (NodeModel<BaseHierarchicalConfiguration>) mock(NodeModel.class, new ViolatedAssumptionAnswer());
      doReturn(nodeHandler0).when(nodeModel0).getNodeHandler();
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn(nodeModel0).when(hierarchicalConfiguration0).getNodeModel();
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration1 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(hierarchicalConfiguration0).when(hierarchicalConfiguration1).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration1, "/I:.w05dZA,i}C}Y2", true, "/I:.w05dZA,i}C}Y2");
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, "", false, "");
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.getParentInterpolator();
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("config-i@{<G!'tDf@$\";b").when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, "h");
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration0.interpolate(xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getBeanProperties();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((Object) null).when(hierarchicalConfiguration0).getProperty(anyString());
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.getBeanFactoryParameter();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, "conf\"ig-class", true, "conf\"ig-class");
      xMLBeanDeclaration0.getBeanClassName();
      assertNotNull(xMLBeanDeclaration0.getDefaultBeanClassName());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Set<String> set0 = xMLBeanDeclaration0.getAttributeNames();
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      overrideCombiner0.addListNode("O1PsSd\"c,=");
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(overrideCombiner0, combinedConfiguration0.COMBINED_INVALIDATE, "config-", xMLBeanDeclaration0, true);
      Class<AbstractYAMLBasedConfiguration> class0 = AbstractYAMLBasedConfiguration.class;
      LinkedList<AbstractYAMLBasedConfiguration> linkedList0 = new LinkedList<AbstractYAMLBasedConfiguration>();
      List<AbstractYAMLBasedConfiguration> list0 = yAMLConfiguration0.getList(class0, "", (List<AbstractYAMLBasedConfiguration>) linkedList0);
      xMLBeanDeclaration_NodeData0.wrapInNodeData(list0);
      overrideCombiner0.addListNode("");
      xMLBeanDeclaration0.interpolate(configurationEvent0);
      xMLBeanDeclaration0.getAttributeNames();
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      overrideCombiner0.addListNode("O1PsSd\"c,=");
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(overrideCombiner0, combinedConfiguration0.COMBINED_INVALIDATE, "config-", xMLBeanDeclaration0, true);
      Class<AbstractYAMLBasedConfiguration> class0 = AbstractYAMLBasedConfiguration.class;
      LinkedList<AbstractYAMLBasedConfiguration> linkedList0 = new LinkedList<AbstractYAMLBasedConfiguration>();
      List<AbstractYAMLBasedConfiguration> list0 = yAMLConfiguration0.getList(class0, "", (List<AbstractYAMLBasedConfiguration>) linkedList0);
      xMLBeanDeclaration_NodeData0.wrapInNodeData(list0);
      overrideCombiner0.addListNode("");
      xMLBeanDeclaration0.interpolate(configurationEvent0);
      xMLBeanDeclaration0.getAttributeNames();
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
      boolean boolean0 = xMLBeanDeclaration0.isReservedAttributeName("O1PsSd\"c,=");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      Vector<AbstractYAMLBasedConfiguration> vector0 = new Vector<AbstractYAMLBasedConfiguration>();
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) vector0, "");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class));
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(yAMLConfiguration0, xMLBeanDeclaration_NodeData0);
      Set<String> set1 = xMLBeanDeclaration0.getAttributeNames();
      assertEquals(0, set1.size());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      DefaultExpressionEngineSymbols defaultExpressionEngineSymbols0 = DefaultExpressionEngineSymbols.DEFAULT_SYMBOLS;
      DefaultExpressionEngine defaultExpressionEngine0 = new DefaultExpressionEngine(defaultExpressionEngineSymbols0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("3", (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((List) null).when(hierarchicalConfiguration0).configurationsAt(anyString());
      doReturn(defaultExpressionEngine0).when(hierarchicalConfiguration0).getExpressionEngine();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, "");
      configurationInterpolator0.prefixSet();
      Vector<PatternSubtreeConfigurationWrapper> vector0 = new Vector<PatternSubtreeConfigurationWrapper>();
      vector0.setSize(1);
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn(".KqorHC", "iV8RVg(%K`O", ")", (String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getNestedBeanDeclarations();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.getInterpolator();
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class) , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration0.getBeanProperties();
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HierarchicalConfiguration<PatternSubtreeConfigurationWrapper> hierarchicalConfiguration0 = (HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getAttributeNames();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HierarchicalConfiguration<INIConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<INIConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ExpressionEngine) null).when(hierarchicalConfiguration0).getExpressionEngine();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      NodeHandler<JSONConfiguration> nodeHandler0 = (NodeHandler<JSONConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<JSONConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<JSONConfiguration>(jSONConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.createBeanDeclaration(xMLBeanDeclaration_NodeData0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLBeanDeclaration.NodeData<BaseHierarchicalConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<BaseHierarchicalConfiguration>((BaseHierarchicalConfiguration) null, (NodeHandler<BaseHierarchicalConfiguration>) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<?>) null, xMLBeanDeclaration_NodeData0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, "", false, "oracle.jdbc.internal.JMSDequeueOptions$StreamingMode");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(xMLConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0, "7wj'@xN", false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): 7wj'@xN
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, "Delivery Mode           : ", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ConstructorArg>) null, "'", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, "UTF-8");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): UTF-8
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<String>) null, "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0);
      assertNotNull(xMLBeanDeclaration0.getDefaultBeanClassName());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HierarchicalConfiguration<CombinedConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<CombinedConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(" ]&P;D5YI#").when(hierarchicalConfiguration0).toString();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      HierarchicalConfiguration<?> hierarchicalConfiguration1 = xMLBeanDeclaration0.getConfiguration();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedChildName("config-union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n");
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      ConfigurationInterpolator configurationInterpolator0 = baseConfiguration0.getInterpolator();
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("3}OjG=V?8-h,").when(hierarchicalConfiguration0).toString();
      doReturn(configurationInterpolator0).when(hierarchicalConfiguration0).getInterpolator();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.interpolate((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, "");
      Vector<PatternSubtreeConfigurationWrapper> vector0 = new Vector<PatternSubtreeConfigurationWrapper>();
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      vector0.add(patternSubtreeConfigurationWrapper0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Map<String, Object> map0 = xMLBeanDeclaration0.getNestedBeanDeclarations();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("The wildcard must not be null", "The wildcard must not be null", (String) null, (String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class) , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Map<String, Object> map0 = xMLBeanDeclaration0.getBeanProperties();
      assertEquals(0, map0.size());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0, "4_@?.nKJXA-w", false, "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): 4_@?.nKJXA-w
         //
         verifyException("org.apache.commons.configuration2.BaseHierarchicalConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<AbstractYAMLBasedConfiguration>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("The wildcard must not be null").when(hierarchicalConfiguration0).toString();
      doReturn("/I:.w05dZA,i}C}Y2").when(hierarchicalConfiguration0).getProperty(anyString());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.getBeanFactoryParameter();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HierarchicalConfiguration<PatternSubtreeConfigurationWrapper> hierarchicalConfiguration0 = (HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HierarchicalConfiguration<ForkJoinTask<BaseHierarchicalConfiguration>> hierarchicalConfiguration0 = (HierarchicalConfiguration<ForkJoinTask<BaseHierarchicalConfiguration>>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, "=QA?.8Xi\"~Q@lE");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class) , anyString());
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(jSONConfiguration0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.getAttribute("sysbackup");
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(jSONConfiguration0, xMLBeanDeclaration_NodeData0);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0);
      NodeHandler<ConstructorArg> nodeHandler1 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler1).getAttributeValue(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class) , anyString());
      doReturn((List) null).when(nodeHandler1).getChildren(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class) , anyString());
      ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0);
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData1 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler1);
      xMLBeanDeclaration0.getBeanClassName();
      iNIConfiguration0.childConfigurationsAt((String) null);
      xMLBeanDeclaration_NodeData1.getAttribute("G$m\"KDWNG");
      jSONConfiguration0.getBigDecimal(" (Attribute key in the middle.)");
      // Undeclared exception!
      try { 
        xMLBeanDeclaration_NodeData1.getChildren("union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLBeanDeclaration.NodeData<INIConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<INIConfiguration>(iNIConfiguration0, (NodeHandler<INIConfiguration>) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getConstructorArgs();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLBeanDeclaration.NodeData<INIConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<INIConfiguration>(iNIConfiguration0, (NodeHandler<INIConfiguration>) null);
      boolean boolean0 = xMLBeanDeclaration_NodeData0.matchesConfigRootNode(iNIConfiguration0);
      assertTrue(boolean0);
}
}
