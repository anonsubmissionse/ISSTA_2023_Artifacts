/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:04:23 GMT 2022
 */

package org.apache.commons.configuration2.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mockobjects.servlet.MockFilterConfig;
import java.applet.Applet;
import java.util.Hashtable;
import java.util.Map;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.swing.JLayeredPane;
import org.apache.commons.configuration2.io.AbsoluteNameLocationStrategy;
import org.apache.commons.configuration2.io.FileLocationStrategy;
import org.apache.commons.configuration2.web.AppletConfiguration;
import org.apache.commons.configuration2.web.ServletConfiguration;
import org.apache.commons.configuration2.web.ServletContextConfiguration;
import org.apache.commons.configuration2.web.ServletFilterConfiguration;
import org.apache.commons.configuration2.web.ServletRequestConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.server.Servlet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseWebConfiguration_ESTest extends BaseWebConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AppletConfiguration appletConfiguration0 = new AppletConfiguration((Applet) null);
      Object object0 = appletConfiguration0.handleDelimiters((Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((javax.servlet.Servlet) servlet0);
      Object object0 = servletConfiguration0.handleDelimiters(servlet0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.isEmptyInternal();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      ServletFilterConfiguration servletFilterConfiguration0 = new ServletFilterConfiguration(mockFilterConfig0);
      // Undeclared exception!
      try { 
        servletFilterConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((ServletConfig) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.isEmptyInternal();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // ServletConfig has not been initialized
         //
         verifyException("javax.servlet.GenericServlet", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.containsKeyInternal("");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((javax.servlet.Servlet) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.containsKeyInternal("^7");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.web.ServletConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((ServletConfig) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.containsKeyInternal(";`/QfD=>h=");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // ServletConfig has not been initialized
         //
         verifyException("javax.servlet.GenericServlet", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "(>E^x\u0001p!BA.^[\"=7";
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(httpServletRequest0).getParameterValues(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.containsKeyInternal("(>E^x\u0001p!BA.^[\"=7");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(httpServletRequest0).getParameterValues(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.containsKeyInternal("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.web.ServletRequestConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<FileLocationStrategy, Integer> hashtable0 = new Hashtable<FileLocationStrategy, Integer>();
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      hashtable0.put(absoluteNameLocationStrategy0, integer0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(hashtable0).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.clearPropertyDirect("(>E^x\u0001p!BA.^[\"=7");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Read only configuration
         //
         verifyException("org.apache.commons.configuration2.web.BaseWebConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServletContextConfiguration servletContextConfiguration0 = new ServletContextConfiguration((ServletContext) null);
      // Undeclared exception!
      try { 
        servletContextConfiguration0.addPropertyDirect("3]Mn8Dma", "3]Mn8Dma");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Read only configuration
         //
         verifyException("org.apache.commons.configuration2.web.BaseWebConfiguration", e);
      }
  }
}
