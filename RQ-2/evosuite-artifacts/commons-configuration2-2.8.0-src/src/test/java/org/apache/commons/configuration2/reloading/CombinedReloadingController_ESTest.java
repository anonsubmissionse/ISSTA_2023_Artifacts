/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 01:05:52 GMT 2022
 */

package org.apache.commons.configuration2.reloading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingDeque;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.reloading.CombinedReloadingController;
import org.apache.commons.configuration2.reloading.ManagedReloadingDetector;
import org.apache.commons.configuration2.reloading.ReloadingController;
import org.apache.commons.configuration2.reloading.ReloadingDetector;
import org.apache.commons.configuration2.tree.MergeCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombinedReloadingController_ESTest extends CombinedReloadingController_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedBlockingDeque<ReloadingController> linkedBlockingDeque0 = new LinkedBlockingDeque<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(linkedBlockingDeque0);
      ReloadingDetector reloadingDetector0 = combinedReloadingController0.getDetector();
      assertNotNull(reloadingDetector0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedBlockingDeque<ReloadingController> linkedBlockingDeque0 = new LinkedBlockingDeque<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(linkedBlockingDeque0);
      Collection<ReloadingController> collection0 = combinedReloadingController0.getSubControllers();
      assertNotNull(collection0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<ReloadingController> arrayList0 = new ArrayList<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(arrayList0);
      arrayList0.add((ReloadingController) combinedReloadingController0);
      CombinedReloadingController combinedReloadingController1 = new CombinedReloadingController(arrayList0);
      combinedReloadingController1.resetInitialReloadingState();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashSet<ReloadingController> hashSet0 = new HashSet<ReloadingController>();
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      hashSet0.add(reloadingController0);
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(hashSet0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      boolean boolean0 = combinedReloadingController0.checkForReloading(dynamicCombinedConfiguration0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashSet<ReloadingController> hashSet0 = new HashSet<ReloadingController>();
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      hashSet0.add(reloadingController0);
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(hashSet0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      boolean boolean0 = combinedReloadingController0.checkForReloading(dynamicCombinedConfiguration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<ReloadingController> linkedList0 = new LinkedList<ReloadingController>();
      linkedList0.add((ReloadingController) null);
      CombinedReloadingController combinedReloadingController0 = null;
      try {
        combinedReloadingController0 = new CombinedReloadingController(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Collection with sub controllers contains a null entry!
         //
         verifyException("org.apache.commons.configuration2.reloading.CombinedReloadingController", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<ReloadingController> arrayList0 = new ArrayList<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(arrayList0);
      arrayList0.add((ReloadingController) combinedReloadingController0);
      CombinedReloadingController combinedReloadingController1 = new CombinedReloadingController(arrayList0);
      boolean boolean0 = combinedReloadingController1.checkForReloading(arrayList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CombinedReloadingController combinedReloadingController0 = null;
      try {
        combinedReloadingController0 = new CombinedReloadingController((Collection<? extends ReloadingController>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Collection with sub controllers must not be null!
         //
         verifyException("org.apache.commons.configuration2.reloading.CombinedReloadingController", e);
      }
  }
}
