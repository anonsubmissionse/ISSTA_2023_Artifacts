/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:18:34 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import oracle.ucp.jdbc.PoolXADataSourceImpl;
import org.apache.commons.configuration2.AbstractYAMLBasedConfiguration;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.DataConfiguration;
import org.apache.commons.configuration2.DatabaseConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.INIConfiguration;
import org.apache.commons.configuration2.JNDIConfiguration;
import org.apache.commons.configuration2.JSONConfiguration;
import org.apache.commons.configuration2.MapConfiguration;
import org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.SubsetConfiguration;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.XMLConfiguration;
import org.apache.commons.configuration2.XMLPropertiesConfiguration;
import org.apache.commons.configuration2.YAMLConfiguration;
import org.apache.commons.configuration2.convert.DisabledListDelimiterHandler;
import org.apache.commons.configuration2.convert.ListDelimiterHandler;
import org.apache.commons.configuration2.event.EventListenerRegistrationData;
import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;
import org.apache.commons.configuration2.tree.MergeCombiner;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.javax.naming.MockInitialContext;
import org.hsqldb.lib.IntKeyIntValueHashMap;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeConfiguration_ESTest extends CompositeConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.clearPropertyDirect("");
      assertFalse(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.clearInternal();
      assertFalse(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayDeque<BaseHierarchicalConfiguration> arrayDeque0 = new ArrayDeque<BaseHierarchicalConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(arrayDeque0);
      assertFalse(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      compositeConfiguration0.addPropertyDirect("Key must not be null!", iNIConfiguration0);
      INIConfiguration iNIConfiguration1 = (INIConfiguration)compositeConfiguration0.getPropertyInternal("Key must not be null!");
      assertFalse(iNIConfiguration1.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      List<Object> list0 = compositeConfiguration0.getList("D?ffOg</{WFek7hTXw", (List<?>) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayDeque<EnvironmentConfiguration> arrayDeque0 = new ArrayDeque<EnvironmentConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      Configuration configuration0 = compositeConfiguration0.getInMemoryConfiguration();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      Configuration configuration0 = compositeConfiguration0.getConfiguration(0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal((String) null, "merge tab into dual");
      boolean boolean0 = compositeConfiguration0.containsKeyInternal((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      boolean boolean0 = compositeConfiguration0.containsKeyInternal("<");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.setListDelimiterHandler((ListDelimiterHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // List delimiter handler must not be null!
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      // Undeclared exception!
      try { 
        compositeConfiguration0.removeConfiguration((Configuration) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector("#l=Sni|@nQ(;`ClaVX");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ArrayList<XMLPropertiesConfiguration> arrayList0 = new ArrayList<XMLPropertiesConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, arrayList0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[#l=Sni|@nQ(;`ClaVX]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      Configuration configuration0 = baseConfiguration0.subset("k/@3YgTzlS0+<P(^");
      compositeConfiguration0.setPropertyInternal((String) null, "merge tab into dual");
      compositeConfiguration0.addConfigurationFirst(configuration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.PrefixedKeysIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("!RJy>IL6]B_i`T%a");
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, jSONConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(subnodeConfiguration0, "!RJy>IL6]B_i`T%a");
      SynchronousQueue<JSONConfiguration> synchronousQueue0 = new SynchronousQueue<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(patternSubtreeConfigurationWrapper0, synchronousQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray("updateBoolean");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[!RJy>IL6]B_i`T%a]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<EnvironmentConfiguration> arrayDeque0 = new ArrayDeque<EnvironmentConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray("The key ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      PriorityBlockingQueue<JSONConfiguration> priorityBlockingQueue0 = new PriorityBlockingQueue<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, priorityBlockingQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource("");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hashtable<CombinedConfiguration, CompositeConfiguration> hashtable0 = new Hashtable<CombinedConfiguration, CompositeConfiguration>();
      MockInitialContext mockInitialContext0 = new MockInitialContext(hashtable0);
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(mockInitialContext0, "");
      SynchronousQueue<DataConfiguration> synchronousQueue0 = new SynchronousQueue<DataConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jNDIConfiguration0, synchronousQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource(" is defined by multiple sources!");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getPropertyInternal("JARS");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0, (Collection<? extends Configuration>) null);
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) systemConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getPropertyInternal((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("");
      SubnodeConfiguration subnodeConfiguration0 = yAMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, (Collection<? extends Configuration>) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList("iQy", (List<?>) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@24[keys=[]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ArrayList<BaseHierarchicalConfiguration> arrayList0 = new ArrayList<BaseHierarchicalConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(combinedConfiguration0, arrayList0);
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList("nx.T(~+T%)\"8)TqT", (List<?>) arrayList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList((String) null, (List<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("hw^`E`9!Ecj");
      NodeSelector nodeSelector0 = new NodeSelector("rOelqx&%");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      ArrayDeque<SubsetConfiguration> arrayDeque0 = new ArrayDeque<SubsetConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration1, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal("");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@34[keys=[rOelqx&%]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedTransferQueue<DatabaseConfiguration> linkedTransferQueue0 = new LinkedTransferQueue<DatabaseConfiguration>();
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      linkedTransferQueue0.add(databaseConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(linkedTransferQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("Cgtm0Aci'JEh<");
      SubnodeConfiguration subnodeConfiguration0 = yAMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, dynamicCombinedConfiguration0);
      TreeSet<SubnodeConfiguration> treeSet0 = new TreeSet<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, treeSet0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@25[keys=[Cgtm0Aci'JEh<]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayDeque<JSONConfiguration> arrayDeque0 = new ArrayDeque<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getConfiguration((-2645));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2645, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.containsKeyInternal("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) dataConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clone();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: org.apache.commons.configuration2.DataConfiguration does not implement Cloneable
         //
         verifyException("org.apache.commons.configuration2.ConfigurationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(yAMLConfiguration0);
      compositeConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clearPropertyDirect("F>B%5l|^)j");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedBlockingDeque<BaseConfiguration> linkedBlockingDeque0 = new LinkedBlockingDeque<BaseConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, linkedBlockingDeque0);
      IntKeyIntValueHashMap intKeyIntValueHashMap0 = new IntKeyIntValueHashMap();
      // Undeclared exception!
      try { 
        compositeConfiguration0.addPropertyDirect("getOracleStatement", intKeyIntValueHashMap0.ACCESS_MAX);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jSONConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.addPropertyDirect("", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException("org.apache.commons.configuration2.tree.DefaultExpressionEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = (DisabledListDelimiterHandler)DisabledListDelimiterHandler.INSTANCE;
      compositeConfiguration0.setListDelimiterHandler(disabledListDelimiterHandler0);
      assertTrue(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionFactoryProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0);
      Stack<XMLConfiguration> stack0 = new Stack<XMLConfiguration>();
      List<Object> list0 = compositeConfiguration0.getList("oracle.security.client.default_password", (List<?>) stack0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, "a]lR|", "a]lR|");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      compositeConfiguration0.addConfigurationFirst((Configuration) subsetConfiguration0, false);
      assertFalse(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfiguration((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.containsKeyInternal("oracle.security.client.default_password");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) yAMLConfiguration0, false);
      assertFalse(yAMLConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, "", "{0} encoding not found, returning default encoding");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) subsetConfiguration0, true);
      assertFalse(compositeConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      LinkedHashSet<PropertiesConfiguration> linkedHashSet0 = new LinkedHashSet<PropertiesConfiguration>();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      linkedHashSet0.add(propertiesConfiguration0);
      CompositeConfiguration compositeConfiguration1 = new CompositeConfiguration(compositeConfiguration0, linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal((String) null, "Cgtm0A'JEh<");
      baseConfiguration0.append(compositeConfiguration0);
      List<EventListenerRegistrationData<?>> list0 = compositeConfiguration0.getEventListenerRegistrations();
      List<Object> list1 = compositeConfiguration0.getList((String) null, list0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) propertiesConfiguration0, true);
      compositeConfiguration0.addConfigurationFirst((Configuration) xMLPropertiesConfiguration0, true);
      assertFalse(xMLPropertiesConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, "a]lR|", "a]lR|");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      Configuration configuration0 = compositeConfiguration0.getSource("a]lR|");
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, "org.apache.commons.configuration2.CompositeConfiguration", "org.apache.commons.configuration2.CompositeConfiguration");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Key must not be null!
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.interpolatedConfiguration();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) yAMLConfiguration0, false);
      Object object0 = compositeConfiguration0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getInMemoryConfiguration();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      baseConfiguration0.addPropertyInternal("vXbw\"lKE", propertiesConfiguration0);
      String[] stringArray0 = compositeConfiguration0.getStringArray("vXbw\"lKE");
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) yAMLConfiguration0, false);
      String[] stringArray0 = compositeConfiguration0.getStringArray((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal("Cgtm0A9i'JEh<", "Cgtm0A9i'JEh<");
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      List<EventListenerRegistrationData<?>> list0 = compositeConfiguration0.getEventListenerRegistrations();
      compositeConfiguration0.addConfiguration((Configuration) dataConfiguration0);
      List<Object> list1 = compositeConfiguration0.getList("Cgtm0A9i'JEh<", list0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<CompositeConfiguration> linkedHashSet0 = new LinkedHashSet<CompositeConfiguration>();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0, linkedHashSet0);
      linkedHashSet0.add(compositeConfiguration0);
      CompositeConfiguration compositeConfiguration1 = new CompositeConfiguration(linkedHashSet0);
      Object object0 = compositeConfiguration1.getPropertyInternal("r1wG0.~#055s&Sk5uD");
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Vector<BaseConfiguration> vector0 = new Vector<BaseConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(environmentConfiguration0, vector0);
      boolean boolean0 = compositeConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      boolean boolean0 = compositeConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Stack<CompositeConfiguration> stack0 = new Stack<CompositeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      compositeConfiguration0.setPropertyInternal("?k<Ry\u0001Fg3/B;r&~", "?k<Ry\u0001Fg3/B;r&~");
      Iterator<String> iterator0 = compositeConfiguration0.getKeysInternal("?k<Ry\u0001Fg3/B;r&~");
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      Iterator<String> iterator0 = compositeConfiguration0.getKeysInternal();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.removeConfiguration(yAMLConfiguration0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(environmentConfiguration0);
      compositeConfiguration0.removeConfiguration(environmentConfiguration0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<CompositeConfiguration> linkedHashSet0 = new LinkedHashSet<CompositeConfiguration>();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0, linkedHashSet0);
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfiguration((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<SystemConfiguration> arrayList0 = new ArrayList<SystemConfiguration>();
      arrayList0.add((SystemConfiguration) null);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(arrayList0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource("P");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Stack<CompositeConfiguration> stack0 = new Stack<CompositeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      compositeConfiguration0.setPropertyInternal("?k<Ry\u0001Fg3/B;r&~", "?k<Ry\u0001Fg3/B;r&~");
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getSource("?k<Ry\u0001Fg3/B;r&~");
      compositeConfiguration0.addConfiguration((Configuration) baseConfiguration0);
      assertFalse(baseConfiguration0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      int int0 = compositeConfiguration0.getNumberOfConfigurations();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getConfiguration(0);
      assertTrue(baseConfiguration0.isThrowExceptionOnMissing());
}
}
