/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:51:22 GMT 2022
 */

package org.apache.commons.configuration2.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.PropertiesConfigurationLayout;
import org.apache.commons.configuration2.event.ConfigurationErrorEvent;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.event.Event;
import org.apache.commons.configuration2.event.EventListener;
import org.apache.commons.configuration2.event.EventListenerList;
import org.apache.commons.configuration2.event.EventListenerRegistrationData;
import org.apache.commons.configuration2.event.EventType;
import org.apache.commons.configuration2.tree.MergeCombiner;
import org.apache.commons.configuration2.tree.NodeCombiner;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventListenerList_ESTest extends EventListenerList_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventListenerList eventListenerList1 = new EventListenerList();
      eventListenerList1.addAll(eventListenerList0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventListenerRegistrationData0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      // Undeclared exception!
      try { 
        eventListenerList0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerRegistrationData", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(combinedConfiguration0.COMBINED_INVALIDATE);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // No more event listeners!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      EventListener<? super ConfigurationEvent> eventListener0 = eventListenerList_EventListenerIterator0.next();
      assertNotNull(eventListener0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      boolean boolean0 = eventListenerList_EventListenerIterator0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      boolean boolean0 = eventListenerList_EventListenerIterator0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      List<EventListenerRegistrationData<?>> list0 = eventListenerList0.getRegistrations();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, dynamicCombinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent("EventType [ SET_PROPERTY ]", eventType0, "b\"z", list0, true);
      eventListenerList_EventListenerIterator0.invokeNext(configurationEvent0);
      assertNotNull(configurationEvent0.getPropertyName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, dynamicCombinedConfiguration0);
      EventListenerList.EventListenerIterator<ConfigurationErrorEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator((EventType<ConfigurationErrorEvent>) null);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(eventListenerRegistrationData0, dynamicCombinedConfiguration0.COMBINED_INVALIDATE, "w:7`RTv2Lv/wRq*F(\"8u", propertiesConfigurationLayout0, true);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.invokeNext(configurationEvent0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event incompatible with listener iteration: ConfigurationEvent [ source=org.apache.commons.configuration2.event.EventListenerRegistrationData@36e eventType=EventType [ COMBINED_INVALIDATE ] ]
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.invokeNext((Event) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event incompatible with listener iteration: null
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(combinedConfiguration0.COMBINED_INVALIDATE);
      assertTrue(eventListenerList_EventListenerIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      eventListenerList0.addAll(eventListenerList0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(eventListenerList_EventListenerIterator0, eventType0, "tKsV1{IDi2%Q+/t6n", eventListenerList0, true);
      eventListenerList0.fire(configurationEvent0);
      assertFalse(eventListenerList_EventListenerIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.addAll((EventListenerList) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // List to be copied must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      List<EventListenerRegistrationData<? extends ConfigurationEvent>> list0 = eventListenerList0.getRegistrationsForSuperType(eventType0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      eventListenerList0.addAll(eventListenerList0);
      List<EventListenerRegistrationData<? extends ConfigurationEvent>> list0 = eventListenerList0.getRegistrationsForSuperType(combinedConfiguration0.COMBINED_INVALIDATE);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.fire((Event) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Event to be fired must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      boolean boolean0 = eventListenerList0.removeEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) dynamicCombinedConfiguration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      EventListenerList eventListenerList0 = new EventListenerList();
      boolean boolean0 = eventListenerList0.removeEventListener(combinedConfiguration0.COMBINED_INVALIDATE, (EventListener<? super ConfigurationEvent>) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.addEventListener((EventListenerRegistrationData<ConfigurationErrorEvent>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // EventListenerRegistrationData must not be null!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      assertTrue(eventListenerList_EventListenerIterator0.hasNext());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Removing elements is not supported!
         //
         verifyException("org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationErrorEvent> eventType0 = (EventType<ConfigurationErrorEvent>) mock(EventType.class, new ViolatedAssumptionAnswer());
      EventType<ConfigurationErrorEvent> eventType1 = new EventType<ConfigurationErrorEvent>(eventType0, "");
      Iterable<EventListener<? super ConfigurationErrorEvent>> iterable0 = eventListenerList0.getEventListeners(eventType1);
      assertNotNull(iterable0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventListenerRegistrationData0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      eventListenerList0.clear();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(set0, combinedConfiguration0.COMBINED_INVALIDATE, "EventType [ HIERARCHICAL ]", eventListenerList_EventListenerIterator0, false);
      Event event0 = new Event(configurationEvent0, configurationEvent0.ADD_NODES);
      // Undeclared exception!
      try { 
        eventListenerList0.fire(event0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.event.Event cannot be cast to org.apache.commons.configuration2.event.ConfigurationEvent
         //
         verifyException("org.apache.commons.configuration2.CombinedConfiguration", e);
      }
  }
}
