/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:59:41 GMT 2022
 */

package org.apache.commons.configuration2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Delayed;
import java.util.function.Function;
import oracle.jdbc.pool.OracleConnectionPoolDataSource;
import oracle.jdbc.replay.OracleXADataSourceImpl;
import oracle.ucp.jdbc.PoolXADataSourceImpl;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.MapConfiguration;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.SystemConfiguration;
import org.apache.commons.configuration2.convert.ListDelimiterHandler;
import org.apache.commons.configuration2.event.ConfigurationEvent;
import org.apache.commons.configuration2.event.EventType;
import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;
import org.apache.commons.configuration2.interpol.DummyLookup;
import org.apache.commons.configuration2.interpol.ExprLookup;
import org.apache.commons.configuration2.interpol.InterpolatorSpecification;
import org.apache.commons.configuration2.interpol.Lookup;
import org.apache.commons.configuration2.io.ConfigurationLogger;
import org.apache.commons.configuration2.tree.OverrideCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.types.NumberType;
import org.junit.runner.RunWith;
import org.postgresql.core.Field;
import org.postgresql.jdbc.FieldMetadata;
import org.postgresql.jdbc.PgResultSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapConfiguration_ESTest extends MapConfiguration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      Field field0 = new Field(">8S\"slciy3Hhz(Yu{K", 168);
      fieldArray0[0] = field0;
      Field field1 = new Field("f", 168, 5608, 5608);
      fieldArray0[1] = field1;
      field1.setFormat(5608);
      FieldMetadata fieldMetadata0 = field0.getMetadata();
      field1.setMetadata(fieldMetadata0);
      Map<String, Integer> map0 = PgResultSet.createColumnNameIndexMap(fieldArray0, false);
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      mapConfiguration0.getKeysInternal();
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect("f", integer0);
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.getMap();
      mapConfiguration0.addPropertyDirect("4/2", integer0);
      mapConfiguration0.containsKeyInternal("f");
      Object object0 = mapConfiguration0.getPropertyInternal("4/2");
      assertEquals(0, object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 1;
      Random.setNextRandom(1);
      System.setCurrentTimeMillis(1);
      OracleConnectionPoolDataSource oracleConnectionPoolDataSource0 = new OracleConnectionPoolDataSource();
      oracleConnectionPoolDataSource0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.sizeInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      poolXADataSourceImpl0.getConnectionProperties();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oracle.jdbc.proxy.oracle$1jdbc$1replay$1driver$1NonTxnReplayableStatement$2oracle$1jdbc$1internal$1OracleCallableStatement$$$Proxy");
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clone();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: java.util.Collections$UnmodifiableMap does not implement Cloneable
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      long long0 = 0L;
      mapConfiguration0.getEventListenerRegistrations();
      // Undeclared exception!
      try { 
        mapConfiguration0.isEmptyInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      OracleXADataSourceImpl oracleXADataSourceImpl0 = new OracleXADataSourceImpl();
      oracleXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.getKeysInternal();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.MapConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.getFloat("GSS_ENC_MODE", 0.0F);
      systemConfiguration0.clone();
      systemConfiguration0.setDetailEvents(true);
      ConfigurationInterpolator.nullSafeLookup((Lookup) null);
      systemConfiguration0.isEmptyInternal();
      // Undeclared exception!
      try { 
        systemConfiguration0.addPropertyDirect("GSS_ENC_MODE", (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      MapConfiguration mapConfiguration1 = new MapConfiguration(properties0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(properties0, eventType0, "+9 Lq4gw{>GlCK/s=U", poolXADataSourceImpl0, true);
      properties0.put(mapConfiguration1, configurationEvent0);
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      mapConfiguration0.cloneInterpolator(combinedConfiguration0);
      mapConfiguration0.isEmptyInternal();
      EventType<ConfigurationEvent> eventType1 = ConfigurationEvent.CLEAR_TREE;
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationEvent configurationEvent1 = new ConfigurationEvent(properties0, eventType1, "ud+[0Emi#A$v1)Es#C", exprLookup0, false);
      mapConfiguration0.addPropertyDirect("oracle.security.client.password", configurationEvent1);
      mapConfiguration0.clearPropertyDirect("^ 6EQXq;(oZ%7'");
      mapConfiguration0.clone();
      // Undeclared exception!
      try { 
        mapConfiguration0.toString();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      String string0 = null;
      Properties properties0 = combinedConfiguration0.getProperties((String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clearPropertyDirect((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      String string0 = "]";
      // Undeclared exception!
      try { 
        mapConfiguration0.addPropertyDirect("]", map0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clearPropertyDirect((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      mapConfiguration0.getMap();
      String string0 = "";
      // Undeclared exception!
      try { 
        mapConfiguration0.getPropertyInternal("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Georgian", "Georgian");
      hashMap0.put("", "]");
      hashMap0.put("R$o7>;V`1J<", "]");
      hashMap0.put(".,/ukQGV", "v'0Q(p!(ZG}WcVL");
      hashMap0.put("", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal("Georgian");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Georgian", "Georgian");
      hashMap0.put("", "]");
      hashMap0.put("R$o7>;V`1J<", "]");
      hashMap0.put(".,/ukQGV", "v'0Q(p!(ZG}WcVL");
      hashMap0.put("", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal("Georgian");
      String string0 = mapConfiguration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Georgian", "Georgian");
      hashMap0.put("", "]");
      hashMap0.put("R$o7>;V`1J<", "]");
      hashMap0.put(".,/ukQGV", "v'0Q(p!(ZG}WcVL");
      hashMap0.put("", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal("Georgian");
      String string0 = mapConfiguration0.toString();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger("org.postgresql.core.SqlCommand");
      mapConfiguration0.setLogger(configurationLogger0);
      mapConfiguration0.getKeysInternal();
      boolean boolean1 = mapConfiguration0.isTrimmingDisabled();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Integer integer0 = new Integer(159);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR;
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(integer0, eventType0, "Ncq<*QmYo", environmentConfiguration0, false);
      configurationEvent0.toString();
      ConfigurationEvent configurationEvent1 = new ConfigurationEvent(configurationEvent0, configurationEvent0.ANY_HIERARCHICAL, "poolIterators", configurationEvent0, false);
      // Undeclared exception!
      try { 
        environmentConfiguration0.addPropertyDirect("???", configurationEvent1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException("org.apache.commons.configuration2.EnvironmentConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      String string0 = null;
      // Undeclared exception!
      try { 
        mapConfiguration0.addPropertyDirect((String) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field[] fieldArray0 = new Field[0];
      Map<String, Integer> map0 = PgResultSet.createColumnNameIndexMap(fieldArray0, false);
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      mapConfiguration0.setTrimmingDisabled(false);
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.containsKeyInternal("DP\"D");
      mapConfiguration0.toString();
      mapConfiguration0.sizeInternal();
      mapConfiguration0.clone();
      mapConfiguration0.getFloat("MapConfiguration [map={}, trimmingDisabled=false]", (float) 0);
      Class<DummyLookup> class0 = DummyLookup.class;
      mapConfiguration0.getArray(class0, "DP\"D");
      mapConfiguration0.getMap();
      mapConfiguration0.clone();
      mapConfiguration0.containsKeyInternal("?");
      mapConfiguration0.containsKeyInternal(" TIME_ZONE = '");
      mapConfiguration0.clearPropertyDirect(" TIME_ZONE = '");
      mapConfiguration0.clearPropertyDirect("");
      mapConfiguration0.clearPropertyDirect("MapConfiguration [map={}, trimmingDisabled=false]");
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.setTrimmingDisabled(true);
      mapConfiguration0.isEmptyInternal();
      Float float0 = new Float(0.0);
      mapConfiguration0.getFloat(" TIME_ZONE = '", float0);
      mapConfiguration0.getPropertyInternal((String) null);
      boolean boolean0 = mapConfiguration0.isTrimmingDisabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearErrorListeners();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      systemConfiguration0.sizeInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
      systemConfiguration0.isTrimmingDisabled();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.getMap();
      systemConfiguration0.clearPropertyDirect("tr-TR");
      systemConfiguration0.setTrimmingDisabled(false);
      systemConfiguration0.getDouble("v15", (double) 107);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      systemConfiguration0.copyEventListeners(propertiesConfiguration0);
      systemConfiguration0.clearPropertyDirect(" [map=");
      boolean boolean0 = systemConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearErrorListeners();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      systemConfiguration0.sizeInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
      systemConfiguration0.isTrimmingDisabled();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.getMap();
      systemConfiguration0.clearPropertyDirect("tr-TR");
      systemConfiguration0.setTrimmingDisabled(false);
      systemConfiguration0.getDouble("v15", (double) 107);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      systemConfiguration0.copyEventListeners(propertiesConfiguration0);
      systemConfiguration0.clearPropertyDirect(" [map=");
      boolean boolean0 = systemConfiguration0.isEmptyInternal();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.clearPropertyDirect("v15");
      systemConfiguration0.clearPropertyDirect("dlUl%>k3Iw~Jbc1");
      systemConfiguration0.getKeysInternal();
      systemConfiguration0.clearPropertyDirect("v15");
      systemConfiguration0.toString();
      Integer integer0 = new Integer(108);
      systemConfiguration0.addPropertyDirect("", integer0);
      systemConfiguration0.toString();
      systemConfiguration0.getKeysInternal();
      assertTrue(systemConfiguration0.isTrimmingDisabled());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.getFloat("GSS_ENC_MODE", 0.0F);
      systemConfiguration0.clone();
      systemConfiguration0.setDetailEvents(true);
      Lookup lookup0 = ConfigurationInterpolator.nullSafeLookup((Lookup) null);
      systemConfiguration0.addPropertyDirect("GSS_ENC_MODE", lookup0);
      systemConfiguration0.isEmptyInternal();
      systemConfiguration0.addPropertyDirect("GSS_ENC_MODE", (Object) null);
      systemConfiguration0.getPropertyInternal("0RWg.)E");
      systemConfiguration0.setTrimmingDisabled(true);
      Integer integer0 = Integer.valueOf((-1349));
      systemConfiguration0.addPropertyDirect("0RWg.)E", integer0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      BigInteger bigInteger0 = NumberType.MIN_LONG_BI;
      Double double0 = new Double(6312.181287);
      environmentConfiguration0.getDouble("", double0);
      bigInteger0.isProbablePrime(0);
      environmentConfiguration0.getBigInteger("6H", bigInteger0);
      environmentConfiguration0.getShort("JG(3,VxCSGv", (short)3713);
      // Undeclared exception!
      try { 
        environmentConfiguration0.interpolatedConfiguration();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException("org.apache.commons.configuration2.EnvironmentConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.prefixSet();
      configurationInterpolator0.getParentInterpolator();
      environmentConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      ListDelimiterHandler listDelimiterHandler0 = environmentConfiguration0.getListDelimiterHandler();
      environmentConfiguration0.setListDelimiterHandler(listDelimiterHandler0);
      environmentConfiguration0.getPropertyInternal("");
      environmentConfiguration0.getKeysInternal();
      // Undeclared exception!
      try { 
        environmentConfiguration0.clone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.AbstractConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      EventType.fetchSuperEventTypes(eventType0);
      mapConfiguration0.getEventListeners(eventType0);
      // Undeclared exception!
      try { 
        mapConfiguration0.containsKeyInternal("rV4;7");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.sizeInternal();
      environmentConfiguration0.clone();
      String string0 = "5/>FqDJdrF2+)=oZn";
      environmentConfiguration0.getKeys("5/>FqDJdrF2+)=oZn");
      environmentConfiguration0.getMap();
      environmentConfiguration0.initLogger((ConfigurationLogger) null);
      environmentConfiguration0.toString();
      String string1 = "";
      // Undeclared exception!
      try { 
        environmentConfiguration0.clearPropertyDirect("");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException("org.apache.commons.configuration2.EnvironmentConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      systemConfiguration0.addPropertyDirect(",W.Mvyh0.:", dummyLookup0);
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Object object0 = systemConfiguration0.clone();
      systemConfiguration0.getKeys("b@");
      systemConfiguration0.isTrimmingDisabled();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearPropertyDirect("");
      assertTrue(systemConfiguration0.isTrimmingDisabled());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      boolean boolean0 = environmentConfiguration0.containsKeyInternal("]");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      String string0 = systemConfiguration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.isTrimmingDisabled();
      environmentConfiguration0.beginWrite(false);
      environmentConfiguration0.isTrimmingDisabled();
      int int0 = environmentConfiguration0.sizeInternal();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Object object0 = environmentConfiguration0.getPropertyInternal("7f)Tn$1eb");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      poolXADataSourceImpl0.getPdbRoles();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.getPropertyInternal("oracle.security.client.default_username");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.getKeysInternal();
      environmentConfiguration0.setTrimmingDisabled(false);
      assertTrue(environmentConfiguration0.isTrimmingDisabled());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearInternal();
      boolean boolean0 = systemConfiguration0.containsKeyInternal("pf=@9?-&CStn:gz6P+");
      boolean boolean1 = systemConfiguration0.isEmptyInternal();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearInternal();
      boolean boolean0 = systemConfiguration0.containsKeyInternal("pf=@9?-&CStn:gz6P+");
      boolean boolean1 = systemConfiguration0.isEmptyInternal();
      Map<String, Object> map0 = systemConfiguration0.getMap();
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hashtable<String, Delayed> hashtable0 = new Hashtable<String, Delayed>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Map<String, Object> map0 = mapConfiguration0.getMap();
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.sizeInternal();
      Object object0 = environmentConfiguration0.getPropertyInternal("d:Z Q]]@#S('");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Object object0 = environmentConfiguration0.getPropertyInternal(">ByrRW");
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hashtable<String, MapConfiguration> hashtable0 = new Hashtable<String, MapConfiguration>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.setTrimmingDisabled(true);
      systemConfiguration0.setPropertyInternal("getMaxRowSize", "getMaxRowSize");
      systemConfiguration0.append(systemConfiguration0);
      boolean boolean0 = systemConfiguration0.containsKeyInternal("H5='%m&VV~(A");
      assertTrue(systemConfiguration0.isTrimmingDisabled());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.setTrimmingDisabled(true);
      systemConfiguration0.setPropertyInternal("getMaxRowSize", "getMaxRowSize");
      systemConfiguration0.append(systemConfiguration0);
      boolean boolean0 = systemConfiguration0.containsKeyInternal("H5='%m&VV~(A");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
      assertFalse(systemConfiguration0.isDetailEvents());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect("gX0(3!>(}", integer0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal("gX0(3!>(}");
      mapConfiguration0.getMap();
      boolean boolean1 = mapConfiguration0.isEmptyInternal();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect("gX0(3!>(}", integer0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal("gX0(3!>(}");
      mapConfiguration0.getMap();
      boolean boolean1 = mapConfiguration0.isEmptyInternal();
      String string0 = mapConfiguration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Object object0 = mapConfiguration0.clone();
      boolean boolean0 = mapConfiguration0.isEmptyInternal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Object object0 = mapConfiguration0.clone();
      boolean boolean0 = mapConfiguration0.isEmptyInternal();
      mapConfiguration0.getKeysInternal();
      mapConfiguration0.sizeInternal();
      ;
}
}
