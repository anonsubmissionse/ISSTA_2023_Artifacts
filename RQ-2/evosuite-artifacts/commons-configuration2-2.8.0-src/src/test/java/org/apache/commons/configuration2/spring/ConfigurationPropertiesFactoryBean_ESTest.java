/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 00:53:52 GMT 2022
 */

package org.apache.commons.configuration2.spring;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.util.Hashtable;
import org.apache.commons.configuration2.BaseConfiguration;
import org.apache.commons.configuration2.CombinedConfiguration;
import org.apache.commons.configuration2.CompositeConfiguration;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.DatabaseConfiguration;
import org.apache.commons.configuration2.DynamicCombinedConfiguration;
import org.apache.commons.configuration2.EnvironmentConfiguration;
import org.apache.commons.configuration2.JNDIConfiguration;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.SubnodeConfiguration;
import org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean;
import org.apache.commons.configuration2.tree.NodeSelector;
import org.apache.commons.configuration2.tree.TrackedNodeModel;
import org.apache.commons.configuration2.tree.UnionCombiner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.javax.naming.MockInitialContext;
import org.junit.runner.RunWith;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.VfsResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationPropertiesFactoryBean_ESTest extends ConfigurationPropertiesFactoryBean_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
      configurationPropertiesFactoryBean0.setThrowExceptionOnMissing(false);
      boolean boolean0 = configurationPropertiesFactoryBean0.isThrowExceptionOnMissing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[1];
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      configurationArray0[0] = (Configuration) dynamicCombinedConfiguration0;
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      configurationPropertiesFactoryBean0.getObject();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.getLocations();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(dynamicCombinedConfiguration0);
      Resource[] resourceArray0 = new Resource[0];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.getLocations();
      assertFalse(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(dynamicCombinedConfiguration0);
      Configuration[] configurationArray0 = new Configuration[2];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.getConfigurations();
      assertFalse(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[0];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.getConfigurations();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      CompositeConfiguration compositeConfiguration0 = configurationPropertiesFactoryBean0.getConfiguration();
      assertTrue(compositeConfiguration0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      configurationPropertiesFactoryBean0.getConfiguration();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[null]]
         //
         verifyException("org.apache.commons.configuration2.tree.NodeTracker", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
      configurationPropertiesFactoryBean0.getObject();
      configurationPropertiesFactoryBean0.getObject();
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<PropertiesConfiguration, BaseConfiguration> hashtable0 = new Hashtable<PropertiesConfiguration, BaseConfiguration>();
      MockInitialContext mockInitialContext0 = new MockInitialContext(hashtable0);
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(mockInitialContext0, "mB$VjKHYP'xglZ m");
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(jNDIConfiguration0);
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      mockInitialContext0.bind("mB$VjKHYP'xglZ m", (Object) databaseConfiguration0);
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.DatabaseConfiguration cannot be cast to javax.naming.Context
         //
         verifyException("org.apache.commons.configuration2.JNDIConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      FileSystemResource fileSystemResource0 = new FileSystemResource("");
      resourceArray0[1] = (Resource) fileSystemResource0;
      ClassPathResource classPathResource0 = new ClassPathResource("", (ClassLoader) null);
      resourceArray0[0] = (Resource) classPathResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException("org.apache.commons.configuration2.io.DefaultFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[1];
      VfsResource vfsResource0 = new VfsResource(configurationPropertiesFactoryBean0);
      resourceArray0[0] = (Resource) vfsResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      // Undeclared exception!
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.springframework.core.io.VfsUtils
         //
         verifyException("org.springframework.core.io.VfsResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      byte[] byteArray0 = new byte[4];
      ByteArrayResource byteArrayResource0 = new ByteArrayResource(byteArray0);
      resourceArray0[0] = (Resource) byteArrayResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // Byte array resource [resource loaded from byte array] cannot be resolved to URL
         //
         verifyException("org.springframework.core.io.AbstractResource", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = null;
      try {
        configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean((Configuration) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // configuration
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[0];
      Configuration[] configurationArray0 = new Configuration[1];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[16];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no configuration object or location specified
         //
         verifyException("org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getObject();
      assertFalse(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getConfigurations();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isThrowExceptionOnMissing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getLocations();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[1];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.configuration2.CompositeConfiguration", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getObjectType();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getConfiguration();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isSingleton();
      assertTrue(configurationPropertiesFactoryBean0.isThrowExceptionOnMissing());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isSingleton();
      assertTrue(boolean0);
}
}
