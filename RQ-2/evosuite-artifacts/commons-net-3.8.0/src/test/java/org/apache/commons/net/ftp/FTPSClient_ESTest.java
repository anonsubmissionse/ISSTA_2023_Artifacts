/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:22:27 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import org.apache.commons.net.ftp.FTPSClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPSClient_ESTest extends FTPSClient_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply(")ADAT=");
      assertNotNull(byteArray0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply(")ADAT=");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply(")ADAT=");
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply(")ADAT=");
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("", true);
      try { 
        fTPSClient0.execAUTH("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_(0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      try { 
        fTPSClient0.parsePBSZ(4294967295L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("XGs[%2+|o%|/nmg+", true);
      fTPSClient0.setWantClientAuth(true);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("XGs[%2+|o%|/nmg+", true);
      fTPSClient0.setWantClientAuth(true);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      fTPSClient0.setNeedClientAuth(true);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      fTPSClient0.setNeedClientAuth(true);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("E", true);
      fTPSClient0.setEndpointCheckingEnabled(true);
      boolean boolean0 = fTPSClient0.isEndpointCheckingEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true, (SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSClient0.setEnabledProtocols((String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSClient0.setEnabledCipherSuites((String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, true);
      try { 
        fTPSClient0.sendCommand("y0)-'Vgy+4[Iz;( (", "eZNs+f/8ck");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null);
      try { 
        fTPSClient0.parsePBSZ(0L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("A3|Qf:>lNmhRS47J>");
      try { 
        fTPSClient0.execAUTH();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("E", true);
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_("\r\n", "E");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("C", false);
      // Undeclared exception!
      try { 
        fTPSClient0._openDataConnection_(119, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSClient fTPSClient0 = new FTPSClient(false, sSLContext0);
      // Undeclared exception!
      try { 
        fTPSClient0.execPBSZ((-1126L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("LpE", false);
      // Undeclared exception!
      try { 
        fTPSClient0.parseADATReply("\r\n");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.util.Base64", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("p");
      fTPSClient0.parseADATReply((String) null);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("p");
      fTPSClient0.parseADATReply((String) null);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply("ADAT=");
      assertNotNull(byteArray0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply("ADAT=");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply("ADAT=");
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = fTPSClient0.parseADATReply("ADAT=");
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("xjn4-h\"V`638U>g'3");
      byte[] byteArray0 = new byte[3];
      try { 
        fTPSClient0.execENC(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      try { 
        fTPSClient0.execENC((byte[]) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      byte[] byteArray0 = new byte[9];
      try { 
        fTPSClient0.execCONF(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(false);
      try { 
        fTPSClient0.execCONF((byte[]) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("", true);
      byte[] byteArray0 = new byte[6];
      try { 
        fTPSClient0.execMIC(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      try { 
        fTPSClient0.execMIC((byte[]) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      byte[] byteArray0 = new byte[7];
      try { 
        fTPSClient0.execADAT(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      try { 
        fTPSClient0.execADAT((byte[]) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.disconnect();
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.disconnect();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(true);
      // Undeclared exception!
      try { 
        fTPSClient0.execPROT("T");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(")M_3i-G9mz ");
      // Undeclared exception!
      try { 
        fTPSClient0.execPBSZ(4294967315L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      try { 
        fTPSClient0.execPBSZ(9L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      // Undeclared exception!
      try { 
        fTPSClient0.parsePBSZ((byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      fTPSClient0.getEnabledProtocols();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      fTPSClient0.getEnabledProtocols();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.getEnabledCipherSuites();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.getEnabledCipherSuites();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      boolean boolean0 = fTPSClient0.getUseClientMode();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      boolean boolean0 = fTPSClient0.getUseClientMode();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, false);
      boolean boolean0 = fTPSClient0.getUseClientMode();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(" JM{0a8$Xd 17Gp");
      boolean boolean0 = fTPSClient0.getWantClientAuth();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(" JM{0a8$Xd 17Gp");
      boolean boolean0 = fTPSClient0.getWantClientAuth();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(" JM{0a8$Xd 17Gp");
      boolean boolean0 = fTPSClient0.getWantClientAuth();
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("AATH");
      boolean boolean0 = fTPSClient0.getNeedClientAuth();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("AATH");
      boolean boolean0 = fTPSClient0.getNeedClientAuth();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("AATH");
      boolean boolean0 = fTPSClient0.getNeedClientAuth();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      boolean boolean0 = fTPSClient0.getEnableSessionCreation();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      boolean boolean0 = fTPSClient0.getEnableSessionCreation();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      boolean boolean0 = fTPSClient0.getEnableSessionCreation();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSClient fTPSClient0 = new FTPSClient(false, sSLContext0);
      // Undeclared exception!
      try { 
        fTPSClient0.sslNegotiation();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      // Undeclared exception!
      try { 
        fTPSClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      // Undeclared exception!
      try { 
        fTPSClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("LpE", false);
      fTPSClient0.getHostnameVerifier();
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("LpE", false);
      fTPSClient0.getHostnameVerifier();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      String string0 = fTPSClient0.getAuthValue();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      String string0 = fTPSClient0.getAuthValue();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("$VALUES");
      String string0 = fTPSClient0.getAuthValue();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("", false);
      fTPSClient0.isEndpointCheckingEnabled();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("", false);
      fTPSClient0.isEndpointCheckingEnabled();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((SSLContext) null);
      try { 
        fTPSClient0.execPROT((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.setEnabledSessionCreation(true);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.setEnabledSessionCreation(true);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      String[] stringArray0 = new String[2];
      fTPSClient0.setEnabledCipherSuites(stringArray0);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      String[] stringArray0 = new String[2];
      fTPSClient0.setEnabledCipherSuites(stringArray0);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      fTPSClient0.setUseClientMode(true);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      fTPSClient0.setUseClientMode(true);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(" JM{0a8$Xd 17Gp");
      try { 
        fTPSClient0.execCCC();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("LpE", false);
      fTPSClient0.setAuthValue("/systemType.properties");
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      MockSocket mockSocket0 = new MockSocket();
      fTPSClient0._prepareDataSocket_(mockSocket0);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      MockSocket mockSocket0 = new MockSocket();
      fTPSClient0._prepareDataSocket_(mockSocket0);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("`");
      String[] stringArray0 = new String[2];
      fTPSClient0.setEnabledProtocols(stringArray0);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("`");
      String[] stringArray0 = new String[2];
      fTPSClient0.setEnabledProtocols(stringArray0);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setHostnameVerifier((HostnameVerifier) null);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setHostnameVerifier((HostnameVerifier) null);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      TrustManager trustManager0 = fTPSClient0.getTrustManager();
      fTPSClient0.setTrustManager(trustManager0);
      assertNotNull(fTPSClient0.getAuthValue());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      TrustManager trustManager0 = fTPSClient0.getTrustManager();
      fTPSClient0.setTrustManager(trustManager0);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient(".@E6'V1cuo[d J", true);
      try { 
        fTPSClient0.sslNegotiation();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not initialize SSL context
         //
         verifyException("org.apache.commons.net.util.SSLContextUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("AATH");
      fTPSClient0.setKeyManager((KeyManager) null);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("AATH");
      fTPSClient0.setKeyManager((KeyManager) null);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
}
