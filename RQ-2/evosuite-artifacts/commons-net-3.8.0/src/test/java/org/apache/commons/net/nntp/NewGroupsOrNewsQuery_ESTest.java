/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:48:08 GMT 2022
 */

package org.apache.commons.net.nntp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.apache.commons.net.nntp.NewGroupsOrNewsQuery;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewGroupsOrNewsQuery_ESTest extends NewGroupsOrNewsQuery_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(calendar0, false);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(calendar0, false);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(93, 93, 93, 93, 427);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addNewsgroup("");
      newGroupsOrNewsQuery0.getNewsgroups();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(93, 93, 93, 93, 427);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addNewsgroup("");
      newGroupsOrNewsQuery0.getNewsgroups();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 48, 48);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addDistribution("");
      newGroupsOrNewsQuery0.getDistributions();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 48, 48);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.addDistribution("");
      newGroupsOrNewsQuery0.getDistributions();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = null;
      try {
        newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery((Calendar) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.nntp.NewGroupsOrNewsQuery", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3708), (-3708), (-3708));
      mockGregorianCalendar0.set(0, (-3708));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = null;
      try {
        newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale locale0 = new Locale("Pattern is missing", "Pattern is missing", "Pattern is missing");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(calendar0, true);
      newGroupsOrNewsQuery0.omitNewsgroup("202121");
      newGroupsOrNewsQuery0.addNewsgroup("202121");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getNewsgroups();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getNewsgroups();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addNewsgroup((String) null);
      String string0 = newGroupsOrNewsQuery0.getNewsgroups();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addNewsgroup((String) null);
      String string0 = newGroupsOrNewsQuery0.getNewsgroups();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addNewsgroup((String) null);
      String string0 = newGroupsOrNewsQuery0.getNewsgroups();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.getDistributions();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      newGroupsOrNewsQuery0.getDistributions();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      String string0 = newGroupsOrNewsQuery0.getDistributions();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      String string0 = newGroupsOrNewsQuery0.getDistributions();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      String string0 = newGroupsOrNewsQuery0.getDistributions();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.addDistribution((String) null);
      newGroupsOrNewsQuery0.addDistribution("202121");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getTime();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      newGroupsOrNewsQuery0.getTime();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, true);
      boolean boolean0 = newGroupsOrNewsQuery0.isGMT();
      assertNotNull(newGroupsOrNewsQuery0.getDate());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      String string0 = newGroupsOrNewsQuery0.getDate();
      assertTrue(newGroupsOrNewsQuery0.isGMT());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
      NewGroupsOrNewsQuery newGroupsOrNewsQuery0 = new NewGroupsOrNewsQuery(mockGregorianCalendar0, false);
      String string0 = newGroupsOrNewsQuery0.getDate();
      assertNotNull(string0);
}
}
