 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1712, "+mf/7*do1,x>K^^&");
      tFTPErrorPacket0.type = 0;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "");
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 2);
      tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "");
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 2);
      tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1959, "G>i");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(0, tFTPErrorPacket0.getError());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1959, "G>i");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 1959, "G>i");
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 47, 0, (String) null);
      tFTPErrorPacket0.getMessage();
      assertEquals(0, tFTPErrorPacket0.getError());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.getMessage();
      assertEquals(0, tFTPErrorPacket0.getError());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 0, 0, "I-;Q$3w(xEpc?");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, 1929, 1929, "u-)");
      int int0 = tFTPErrorPacket0.getError();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1), (-1), " ");
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram((DatagramPacket) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket((InetAddress) null, (-38), (-38), "");
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 5);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-38
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "Bad file name and mode format.");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-158), (-158), (String) null);
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      DatagramPacket datagramPacket1 = tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket1);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      DatagramPacket datagramPacket1 = tFTPErrorPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket1);
      assertEquals(0, tFTPErrorPacket1.getError());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(0, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket0);
      assertNotNull(tFTPErrorPacket1.getMessage());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(0, tFTPErrorPacket1.getError());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "u-)");
      tFTPErrorPacket0.port = 270;
      DatagramPacket datagramPacket0 = tFTPErrorPacket0.newDatagram();
      TFTPErrorPacket tFTPErrorPacket1 = new TFTPErrorPacket(datagramPacket0);
      assertEquals(0, tFTPErrorPacket1.getPort());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)5, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // Bad error packet. No message.
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, (byte)0);
      TFTPErrorPacket tFTPErrorPacket0 = null;
      try {
        tFTPErrorPacket0 = new TFTPErrorPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPErrorPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      String string0 = tFTPErrorPacket0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      int int0 = tFTPErrorPacket0.getError();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      // Undeclared exception!
      try { 
        tFTPErrorPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-1348
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPErrorPacket tFTPErrorPacket0 = new TFTPErrorPacket(inetAddress0, (-1348), (-26), "");
      tFTPErrorPacket0.getMessage();
      assertEquals(0, tFTPErrorPacket0.getError());
}
