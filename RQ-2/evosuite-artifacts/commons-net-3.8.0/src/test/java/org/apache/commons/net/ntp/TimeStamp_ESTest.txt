 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime((-8959209424988982477L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long long0 = TimeStamp.getTime(2085978496000L);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(2085978496000L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(2085978496839L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("83aa7e80.00000000");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("83aa7e7d.a872b020");
      assertEquals(0, timeStamp0.getTime());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(0L);
      long long0 = timeStamp0.ntpValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(2645L);
      long long0 = timeStamp0.ntpValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = TimeStamp.getTime((-8959209420479266816L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = TimeStamp.getTime((-8959209420530806424L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      long long0 = timeStamp0.getTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-1874L));
      long long0 = timeStamp0.getTime();
      assertEquals(1, timeStamp0.getFraction());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-1874L));
      long long0 = timeStamp0.getTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(0L);
      long long0 = timeStamp0.getSeconds();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496839L);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496000L);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 63, (-1053), (-1), 24, 1126);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      long long0 = timeStamp0.getFraction();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 63, (-1053), (-1), 24, 1126);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      long long0 = timeStamp0.getFraction();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(2085978820196L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(1, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-5559L));
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(2085978496000L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(0, timeStamp0.getTime());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("+F");
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("d6a8f941.51eb851e");
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        TimeStamp.decodeNtpHexString("null");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeStamp timeStamp0 = null;
      try {
        timeStamp0 = new TimeStamp("91\"");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"91\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = TimeStamp.getTime((-567L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(2645L);
      Date date0 = timeStamp0.getDate();
      assertEquals(0, timeStamp0.getTime());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(2645L);
      Date date0 = timeStamp0.getDate();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.ntpValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(0L);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(0, timeStamp1.ntpValue());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      MockDate mockDate0 = new MockDate(1266, 1266, 1266, 1266, 1266, 1266);
      TimeStamp timeStamp1 = new TimeStamp(mockDate0);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      MockDate mockDate0 = new MockDate(1266, 1266, 1266, 1266, 1266, 1266);
      TimeStamp timeStamp1 = new TimeStamp(mockDate0);
      int int0 = timeStamp0.compareTo(timeStamp1);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      MockDate mockDate0 = new MockDate(1266, 1266, 1266, 1266, 1266, 1266);
      TimeStamp timeStamp1 = new TimeStamp(mockDate0);
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.toUTCString();
      String string0 = timeStamp0.toUTCString();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.00000cb1");
      boolean boolean0 = timeStamp0.equals("00000000.00000cb1");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.00000cb1");
      boolean boolean0 = timeStamp0.equals("00000000.00000cb1");
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("7");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertEquals(0, timeStamp1.ntpValue());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("7");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("7");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("7");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString((String) null);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("org.apache.commons.net.ntp.TimeStamp", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      // Undeclared exception!
      try { 
        timeStamp0.compareTo((TimeStamp) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ntp.TimeStamp", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.00000cb1");
      long long0 = timeStamp0.getTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.00000cb1");
      long long0 = timeStamp0.getTime();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getSeconds();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getSeconds();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.00000cb1");
      String string0 = timeStamp0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getFraction();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getFraction();
      assertEquals(1, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = TimeStamp.toString((-1L));
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.toDateString();
      String string0 = timeStamp0.toDateString();
      assertEquals(0, timeStamp0.ntpValue());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.toDateString();
      String string0 = timeStamp0.toDateString();
      ;
}
