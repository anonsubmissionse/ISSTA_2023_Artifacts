 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 1363);
      String string0 = tFTPAckPacket0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("+:");
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 115, 115);
      tFTPAckPacket0.type = 65535;
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      assertEquals(0, tFTPAckPacket0.getBlockNumber());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("+:");
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 115, 115);
      tFTPAckPacket0.type = 65535;
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("+:");
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 115, 115);
      tFTPAckPacket0.type = 65535;
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("+:");
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 115, 115);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      tFTPAckPacket0.type = 65535;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.net.tftp.TFTPAckPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 946, 946);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[5];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 946, 946);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[5];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 946, 946);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[5];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 0);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 0);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 0);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      byte[] byteArray0 = new byte[9];
      tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("Bad packet.  Invalid TFTP operator code.");
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 0);
      int int0 = tFTPAckPacket0.getBlockNumber();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        tFTPAckPacket0.newDatagram((DatagramPacket) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPAckPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 0, 1363);
      tFTPAckPacket0.port = (int) (byte)0;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 3, 0, inetAddress0, (byte)1);
      tFTPAckPacket0.port = (int) (byte) (-80);
      // Undeclared exception!
      try { 
        tFTPAckPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-80
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, (-932), 5444);
      // Undeclared exception!
      try { 
        tFTPAckPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-932
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TFTPAckPacket tFTPAckPacket0 = null;
      try {
        tFTPAckPacket0 = new TFTPAckPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPAckPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0);
      TFTPAckPacket tFTPAckPacket0 = null;
      try {
        tFTPAckPacket0 = new TFTPAckPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPAckPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0, 0);
      TFTPAckPacket tFTPAckPacket0 = null;
      try {
        tFTPAckPacket0 = new TFTPAckPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPAckPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 55, 55);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      TFTPAckPacket tFTPAckPacket1 = new TFTPAckPacket(datagramPacket0);
      assertEquals(0, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 55, 55);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      TFTPAckPacket tFTPAckPacket1 = new TFTPAckPacket(datagramPacket0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 55, 55);
      DatagramPacket datagramPacket0 = tFTPAckPacket0.newDatagram();
      TFTPAckPacket tFTPAckPacket1 = new TFTPAckPacket(datagramPacket0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 65535, 65535);
      int int0 = tFTPAckPacket0.getBlockNumber();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPAckPacket tFTPAckPacket0 = new TFTPAckPacket(inetAddress0, 65535, 65535);
      tFTPAckPacket0.setBlockNumber((-1));
      int int0 = tFTPAckPacket0.getBlockNumber();
      assertEquals(1, int0);
}
