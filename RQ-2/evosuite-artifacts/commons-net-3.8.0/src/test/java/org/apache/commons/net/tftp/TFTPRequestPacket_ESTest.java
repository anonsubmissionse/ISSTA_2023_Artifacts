/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:00:19 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPPacket;
import org.apache.commons.net.tftp.TFTPReadRequestPacket;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPRequestPacket_ESTest extends TFTPRequestPacket_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("a:IwtuM4");
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, (-2387), "a:IwtuM4", (-2387));
      tFTPReadRequestPacket0.port = 2027;
      int int0 = tFTPReadRequestPacket0.getMode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 5, "GxNoOv2nGbdUDa", 0);
      tFTPWriteRequestPacket0.type = 5000;
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 5, "GxNoOv2nGbdUDa", 0);
      tFTPWriteRequestPacket0.type = 5000;
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      assertEquals(0, tFTPWriteRequestPacket0.getMode());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 5, "GxNoOv2nGbdUDa", 0);
      tFTPWriteRequestPacket0.type = 5000;
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      tFTPWriteRequestPacket0.port = 115;
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, (byte)0);
      tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(0, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      tFTPWriteRequestPacket0.port = 115;
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, (byte)0);
      tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      tFTPWriteRequestPacket0.port = 115;
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      tFTPWriteRequestPacket0.port = 115;
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "", 0);
      int int0 = tFTPWriteRequestPacket0.getMode();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("2]J,k[_3>{}f=");
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 1, "2]J,k[_3>{}f=", 1);
      int int0 = tFTPReadRequestPacket0.getMode();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 538, (String) null, 0);
      tFTPWriteRequestPacket0.getFilename();
      assertEquals(0, tFTPWriteRequestPacket0.getMode());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "", 0);
      tFTPWriteRequestPacket0.getFilename();
      assertEquals(0, tFTPWriteRequestPacket0.getMode());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket((InetAddress) null, 512, (String) null, 115);
      byte[] byteArray0 = new byte[4];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)1);
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      tFTPWriteRequestPacket0.setPort((-564));
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-564
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, 0, "!Cm\"A", 0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        tFTPReadRequestPacket0.newDatagram((DatagramPacket) null, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 538, (String) null, 0);
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.newDatagram();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, (-20), "GxNoOv2nZbdUDa", 0);
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.newDatagram();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-20
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("a:IwtuM4");
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, (-2387), "a:IwtuM4", (-2387));
      // Undeclared exception!
      try { 
        tFTPReadRequestPacket0.newDatagram();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2387
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("a:IwtuM4");
      TFTPReadRequestPacket tFTPReadRequestPacket0 = new TFTPReadRequestPacket(inetAddress0, (-2387), "a:IwtuM4", (-2387));
      tFTPReadRequestPacket0.getFilename();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)1);
      datagramPacket0.setData(byteArray0);
      TFTPReadRequestPacket tFTPReadRequestPacket0 = null;
      try {
        tFTPReadRequestPacket0 = new TFTPReadRequestPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // Unrecognized TFTP transfer mode: 
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)1);
      TFTPReadRequestPacket tFTPReadRequestPacket0 = null;
      try {
        tFTPReadRequestPacket0 = new TFTPReadRequestPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // Bad file name and mode format.
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("Q");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "Q", 0);
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      TFTPReadRequestPacket tFTPReadRequestPacket0 = null;
      try {
        tFTPReadRequestPacket0 = new TFTPReadRequestPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, 118);
      DatagramPacket datagramPacket1 = tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket1 = (TFTPWriteRequestPacket)TFTPPacket.newTFTPPacket(datagramPacket1);
      assertEquals(1, datagramPacket0.getLength());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, ">", 0);
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, 118);
      DatagramPacket datagramPacket1 = tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket1 = (TFTPWriteRequestPacket)TFTPPacket.newTFTPPacket(datagramPacket1);
      assertNotNull(tFTPWriteRequestPacket1.getFilename());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "", 0);
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, 116);
      tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getPort());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("?-[hl}[IMxT");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "", 0);
      byte[] byteArray0 = new byte[15];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, inetAddress0, 116);
      tFTPWriteRequestPacket0.newDatagram(datagramPacket0, byteArray0);
      assertEquals(1, datagramPacket0.getLength());
}
}
