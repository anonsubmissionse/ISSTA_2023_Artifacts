/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:48:08 GMT 2022
 */

package org.apache.commons.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ProtocolCommandListener;
import org.apache.commons.net.bsd.RLoginClient;
import org.apache.commons.net.echo.EchoTCPClient;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.imap.AuthenticatingIMAPClient;
import org.apache.commons.net.imap.IMAPSClient;
import org.apache.commons.net.nntp.NNTP;
import org.apache.commons.net.nntp.NNTPClient;
import org.apache.commons.net.pop3.ExtendedPOP3Client;
import org.apache.commons.net.pop3.POP3Client;
import org.apache.commons.net.pop3.POP3SClient;
import org.apache.commons.net.smtp.AuthenticatingSMTPClient;
import org.apache.commons.net.telnet.TelnetClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SocketClient_ESTest extends SocketClient_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("\r\n", false);
      // Undeclared exception!
      try { 
        fTPSClient0.setSoLinger(false, 3144);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      pOP3Client0.setSendBufferSize((-112));
      InetAddress inetAddress0 = MockInetAddress.getByName("Unknown parser type: ");
      // Undeclared exception!
      try { 
        pOP3Client0.connect(inetAddress0, (-112));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // negative send size
         //
         verifyException("java.net.Socket", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(false);
      byte[] byteArray0 = new byte[4];
      authenticatingIMAPClient0.setReceiveBufferSize((byte) (-96));
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      // Undeclared exception!
      try { 
        authenticatingIMAPClient0.connect("9U6?qu|", (-1060), inetAddress0, (-1060));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // invalid receive size
         //
         verifyException("java.net.Socket", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient("TLS", "\r\n");
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          // Undeclared exception!
          try { 
            authenticatingSMTPClient0.connect(inetAddress0, 143, inetAddress0, 993);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:993\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.Socket.bind(Socket.java:660)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:251)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:236)
             // sun.reflect.GeneratedMethodAccessor297.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      // Undeclared exception!
      try { 
        authenticatingSMTPClient0.connect(inetAddress0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        fTPSClient0.verifyRemote(mockSocket0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, false);
      nNTPClient0.removeProtocolCommandListener(printCommandListener0);
      assertEquals(0, nNTPClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, false);
      nNTPClient0.removeProtocolCommandListener(printCommandListener0);
      assertEquals(0, nNTPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, false);
      nNTPClient0.removeProtocolCommandListener(printCommandListener0);
      assertEquals(0, nNTPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      nNTPClient0.setDefaultTimeout((-2997));
      int int0 = nNTPClient0.getDefaultTimeout();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      authenticatingSMTPClient0.setConnectTimeout((-1398));
      int int0 = authenticatingSMTPClient0.getConnectTimeout();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      InetAddress inetAddress0 = MockInetAddress.getByName("\r\n");
      // Undeclared exception!
      try { 
        echoTCPClient0.connect((InetAddress) null, (-983), inetAddress0, (-983));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-983
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.connect((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Socket", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient((String) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      // Undeclared exception!
      try { 
        telnetClient0.connect("eK?0FV:Xh!@4m^", 72, inetAddress0, (-1740));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1740
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      nNTP0.setReceiveBufferSize(0);
      // Undeclared exception!
      try { 
        nNTP0.connect("", 182);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // invalid receive size
         //
         verifyException("java.net.Socket", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, true, 'j');
      // Undeclared exception!
      try { 
        rLoginClient0.addProtocolCommandListener(printCommandListener0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setServerSocketFactory((ServerSocketFactory) null);
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setServerSocketFactory((ServerSocketFactory) null);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.setServerSocketFactory((ServerSocketFactory) null);
      assertEquals(0, fTPSClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      SSLContext sSLContext0 = SSLContext.getDefault();
      SSLSocketFactory sSLSocketFactory0 = sSLContext0.getSocketFactory();
      nNTP0.setSocketFactory(sSLSocketFactory0);
      assertEquals(0, nNTP0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      SSLContext sSLContext0 = SSLContext.getDefault();
      SSLSocketFactory sSLSocketFactory0 = sSLContext0.getSocketFactory();
      nNTP0.setSocketFactory(sSLSocketFactory0);
      assertEquals(0, nNTP0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      SSLContext sSLContext0 = SSLContext.getDefault();
      SSLSocketFactory sSLSocketFactory0 = sSLContext0.getSocketFactory();
      nNTP0.setSocketFactory(sSLSocketFactory0);
      assertEquals(1, nNTP0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      nNTP0.setSocketFactory((SocketFactory) null);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      nNTP0.setSocketFactory((SocketFactory) null);
      assertEquals(0, nNTP0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      nNTP0.setSocketFactory((SocketFactory) null);
      assertEquals(0, nNTP0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.isConnected();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.isConnected();
      assertEquals(0, fTPSClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      fTPSClient0.isConnected();
      assertEquals(0, fTPSClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, true);
      fTPSClient0.getCharset();
      assertEquals(0, fTPSClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, true);
      fTPSClient0.getCharset();
      assertEquals(0, fTPSClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient((String) null, true);
      fTPSClient0.getCharset();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      POP3SClient pOP3SClient0 = new POP3SClient(true);
      // Undeclared exception!
      try { 
        pOP3SClient0.getRemoteAddress();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      assertEquals(1, nNTP0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NNTP nNTP0 = new NNTP();
      nNTP0.setDefaultPort(0);
      assertEquals(0, nNTP0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      ServerSocketFactory serverSocketFactory0 = ServerSocketFactory.getDefault();
      pOP3Client0.setServerSocketFactory(serverSocketFactory0);
      assertEquals(0, pOP3Client0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      ServerSocketFactory serverSocketFactory0 = ServerSocketFactory.getDefault();
      pOP3Client0.setServerSocketFactory(serverSocketFactory0);
      assertEquals(0, pOP3Client0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      ServerSocketFactory serverSocketFactory0 = ServerSocketFactory.getDefault();
      pOP3Client0.setServerSocketFactory(serverSocketFactory0);
      assertEquals(0, pOP3Client0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.disconnect();
      assertEquals(0, fTPSClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.disconnect();
      assertEquals(0, fTPSClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      fTPSClient0.disconnect();
      assertEquals(0, fTPSClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      boolean boolean0 = pOP3Client0.isAvailable();
      assertEquals(0, pOP3Client0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      boolean boolean0 = pOP3Client0.isAvailable();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      boolean boolean0 = pOP3Client0.isAvailable();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      boolean boolean0 = pOP3Client0.isAvailable();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExtendedPOP3Client extendedPOP3Client0 = new ExtendedPOP3Client();
      extendedPOP3Client0.getCharsetName();
      assertEquals(0, extendedPOP3Client0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ExtendedPOP3Client extendedPOP3Client0 = new ExtendedPOP3Client();
      extendedPOP3Client0.getCharsetName();
      assertEquals(0, extendedPOP3Client0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ExtendedPOP3Client extendedPOP3Client0 = new ExtendedPOP3Client();
      extendedPOP3Client0.getCharsetName();
      assertEquals(0, extendedPOP3Client0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getConnectTimeout();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getConnectTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getConnectTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.getTcpNoDelay();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      // Undeclared exception!
      try { 
        fTPSClient0.getSoLinger();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IMAPSClient iMAPSClient0 = new IMAPSClient();
      // Undeclared exception!
      try { 
        iMAPSClient0.getKeepAlive();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient();
      // Undeclared exception!
      try { 
        fTPSClient0.getRemotePort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.setTcpNoDelay(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.setProxy((Proxy) null);
      InetAddress inetAddress0 = MockInetAddress.getByName("\r\n");
      try { 
        echoTCPClient0.connect(inetAddress0, 7, inetAddress0, 7);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@8657a306
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
          // Undeclared exception!
          try { 
            authenticatingSMTPClient0.connect("F$1\"x)CM_%+k94/$");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:25\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:602)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:253)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:212)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:316)
             // sun.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      POP3Client pOP3Client0 = new POP3Client();
      pOP3Client0.setSendBufferSize(0);
      InetAddress inetAddress0 = MockInetAddress.getByName("\r\n");
      // Undeclared exception!
      try { 
        pOP3Client0.connect(inetAddress0, 110);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // negative send size
         //
         verifyException("java.net.Socket", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      // Undeclared exception!
      try { 
        nNTPClient0.getSoTimeout();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient("");
      // Undeclared exception!
      try { 
        authenticatingSMTPClient0.getLocalPort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.removeProtocolCommandListener((ProtocolCommandListener) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      int int0 = nNTPClient0.getDefaultTimeout();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      int int0 = nNTPClient0.getDefaultTimeout();
      assertEquals(0, nNTPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      int int0 = nNTPClient0.getDefaultTimeout();
      assertEquals(0, nNTPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.getProxy();
      assertEquals(0, echoTCPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.getProxy();
      assertEquals(0, echoTCPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.getProxy();
      assertEquals(0, echoTCPClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.disconnect();
      assertEquals(0, echoTCPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.disconnect();
      assertEquals(0, echoTCPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EchoTCPClient echoTCPClient0 = new EchoTCPClient();
      echoTCPClient0.disconnect();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      // Undeclared exception!
      try { 
        authenticatingIMAPClient0.setKeepAlive(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FTPSClient fTPSClient0 = new FTPSClient("");
      // Undeclared exception!
      try { 
        fTPSClient0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RLoginClient rLoginClient0 = new RLoginClient();
      // Undeclared exception!
      try { 
        rLoginClient0.setSoTimeout(514);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getDefaultPort();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getDefaultPort();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AuthenticatingSMTPClient authenticatingSMTPClient0 = new AuthenticatingSMTPClient();
      int int0 = authenticatingSMTPClient0.getDefaultPort();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      authenticatingIMAPClient0.addProtocolCommandListener((ProtocolCommandListener) null);
      assertEquals(0, authenticatingIMAPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      authenticatingIMAPClient0.addProtocolCommandListener((ProtocolCommandListener) null);
      assertEquals(0, authenticatingIMAPClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      authenticatingIMAPClient0.addProtocolCommandListener((ProtocolCommandListener) null);
      assertEquals(0, authenticatingIMAPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      Charset charset0 = Charset.defaultCharset();
      nNTPClient0.setCharset(charset0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      Charset charset0 = Charset.defaultCharset();
      nNTPClient0.setCharset(charset0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      NNTPClient nNTPClient0 = new NNTPClient();
      Charset charset0 = Charset.defaultCharset();
      nNTPClient0.setCharset(charset0);
      assertEquals(0, nNTPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      ServerSocketFactory serverSocketFactory0 = authenticatingIMAPClient0.getServerSocketFactory();
      assertEquals(0, authenticatingIMAPClient0.getDefaultTimeout());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      ServerSocketFactory serverSocketFactory0 = authenticatingIMAPClient0.getServerSocketFactory();
      assertEquals(0, authenticatingIMAPClient0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      ServerSocketFactory serverSocketFactory0 = authenticatingIMAPClient0.getServerSocketFactory();
      assertEquals(0, authenticatingIMAPClient0.getConnectTimeout());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      AuthenticatingIMAPClient authenticatingIMAPClient0 = new AuthenticatingIMAPClient(true);
      ServerSocketFactory serverSocketFactory0 = authenticatingIMAPClient0.getServerSocketFactory();
      assertNotNull(serverSocketFactory0);
}
}
