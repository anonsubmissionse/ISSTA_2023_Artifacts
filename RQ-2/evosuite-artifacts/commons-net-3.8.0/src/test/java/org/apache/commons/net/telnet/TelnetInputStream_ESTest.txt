 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, false);
      telnetInputStream0.read();
      telnetInputStream0.available();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient((byte)3);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      telnetInputStream0.read();
      telnetInputStream0.start();
      telnetInputStream0.available();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)70);
      TelnetClient telnetClient0 = new TelnetClient((byte)0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.read(byteArray0, 4, (int) (byte)1);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.read(byteArray0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream(780);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(dataInputStream0, telnetClient0, true);
      telnetInputStream0.start();
      telnetInputStream0.run();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TelnetClient telnetClient0 = new TelnetClient("spy.log", 0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      telnetInputStream0.start();
      // Undeclared exception!
      try { 
        telnetInputStream0.start();
        fail("Expecting exception: IllegalThreadStateException");
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      // Undeclared exception!
      try { 
        telnetInputStream0.read((byte[]) null, 82, 393);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      TelnetClient telnetClient0 = new TelnetClient(2094);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0, (-2433), 8);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3557), 4);
      TelnetClient telnetClient0 = new TelnetClient(">=");
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, false);
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0, 137, 687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, false);
      byte[] byteArray0 = new byte[8];
      try { 
        telnetInputStream0.read(byteArray0, (int) (byte)1, 2254);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, false);
      // Undeclared exception!
      try { 
        telnetInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(780);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(dataInputStream0, telnetClient0, true);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-30), (byte)70);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(31);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      byte[] byteArray0 = new byte[1];
      try { 
        telnetInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(780);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(dataInputStream0, telnetClient0, true);
      // Undeclared exception!
      try { 
        telnetInputStream0.read();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1264), 1334);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, false);
      // Undeclared exception!
      try { 
        telnetInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(780);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(dataInputStream0, telnetClient0, true);
      // Undeclared exception!
      try { 
        telnetInputStream0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient(780);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(dataInputStream0, telnetClient0, true);
      // Undeclared exception!
      try { 
        telnetInputStream0.available();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      try { 
        telnetInputStream0.available();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream((InputStream) null, (TelnetClient) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient((-3577));
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0, false);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream(pipedInputStream0, (TelnetClient) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient("<nN<(", (-902));
      TelnetInputStream telnetInputStream0 = null;
      try {
        telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient((byte)3);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.available();
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TelnetClient telnetClient0 = new TelnetClient("");
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(pipedInputStream0, telnetClient0, false);
      byte[] byteArray0 = new byte[4];
      telnetInputStream0.read(byteArray0, (-1595), (int) (byte)0);
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (-458));
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, true);
      telnetInputStream0.read();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      telnetInputStream0.start();
      telnetInputStream0.close();
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0, true);
      telnetInputStream0.close();
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, false);
      telnetInputStream0.close();
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      telnetInputStream0.available();
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      pipedOutputStream0.write((-2162));
      byte[] byteArray0 = new byte[2];
      telnetClient0._registerSpyStream(pipedOutputStream0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(pipedInputStream0, telnetClient0);
      telnetInputStream0.read();
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0, (int) (byte)13, 142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      byte[] byteArray1 = new byte[0];
      int int0 = telnetInputStream0.read(byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      int int0 = telnetInputStream0.read();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      int int0 = telnetInputStream0.read();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      byteArrayInputStream0.read();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      int int0 = telnetInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      byteArrayInputStream0.read();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      int int0 = telnetInputStream0.read();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)0);
      TelnetClient telnetClient0 = new TelnetClient((byte)0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      int int0 = telnetInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-14));
      TelnetClient telnetClient0 = new TelnetClient((byte)122);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      int int0 = telnetInputStream0.read(byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream((InputStream) null, telnetClient0);
      telnetInputStream0.start();
      try { 
        telnetInputStream0.read();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)26;
      byteArray0[1] = (byte)13;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.run();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient("g.6zJ");
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, true);
      // Undeclared exception!
      try { 
        telnetInputStream0.read(byteArray0, 2039, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2039
         //
         verifyException("org.apache.commons.net.telnet.TelnetInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)26;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArrayInputStream0.mark((byte)13);
      TelnetClient telnetClient0 = new TelnetClient("Queue is full! Cannot process another character.", (byte)26);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.run();
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      int int0 = telnetInputStream0.read();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(sequenceInputStream0, telnetClient0);
      int int0 = telnetInputStream0.read();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0, false);
      telnetInputStream0.start();
      assertFalse(telnetInputStream0.markSupported());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.run();
      int int0 = telnetInputStream0.read(byteArray0, (int) (byte)0, 2058);
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TelnetClient telnetClient0 = new TelnetClient();
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(byteArrayInputStream0, telnetClient0);
      telnetInputStream0.start();
      telnetInputStream0.run();
      int int0 = telnetInputStream0.read(byteArray0, (int) (byte)0, 2058);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 8);
      TelnetClient telnetClient0 = new TelnetClient(0);
      TelnetInputStream telnetInputStream0 = new TelnetInputStream(bufferedInputStream0, telnetClient0);
      boolean boolean0 = telnetInputStream0.markSupported();
      assertTrue(boolean0);
}
