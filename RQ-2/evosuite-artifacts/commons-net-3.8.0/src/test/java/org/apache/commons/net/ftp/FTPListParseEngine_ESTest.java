/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:43:43 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPFileEntryParser;
import org.apache.commons.net.ftp.FTPFileFilter;
import org.apache.commons.net.ftp.FTPListParseEngine;
import org.apache.commons.net.ftp.parser.EnterpriseUnixFTPEntryParser;
import org.apache.commons.net.ftp.parser.MLSxEntryParser;
import org.apache.commons.net.ftp.parser.NTFTPEntryParser;
import org.apache.commons.net.ftp.parser.NetwareFTPEntryParser;
import org.apache.commons.net.ftp.parser.OS2FTPEntryParser;
import org.apache.commons.net.ftp.parser.OS400FTPEntryParser;
import org.apache.commons.net.ftp.parser.UnixFTPEntryParser;
import org.apache.commons.net.ftp.parser.VMSFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPListParseEngine_ESTest extends FTPListParseEngine_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      FTPFile[] fTPFileArray0 = fTPListParseEngine0.getPrevious((-1));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser((FTPClientConfig) null, false);
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(unixFTPEntryParser0, unixFTPEntryParser0.NUMERIC_DATE_CONFIG);
      FTPFile[] fTPFileArray0 = fTPListParseEngine0.getNext((-1908));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0, (String) null);
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      fTPListParseEngine0.getNext(147);
      boolean boolean0 = fTPListParseEngine0.hasPrevious();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      boolean boolean0 = fTPListParseEngine0.hasNext();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(vMSFTPEntryParser0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) sequenceInputStream0, "org.apache.commons.net.ftp.FTPFileFilters");
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.net.ftp.FTPFileFilters
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine((FTPFileEntryParser) null);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "", "", (String) null, ".c+z/>");
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine((FTPFileEntryParser) null, fTPClientConfig0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)100, (-1));
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPListParseEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EnterpriseUnixFTPEntryParser enterpriseUnixFTPEntryParser0 = new EnterpriseUnixFTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(enterpriseUnixFTPEntryParser0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        fTPListParseEngine0.readServerList((InputStream) pipedInputStream0, (String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS400FTPEntryParser0);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser(fTPClientConfig0);
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(nTFTPEntryParser0, fTPClientConfig0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MLSxEntryParser mLSxEntryParser0 = MLSxEntryParser.getInstance();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("#f(Qz}(w}c&", (String) null, "5K", "", "5K", (String) null, false, true);
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(mLSxEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2401), (byte)119);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.getFiles((FTPFileFilter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPListParseEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fTPFileFilter0).accept(any(org.apache.commons.net.ftp.FTPFile.class));
      fTPListParseEngine0.getFiles(fTPFileFilter0);
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetwareFTPEntryParser netwareFTPEntryParser0 = new NetwareFTPEntryParser((FTPClientConfig) null);
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(netwareFTPEntryParser0, (FTPClientConfig) null);
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0, "I`-Xn)zhidgk^:$v$d");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // I`-Xn)zhidgk^:$v$d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fTPFileFilter0).accept(any(org.apache.commons.net.ftp.FTPFile.class));
      fTPListParseEngine0.getFiles(fTPFileFilter0);
      assertTrue(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      fTPListParseEngine0.getFiles();
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      FTPFile[] fTPFileArray0 = fTPListParseEngine0.getPrevious((byte)36);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OS2FTPEntryParser oS2FTPEntryParser0 = new OS2FTPEntryParser();
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS2FTPEntryParser0, fTPClientConfig0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fTPListParseEngine0.readServerList((InputStream) byteArrayInputStream0);
      fTPListParseEngine0.getNext(1);
      fTPListParseEngine0.getPrevious(1);
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS400FTPEntryParser0);
      boolean boolean0 = fTPListParseEngine0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS400FTPEntryParser0);
      fTPListParseEngine0.resetIterator();
      assertFalse(fTPListParseEngine0.hasNext());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OS400FTPEntryParser oS400FTPEntryParser0 = new OS400FTPEntryParser();
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(oS400FTPEntryParser0);
      boolean boolean0 = fTPListParseEngine0.hasPrevious();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EnterpriseUnixFTPEntryParser enterpriseUnixFTPEntryParser0 = new EnterpriseUnixFTPEntryParser();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("D");
      FTPListParseEngine fTPListParseEngine0 = new FTPListParseEngine(enterpriseUnixFTPEntryParser0, fTPClientConfig0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 793);
      try { 
        fTPListParseEngine0.readServerList((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
