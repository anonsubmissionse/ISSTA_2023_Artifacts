/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:52:01 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.net.InetAddress;
import java.util.Enumeration;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPCmd;
import org.apache.commons.net.ftp.FTPFileFilter;
import org.apache.commons.net.ftp.parser.FTPFileEntryParserFactory;
import org.apache.commons.net.io.CopyStreamListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPClient_ESTest extends FTPClient_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(0L);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parseExtendedPassiveModeReply("pcyj'&)q]QR#");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not parse extended passive host information.
         // Server Reply: pcyj'&
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertEquals(1, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("");
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = FTPClient.parsePathname("USER");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType(229, 2526);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(0, 0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileType((-61));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileType(12);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileTransferMode(119);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileTransferMode(2);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.setFileStructure(1411);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setFileStructure(3);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      StringWriter stringWriter0 = new StringWriter(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.sendSiteCommand("e.~+Ec& *Wj9WX-]$m5");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.rename("CHANGE_WORKING_DIRECTORY", "(P*1^]HP3<LmWv+WB8^");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.reinitialize();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.printWorkingDirectory();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FTPClient.parsePathname((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mlistFile("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmFile("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.mdtmCalendar("da");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login("%654", "org.apache.commons.net.ftp.systemType.default", "%654");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.login((String) null, (String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames("T#K`5`.9*Mm");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFileWriter mockFileWriter0 = new MockFileWriter("k", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.listHelp("SMNT");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp("u6!");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listHelp();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setParserFactory((FTPFileEntryParserFactory) null);
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing(" %1$tY-%1$tm-%1$td", " %1$tY-%1$tm-%1$td");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing((String) null, (String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.hasFeature((FTPCmd) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("", "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.hasFeature("vUY|Q'X1Mh");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus(";6~Q");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getStatus();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSize("2hat0O");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getModificationTime((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValues("-r{|\"H]i&asz{>");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.featureValue("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      fTPClient0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTPClient0.enterRemotePassiveMode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.enterRemotePassiveMode();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.enterRemoteActiveMode((InetAddress) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      try { 
        fTPClient0.enterRemoteActiveMode(inetAddress0, (-2032));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommandAsStrings("8:1S^-43!j33l", "-a ");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.createParser((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._storeFileStream("P5uz>F:}Rrqz1/5%!", "|+l3r^P* `pv=Sq-.(s");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPClient0._storeFile("Invalid server reply (MLST): '", "", sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFileStream("=A/{p~", "=A/{p~");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      File file0 = MockFile.createTempFile("[Replacing PASV mode reply address ", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      // Undeclared exception!
      try { 
        fTPClient0._retrieveFile("UTF8", "UTF8", mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parsePassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply("\"W Br(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._parseExtendedPassiveModeReply((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PORT;
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(fTPCmd0, ">w,;^8e");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(1389, ":v tNLiwwXXG/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1389
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_(pipedReader0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemType();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories("~GY~2[~oU29bt9u");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      try { 
        fTPClient0.listFiles("6!|?f#kuuoAXL4=#", fTPFileFilter0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateListParsing(" %1$tY-%1$tm-%1$td", " %1$tY-%1$tm-%1$td");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unknown parser type:  %1$tY-%1$tm-%1$td
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing("V8b-hsn");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getListHiddenFiles();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset(9);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRestartOffset((-5141L));
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(true);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertEquals(1, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveNatWorkaround(false);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique("\"apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStoreUnique();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteStore((String) null);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertEquals(1, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteRetrieve("org.apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.remoteAppend("org.apache.commons.net.ftp.systemType.default");
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.getSystemName();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.createParser("org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unknown parser type: org.apache.commons.net.ftp.systemType
         //
         verifyException("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parsePassiveModeReply("JOBNAME");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not parse passive host information.
         // Server Reply: JOBNAME
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0._parseExtendedPassiveModeReply("Zpcsyj'&)qQR#");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not parse extended passive host information.
         // Server Reply: Zpcsyj'&
         //
         verifyException("org.apache.commons.net.ftp.FTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = FTPClient.parsePathname("ISO-8859-1");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertEquals(1, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient_NatServerResolverImpl0.resolve("\"apache.commons.net.ftp.systemType");
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.logout();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      fTPClient0.setPassiveLocalIPAddress(inetAddress0);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getControlKeepAliveReplyTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveReplyTimeout(0);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActiveExternalIPAddress(" %1$tY-%1$tm-%1$td");
      assertEquals(1, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.restart((-404L));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isUseEPSVwithIPv4();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setCopyStreamListener((CopyStreamListener) null);
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPCmd fTPCmd0 = FTPCmd.PASS;
      try { 
        fTPClient0.hasFeature(fTPCmd0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.isRemoteVerificationEnabled();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getControlKeepAliveTimeout();
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeToParentDirectory();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getDataConnectionMode();
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setAutodetectUTF8(false);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.completePendingCommand();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeFileStream(":umM.<V!!hU\fW");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      MockFile mockFile0 = new MockFile("\"~DA%(*@-YY+", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFile("<8b", mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.appendFileStream("ISO-8859-1");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setUseEPSVwithIPv4(true);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendSiteCommand("e.~+Ec& *Wj9WX-]$m5");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.abort();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertEquals(1, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPClient.NatServerResolverImpl fTPClient_NatServerResolverImpl0 = new FTPClient.NatServerResolverImpl(fTPClient0);
      fTPClient0.setPassiveNatWorkaroundStrategy(fTPClient_NatServerResolverImpl0);
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.changeWorkingDirectory("\r\n");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        fTPClient0.storeFile("?5&jXM\"8~", byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalPassiveMode();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_("org.apache.commons.net.ftp.systemType", "org.apache.commons.net.ftp.systemType");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listFiles();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCopyStreamListener();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      assertEquals(0, fTPClient0.getReceiveDataSocketBufferSize());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReceieveDataSocketBufferSize(4);
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.deleteFile("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertEquals(1, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getReceiveDataSocketBufferSize();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(1343);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setBufferSize(69);
      assertEquals(0, fTPClient0.getBufferSize());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.sendNoOp();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setListHiddenFiles(false);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.removeDirectory("Fh_m=I}_I_'f_ 6KO");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getEntryParser();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(1785L, (-1433));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      FTPFileFilter fTPFileFilter0 = mock(FTPFileFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir((String) null, fTPFileFilter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.structureMount("YRcHHsP#");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.listNames();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.mlistDir("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._connectAction_();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setRemoteVerificationEnabled(true);
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setPassiveLocalIPAddress((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.initiateMListParsing();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getPassiveHost();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream("-Yf\u0007c95");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setSendDataSocketBufferSize((-626));
      assertEquals(0, fTPClient0.getSendDataSocketBufferSize());
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setReportActiveExternalIPAddress("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertTrue(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.enterLocalActiveMode();
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.setModificationTime("{xVo}:+", "-a");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertEquals(1, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.configure((FTPClientConfig) null);
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFileStream();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0.retrieveFileStream(";");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertEquals(1, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.disconnect();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      // Undeclared exception!
      try { 
        fTPClient0._openDataConnection_(11, "\r\n");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile(":%1$tM", (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setDataTimeout(3);
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setActivePortRange((-1433), (-1433));
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate(44, 3);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      String string0 = fTPClient0.getListArguments("org.apache.commons.net.ftp.systemType.default");
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 11, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        fTPClient0.appendFile((String) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      ;
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      long long0 = fTPClient0.getRestartOffset();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.doCommand("org.apache.commons.net.ftp.systemType.default", "\r\n");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      ;
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getPassivePort();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.features();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.makeDirectory("qzS Y@");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      boolean boolean0 = fTPClient0.getAutodetectUTF8();
      assertTrue(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.setControlKeepAliveTimeout((-2966L));
      assertEquals(0, fTPClient0.getControlKeepAliveTimeout());
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.initiateListParsing();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        fTPClient0.storeUniqueFile((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getSendDataSocketBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.allocate((long) (-584));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getCslDebug();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertEquals(0, fTPClient0.getControlKeepAliveReplyTimeout());
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertTrue(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      int int0 = fTPClient0.getBufferSize();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.getAutodetectUTF8());
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertEquals(0, fTPClient0.getPassivePort());
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.getListHiddenFiles());
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      ;
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertEquals(0, fTPClient0.getDataConnectionMode());
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertEquals(0, fTPClient0.getRestartOffset());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.isUseEPSVwithIPv4());
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      fTPClient0.getPassiveLocalIPAddress();
      assertFalse(fTPClient0.isRemoteVerificationEnabled());
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FTPClient fTPClient0 = new FTPClient();
      try { 
        fTPClient0.listDirectories();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
}
