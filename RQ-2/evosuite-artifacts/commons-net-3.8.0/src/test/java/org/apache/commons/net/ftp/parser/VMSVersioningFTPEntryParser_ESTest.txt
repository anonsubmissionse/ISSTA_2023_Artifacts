 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser((FTPClientConfig) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        vMSVersioningFTPEntryParser0.preParse(linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser");
      fTPClientConfig0.setRecentDateFormatStr("org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser");
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = null;
      try {
        vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(.*)[09Ys*.");
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser();
      List<String> list0 = vMSVersioningFTPEntryParser0.preParse(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser();
      List<String> list0 = vMSVersioningFTPEntryParser0.preParse(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser();
      boolean boolean0 = vMSVersioningFTPEntryParser0.isVersioning();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("Hb[4$t!oqhj2Np]!~", "Hb[4$t!oqhj2Np]!~", "Hb[4$t!oqhj2Np]!~", "Hb[4$t!oqhj2Np]!~", "", "Hb[4$t!oqhj2Np]!~", true, true);
      VMSVersioningFTPEntryParser vMSVersioningFTPEntryParser0 = null;
      try {
        vMSVersioningFTPEntryParser0 = new VMSVersioningFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
