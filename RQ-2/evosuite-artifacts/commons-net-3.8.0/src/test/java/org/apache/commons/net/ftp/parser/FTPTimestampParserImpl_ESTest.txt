 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      calendar0.setMinimalDaysInFirstWeek((-6192));
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      calendar0.setFirstDayOfWeek(0);
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      calendar0.setFirstDayOfWeek(0);
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      calendar0.setFirstDayOfWeek((-2622));
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.isLenientFutureDates();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      String string0 = fTPTimestampParserImpl0.getRecentDateFormatString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setRecentDateFormatStr((String) null);
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      fTPTimestampParserImpl0.getRecentDateFormat();
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      String string0 = fTPTimestampParserImpl0.getDefaultDateFormatString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.parseTimestamp((String) null, calendar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(19, 19, 19, (-388), 19);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.parseTimestamp("", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.parseTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      fTPClientConfig0.setDefaultDateFormatStr("");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.getRecentDateFormatString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure((FTPClientConfig) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("V1a~jGv/cOw1i}vu3l", "V1a~jGv/cOw1i}vu3l", "|NV0bRB0v01kr- 8z");
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      try { 
        fTPTimestampParserImpl0.parseTimestamp("S} 7DYn1t", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
         //
         // Timestamp 'S} 7DYn1t' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(19, 19, 19, (-388), 19);
      try { 
        fTPTimestampParserImpl0.parseTimestamp("", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
         //
         // Timestamp '' could not be parsed using a server time of Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getServerTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getServerTimeZone();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("u;!OO^XImW", "S}", "kXs", "u;!OO^XImW", (String) null, (String) null);
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "", (String) null, "", "", true, false);
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setServerTimeZoneId("");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      try { 
        fTPTimestampParserImpl0.parseTimestamp("WINDOWS");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
         //
         // Timestamp 'WINDOWS' could not be parsed using a server time of Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      calendar0.set(87, 87, 87, 87, 87, 87);
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig((String) null, (String) null, "kXs");
      // Undeclared exception!
      try { 
        fTPTimestampParserImpl0.configure(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // defaultFormatString cannot be null
         //
         verifyException("org.apache.commons.net.ftp.parser.FTPTimestampParserImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("MXz=", "MXz=", "MXz=");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("MHXzk=)", "MHXzk=)", "MHXzk=)");
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setRecentDateFormatStr((String) null);
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "", "");
      fTPClientConfig0.setRecentDateFormatStr((String) null);
      fTPTimestampParserImpl0.configure(fTPClientConfig0);
      Calendar calendar0 = fTPTimestampParserImpl0.parseTimestamp("");
      fTPTimestampParserImpl0.parseTimestamp("", calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getRecentDateFormat();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getRecentDateFormat();
      assertNotNull(simpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getRecentDateFormat();
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getRecentDateFormatString();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getRecentDateFormatString();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.isLenientFutureDates();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.isLenientFutureDates();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getDefaultDateFormatString();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      String string0 = fTPTimestampParserImpl0.getDefaultDateFormatString();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getShortMonths();
      assertNotNull(fTPTimestampParserImpl0.getDefaultDateFormatString());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.getShortMonths();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getDefaultDateFormat();
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getDefaultDateFormat();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getDefaultDateFormat();
      assertFalse(simpleDateFormat0.isLenient());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      SimpleDateFormat simpleDateFormat0 = fTPTimestampParserImpl0.getDefaultDateFormat();
      assertNotNull(simpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.setLenientFutureDates(false);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPTimestampParserImpl fTPTimestampParserImpl0 = new FTPTimestampParserImpl();
      fTPTimestampParserImpl0.setLenientFutureDates(false);
      assertNotNull(fTPTimestampParserImpl0.getRecentDateFormatString());
}
