 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.type(2, 2);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getCommandSupport();
      assertTrue(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getCommandSupport();
      assertEquals(0, fTP0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getCommandSupport();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.type(1540, 3246);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.type(0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stru(11);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stou("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTP fTP0 = new FTP();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.size("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.sendCommand(5, "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.sendCommand((-2843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2843
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTP fTP0 = new FTP();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" $ _B~9y2p4d");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.rest("W>F4^CN2A");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTP fTP0 = new FTP();
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      try { 
        fTP0.port(inetAddress0, (-12));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.mode((-4546));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTP fTP0 = new FTP();
      MockFileWriter mockFileWriter0 = new MockFileWriter("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.mlst((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.getReplyString(65);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.eprt((InetAddress) null, (-844));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTP fTP0 = new FTP();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.cdup();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTP fTP0 = new FTP();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.acct("$.CUcSfnSD!6aQ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTP fTP0 = new FTP();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.abor();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0._connectAction_((Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.sendCommand("q7u3", "q7u3");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTP fTP0 = new FTP();
      FTPCmd fTPCmd0 = FTPCmd.MLSD;
      try { 
        fTP0.sendCommand(fTPCmd0, "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.sendCommand((-998), "m?[{g$ogMMl");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -998
         //
         verifyException("org.apache.commons.net.ftp.FTPCommand", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.getReply();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTP fTP0 = new FTP();
      FTPCmd fTPCmd0 = FTPCmd.MKD;
      try { 
        fTP0.sendCommand(fTPCmd0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.type(3, 3);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.type(6, 6);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTP fTP0 = new FTP();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      try { 
        fTP0.eprt(inetAddress0, 25);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getReplyString();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getReplyString();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getReplyString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getReplyString();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTP fTP0 = new FTP();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.mdtm("\r\n");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.epsv();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.nlst("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.help("ISO-8859-1");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.appe("mMN");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mlsd("Truncated server reply: ");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.user("\r\n");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.cwd("ABORT");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.rnfr("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.abor();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getReplyStrings();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getReplyStrings();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.getReplyStrings();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.allo(3430L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stor("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.pass("P#%_6l<?9");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.list("The wildcard must not be null");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.smnt("org.apache.commons.net.ftp.FTP");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.stru(16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.site("NMELIT");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0._connectAction_();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stat();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getControlEncoding();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getControlEncoding();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getControlEncoding();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FTP fTP0 = new FTP();
      String string0 = fTP0.getControlEncoding();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.noop();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.rest("W>F4^CN2A");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.nlst();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.pwd();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mfmt("ISO-8859-1", "ISO-8859-1");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mlst((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.__noop();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.acct("$.CUcSfnSD!6aQ");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.list();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.feat();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FTP fTP0 = new FTP();
      boolean boolean0 = fTP0.isStrictReplyParsing();
      assertEquals(0, fTP0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FTP fTP0 = new FTP();
      boolean boolean0 = fTP0.isStrictReplyParsing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FTP fTP0 = new FTP();
      boolean boolean0 = fTP0.isStrictReplyParsing();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mdtm("\r\n");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.getReplyString((-853));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.rnto((String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.pasv();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FTP fTP0 = new FTP();
      int int0 = fTP0.getReplyCode();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FTP fTP0 = new FTP();
      int int0 = fTP0.getReplyCode();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FTP fTP0 = new FTP();
      int int0 = fTP0.getReplyCode();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FTP fTP0 = new FTP();
      int int0 = fTP0.getReplyCode();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.help();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mlsd();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.disconnect();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.disconnect();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.disconnect();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.allo((long) 21, 3);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.retr("}");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.isStrictMultilineParsing();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.isStrictMultilineParsing();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.isStrictMultilineParsing();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FTP fTP0 = new FTP();
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setStrictReplyParsing(false);
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mlst();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.allo(0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.__getReplyNoReport();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.sendCommand(12);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.syst();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stou();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setStrictMultilineParsing(false);
      assertFalse(fTP0.isStrictMultilineParsing());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setStrictMultilineParsing(false);
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setStrictMultilineParsing(false);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setStrictMultilineParsing(false);
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.cdup();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.rmd("ISO-8859-1");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.sendCommand("ISO-8859-1");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FTP fTP0 = new FTP();
      assertNotNull(fTP0.getControlEncoding());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setControlEncoding((String) null);
      assertFalse(fTP0.isStrictReplyParsing());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FTP fTP0 = new FTP();
      fTP0.setControlEncoding((String) null);
      assertEquals(1, fTP0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.stat("m>4TB#FYU!1}O!");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.rein();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.allo((-1397), 16);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.size("");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.type((-2334));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FTP fTP0 = new FTP();
      // Undeclared exception!
      try { 
        fTP0.port((InetAddress) null, (-2145));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mkd("Connction s not open");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.dele("FTP response 421 received.  Server closed connection.");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.quit();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FTP fTP0 = new FTP();
      StringWriter stringWriter0 = new StringWriter(504);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      fTP0._controlOutput_ = bufferedWriter0;
      // Undeclared exception!
      try { 
        fTP0.stou((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FTP fTP0 = new FTP();
      try { 
        fTP0.mode(11);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Connection is not open
         //
         verifyException("org.apache.commons.net.ftp.FTP", e);
      }
  }
