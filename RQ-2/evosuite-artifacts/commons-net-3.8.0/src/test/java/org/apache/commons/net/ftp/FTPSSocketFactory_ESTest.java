/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:13:33 GMT 2022
 */

package org.apache.commons.net.ftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import org.apache.commons.net.ftp.FTPSSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPSSocketFactory_ESTest extends FTPSSocketFactory_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SSLContext sSLContext0 = SSLContext.getDefault();
          FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
          // Undeclared exception!
          try { 
            fTPSSocketFactory0.createServerSocket(1463, 0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:1463\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.ServerSocket.bind(ServerSocket.java:389)
             // java.net.ServerSocket.<init>(ServerSocket.java:252)
             // java.net.ServerSocket.<init>(ServerSocket.java:196)
             // javax.net.ssl.SSLServerSocket.<init>(SSLServerSocket.java:136)
             // sun.security.ssl.SSLServerSocketImpl.<init>(SSLServerSocketImpl.java:70)
             // sun.security.ssl.SSLServerSocketFactoryImpl.createServerSocket(SSLServerSocketFactoryImpl.java:80)
             // org.apache.commons.net.ftp.FTPSSocketFactory.createServerSocket(FTPSSocketFactory.java:88)
             // sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket((InetAddress) null, (-1), (InetAddress) null, (-1200));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1200
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("~'ilU<R5#7WbVH@@");
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket(inetAddress1, (-1280), inetAddress0, (-1280));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1280
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.init((ServerSocket) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket(inetAddress0, (-1543), inetAddress0, (-1543));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket(inetAddress0, (-490));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-490
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket("", 0, inetAddress0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket(">3'^Q", (-1023));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket(0, 63, inetAddress0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket((-3594), (-1089), inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -3594
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket(0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -1
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket((-3));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -3
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createServerSocket(91);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket("The wildcard array must not be null", 0, inetAddress0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.createSocket((InetAddress) null, 2546);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory(sSLContext0);
      Socket socket0 = fTPSSocketFactory0.createSocket();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPSSocketFactory fTPSSocketFactory0 = new FTPSSocketFactory((SSLContext) null);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockServerSocket mockServerSocket0 = new MockServerSocket(1, 1, inetAddress0);
      // Undeclared exception!
      try { 
        fTPSSocketFactory0.init(mockServerSocket0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.net.MockServerSocket cannot be cast to javax.net.ssl.SSLServerSocket
         //
         verifyException("org.apache.commons.net.ftp.FTPSSocketFactory", e);
      }
  }
}
