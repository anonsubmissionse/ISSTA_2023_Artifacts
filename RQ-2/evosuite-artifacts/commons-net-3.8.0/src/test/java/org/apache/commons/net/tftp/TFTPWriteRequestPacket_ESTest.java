/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 21:13:35 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPPacket;
import org.apache.commons.net.tftp.TFTPWriteRequestPacket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPWriteRequestPacket_ESTest extends TFTPWriteRequestPacket_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("N");
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, (-57), "N", (-57));
      // Undeclared exception!
      try { 
        tFTPWriteRequestPacket0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -57
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, 0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = null;
      try {
        tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(datagramPacket0);
        fail("Expecting exception: Exception");
      } catch(Throwable e) {
         //
         // TFTP operator code does not match type.
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = null;
      try {
        tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket((DatagramPacket) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(124);
      DatagramPacket datagramPacket0 = new DatagramPacket(byteArray0, (byte)0, (byte)0, mockInetSocketAddress0);
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = null;
      try {
        tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(datagramPacket0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "+", 0);
      DatagramPacket datagramPacket0 = tFTPWriteRequestPacket0.newDatagram();
      TFTPPacket tFTPPacket0 = TFTPPacket.newTFTPPacket(datagramPacket0);
      assertEquals(0, tFTPPacket0.getType());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      TFTPWriteRequestPacket tFTPWriteRequestPacket0 = new TFTPWriteRequestPacket(inetAddress0, 0, "+", 0);
      String string0 = tFTPWriteRequestPacket0.toString();
      ;
}
}
