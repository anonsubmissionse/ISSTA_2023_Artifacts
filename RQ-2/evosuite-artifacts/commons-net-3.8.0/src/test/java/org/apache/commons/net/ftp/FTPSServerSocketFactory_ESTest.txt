 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SSLContext sSLContext0 = SSLContext.getDefault();
          FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
          InetAddress inetAddress0 = MockInetAddress.getByName("");
          // Undeclared exception!
          try { 
            fTPSServerSocketFactory0.createServerSocket(93, 0, inetAddress0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:93\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.ServerSocket.bind(ServerSocket.java:389)
             // java.net.ServerSocket.<init>(ServerSocket.java:252)
             // javax.net.ssl.SSLServerSocket.<init>(SSLServerSocket.java:181)
             // sun.security.ssl.SSLServerSocketImpl.<init>(SSLServerSocketImpl.java:78)
             // sun.security.ssl.SSLServerSocketFactoryImpl.createServerSocket(SSLServerSocketFactoryImpl.java:87)
             // org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket(FTPSServerSocketFactory.java:70)
             // sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SSLContext sSLContext0 = SSLContext.getDefault();
          FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
          // Undeclared exception!
          try { 
            fTPSServerSocketFactory0.createServerSocket(0, (-1492));
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.ServerSocket.bind(ServerSocket.java:389)
             // java.net.ServerSocket.<init>(ServerSocket.java:252)
             // java.net.ServerSocket.<init>(ServerSocket.java:196)
             // javax.net.ssl.SSLServerSocket.<init>(SSLServerSocket.java:136)
             // sun.security.ssl.SSLServerSocketImpl.<init>(SSLServerSocketImpl.java:70)
             // sun.security.ssl.SSLServerSocketFactoryImpl.createServerSocket(SSLServerSocketFactoryImpl.java:80)
             // org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket(FTPSServerSocketFactory.java:63)
             // sun.reflect.GeneratedMethodAccessor54.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
      InetAddress inetAddress0 = MockInetAddress.getByName("org.apache.commons.io.filefilter.AgeFileFilter");
      MockServerSocket mockServerSocket0 = new MockServerSocket(0, 0, inetAddress0);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.init(mockServerSocket0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.net.MockServerSocket cannot be cast to javax.net.ssl.SSLServerSocket
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory((SSLContext) null);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket(1, 1, inetAddress0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket((-2286), (-2286), inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -2286
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket((-2686), (-2686));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -2686
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket((-4));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -4
         //
         verifyException("java.net.ServerSocket", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.init((ServerSocket) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket(0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory(sSLContext0);
      ServerSocket serverSocket0 = fTPSServerSocketFactory0.createServerSocket();
      ServerSocket serverSocket1 = fTPSServerSocketFactory0.init(serverSocket0);
      assertTrue(serverSocket1.isBound());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPSServerSocketFactory fTPSServerSocketFactory0 = new FTPSServerSocketFactory((SSLContext) null);
      // Undeclared exception!
      try { 
        fTPSServerSocketFactory0.createServerSocket(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.FTPSServerSocketFactory", e);
      }
  }
