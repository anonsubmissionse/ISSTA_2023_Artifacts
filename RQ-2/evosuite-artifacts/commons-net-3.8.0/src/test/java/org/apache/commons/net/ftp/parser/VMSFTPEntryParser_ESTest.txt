 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      FTPClientConfig fTPClientConfig1 = vMSFTPEntryParser0.getDefaultConfiguration();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      FTPClientConfig fTPClientConfig1 = vMSFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig1.getServerSystemKey());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.readNextEntry((BufferedReader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.VMSFTPEntryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      StringReader stringReader0 = new StringReader(";");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      bufferedReader0.close();
      try { 
        vMSFTPEntryParser0.readNextEntry(bufferedReader0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFileList((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig(">mh-SOQ");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFileList(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser((FTPClientConfig) null);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1273), (byte)11);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)12);
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFileList(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "cFAKKFxlFEcYp", "");
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("<sJ#!ZzQlh!\"a^|\"", "<sJ#!ZzQlh!\"a^|\"", "<sJ#!ZzQlh!\"a^|\"", "k_i", "<sJ#!ZzQlh!\"a^|\"", "k_i");
      VMSFTPEntryParser vMSFTPEntryParser0 = null;
      try {
        vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      StringReader stringReader0 = new StringReader("J0MqZR}/0zC*)");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1185);
      String string0 = vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Dkrctory&ZR}/0zC*");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      String string0 = vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("Total");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      vMSFTPEntryParser0.parseFileList(byteArrayInputStream0);
      assertNotNull(fTPClientConfig0.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TotalDkrctory&ZR}/0zC*");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      String string0 = vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      StringReader stringReader0 = new StringReader("DirectoryMqZR}/0zC*");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      String string0 = vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      StringReader stringReader0 = new StringReader("DirectoryMqZR}/0zC*");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      String string0 = vMSFTPEntryParser0.readNextEntry(bufferedReader0);
      assertNotNull(fTPClientConfig0.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      vMSFTPEntryParser0.setRegex("J0MqZR}/0");
      // Undeclared exception!
      try { 
        vMSFTPEntryParser0.parseFTPEntry("J0MqZR}/0");
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      vMSFTPEntryParser0.parseFTPEntry("NETWARE");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      boolean boolean0 = vMSFTPEntryParser0.isVersioning();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("");
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser(fTPClientConfig0);
      boolean boolean0 = vMSFTPEntryParser0.isVersioning();
      assertNotNull(fTPClientConfig0.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VMSFTPEntryParser vMSFTPEntryParser0 = new VMSFTPEntryParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        vMSFTPEntryParser0.parseFileList(pipedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
