/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:38:34 GMT 2022
 */

package org.apache.commons.net.ftp.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.parser.UnixFTPEntryParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnixFTPEntryParser_ESTest extends UnixFTPEntryParser_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
      FTPClientConfig fTPClientConfig1 = unixFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig1.getServerSystemKey());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
      FTPClientConfig fTPClientConfig1 = unixFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig1.getRecentDateFormatStr());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
      FTPClientConfig fTPClientConfig1 = unixFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig1.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add("total= 0");
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      // Undeclared exception!
      try { 
        unixFTPEntryParser0.preParse(list0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
      // Undeclared exception!
      try { 
        unixFTPEntryParser0.preParse((List<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.ftp.parser.UnixFTPEntryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      // Undeclared exception!
      try { 
        unixFTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("_hk(*v%aLo{kO", "_hk(*v%aLo{kO", "_hk(*v%aLo{kO");
      UnixFTPEntryParser unixFTPEntryParser0 = null;
      try {
        unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'v'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("?K5zEI[_4Hm9\"1Qa", "?K5zEI[_4Hm9\"1Qa", ":%1$tM", "?K5zEI[_4Hm9\"1Qa", "^s+", ":%1$tM", false, false);
      UnixFTPEntryParser unixFTPEntryParser0 = null;
      try {
        unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("sv", "sv", "X2;l8&/\"");
      UnixFTPEntryParser unixFTPEntryParser0 = null;
      try {
        unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'l'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("2Zyo@6;q0O_>RIk{b", "2Zyo@6;q0O_>RIk{b", "2Zyo@6;q0O_>RIk{b", "UNIX", "^total d+$", "TrPwGnt|;G7Va", true, false);
      UnixFTPEntryParser unixFTPEntryParser0 = null;
      try {
        unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0);
      assertNotNull(fTPClientConfig0.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig();
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0);
      assertNotNull(fTPClientConfig0.getRecentDateFormatStr());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = UnixFTPEntryParser.NUMERIC_DATE_CONFIG;
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser(fTPClientConfig0, false);
      unixFTPEntryParser0.setRegex("AS/400", 0);
      // Undeclared exception!
      try { 
        unixFTPEntryParser0.parseFTPEntry("AS/400");
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("total 0");
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      unixFTPEntryParser0.preParse(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("total 0");
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      unixFTPEntryParser0.preParse(linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("tota= 0");
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      unixFTPEntryParser0.preParse(linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnixFTPEntryParser unixFTPEntryParser0 = new UnixFTPEntryParser();
      FTPFile fTPFile0 = unixFTPEntryParser0.parseFTPEntry("total 0");
      ;
}
}
