/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 20:26:05 GMT 2022
 */

package org.apache.commons.net.tftp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.InetAddress;
import org.apache.commons.net.tftp.TFTPClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TFTPClient_ESTest extends TFTPClient_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.setMaxTimeouts(65535);
      int int0 = tFTPClient0.getMaxTimeouts();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.open();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[7];
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (byte)105);
      try { 
        tFTPClient0.sendFile("rd#v-4", (int) (byte)0, (InputStream) byteArrayInputStream0, inetAddress0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Bad packet: Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 69);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, evoSuiteRemoteAddress0, byteArray0);
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.open();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Connection timed out.", false);
      try { 
        tFTPClient0.receiveFile("org.apache.commons.net.DatagramSocketClient", 0, (OutputStream) mockFileOutputStream0, "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Bad packet: Bad packet.  Invalid TFTP operator code.
         //
         verifyException("org.apache.commons.net.tftp.TFTPClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile((String) null, 5, (InputStream) mockFileInputStream0, inetAddress0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.open();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (byte)105);
      try { 
        tFTPClient0.sendFile("", (int) (byte)0, (InputStream) byteArrayInputStream0, inetAddress0, (int) (byte)105);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-2628));
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("", (-478), (InputStream) byteArrayInputStream0, inetAddress0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -478
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 255, (-754));
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("File write failed.", 0, (InputStream) byteArrayInputStream0, "N]\"jE`j-o)|~$rYs,", (-2111));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-2111
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 5);
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("6%bC%", (-292), (InputStream) pushbackInputStream0, (String) null, (-292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.open();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (byte)105);
      try { 
        tFTPClient0.sendFile("Qv\"w-u8dC", (int) (byte)0, (InputStream) byteArrayInputStream0, "Qv\"w-u8dC", 4);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("", 0, (InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byte[] byteArray0 = new byte[22];
      tFTPClient0.open();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      try { 
        tFTPClient0.sendFile("", 0, (InputStream) pushbackInputStream0, "rd#v-4");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("ckqqrMyuGI{{", (-3536), (OutputStream) null, inetAddress0, (-3536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3536
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      tFTPClient0.open();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      try { 
        tFTPClient0.receiveFile("Unexpected host or port.", 1, (OutputStream) byteArrayOutputStream0, inetAddress0, 1);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      MockPrintStream mockPrintStream0 = new MockPrintStream("System");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("", (-129), (OutputStream) mockPrintStream0, inetAddress0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -129
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      InetAddress inetAddress0 = MockInetAddress.getByName("Error code ");
      tFTPClient0.open(6);
      try { 
        tFTPClient0.receiveFile("Error code ", 0, (OutputStream) null, inetAddress0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile((String) null, 0, (OutputStream) byteArrayOutputStream0, "*}ozMtI3skH+47%-", 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5000);
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("", 0, (OutputStream) byteArrayOutputStream0, (String) null, (-1966));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-1966
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.open();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sH70-y-H-R)#B6S|O", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      try { 
        tFTPClient0.receiveFile("", (int) (byte)0, (OutputStream) mockPrintStream0, "sH70-y-H-R)#B6S|O", (int) (byte)0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("Bad packet: ", 982, (OutputStream) pipedOutputStream0, "Bad packet: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 982
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("}*kRa~Er0W-'`99b", 1191, (InputStream) sequenceInputStream0, inetAddress0, (-64));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1191
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      InetAddress inetAddress0 = MockInetAddress.getByName("7w-*QrB'C}P7K yZJ");
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("7w-*QrB'C}P7K yZJ", (int) (byte)0, (InputStream) null, inetAddress0, (-3031));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-3031
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      InetAddress inetAddress0 = MockInetAddress.getByName(";");
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("fF4r4) E", 0, (OutputStream) byteArrayOutputStream0, inetAddress0, (-550));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-550
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("Unexpected host or port.", 1, (OutputStream) byteArrayOutputStream0, inetAddress0, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.setMaxTimeouts((byte)0);
      assertEquals(0, tFTPClient0.getMaxTimeouts());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("Bad packet.  Invalid TFTP operator code.", 1, (InputStream) pipedInputStream0, "Bad packet.  Invalid TFTP operator code.", 3231);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.net.tftp.TFTPClient");
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("org.apache.commons.net.tftp.TFTPClient", 1, (OutputStream) mockFileOutputStream0, "org.apache.commons.net.tftp.TFTPClient");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("$/VAb{ES", 5, (InputStream) null, "$/VAb{ES");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (byte)105);
      // Undeclared exception!
      try { 
        tFTPClient0.sendFile("rd#v-4", (int) (byte)0, (InputStream) byteArrayInputStream0, inetAddress0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile("K:\"PA&zv>us1[+G4(PE", 3591, (OutputStream) byteArrayOutputStream0, " RRQ ", 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3591
         //
         verifyException("org.apache.commons.net.tftp.TFTPRequestPacket", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.getTotalBytesSent();
      assertEquals(0, tFTPClient0.getMaxTimeouts());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      InetAddress inetAddress0 = MockInetAddress.getByName(") in request reply.");
      // Undeclared exception!
      try { 
        tFTPClient0.receiveFile(") in request reply.", 0, (OutputStream) null, inetAddress0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.tftp.TFTP", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TFTPClient tFTPClient0 = new TFTPClient();
      tFTPClient0.getTotalBytesReceived();
      assertEquals(0, tFTPClient0.getMaxTimeouts());
}
}
