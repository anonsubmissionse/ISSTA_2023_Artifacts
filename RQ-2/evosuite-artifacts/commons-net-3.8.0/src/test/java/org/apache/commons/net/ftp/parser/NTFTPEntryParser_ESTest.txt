 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser((FTPClientConfig) null);
      // Undeclared exception!
      try { 
        nTFTPEntryParser0.parseFTPEntry((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("+y$", "", "n0g?h)C5~P@E", "2", "n0g?h)C5~P@E", "2", true, true);
      NTFTPEntryParser nTFTPEntryParser0 = null;
      try {
        nTFTPEntryParser0 = new NTFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expecting a pipe-delimited string containing 12 tokens
         //
         verifyException("org.apache.commons.net.ftp.FTPClientConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser();
      FTPClientConfig fTPClientConfig0 = nTFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig0.getServerSystemKey());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser();
      FTPClientConfig fTPClientConfig0 = nTFTPEntryParser0.getDefaultConfiguration();
      assertNotNull(fTPClientConfig0.getDefaultDateFormatStr());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser();
      nTFTPEntryParser0.setRegex("MIC");
      // Undeclared exception!
      try { 
        nTFTPEntryParser0.parseFTPEntry("MIC");
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NTFTPEntryParser nTFTPEntryParser0 = new NTFTPEntryParser();
      FTPFile fTPFile0 = nTFTPEntryParser0.parseFTPEntry("MIC");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FTPClientConfig fTPClientConfig0 = new FTPClientConfig("", "r*T7yI4|o", "");
      NTFTPEntryParser nTFTPEntryParser0 = null;
      try {
        nTFTPEntryParser0 = new NTFTPEntryParser(fTPClientConfig0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
