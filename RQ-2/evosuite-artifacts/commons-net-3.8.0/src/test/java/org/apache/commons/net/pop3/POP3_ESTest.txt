 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.setState(0);
      int int0 = pOP3_0.getState();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      pOP3_0.getReplyStrings();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      pOP3_0.getReplyStrings();
      assertEquals(0, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0._commandSupport_ = null;
      pOP3_0.getCommandSupport();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0._commandSupport_ = null;
      pOP3_0.getCommandSupport();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getCommandSupport();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getCommandSupport();
      assertEquals(1, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(110, "bh/hGZ f-!4|9ecX*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand((-1728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1728
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      pOP3_0._commandSupport_ = null;
      PrintCommandListener printCommandListener0 = new PrintCommandListener(mockPrintWriter0, false, 'H');
      // Undeclared exception!
      try { 
        pOP3_0.removeProtocolCommandistener(printCommandListener0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.replyLines = null;
      // Undeclared exception!
      try { 
        pOP3_0.getReplyStrings();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.getAdditionalReply();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      PipedReader pipedReader0 = new PipedReader(1);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      pOP3_0.reader = bufferedReader0;
      try { 
        pOP3_0.getAdditionalReply();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.replyLines = null;
      // Undeclared exception!
      try { 
        pOP3_0.disconnect();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand("SYSTEM", "SYSTEM");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.setState(859);
      int int0 = pOP3_0.getState();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      String string0 = pOP3_0.getReplyString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      String string0 = pOP3_0.getReplyString();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r\n");
      pOP3_0.replyLines = (List<String>) linkedList0;
      String string0 = pOP3_0.getReplyString();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyString();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyString();
      assertEquals(1, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand("\r\n\r\n");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(0, "");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0.sendCommand(2);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Socket is not connected
         //
         verifyException("org.apache.commons.net.pop3.POP3", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.disconnect();
      assertEquals(0, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.disconnect();
      assertEquals(0, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.removeProtocolCommandistener((ProtocolCommandListener) null);
      assertEquals(1, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.removeProtocolCommandistener((ProtocolCommandListener) null);
      assertEquals(0, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyStrings();
      assertEquals(1, pOP3_0.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      pOP3_0.getReplyStrings();
      assertEquals(1, pOP3_0.getState());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      // Undeclared exception!
      try { 
        pOP3_0._connectAction_();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.net.SocketClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      int int0 = pOP3_0.getState();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      POP3 pOP3_0 = new POP3();
      int int0 = pOP3_0.getState();
      assertEquals(1, pOP3_0.getDefaultPort());
}
