/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 16:59:43 GMT 2022
 */

package org.apache.commons.weaver.privilizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.weaver.privilizer.FieldAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldAccess_ESTest extends FieldAccess_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Type type1 = Type.getMethodType(type0, typeArray0);
      FieldAccess fieldAccess0 = new FieldAccess(0, type1, "@fP[D@\"le,B=~xrf`", type0);
      FieldAccess fieldAccess1 = new FieldAccess((-3161), type0, "@fP[D@\"le,B=~xrf`", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Type type1 = Type.getMethodType(type0, typeArray0);
      FieldAccess fieldAccess0 = new FieldAccess(0, type1, "@fP[D@\"le,B=~xrf`", type0);
      FieldAccess fieldAccess1 = new FieldAccess((-3161), type0, "@fP[D@\"le,B=~xrf`", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      fieldAccess0.hashCode();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Type type0 = Type.getMethodType("-");
      FieldAccess fieldAccess0 = new FieldAccess((-2085), type0, "-", type0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = fieldAccess0.owner;
      Type type1 = Type.getMethodType(fieldAccess0.owner, typeArray0);
      FieldAccess fieldAccess1 = new FieldAccess(2, type1, "-", fieldAccess0.type);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Type type0 = Type.getMethodType("-");
      FieldAccess fieldAccess0 = new FieldAccess((-2085), type0, "-", type0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = fieldAccess0.owner;
      Type type1 = Type.getMethodType(fieldAccess0.owner, typeArray0);
      FieldAccess fieldAccess1 = new FieldAccess(2, type1, "-", fieldAccess0.type);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, "int", fieldAccess0.owner);
      FieldAccess fieldAccess2 = new FieldAccess(7, fieldAccess0.type, "int", type0);
      boolean boolean0 = fieldAccess1.equals(fieldAccess2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, "int", fieldAccess0.owner);
      FieldAccess fieldAccess2 = new FieldAccess(7, fieldAccess0.type, "int", type0);
      boolean boolean0 = fieldAccess1.equals(fieldAccess2);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, "int", fieldAccess0.owner);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, ")V", type0);
      boolean boolean0 = fieldAccess0.equals(type0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(1, (Type) null, "Kd.J", type0);
      // Undeclared exception!
      try { 
        fieldAccess0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.weaver.privilizer.FieldAccess", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldAccess fieldAccess0 = null;
      try {
        fieldAccess0 = new FieldAccess((-1), (Type) null, "A!|jS2FGI\"#9W,\"", (Type) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
