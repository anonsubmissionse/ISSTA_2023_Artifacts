/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:52:10 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Array;
import java.net.HttpCookie;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.chrono.HijrahEra;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Comparator;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Kz}hrw6YqdtWV";
      stringArray0[1] = "|pG:iv!F2qz";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "c";
      stringArray0[5] = "By[";
      String string0 = ObjectUtils.median(stringArray0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1036.5628557), (double)1, (double)0L, (-1036.5628557), 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<MockDateFormat> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super MockDateFormat>) toDoubleFunction0);
      MockDateFormat[] mockDateFormatArray0 = new MockDateFormat[3];
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      mockDateFormatArray0[0] = mockDateFormat0;
      mockDateFormatArray0[1] = mockDateFormatArray0[0];
      mockDateFormatArray0[2] = mockDateFormat0;
      MockDateFormat mockDateFormat1 = ObjectUtils.median(comparator0, mockDateFormatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNotNull(comparable0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ObjectUtils.defaultIfNull((String) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-527));
      StringBuffer stringBuffer0 = new StringBuffer("V(-l?$b0'PVV");
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point[] pointArray0 = new Point[7];
      Point point0 = new Point();
      pointArray0[0] = point0;
      pointArray0[1] = pointArray0[0];
      pointArray0[2] = point0;
      pointArray0[3] = pointArray0[0];
      Point point1 = ObjectUtils.mode(pointArray0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Fgpq)+ZM#K";
      stringArray0[1] = "Fgpq)+ZM#K";
      stringArray0[2] = "Fgpq)+ZM#K";
      String string0 = ObjectUtils.median(stringArray0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = ObjectUtils.compare("]", "\u0000.");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ObjectUtils.compare("$D\"ZFg,VzY!+X7r~]g>", "YpKIS,gRte2p7(F`FR{");
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BreakIterator breakIterator0 = ObjectUtils.cloneIfPossible((BreakIterator) null);
      assertNotNull(breakIterator0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
//TOGA incorrect assertion       assertTrue(short0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-882));
//TOGA incorrect assertion       assertTrue(short0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      BreakIterator breakIterator1 = ObjectUtils.CONST(breakIterator0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = ObjectUtils.CONST(351L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-88));
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) 17);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-2362.8));
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char char0 = ObjectUtils.CONST('5');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char char0 = ObjectUtils.CONST('w');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
//TOGA incorrect assertion       assertTrue(byte0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)7);
//TOGA incorrect assertion       assertTrue(byte0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Duration duration0 = Duration.ofMinutes((-1));
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) gridBagConstraints0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) numberFormat0, duration0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((JobAttributes) null, ":h");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // :h
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<HttpCookie> arrayList0 = new ArrayList<HttpCookie>();
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // object
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Comparator<DateFormatSymbols> comparator0 = Comparator.nullsLast((Comparator<? super DateFormatSymbols>) collator0);
      DateFormatSymbols[] dateFormatSymbolsArray0 = new DateFormatSymbols[1];
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      dateFormatSymbolsArray0[0] = dateFormatSymbols0;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, dateFormatSymbolsArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.text.DateFormatSymbols cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(breakIterator0).when(supplier0).get();
      Object object0 = ObjectUtils.getIfNull((Object) null, supplier0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(object0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone(breakIterator0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1276), 0);
      Dimension dimension1 = ObjectUtils.requireNonEmpty(dimension0, "Fgpq)+ZM#K");
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IdentityHashMap<RenderingHints.Key, CharBuffer> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, CharBuffer>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      boolean boolean0 = ObjectUtils.isEmpty(renderingHints0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("S:^pea");
      boolean boolean0 = ObjectUtils.isEmpty(decimalFormat0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      boolean boolean0 = ObjectUtils.isEmpty(stringBuffer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Dimension dimension0 = new Dimension(0, 0);
      ObjectUtils.hashCode((Object) dimension0);
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = ObjectUtils.firstNonNull(propertiesArray0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Time time0 = ObjectUtils.firstNonNull((Time[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) timestamp0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Date date0 = new Date((short)64);
      boolean boolean0 = ObjectUtils.equals((Object) date0, (Object) date0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = ObjectUtils.defaultIfNull((Object) integer0, (Object) "zo-xOXlmAwP/");
      assertEquals(0, object0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ObjectUtils.compare("|,TmC Fk2F", (String) null, true);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ObjectUtils.compare("|,TmC Fk2F", (String) null, false);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, "Invalid length: ", true);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = ObjectUtils.compare("_C#YA/ULkl`", "F8", true);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Date date0 = new Date((-1317L));
      int int0 = ObjectUtils.compare(date0, date0, true);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, "F]Q<zB", false);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1));
      MutableInt mutableInt1 = ObjectUtils.clone(mutableInt0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      boolean boolean0 = ObjectUtils.anyNotNull(stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<BitSet> arrayList0 = new ArrayList<BitSet>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) arrayList0;
      objectArray0[6] = (Object) arrayList0;
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("n.[]:@Gv").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(834, 834);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ObjectUtils.toString((Object) rectangle0, supplier0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "hjGFJnE<DS_c");
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "java.util.BitSet@1", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = ObjectUtils.toString((Object) locale0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Point[] pointArray0 = new Point[7];
      Point point0 = new Point();
      pointArray0[2] = point0;
      Point point1 = ObjectUtils.mode(pointArray0);
      assertNotNull(point1);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      StringBuilder stringBuilder0 = new StringBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) imageCapabilities0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) stringBuilder0;
      objectArray0[4] = (Object) imageCapabilities0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateFormatSymbols[] dateFormatSymbolsArray0 = new DateFormatSymbols[0];
      DateFormatSymbols dateFormatSymbols0 = ObjectUtils.mode(dateFormatSymbolsArray0);
      assertNotNull(dateFormatSymbols0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNotNull(comparable0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNotNull(comparable0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      boolean boolean0 = ObjectUtils.isNotEmpty(collator0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(8);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, integer0);
      boolean boolean0 = ObjectUtils.isEmpty(renderingHints0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedHashMap<RenderingHints.Key, Integer> linkedHashMap0 = new LinkedHashMap<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(linkedHashMap0);
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty(renderingHints0, "java.util.Stack@1");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // java.util.Stack@1
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Stack<Dimension>[] stackArray0 = (Stack<Dimension>[]) Array.newInstance(Stack.class, 2);
      Stack<Dimension> stack0 = new Stack<Dimension>();
      stackArray0[0] = stack0;
      Dimension dimension0 = new Dimension(1410, 1410);
      stack0.add(dimension0);
      boolean boolean0 = ObjectUtils.isEmpty(stackArray0[0]);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Stack<Dimension>[] stackArray0 = (Stack<Dimension>[]) Array.newInstance(Stack.class, 5);
      Stack<Dimension> stack0 = new Stack<Dimension>();
      stackArray0[0] = stack0;
      boolean boolean0 = ObjectUtils.isEmpty(stackArray0[0]);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("aRiN9LMoOW2w|1cZZ<Z]");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = ObjectUtils.identityToString((Object) mockDateFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) "The Array must not be null";
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      NumberFormat numberFormat0 = ObjectUtils.getIfNull((NumberFormat) null, (Supplier<NumberFormat>) null);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Object object0 = ObjectUtils.getIfNull((Object) "The Array must not be null", (Supplier<Object>) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 6);
      supplierArray0[0] = supplier0;
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Object object0 = ObjectUtils.getFirstNonNull((Supplier<Object>[]) null);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        ObjectUtils.wait(object0, duration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateFormatSymbols[] dateFormatSymbolsArray0 = new DateFormatSymbols[7];
      DateFormatSymbols dateFormatSymbols0 = ObjectUtils.firstNonNull(dateFormatSymbolsArray0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Integer integer0 = new Integer((-961));
      boolean boolean0 = ObjectUtils.equals((Object) "org.evosuite.runtime.mock.java.text.MockDateFormat@1", (Object) integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Dimension dimension0 = new Dimension((-1), (-979));
      Rectangle rectangle0 = new Rectangle(dimension0);
      boolean boolean0 = ObjectUtils.equals((Object) rectangle0, (Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      boolean boolean0 = ObjectUtils.notEqual(imageCapabilities0, imageCapabilities0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4124, 1, 4124);
      boolean boolean0 = ObjectUtils.notEqual((Object) null, mockGregorianCalendar0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(28629151);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [28629151]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-844471871));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-844471871]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((short)1410);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [1410]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-232]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((-1));
      Integer integer1 = mutableInt0.getValue();
      integerArray0[1] = integer1;
      Integer integer2 = ObjectUtils.max(integerArray0);
      assertNotNull(integer2);
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((-1));
      Integer integer1 = mutableInt0.getValue();
      integerArray0[1] = integer1;
      Integer integer2 = ObjectUtils.max(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockGregorianCalendar[] mockGregorianCalendarArray0 = new MockGregorianCalendar[5];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      mockGregorianCalendarArray0[2] = mockGregorianCalendar0;
      MockGregorianCalendar mockGregorianCalendar1 = ObjectUtils.min(mockGregorianCalendarArray0);
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Date date0 = Date.valueOf(localDate0);
      Date date1 = ObjectUtils.cloneIfPossible(date0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      GridBagConstraints gridBagConstraints1 = ObjectUtils.clone(gridBagConstraints0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) "b;,sd,s2Y");
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jobAttributes0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer((-527));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      objectArray0[8] = (Object) integer0;
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) choiceFormat0, duration0);
        fail("Expecting exception: IllegalMonitorStateException");
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      Comparator<RuleBasedCollator> comparator1 = Comparator.nullsFirst((Comparator<? super RuleBasedCollator>) comparator0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator1, (RuleBasedCollator[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-1.0F));
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ObjectUtils.CONST(objectArray0[4]);
//TOGA incorrect assertion       assertTrue(object0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("null/empty items");
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) messageFormat0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)116);
//TOGA incorrect assertion       assertTrue(short0);
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char char0 = ObjectUtils.CONST('*');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-1));
//TOGA incorrect assertion       assertTrue(byte0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      ObjectUtils.identityToString((Appendable) stringBuilder0, (Object) stringBuffer0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ImageCapabilities imageCapabilities1 = ObjectUtils.requireNonEmpty(imageCapabilities0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ObjectUtils.identityToString(stringBuilder0, (Object) stringBuilder0);
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-199L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = ObjectUtils.CONST(644);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      int int0 = ObjectUtils.compare(hijrahEra0, hijrahEra0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }
}
