 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.getJavaVersion("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_14;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_1;
      boolean boolean0 = javaVersion1.atMost(javaVersion0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_10;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_3;
      boolean boolean0 = javaVersion0.atLeast(javaVersion1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JavaVersion[] javaVersionArray0 = JavaVersion.values();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.valueOf("JAVA_9");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JavaVersion.getJavaVersion((String) null);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.getJavaVersion("%JoD");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_4;
      // Undeclared exception!
      try { 
        javaVersion0.atMost((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_13;
      // Undeclared exception!
      try { 
        javaVersion0.atLeast((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("99.0");
      assertNotNull(javaVersion0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("@$.9");
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaVersion.get("px.0");
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaVersion.get("6");
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.get(".");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.8");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.7");
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.6");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.5");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.4");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.3");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.2");
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.1");
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("0.9");
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("17");
      assertNotNull(javaVersion0.toString());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("16");
      assertNotNull(javaVersion0.toString());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("15");
      assertNotNull(javaVersion0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("14");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("13");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("12");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("10");
      assertNotNull(javaVersion0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("9");
      assertNotNull(javaVersion0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_13;
      boolean boolean0 = javaVersion0.atMost(javaVersion0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_13;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_8;
      boolean boolean0 = javaVersion0.atMost(javaVersion1);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_6;
      boolean boolean0 = javaVersion0.atLeast(javaVersion0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_3;
      JavaVersion javaVersion1 = JavaVersion.JAVA_17;
      boolean boolean0 = javaVersion0.atLeast(javaVersion1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_11;
      String string0 = javaVersion0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("11");
      assertNotNull(javaVersion0);
}
