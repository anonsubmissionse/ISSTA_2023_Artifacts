/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:18:22 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
import org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
import org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCircuitBreaker_ESTest extends AbstractCircuitBreaker_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(631, 0L, timeUnit0, 631);
      eventCountCircuitBreaker0.close();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 1423L, timeUnit0, (-3815), 0, timeUnit0);
      eventCountCircuitBreaker0.open();
      boolean boolean0 = eventCountCircuitBreaker0.isOpen();
      assertTrue(eventCountCircuitBreaker0.isClosed());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 1423L, timeUnit0, (-3815), 0, timeUnit0);
      eventCountCircuitBreaker0.open();
      boolean boolean0 = eventCountCircuitBreaker0.isOpen();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1758), 0L, timeUnit0);
      Integer integer0 = new Integer((-1758));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 1496L, timeUnit0, 0);
      eventCountCircuitBreaker0.incrementAndCheckState();
      Integer integer0 = new Integer(0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertFalse(eventCountCircuitBreaker0.isOpen());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 1496L, timeUnit0, 0);
      eventCountCircuitBreaker0.incrementAndCheckState();
      Integer integer0 = new Integer(0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(681, 681, timeUnit0, 0, 681, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1796), 1L, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertFalse(eventCountCircuitBreaker0.isOpen());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1796), 1L, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(671, 1549L, timeUnit0, 671);
      // Undeclared exception!
      try { 
        eventCountCircuitBreaker0.incrementAndCheckState((Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1643, (-495L), timeUnit0, 1643);
      // Undeclared exception!
      try { 
        eventCountCircuitBreaker0.changeState((AbstractCircuitBreaker.State) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.AbstractCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.CLOSED;
      boolean boolean0 = AbstractCircuitBreaker.isOpen(abstractCircuitBreaker_State0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      boolean boolean0 = AbstractCircuitBreaker.isOpen(abstractCircuitBreaker_State0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 1423L, timeUnit0, (-3815), 0, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.isOpen();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThresholdCircuitBreaker thresholdCircuitBreaker0 = new ThresholdCircuitBreaker(4475L);
      thresholdCircuitBreaker0.open();
      assertFalse(thresholdCircuitBreaker0.isOpen());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-463), (-463), timeUnit0, (-463), (-463), timeUnit0);
      eventCountCircuitBreaker0.checkState();
      assertTrue(eventCountCircuitBreaker0.isClosed());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-463), (-463), timeUnit0, (-463), (-463), timeUnit0);
      eventCountCircuitBreaker0.checkState();
      eventCountCircuitBreaker0.close();
      assertTrue(eventCountCircuitBreaker0.isClosed());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.isClosed();
      assertFalse(eventCountCircuitBreaker0.isOpen());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.isClosed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("open", propertyChangeListener0);
      eventCountCircuitBreaker0.removeChangeListener(propertyChangeListenerProxy0);
      assertEquals(0, eventCountCircuitBreaker0.getClosingInterval());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-463), (-463), timeUnit0, (-463), (-463), timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.isClosed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("open", propertyChangeListener0);
      eventCountCircuitBreaker0.addChangeListener(propertyChangeListenerProxy0);
      assertTrue(eventCountCircuitBreaker0.isClosed());
}
}
