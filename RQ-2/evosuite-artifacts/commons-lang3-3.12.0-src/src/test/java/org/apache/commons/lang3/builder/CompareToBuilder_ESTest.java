/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:36:31 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[2];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2360;
      float[] floatArray1 = new float[8];
      compareToBuilder0.append(floatArray0, floatArray1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      float[] floatArray0 = new float[8];
      compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      float[] floatArray0 = new float[8];
      compareToBuilder1.append(floatArray0, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 'W';
      compareToBuilder0.append(doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short)0, (short) (-1433));
      double[] doubleArray0 = new double[5];
      compareToBuilder0.append(doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-83);
      compareToBuilder0.append(byteArray0, byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[0];
      compareToBuilder0.append(floatArray0, floatArray1);
      byte[] byteArray0 = new byte[9];
      compareToBuilder0.append(byteArray0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      charArray1[0] = 'm';
      compareToBuilder0.append(charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1550L, (-1L));
      char[] charArray0 = new char[2];
      compareToBuilder1.append(charArray0, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1550L, (-1L));
      char[] charArray0 = new char[2];
      compareToBuilder1.append(charArray0, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[6];
      intArray0[1] = 258;
      int[] intArray1 = new int[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      short[] shortArray0 = new short[8];
      compareToBuilder1.append(shortArray0, shortArray0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[6];
      intArray0[1] = 258;
      int[] intArray1 = new int[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      short[] shortArray0 = new short[8];
      compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      int[] intArray0 = new int[5];
      compareToBuilder0.append(intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[5];
      longArray0[0] = 12L;
      long[] longArray1 = new long[5];
      compareToBuilder0.append(longArray1, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int[]) null, intArray0);
      long[] longArray0 = new long[3];
      compareToBuilder1.append(longArray0, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int[]) null, intArray0);
      long[] longArray0 = new long[3];
      compareToBuilder1.append(longArray0, longArray0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[2] = objectArray0[0];
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = objectArray0[0];
      objectArray1[1] = objectArray0[2];
      compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder0.append(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append('m', '*');
      compareToBuilder0.append('7', 'm');
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      compareToBuilder1.append((-632), (-632));
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      compareToBuilder1.append((-632), (-632));
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append('m', '*');
      int int0 = compareToBuilder0.toComparison();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      int int0 = compareToBuilder1.toComparison();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[9];
      int int0 = CompareToBuilder.reflectionCompare((Object) "Unexpected IllegalAccessException", (Object) "om`F$P]?+N(", stringArray0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[9];
      int int0 = CompareToBuilder.reflectionCompare((Object) "6kM^;LD*", (Object) "om`F$P]?+N(", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer('r');
      Integer integer1 = new Integer((byte) (-105));
      Class<Integer> class0 = Integer.class;
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true, (Class<?>) class0, (String[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0, false);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "(uQ]LcSN7,", (Object) "Array and element cannot both be null", true);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0, (Collection<String>) linkedList0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) "(uQ]lLcSN7,", (Object) "F}rl2o(S", (Collection<String>) linkedList0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer((-1040));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) intArray0[1], (Collection<String>) linkedList0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      compareToBuilder1.append((short) (byte)0, (short) (byte)2);
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder1);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = new CompareToBuilder();
      compareToBuilder1.append((short) (byte)0, (short) (byte)2);
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short) (-1), (short)0);
      compareToBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)0, (short) (-1433));
      compareToBuilder1.appendSuper(0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)0, (short) (-1433));
      compareToBuilder1.appendSuper(0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      Object[] objectArray0 = new Object[0];
      compareToBuilder1.append(objectArray0, objectArray0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      Object[] objectArray0 = new Object[0];
      compareToBuilder1.append(objectArray0, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)19, (short)19);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "$", (Object) "$");
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[0];
      compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder0.append(0L, (long) (byte)0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-1), 2570);
      compareToBuilder0.append((float) (byte)1, (float) (byte)1);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder0.append((double) 0, (double) 38);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder1.append((byte)0, (byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder1.append((byte)0, (byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) compareToBuilder0, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) comparator0, stringArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, false, class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, object0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) integer0, object0, (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "3x{", (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "Cannot store ", (Object) compareToBuilder0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) compareToBuilder0;
      Object object0 = new Object();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = object0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) compareToBuilder0;
      Object object0 = new Object();
      Object[] objectArray1 = new Object[6];
      objectArray1[1] = object0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray1, objectArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compareToBuilder0.append(object0, (Object) compareToBuilder0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      compareToBuilder0.append(charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[1];
      compareToBuilder0.append(charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) compareToBuilder0;
      objectArray1[1] = objectArray0[0];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[10];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.append(objectArray0, objectArray0, comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      // Undeclared exception!
      try { 
        compareToBuilder0.append((Object) "X7bJK,)tx(", (Object) compareToBuilder0, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) integer0, (Object) integer0, (Comparator<?>) comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) compareToBuilder1, (Object) compareToBuilder1, (Comparator<?>) comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", (Object) compareToBuilder0, true, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = Integer.valueOf((int) (byte) (-1));
      Integer integer1 = new Integer(1295);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, false, (Class<?>) class0, stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0, stringArray0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = compareToBuilder0.toComparison();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      compareToBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[9];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[8];
      compareToBuilder0.append(booleanArray0, (boolean[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[0];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((boolean[]) null, (boolean[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[7];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      compareToBuilder0.append((boolean[]) null, (boolean[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[7];
      compareToBuilder0.append((boolean[]) null, booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, (float[]) null);
      compareToBuilder1.append((Object) compareToBuilder0, (Object) compareToBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, (float[]) null);
      compareToBuilder1.append((Object) compareToBuilder0, (Object) compareToBuilder0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[8];
      compareToBuilder0.append((float[]) null, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder0.append(floatArray0, (float[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'W';
      double[] doubleArray1 = new double[6];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      compareToBuilder0.append((double[]) null, doubleArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[7];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      double[] doubleArray0 = new double[2];
      compareToBuilder0.append(doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byte[] byteArray1 = new byte[9];
      compareToBuilder0.append(byteArray0, byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[5];
      compareToBuilder0.append(byteArray0, byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[0];
      compareToBuilder0.append(byteArray0, (byte[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[8];
      compareToBuilder0.append((byte[]) null, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append(byteArray0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      char[] charArray1 = new char[9];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "$");
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[8];
      compareToBuilder0.append(charArray0, (char[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[1];
      compareToBuilder0.append((char[]) null, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((char[]) null, (char[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[6];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append(charArray0, charArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[6];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append(charArray0, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-39);
      short[] shortArray1 = new short[4];
      compareToBuilder0.append(shortArray0, shortArray1);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[1];
      compareToBuilder0.append(shortArray0, shortArray1);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[0];
      compareToBuilder0.append(shortArray0, (short[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[0];
      compareToBuilder0.append((short[]) null, shortArray0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      compareToBuilder0.append(intArray0, intArray1);
      short[] shortArray0 = new short[8];
      compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[6];
      intArray0[2] = (-877);
      int[] intArray1 = new int[6];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[3];
      compareToBuilder0.append(intArray0, intArray1);
      boolean[] booleanArray0 = new boolean[2];
      compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[0];
      compareToBuilder0.append(intArray0, (int[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)11;
      long[] longArray1 = new long[2];
      compareToBuilder0.append(longArray0, longArray1);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[5];
      compareToBuilder0.append(longArray1, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[7];
      compareToBuilder0.append(longArray0, longArray1);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[3];
      compareToBuilder0.append(longArray0, (long[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[5];
      compareToBuilder0.append((long[]) null, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((long[]) null, (long[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[6];
      compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[25];
      compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray1, objectArray0);
      assertEquals(1, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[6];
      compareToBuilder0.append(objectArray0, (Object[]) null, (Comparator<?>) null);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[8];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      int[] intArray0 = new int[2];
      compareToBuilder1.append(intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[8];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      int[] intArray0 = new int[2];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[5];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      long[] longArray0 = new long[7];
      compareToBuilder1.append(longArray0, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[5];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      long[] longArray0 = new long[7];
      compareToBuilder1.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      compareToBuilder0.append(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[1];
      compareToBuilder0.append(objectArray0, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      compareToBuilder1.append((short)1909, (short)1909);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      compareToBuilder1.append((short)1909, (short)1909);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      compareToBuilder1.append(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('m', '*');
      compareToBuilder1.append(false, false);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(true, false);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-36.195522F), (-36.195522F));
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append((double) (byte) (-104), 0.0);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append((double) (byte) (-104), 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append((byte)53, (byte)53);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append((byte)53, (byte)53);
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)0, (byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append('R', 'L');
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append('R', 'L');
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('r', 'r');
      assertEquals(0, compareToBuilder1.toComparison());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(2984, 2);
      compareToBuilder1.append((short)986, (short)986);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(2984, 2);
      compareToBuilder1.append((short)986, (short)986);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      compareToBuilder0.append(intArray0, intArray1);
      compareToBuilder0.append((int) (short) (-2395), 991);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int) (short)2352, 2352);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short) (-1), (short)0);
      compareToBuilder0.append((long) (short)0, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1L, 1L);
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(comparator0).compare(anyString() , anyString());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) compareToBuilder0, object0, (Comparator<?>) comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) compareToBuilder0, (Object) null, (Comparator<?>) comparator0);
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0F, (-1.0F));
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) null, object0, comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.appendSuper((byte)16);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.appendSuper((byte)16);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-20));
      compareToBuilder1.append((Object) compareToBuilder0, (Object) null);
      assertEquals(1, compareToBuilder0.toComparison());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-20));
      compareToBuilder1.append((Object) compareToBuilder0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "_),*`Q1BY[=#", (Object) "", true);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer integer0 = new Integer((-2483));
      Integer integer1 = new Integer((-2483));
      Class<Integer> class0 = Integer.class;
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, false, (Class<?>) class0, (String[]) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "");
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, object0, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
}
