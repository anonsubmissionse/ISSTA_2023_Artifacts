/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:22:52 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableBiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableBiConsumer_ESTest extends FailableBiConsumer_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableBiConsumer<Throwable, Throwable, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      MockThrowable mockThrowable0 = new MockThrowable("");
      failableBiConsumer0.accept(mockThrowable0, mockThrowable0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableBiConsumer<Object, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      // Undeclared exception!
      try { 
        failableBiConsumer0.andThen((FailableBiConsumer<? super Object, ? super Integer, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableBiConsumer<Object, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<Object, Integer, Throwable> failableBiConsumer1 = failableBiConsumer0.andThen(failableBiConsumer0);
      FailableBiConsumer<Object, Integer, Throwable> failableBiConsumer2 = failableBiConsumer0.andThen(failableBiConsumer1);
      ;
}
}
