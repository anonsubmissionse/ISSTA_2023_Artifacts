/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:58:12 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "", (ToStringStyle) null, false);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("", (short)2251, (short)1540);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, "ds)u*Xz)BJ~|8", recursiveToStringStyle0, true);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (-834L), 0L);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>("", diffBuilder0, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", (float) (-20L), (float) (byte) (-35));
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (double) (-3589), 96.2);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(639);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, "RC[laDFAj+", toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("RC[laDFAj+", 'A', '1');
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (byte)44, (byte)37);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((-1));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, booleanArray0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, multilineRecursiveToStringStyle0);
      short[] shortArray0 = new short[5];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, shortArray0, shortArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object[]) diff0.EMPTY_ARRAY, (Object[]) diff0.EMPTY_ARRAY);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("org.apache.commons.lang3.builder.DiffBuilder$12", "org.apache.commons.lang3.builder.DiffBuilder$12", toStringStyle0, false);
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>(">\"", ">\"", toStringStyle0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (char[]) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>("", diffBuilder0, toStringStyle0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        diffBuilder1.append((String) null, byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-9));
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>("", integer0, toStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, false, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", ">\"", toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short) (byte)48, (short) (byte)48);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1484));
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", (DiffResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // diffResult
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, "org.apache.commons.lang3.builder.DiffBuilder$18", (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object) diffBuilder0, (Object) "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(44);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, "R", recursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("org.apache.commons.lang3.tuple.Pair", "org.apache.commons.lang3.builder.DiffBuilder$18", toStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Diff<Object> diff0 = (Diff<Object>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Object> diff1 = (Diff<Object>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<Object>> diffBuilder0 = new DiffBuilder<Diff<Object>>(diff0, diff1, (ToStringStyle) null, true);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 3691.1226F, 3691.1226F);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) (-1), (double) (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, true);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, '^', '4');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte)58, (byte)68);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Object>((Object) null, object0, recursiveToStringStyle0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<String> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<String>((String) null, (String) null, recursiveToStringStyle0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", diffResult0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(2309);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("Lul^=%Q#G2zJ-6F", diffResult0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "", toStringStyle0, false);
      Object[] objectArray0 = new Object[12];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("*K[?x1Po-\\d$hq", objectArray0, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff1 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff1, diff1, toStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", (Object[]) diff0.EMPTY_ARRAY, (Object[]) diff1.EMPTY_ARRAY);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1035);
      Integer integer1 = new Integer((-1509));
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, false);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1509);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~uZ*W/1Xt;qqq_|l", (Object) integer1, (Object) intArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("6", "6", toStringStyle0, false);
      Object object0 = new Object();
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("6", (Object) null, object0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(";rb~hK", ";rb~hK", (ToStringStyle) null, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append(";rb~hK", (Object) diffBuilder0, (Object) diffBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(2309);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.text.translate.CharSequenceTranslator", (Object) "org.apache.commons.lang3.text.translate.CharSequenceTranslator", (Object) "org.apache.commons.lang3.text.translate.CharSequenceTranslator");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(493);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, toStringStyle0, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (short[]) null, (short[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(2309);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      short[] shortArray0 = new short[0];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.text.translate.CharSequenceTranslator", shortArray0, shortArray0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>("", diffBuilder0, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("%>McSRR", (short) (byte) (-35), (short) (byte) (-35));
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("%>McSRR", (short) (byte) (-35), (short)1614);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(493);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, toStringStyle0, toStringStyle0);
      long[] longArray0 = new long[2];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>(">\"", ">\"", toStringStyle0);
      long[] longArray0 = new long[1];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("5w\"8l[v", longArray0, longArray0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", 0L, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", (-20L), (long) (byte) (-35));
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      int[] intArray0 = new int[1];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("OKfAxOfPTZ", "OKfAxOfPTZ", (ToStringStyle) null);
      int[] intArray0 = new int[8];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("", intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", (int) '4', (int) '4');
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[] floatArray0 = new float[1];
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("Lul^=%Q#G2zJ-6F", "p'=TFY7}^", (ToStringStyle) null, false);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("VIyB8hzv*/^", floatArray0, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(2309);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      float[] floatArray0 = new float[1];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.text.translate.CharSequenceTranslator", floatArray0, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(";rb~hK", ";rb~hK", (ToStringStyle) null, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append(";rb~hK", 544.0F, 544.0F);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("]S/D+6c!>{nSH_kC)", (float) (short)1, (-997.0F));
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      double[] doubleArray0 = new double[6];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      double[] doubleArray0 = new double[0];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("%>McSRR", doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(493);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, toStringStyle0, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (double) 493, 493.0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("OKfAxOfPTZ", "OKfAxOfPTZ", (ToStringStyle) null);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("OKfAxOfPTZ", (-3067.27527), (-1043.369079));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "?!=L=@TTf2", (ToStringStyle) null, true);
      char[] charArray0 = new char[4];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append(";W.,.f+?i9", charArray0, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("OKfAxOfPTZ", "OKfAxOfPTZ", (ToStringStyle) null);
      char[] charArray0 = new char[5];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("", charArray0, charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", 'S', 'S');
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("%>McSRR", '\u001D', '\u001D');
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(diffBuilder0, "", toStringStyle0);
      byte[] byteArray0 = new byte[11];
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", byteArray0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, multilineRecursiveToStringStyle0);
      byte[] byteArray0 = new byte[1];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("%>McSRR", byteArray0, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "?!=L=@TTf2", (ToStringStyle) null, true);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("?!=L=@TTf2", (byte) (-88), (byte) (-88));
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(2309);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("Lul^=%Q#G2zJ-6F", (byte) (-19), (byte) (-19));
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      boolean[] booleanArray0 = new boolean[4];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", booleanArray0, booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, true);
      boolean[] booleanArray0 = new boolean[0];
      DiffBuilder<Diff<String>> diffBuilder1 = diffBuilder0.append("", booleanArray0, booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", true, true);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("OKfAxOfPTZ", "OKfAxOfPTZ", (ToStringStyle) null);
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("P_St7\":jX@m@", true, true);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(1035);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[8];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", intArray0, intArray1);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(diffBuilder0, "", toStringStyle0);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append(" in an array of ", (double) (byte)92, 0.0);
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder2.append("<K7ds", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object1, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DffBuilder$10", (-1507), 2476);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("org.apache.commons.lang3.builder.DffBuilder$10", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(diffBuilder0, "", toStringStyle0);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append(" in an array of ", (int) (byte)92, (-4882));
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<String> diffBuilder0 = new DiffBuilder<String>("", "", toStringStyle0, false);
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[11];
      DiffBuilder<String> diffBuilder1 = diffBuilder0.append("", charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(493);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, toStringStyle0, toStringStyle0);
      float[] floatArray0 = new float[9];
      diffBuilder0.append("  ", floatArray0, (float[]) null);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$15", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", (-2062.9412F), (float) (-1L));
      // Undeclared exception!
      try { 
        diffBuilder0.append("O[U%FD=S", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, false);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("rhs", doubleArray0, doubleArray1);
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("XM`.lTY", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[8];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", shortArray0, shortArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("\u03B3", (short) (byte) (-23), (short) (byte)123);
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("XM`.lTY", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[5];
      diffBuilder0.append("", longArray0, longArray1);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", (long) (byte)42, (long) (byte)0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[8];
      diffBuilder0.append("", objectArray0, objectArray1);
      // Undeclared exception!
      try { 
        diffBuilder0.append("O[U%FD=S", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder1 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder2 = new DiffBuilder<Object>(diffBuilder1, "", toStringStyle0);
      diffBuilder2.append("org.apache.commons.lang3.builder.ToStringStyle$SimplToStringStyle", (Object) integer0, (Object) diffBuilder0);
      DiffResult<Object> diffResult0 = diffBuilder2.build();
      // Undeclared exception!
      try { 
        diffBuilder2.append("<K7ds", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Diff<String> diff0 = (Diff<String>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<String>> diffBuilder0 = new DiffBuilder<Diff<String>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(diffBuilder0, "", toStringStyle0);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle", (byte) (-78), (byte)46);
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder2.append("<K7ds", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = new boolean[8];
      diffBuilder0.append("", booleanArray0, booleanArray1);
      // Undeclared exception!
      try { 
        diffBuilder0.append("O[U%FD=S", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(";rb~hK", ";rb~hK", (ToStringStyle) null, false);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append(";rb~hK", ';', 'b');
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append(";rb~hK", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2627));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, integer0, standardToStringStyle0);
      DiffResult<Object> diffResult0 = diffBuilder0.build();
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[7];
      diffBuilder0.append("", byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(493);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, toStringStyle0, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append(">eQ0OnPP0fWs1M", false, true);
      DiffResult<Object> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$15", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }
}
