/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:15:25 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-2856));
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>(integer0, integer0, "org.apache.commons.lang3.tuple.Triple$TripleAdapter");
      MutableTriple<String, Object, Object> mutableTriple1 = new MutableTriple<String, Object, Object>();
      ImmutableTriple<MutableTriple<String, Object, Object>, Object, Object> immutableTriple0 = ImmutableTriple.of(mutableTriple1, (Object) "org.apache.commons.lang3.tuple.Triple$TripleAdapter", (Object) integer0);
      ImmutableTriple<Object, Object, Object> immutableTriple1 = new ImmutableTriple<Object, Object, Object>("org.apache.commons.lang3.tuple.Triple$TripleAdapter", "org.apache.commons.lang3.tuple.Triple$TripleAdapter", immutableTriple0);
      MutableTriple<MutableTriple<Object, Object, String>, ImmutableTriple<Object, Object, Object>, Integer> mutableTriple2 = MutableTriple.of(mutableTriple0, immutableTriple1, integer0);
      mutableTriple2.hashCode();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(2330);
      MutableTriple<Object, Integer, Integer> mutableTriple0 = new MutableTriple<Object, Integer, Integer>((Object) null, integer0, integer0);
      String string0 = mutableTriple0.toString("org.apache.commons.lang3.tuple.Triple");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.nullTriple();
      String string0 = immutableTriple0.toString("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableTriple<Object, Object, Object> mutableTriple0 = new MutableTriple<Object, Object, Object>();
      Object object0 = mutableTriple0.getRight();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-16));
      Triple<Integer, String, Object> triple0 = Triple.of(integer0, ",", (Object) integer0);
      Object object0 = triple0.getRight();
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>();
      String string0 = mutableTriple0.getMiddle();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutableTriple<String, String, Object> immutableTriple0 = new ImmutableTriple<String, String, Object>("b7\" %5f[NL[q", "b7\" %5f[NL[q", "b7\" %5f[NL[q");
      ImmutableTriple<Triple<String, String, Object>, String, ImmutableTriple<Object, String, Object>> immutableTriple1 = ImmutableTriple.of((Triple<String, String, Object>) immutableTriple0, "b7\" %5f[NL[q", (ImmutableTriple<Object, String, Object>) null);
      String string0 = immutableTriple1.getMiddle();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableTriple<String, String, Object> mutableTriple0 = new MutableTriple<String, String, Object>();
      String string0 = mutableTriple0.getLeft();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      Integer integer0 = new Integer(2);
      MutableTriple<Object, Object, String> mutableTriple1 = new MutableTriple<Object, Object, String>("a6}_qLC.W`,r", integer0, "$$[J");
      int int0 = mutableTriple1.compareTo((Triple<Object, Object, String>) mutableTriple0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(0);
      MutableTriple<Integer, Integer, String> mutableTriple0 = MutableTriple.of(integer0, integer0, "");
      int int0 = immutableTriple0.compareTo((Triple<Integer, Integer, String>) mutableTriple0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableTriple<Object, Integer, String> mutableTriple0 = new MutableTriple<Object, Integer, String>();
      // Undeclared exception!
      try { 
        mutableTriple0.compareTo((Triple<Object, Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      MutableTriple<String, Object, String> mutableTriple1 = new MutableTriple<String, Object, String>("$GrPP>!>P|}]PA", "a6}_qLC.W`,r", "a6}_qLC.W`,r");
      MutableTriple<MutableTriple<Object, Object, String>, MutableTriple<String, Object, String>, Triple<String, Object, String>> mutableTriple2 = MutableTriple.of(mutableTriple0, mutableTriple1, (Triple<String, Object, String>) mutableTriple1);
      Object object1 = mutableTriple2.getLeft();
      ImmutableTriple<Object, Object, String> immutableTriple0 = ImmutableTriple.of(object0, (Object) object1, "63gP={uy|o");
      Integer integer0 = new Integer(2);
      MutableTriple<Object, Object, String> mutableTriple3 = new MutableTriple<Object, Object, String>("a6}_qLC.W`,r", integer0, "$$[J");
      // Undeclared exception!
      try { 
        immutableTriple0.compareTo((Triple<Object, Object, String>) mutableTriple3);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableTriple<String, String, String> mutableTriple0 = MutableTriple.of(",", "", (String) null);
      MutableTriple<String, Object, Integer> mutableTriple1 = new MutableTriple<String, Object, Integer>();
      MutableTriple<String, String, MutableTriple<String, Object, Integer>> mutableTriple2 = new MutableTriple<String, String, MutableTriple<String, Object, Integer>>(",", "", mutableTriple1);
      boolean boolean0 = mutableTriple2.equals(mutableTriple0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableTriple<String, String, Integer> mutableTriple0 = new MutableTriple<String, String, Integer>();
      MutableTriple<String, String, Integer> mutableTriple1 = new MutableTriple<String, String, Integer>();
      boolean boolean0 = mutableTriple1.equals(mutableTriple0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-16));
      ImmutableTriple<Integer, String, String> immutableTriple0 = ImmutableTriple.of(integer0, (String) null, "v @L8&^{");
      MutableTriple<ImmutableTriple<Integer, String, String>, String, Object> mutableTriple0 = MutableTriple.of(immutableTriple0, "8'(`3@n6~7 2", (Object) integer0);
      ImmutableTriple<String, Object, Object> immutableTriple1 = ImmutableTriple.nullTriple();
      ImmutableTriple<ImmutableTriple<String, Object, Object>, Integer, Object> immutableTriple2 = ImmutableTriple.of(immutableTriple1, integer0, (Object) integer0);
      boolean boolean0 = immutableTriple2.equals(mutableTriple0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImmutableTriple<MutableTriple<Object, Object, Object>, ImmutableTriple<String, String, String>, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      boolean boolean0 = immutableTriple0.equals("org.apache.commons.lang3.tuple.ImmutableTriple");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImmutableTriple<String, String, String> immutableTriple0 = ImmutableTriple.nullTriple();
      boolean boolean0 = immutableTriple0.equals(immutableTriple0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableTriple<String, String, String> mutableTriple0 = MutableTriple.of("{B^&", "{B^&", "{B^&");
      ImmutableTriple<String, Object, String> immutableTriple0 = ImmutableTriple.of("haW3g,{DU@;)hOW", (Object) mutableTriple0, (String) null);
      MutableTriple<String, String, Object> mutableTriple1 = MutableTriple.of("haW3g,{DU@;)hOW", "{B^&", (Object) null);
      boolean boolean0 = mutableTriple1.equals(immutableTriple0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmutableTriple<Integer, ImmutableTriple<Object, String, String>, Triple<Object, Object, String>> immutableTriple0 = ImmutableTriple.nullTriple();
      // Undeclared exception!
      try { 
        immutableTriple0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<ImmutableTriple<Integer, Integer, Integer>, Object, String> immutableTriple1 = new ImmutableTriple<ImmutableTriple<Integer, Integer, Integer>, Object, String>(immutableTriple0, immutableTriple0, "&lJ+LHxyGlE");
      String string0 = immutableTriple1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      int int0 = mutableTriple0.compareTo((Triple<Object, Object, String>) mutableTriple0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableTriple<String, Object, Integer> mutableTriple0 = new MutableTriple<String, Object, Integer>();
      ImmutableTriple<String, Object, String> immutableTriple0 = ImmutableTriple.of("T@'DBs8'j", (Object) mutableTriple0, "L;);@]R9-%'=a");
      MutableTriple<Object, Object, String> mutableTriple1 = new MutableTriple<Object, Object, String>("T@'DBs8'j", "<", "u;~6`");
      Triple<ImmutableTriple<String, Object, String>, String, Triple<Object, Object, String>> triple0 = Triple.of(immutableTriple0, "T@'DBs8'j", (Triple<Object, Object, String>) mutableTriple1);
      // Undeclared exception!
      try { 
        triple0.toString(".TIWVUr I%Dxu");
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Triple<Integer, MutableTriple<Integer, String, String>, Integer>[] tripleArray0 = Triple.emptyArray();
      ;
}
}
