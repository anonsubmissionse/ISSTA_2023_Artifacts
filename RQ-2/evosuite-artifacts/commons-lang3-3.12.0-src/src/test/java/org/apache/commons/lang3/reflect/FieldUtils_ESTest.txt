 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Field) null, (Object) class0, (Object) "10.1");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field field0 = FieldUtils.getField(class0, "10.9");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "#i/Z[_XG0xL");
      assertNotNull(field0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Field> list0 = FieldUtils.getAllFieldsList(class0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field[] fieldArray0 = FieldUtils.getAllFields(class0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "", (Object) class0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class1, "#i/Z[_XG0xL", (Object) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate field #i/Z[_XG0xL on class java.lang.Object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Field) null, (Object) class0, (Object) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) null, "", (Object) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) null, "27,<eT", (Object) "27,<eT");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "Solaris", (Object) "Solaris", false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.Object.Solaris
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "6.h2*)S:N(v}GAB2be", (Object) "6.h2*)S:N(v}GAB2be");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.Object.6.h2*)S:N(v}GAB2be
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) null, "NUhTvX}lU", (Object) "NUhTvX}lU", false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) null, "JUiNeRcIP0P4i98~sm0", object0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.removeFinalModifier((Field) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField((Field) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "R/^4?K<vU", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate field 'R/^4?K<vU' on class java.lang.Object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "Mr|(0m~6");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate field 'Mr|(0m~6' on class java.lang.reflect.Field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Field) null, (Object) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) null, "3D--IQ?6_rBLf$z", false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) null, "user.timezone");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, " A08hoBH", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.Object. A08hoBH
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "rOt");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.annotation.Annotation.rOt
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) null, "pGLdVN],Gy_bou~@(", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) null, "wh&s}\u0001]8rcz");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getFieldsWithAnnotation((Class<?>) null, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // annotationCls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        FieldUtils.getFieldsListWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // annotationCls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getField((Class<?>) null, "", false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.getField(class0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getField((Class<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField((Class<?>) null, "5{$,';a>d7FXz[1k;_", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField(class0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField((Class<?>) null, "P@mehlE(}");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getAllFieldsList((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getAllFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) class0, "\"&~d%Y.EOR-", (Object) class0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.Class.\"&~d%Y.EOR-
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) " >j5 k^6[H`]!M-", "l2fW", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.String.l2fW
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Field> list0 = FieldUtils.getAllFieldsList(class0);
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) list0, "z", false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate field z on class java.util.ArrayList
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Field field0 = FieldUtils.getField(class0, "(7vsgz%k243iioDQ7k1", false);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Field) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "java.awt.headless", (Object) "%)y`WZ=r~", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot locate field java.awt.headless on class java.lang.reflect.Field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, (String) null, (Object) class0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) class0, "Y", (Object) "Y");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.Class.Y
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) class0, "XrQQ5ey", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field class java.lang.Class.XrQQ5ey
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readField(field0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      List<Field> list0 = FieldUtils.getFieldsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", false);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Field[] fieldArray0 = FieldUtils.getFieldsWithAnnotation(class0, class1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Field) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.getField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) class0, "u%Pnz6GW1H6*8", (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.Class.u%Pnz6GW1H6*8
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.removeFinalModifier((Field) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField(class0, "", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField((Field) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Field[] fieldArray0 = FieldUtils.getAllFields(class0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(field0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field 'modifiers' is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) class0, "Reference to field %s is ambiguous relative to %s; a matching field exists on two or more implemented interfaces.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate field Reference to field %s is ambiguous relative to %s; a matching field exists on two or more implemented interfaces. on class java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FieldUtils fieldUtils0 = new FieldUtils();
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) fieldUtils0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Field) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField(class0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, (String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
