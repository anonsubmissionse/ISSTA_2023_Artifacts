/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:29:50 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.apache.commons.lang3.tuple.MutablePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EqualsBuilder_ESTest extends EqualsBuilder_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = new boolean[0];
      equalsBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[9];
      equalsBuilder0.append(floatArray0, floatArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      equalsBuilder0.append(doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      equalsBuilder0.append(byteArray0, byteArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[3];
      equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[4];
      equalsBuilder0.append(shortArray0, shortArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[2];
      equalsBuilder0.append(intArray0, intArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[9];
      equalsBuilder0.append(longArray0, longArray1);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[4];
      equalsBuilder0.append(objectArray0, objectArray1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[7];
      char[] charArray1 = new char[7];
      charArray1[0] = 's';
      equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.setEquals(false);
      assertFalse(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3700L, 1L);
      equalsBuilder1.setTestRecursive(false);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3700L, 1L);
      equalsBuilder1.setTestRecursive(false);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<Object> class0 = Object.class;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) null);
      equalsBuilder1.setReflectUpToClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<Object> class0 = Object.class;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) null);
      equalsBuilder1.setReflectUpToClass(class0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(boolean0);
      equalsBuilder0.reflectionAppend(object0, iDKey0);
      String[] stringArray0 = new String[2];
      equalsBuilder0.setExcludeFields(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, object0, stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, (Object) "quD4f!rr\u0004>@{ad", true, (Class<?>) class0, stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, object0, false);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, object0, false);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection<String>) linkedList0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection<String>) linkedList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      boolean boolean1 = EqualsBuilder.isRegistered(boolean0, boolean0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      equalsBuilder0.append(doubleArray0, doubleArray1);
      boolean boolean0 = equalsBuilder0.isEquals();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder.getRegisterPair(equalsBuilder0, equalsBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder.getRegisterPair(equalsBuilder0, equalsBuilder0);
      assertFalse(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) (-1534L);
      objectArray0[2] = (Object) (-1534L);
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[2] = (Object) (-1534L);
      objectArray1[3] = (Object) equalsBuilder0;
      objectArray1[4] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) (-1534L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float) (short) (-452), (float) (short) (-452));
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append((-1), 0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-1130L), (-1130L));
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(3700L, 1L);
      equalsBuilder0.build();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setTestRecursive(true);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setTestRecursive(true);
      Boolean boolean0 = Boolean.valueOf(false);
      Object object0 = new Object();
      equalsBuilder0.append((Object) boolean0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) equalsBuilder0);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey("L\"x12`6@");
      Object object0 = new Object();
      IDKey iDKey1 = new IDKey(object0);
      equalsBuilder0.reflectionAppend(iDKey0, iDKey1);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      Object object0 = new Object();
      equalsBuilder0.reflectionAppend(iDKey0, object0);
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reflectionAppend(equalsBuilder0, "");
      assertFalse(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.reflectionAppend("", "");
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<String> class0 = String.class;
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, true, (Class<?>) class0, false, (String[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<String> class0 = String.class;
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, true, (Class<?>) class0, false, (String[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = equalsBuilder0.isEquals();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      String[] stringArray0 = new String[7];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setExcludeFields(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setTestTransients(true);
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setTestRecursive(true);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setTestRecursive(true);
      Object object0 = new Object();
      equalsBuilder1.append((Object) equalsBuilder0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (String[]) null);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (String[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Class<Boolean> class0 = Boolean.class;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.setReflectUpToClass(class0);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      equalsBuilder1.setTestTransients(true);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      equalsBuilder1.setTestTransients(true);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[7];
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = new boolean[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[7];
      equalsBuilder0.append((boolean[]) null, booleanArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[4];
      equalsBuilder0.append(true, false);
      equalsBuilder0.append(booleanArray0, booleanArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      equalsBuilder0.append(floatArray0, floatArray1);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[2];
      equalsBuilder0.append(floatArray0, floatArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[8];
      equalsBuilder0.append(floatArray0, (float[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      float[] floatArray0 = new float[3];
      equalsBuilder1.append(floatArray0, floatArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      float[] floatArray0 = new float[3];
      equalsBuilder1.append(floatArray0, floatArray0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = new double[8];
      equalsBuilder0.append(doubleArray0, doubleArray1);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[8];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      assertFalse(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[20];
      equalsBuilder0.append(doubleArray0, (double[]) null);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[9];
      equalsBuilder0.append((double[]) null, doubleArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[0];
      equalsBuilder0.append((short)91, (short)867);
      equalsBuilder0.append(doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-15);
      byte[] byteArray1 = new byte[4];
      equalsBuilder0.append(byteArray0, byteArray1);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[9];
      equalsBuilder0.append(byteArray0, (byte[]) null);
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[1];
      equalsBuilder0.append((byte[]) null, byteArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      equalsBuilder0.append(byteArray0, byteArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.reflectionAppend("J*(1XPu6:{1a", "2aqJStYCUxLcpj^R");
      byte[] byteArray0 = new byte[1];
      equalsBuilder1.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.reflectionAppend("J*(1XPu6:{1a", "2aqJStYCUxLcpj^R");
      byte[] byteArray0 = new byte[1];
      equalsBuilder1.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[4];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      char[] charArray1 = new char[6];
      equalsBuilder0.append(charArray0, charArray1);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[6];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[0];
      equalsBuilder0.append(charArray0, (char[]) null);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[5];
      equalsBuilder0.append((char[]) null, charArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[1];
      equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[2];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)25367;
      short[] shortArray1 = new short[4];
      equalsBuilder0.append(shortArray0, shortArray1);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[1];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[4];
      equalsBuilder0.append(shortArray0, (short[]) null);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      equalsBuilder0.append((short[]) null, shortArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[8];
      equalsBuilder0.append(shortArray0, shortArray1);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[2];
      equalsBuilder0.append(booleanArray0, (boolean[]) null);
      short[] shortArray0 = new short[1];
      equalsBuilder0.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[5];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      intArray0[0] = (-71);
      int[] intArray1 = new int[5];
      equalsBuilder0.append(intArray0, intArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[7];
      equalsBuilder0.append(intArray0, intArray1);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[9];
      equalsBuilder0.append(intArray0, (int[]) null);
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      equalsBuilder0.append(longArray0, (long[]) null);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[9];
      equalsBuilder0.append((long[]) null, longArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      assertFalse(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(boolean0);
      equalsBuilder0.reflectionAppend(object0, iDKey0);
      equalsBuilder0.append(longArray0, longArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[2];
      MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>();
      equalsBuilder0.append(objectArray0, (Object[]) mutablePair0.EMPTY_ARRAY);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[6];
      equalsBuilder0.append(objectArray0, (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      String[] stringArray0 = new String[4];
      equalsBuilder0.append((Object[]) null, (Object[]) stringArray0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[1];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(boolean0);
      equalsBuilder0.reflectionAppend(object0, iDKey0);
      String[] stringArray0 = new String[2];
      equalsBuilder0.append((Object[]) stringArray0, (Object[]) stringArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(true, false);
      equalsBuilder0.append(true, true);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, false);
      equalsBuilder1.append((double) 'Q', (double) 'Q');
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, false);
      equalsBuilder1.append((double) 'Q', (double) 'Q');
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append((byte)64, (byte) (-111));
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float[]) null, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)1, (byte)68);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-105), (byte) (-105));
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('G', 'G');
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(true, false);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('x', 'Q');
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append('x', 'Q');
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)1751, (short)1751);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(object0, (Object) "");
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1935), (short)1);
      assertFalse(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[3];
      floatArray0[2] = 1.0F;
      float[] floatArray1 = new float[3];
      equalsBuilder0.append(floatArray0, floatArray1);
      char[] charArray0 = new char[7];
      equalsBuilder0.append(charArray0, charArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((int) (byte) (-105), (int) (byte) (-105));
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[3];
      longArray1[0] = 243L;
      equalsBuilder0.append(longArray0, longArray1);
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[3];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertTrue(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder0;
      Object[] objectArray1 = new Object[6];
      equalsBuilder0.append(objectArray0, objectArray1);
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append((Object) null, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((int) (byte)44, (int) (byte)36);
      assertTrue(equalsBuilder1.build());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = Boolean.valueOf(true);
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[3];
      equalsBuilder0.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) equalsBuilder0, (Object) boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append((short)91, (short)867);
      equalsBuilder0.appendSuper(true);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      assertFalse(equalsBuilder1.isEquals());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Object object0 = new Object();
      Class<String> class1 = String.class;
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) class0, false, (Class<?>) class1, false, (String[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean boolean1 = Boolean.valueOf("(ms-");
      Class<Boolean> class0 = Boolean.class;
      String[] stringArray0 = new String[1];
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean1, false, (Class<?>) class0, true, stringArray0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reflectionAppend(object0, "D");
      int[] intArray0 = new int[9];
      equalsBuilder0.append(intArray0, intArray0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reflectionAppend("J*(1XPu6:{1a", "2aqJStYCUxLcpj^R");
      equalsBuilder0.append((long) (byte)2, (long) (byte)2);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = Boolean.valueOf("\"");
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) equalsBuilder0, (Collection<String>) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = Boolean.valueOf("\"");
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) equalsBuilder0, (Collection<String>) null);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(boolean0);
      equalsBuilder0.reflectionAppend(object0, iDKey0);
      equalsBuilder0.append(0.0F, 0.0F);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reflectionAppend(equalsBuilder0, (Object) null);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      equalsBuilder0.reflectionAppend((Object) null, iDKey0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, false);
      equalsBuilder1.reflectionAppend(equalsBuilder0, equalsBuilder0);
      assertTrue(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, false);
      equalsBuilder1.reflectionAppend(equalsBuilder0, equalsBuilder0);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("\"");
      Class<Integer> class0 = Integer.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) null, true, (Class<?>) class0, true, (String[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object object0 = new Object();
      IDKey iDKey0 = new IDKey(object0);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[1];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, (Object) iDKey0, true, (Class<?>) class0, true, stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = new EqualsBuilder();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder1, true, (Class<?>) class0, true, stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reset();
      assertFalse(equalsBuilder0.build());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, false);
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, false);
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[0];
      equalsBuilder0.append((int[]) null, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("L\"x12`6@");
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[7];
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, true, (Class<?>) class0, stringArray0);
      ;
}
}
