/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:20:48 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableLong_ESTest extends MutableLong_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-3314L));
      mutableLong0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      MutableLong mutableLong1 = new MutableLong();
      mutableLong1.incrementAndGet();
      boolean boolean0 = mutableLong0.equals(mutableLong1);
//TOGA incorrect assertion       assertTrue(mutableLong1.shortValue());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      MutableLong mutableLong1 = new MutableLong();
      mutableLong1.incrementAndGet();
      boolean boolean0 = mutableLong0.equals(mutableLong1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double double0 = new Double(211.5);
      MutableLong mutableLong0 = new MutableLong(double0);
      mutableLong0.getAndAdd((Number) double0);
      mutableLong0.subtract((Number) double0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.increment();
      mutableLong0.toLong();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Float float0 = new Float((-133.373567133));
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.addAndGet((Number) float0);
      mutableLong0.toLong();
      assertEquals(0, mutableLong0.intValue());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.setValue(1L);
      long long0 = mutableLong0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.decrement();
      long long0 = mutableLong0.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.decrement();
      long long0 = mutableLong0.longValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      mutableLong0.getAndIncrement();
      int int0 = mutableLong0.intValue();
      assertEquals(0, mutableLong0.shortValue());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      mutableLong0.getAndIncrement();
      int int0 = mutableLong0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float((-133.373567133));
      MutableLong mutableLong0 = new MutableLong(float0);
      int int0 = mutableLong0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.decrement();
      long long0 = mutableLong0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.decrement();
      long long0 = mutableLong0.incrementAndGet();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.addAndGet((-873L));
      long long0 = mutableLong0.incrementAndGet();
      assertEquals(0, mutableLong0.intValue());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.addAndGet((-873L));
      long long0 = mutableLong0.incrementAndGet();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.setValue(1L);
      Long long0 = mutableLong0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      long long0 = mutableLong0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      long long0 = mutableLong0.getAndIncrement();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float((-133.373567133));
      MutableLong mutableLong0 = new MutableLong(float0);
      long long0 = mutableLong0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float((-133.373567133));
      MutableLong mutableLong0 = new MutableLong(float0);
      long long0 = mutableLong0.getAndIncrement();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.getAndDecrement();
      assertEquals(0, mutableLong0.intValue());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      Double double0 = new Double(3150.8685186);
      mutableLong0.getAndAdd((Number) double0);
      assertEquals(0, mutableLong0.intValue());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      long long0 = mutableLong0.getAndAdd((long) 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(159L);
      long long0 = mutableLong0.getAndAdd((-1344L));
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(159L);
      long long0 = mutableLong0.getAndAdd((-1344L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      mutableLong0.decrement();
      float float0 = mutableLong0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1455L);
      float float0 = mutableLong0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      double double0 = mutableLong0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double double0 = new Double((-1.0));
      MutableLong mutableLong0 = new MutableLong(double0);
      double double1 = mutableLong0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Double double0 = new Double(211.5);
      MutableLong mutableLong0 = new MutableLong(double0);
      mutableLong0.setValue(0L);
      mutableLong0.decrementAndGet();
      Short short0 = new Short((short)0);
      long long0 = mutableLong0.getAndAdd((Number) short0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double double0 = new Double(211.5);
      MutableLong mutableLong0 = new MutableLong(double0);
      mutableLong0.setValue(0L);
      mutableLong0.decrementAndGet();
      Short short0 = new Short((short)0);
      long long0 = mutableLong0.getAndAdd((Number) short0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.subtract(1L);
      int int0 = mutableLong0.compareTo(mutableLong1);
      assertEquals(0, mutableLong1.intValue());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.subtract(1L);
      int int0 = mutableLong0.compareTo(mutableLong1);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.subtract(1L);
      int int0 = mutableLong1.compareTo(mutableLong0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.subtract(1L);
      int int0 = mutableLong1.compareTo(mutableLong0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableLong mutableLong0 = new MutableLong(float0);
      long long0 = mutableLong0.addAndGet((Number) float0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double(211.5);
      MutableLong mutableLong0 = new MutableLong(double0);
      long long0 = mutableLong0.addAndGet((Number) double0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.add((-1L));
      mutableLong0.getAndDecrement();
      Integer integer0 = new Integer(1);
      long long0 = mutableLong0.addAndGet((Number) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      mutableLong0.add((-1L));
      mutableLong0.getAndDecrement();
      Integer integer0 = new Integer(1);
      long long0 = mutableLong0.addAndGet((Number) integer0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      mutableLong0.getAndIncrement();
      mutableLong0.decrementAndGet();
      long long0 = mutableLong0.addAndGet(0L);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      mutableLong0.getAndIncrement();
      mutableLong0.decrementAndGet();
      long long0 = mutableLong0.addAndGet(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.add(1398L);
      long long0 = mutableLong0.addAndGet((-1L));
      assertEquals(1, mutableLong0.longValue());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.add(1398L);
      long long0 = mutableLong0.addAndGet((-1L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      // Undeclared exception!
      try { 
        mutableLong0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1L);
      // Undeclared exception!
      try { 
        mutableLong0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      // Undeclared exception!
      try { 
        mutableLong0.compareTo((MutableLong) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-350L));
      // Undeclared exception!
      try { 
        mutableLong0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableLong mutableLong0 = null;
      try {
        mutableLong0 = new MutableLong("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableLong mutableLong0 = null;
      try {
        mutableLong0 = new MutableLong((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      long long0 = mutableLong0.longValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.add((-2447L));
      boolean boolean0 = mutableLong0.equals(mutableLong1);
//TOGA incorrect assertion       assertTrue(mutableLong1.byteValue());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      MutableLong mutableLong1 = new MutableLong(mutableLong0);
      mutableLong1.add((-2447L));
      boolean boolean0 = mutableLong0.equals(mutableLong1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      boolean boolean0 = mutableLong0.equals(mutableLong0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      Long long0 = mutableLong0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      Long long0 = mutableLong0.getValue();
      boolean boolean0 = mutableLong0.equals(long0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      long long0 = mutableLong0.decrementAndGet();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1006L);
      long long0 = mutableLong0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(1006L);
      long long0 = mutableLong0.getAndDecrement();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      float float0 = mutableLong0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Short short0 = new Short((short) (-2447));
      MutableLong mutableLong0 = new MutableLong((Number) short0);
      mutableLong0.setValue((Number) mutableLong0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong();
      int int0 = mutableLong0.intValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      mutableLong0.add((Number) mutableLong0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      // Undeclared exception!
      try { 
        mutableLong0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      mutableLong0.decrement();
      mutableLong0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(2381L);
      double double0 = mutableLong0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong("0");
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      String string0 = mutableLong0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      // Undeclared exception!
      try { 
        mutableLong0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      int int0 = mutableLong0.compareTo(mutableLong0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      Long long0 = mutableLong0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong(0L);
      Long long0 = mutableLong0.toLong();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-350L));
      long long0 = mutableLong0.getAndAdd((-1344L));
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutableLong mutableLong0 = new MutableLong((-350L));
      long long0 = mutableLong0.getAndAdd((-1344L));
      assertEquals(1, long0);
}
}
