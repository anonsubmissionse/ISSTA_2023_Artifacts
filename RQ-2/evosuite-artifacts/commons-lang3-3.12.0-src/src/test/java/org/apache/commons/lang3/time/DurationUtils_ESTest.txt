 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      Duration duration0 = Duration.of(0L, chronoUnit0);
      int int0 = DurationUtils.toMillisInt(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Duration duration0 = Duration.ofMillis((-1L));
      Duration duration1 = duration0.plusHours(1821L);
      int int0 = DurationUtils.toMillisInt(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = DurationUtils.toDuration(4119L, timeUnit0);
      int int0 = DurationUtils.getNanosOfMiili(duration0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1L), (-1L));
      int int0 = DurationUtils.getNanosOfMiili(duration0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toMillisInt((Duration) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // duration
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toDuration(1698L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        DurationUtils.toDuration(355881600000000000L, timeUnit0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toChronoUnit((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.isPositive((Duration) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationUtils durationUtils0 = new DurationUtils();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = DurationUtils.toDuration((long) durationUtils0.LONG_INT_MAX_VALUE, timeUnit0);
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FailableBiConsumer<Long, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      DurationUtils.accept(failableBiConsumer0, (Duration) null);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FailableBiConsumer<Long, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      Duration duration0 = Duration.ZERO;
      DurationUtils.accept(failableBiConsumer0, duration0);
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      DurationUtils.accept((FailableBiConsumer<Long, Integer, Throwable>) null, duration0);
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = DurationUtils.toDuration(4119L, timeUnit0);
      Duration duration1 = DurationUtils.zeroIfNull(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      int int0 = DurationUtils.toMillisInt(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.getNanosOfMiili((Duration) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationUtils durationUtils0 = new DurationUtils();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Duration duration0 = DurationUtils.toDuration((long) durationUtils0.LONG_INT_MAX_VALUE, timeUnit0);
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertTrue(boolean0);
}
