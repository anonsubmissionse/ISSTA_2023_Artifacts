/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:09:32 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = RandomUtils.nextInt(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1335);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1335);
      int int0 = RandomUtils.nextInt();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      float float0 = RandomUtils.nextFloat();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(7.190772539449263E307, 1.6179238213760842E308);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1335);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1335);
      double double0 = RandomUtils.nextDouble();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      double double0 = RandomUtils.nextDouble();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      double double0 = RandomUtils.nextDouble();
      long long1 = RandomUtils.nextLong();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      long long0 = RandomUtils.nextLong(307L, 675L);
      double double0 = RandomUtils.nextDouble();
      long long1 = RandomUtils.nextLong();
      int int0 = RandomUtils.nextInt();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(1.0F, (float) 575L);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(0.0, 1139.92943652);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = RandomUtils.nextInt(335, Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(0.0F, 0.0F);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((-950.0794F), (-950.0794F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat(1.0F, (-2103.6F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = RandomUtils.nextDouble((double) 0, (double) 0L);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((-887.6708734), (-887.6708734));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((double) 335, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = RandomUtils.nextLong((long) 0, (long) 0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((-1909L), (-1909L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = RandomUtils.nextLong((long) 0, 1L);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((long) 305, 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(Integer.MAX_VALUE, (-1429));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1);
      float float0 = RandomUtils.nextFloat();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextBytes((-25));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = RandomUtils.nextInt();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = RandomUtils.nextBoolean();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float float0 = RandomUtils.nextFloat();
      ;
}
}
