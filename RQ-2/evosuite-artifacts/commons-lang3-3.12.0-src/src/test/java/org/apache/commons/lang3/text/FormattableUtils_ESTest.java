/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:14:00 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Formattable;
import java.util.Formatter;
import java.util.FormatterClosedException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.text.FormattableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormattableUtils_ESTest extends FormattableUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      Locale locale0 = Locale.ITALY;
      PrintStream printStream1 = mockPrintStream0.format(locale0, "", objectArray0);
      Formatter formatter0 = new Formatter(printStream0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, (-854), 477, (-1), (CharSequence) "");
      Formatter formatter2 = FormattableUtils.append((CharSequence) "[", formatter0, 477, 477, 2147, (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter2, (-398), 756, (-398), 'Q');
      FormattableUtils.append((CharSequence) "", formatter1, (-854), 3, (-854), 'Q');
      Formatter formatter3 = new Formatter((Appendable) printStream1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      Formatter formatter4 = FormattableUtils.append((CharSequence) "", formatter1, 3, (-2999), 1091, 'O');
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Formatter formatter5 = FormattableUtils.append((CharSequence) "", formatter4, 756, 3623, (-854), 'r', (CharSequence) "");
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter5, 3600, 4688, (-1763), 'Y');
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      Locale locale0 = Locale.ITALY;
      PrintStream printStream1 = mockPrintStream0.format(locale0, "", objectArray0);
      Formatter formatter0 = new Formatter(printStream0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, (-854), 477, 477, (CharSequence) "");
      Formatter formatter2 = FormattableUtils.append((CharSequence) "[", formatter0, 477, 477, 2147, (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter2, (-398), 3599, (-398), 'Q');
      FormattableUtils.append((CharSequence) "", formatter1, (-854), 3, (-854), 'Q');
      Formatter formatter3 = new Formatter((Appendable) printStream1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormattableUtils.append((CharSequence) "[", formatter3, (-2999), 3599, 3, 'r', (CharSequence) stringBuffer0);
      Formatter formatter4 = FormattableUtils.append((CharSequence) "", formatter1, 3, (-2999), 1091, 'O');
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter4, 3599, 3623, (-854), 'r', (CharSequence) "");
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.FormattableUtils");
      Locale locale0 = Locale.JAPAN;
      Formatter formatter0 = new Formatter(locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "%s!s", formatter0, 2298, 2298, 1);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "%s";
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'X';
      charArray0[3] = 'c';
      charArray0[4] = 'b';
      charArray0[5] = '|';
      charArray0[6] = '2';
      charArray0[7] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      int int0 = 32;
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 32, 32, 32, '4', (CharSequence) "%s");
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "%s", formatter1, 32, 32, 32, 'u', (CharSequence) "%s");
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Formatter formatter0 = new Formatter(locale0);
      locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "%s", formatter0, 1082, 1082, 1082);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = null;
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", (Formatter) null, 32767, 32767, 1);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      String string0 = "`4N\"=i$f}51)Y9{";
      MockPrintStream mockPrintStream0 = new MockPrintStream("`4N\"=i$f}51)Y9{");
      Formatter formatter0 = new Formatter((OutputStream) mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      formatter0.close();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) formatter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      int int0 = 0;
      int int1 = 1133;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, 0, 0, 1133);
        fail("Expecting exception: FormatterClosedException");
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" Lx7S%RGo!p");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Formatter formatter0 = new Formatter((Locale) null);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1114, (int) (byte)0, 1401, (CharSequence) charBuffer1);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`4N\"=i$f}51)Y9{");
      Formatter formatter0 = new Formatter((OutputStream) mockPrintStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      mockPrintStream0.println((-2003L));
      objectArray0[7] = object0;
      FormattableUtils.append((CharSequence) "", formatter0, 0, 0, 1133);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "`4N\"=i$f}51)Y9{", 0, 0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 1133, 1133, 1133, '6', (CharSequence) charBuffer0);
      formatter1.close();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.printf(locale0, "|j|hudyyKnj", objectArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "`4N\"=i$f}51)Y9{", formatter1, 0, (-1), 1607, '6');
        fail("Expecting exception: FormatterClosedException");
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Locale locale0 = Locale.JAPANESE;
      Formatter formatter0 = new Formatter(mockPrintWriter0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "%s", formatter0, 1826, 1826, 1826, 'Q');
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Formatter formatter0 = new Formatter(charBuffer0);
      int int0 = 0;
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, (-1));
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter1, 0, 2, 0, '\"');
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      Locale locale0 = Locale.ROOT;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, (-1768), 1289, (-1768), '');
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)28;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Locale locale0 = Locale.PRC;
      Formatter formatter0 = new Formatter(charBuffer1, locale0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, formatter0, 1847, 714, 50, (CharSequence) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter((Locale) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) null;
      formatter0.format((Locale) null, "QDSH{1fPY!", objectArray0);
      objectArray0[2] = (Object) null;
      formatter0.format("QDSH{1fPY!", objectArray0);
      formatter0.format("", objectArray0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, (-44), 3577, (-44), '0');
      Formatter formatter2 = FormattableUtils.append((CharSequence) "QDSH{1fPY!", formatter1, (-319), 3577, (-319), (CharSequence) "QDSH{1fPY!");
      formatter1.format("R\"", objectArray0);
      // Undeclared exception!
      FormattableUtils.append((CharSequence) "", formatter2, 3577, 3577, 0, (CharSequence) "");
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter(charBuffer0);
      int int0 = 1410;
      FileSystemHandling.shouldAllThrowIOExceptions();
      formatter0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1410, 63, 1410, '9', (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Formatter formatter0 = new Formatter(charBuffer0);
      int int0 = 0;
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, 33);
      char char0 = 'T';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter1, 33, 33, 0, 'T', (CharSequence) null);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Formatter formatter0 = new Formatter(charBuffer0);
      int int0 = 0;
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, (-1));
      formatter1.close();
      char char0 = 'T';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter1, (-1), (-1), 0, 'T', (CharSequence) null);
        fail("Expecting exception: FormatterClosedException");
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Locale locale0 = Locale.ROOT;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'y';
      charArray0[2] = '[';
      charArray0[3] = '_';
      charArray0[4] = 'L';
      charArray0[5] = 'H';
      charArray0[6] = 'D';
      charArray0[7] = 'C';
      charArray0[8] = 'i';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer2 = charBuffer0.duplicate();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charBuffer1;
      objectArray0[2] = (Object) 'C';
      formatter0.format(locale0, "", objectArray0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 0, 0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer2, formatter0, 3669, 1391, 863);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      int int0 = 3763;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3763);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 3763, 3763);
      Locale locale0 = Locale.JAPANESE;
      Formatter formatter0 = new Formatter(locale0);
      int int1 = 2014;
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 2014, 1805, 2014, 's', (CharSequence) charBuffer1);
      int int2 = 1436;
      char char0 = 'W';
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'W';
      charBuffer1.rewind();
      formatter1.flush();
      charArray0[2] = 'Y';
      charArray0[3] = 's';
      formatter0.close();
      charArray0[4] = 's';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2478, 3763);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "%s";
      int int0 = 789;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 789);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%s");
      Formatter formatter0 = new Formatter(charBuffer0);
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 789, (-1), (-922), (CharSequence) "");
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'G';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Locale locale0 = Locale.CHINA;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      charBuffer0.flip();
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, (-1767), 0, 1);
      formatter0.flush();
      Formatter formatter2 = FormattableUtils.append((CharSequence) charBuffer0, formatter1, 1, 0, (-407), (CharSequence) charBuffer0);
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      FormattableUtils formattableUtils0 = new FormattableUtils();
      FormattableUtils.append((CharSequence) charBuffer0, formatter2, 0, 0, 1058, 'D');
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 3249, (-1), (-1767));
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, 2, 2, (-1767), (CharSequence) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Formatter formatter0 = new Formatter(byteArrayOutputStream0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 1, 2528, 1, '0');
      FormattableUtils.append((CharSequence) "", formatter1, 1, 851, 1537, '0', (CharSequence) "");
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", (Formatter) null, (-2687), 0, (-1186), '4');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-115);
      byte byte0 = (byte) (-50);
      byteArray0[6] = (byte) (-50);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Formatter formatter0 = new Formatter(charBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter0, (int) (byte)85, 574, 0, (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '\uFFFDU\u0000\u0000\uFFFD\uFFFD\uFFFD' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '^';
      charArray0[2] = 'X';
      charArray0[3] = '&';
      charArray0[4] = '{';
      charArray0[5] = '5';
      charArray0[6] = 'k';
      charArray0[7] = '6';
      charArray0[8] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 117, 0, 117, 's', (CharSequence) charBuffer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Formattable formattable0 = null;
      FormattableUtils.toString((Formattable) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "null");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Formatter formatter0 = new Formatter((PrintStream) mockPrintStream0);
      int int0 = (-180);
      FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1, 1, (-180), 'd');
      Formatter formatter1 = FormattableUtils.append((CharSequence) "null", formatter0, (-180), (-2477), 1);
      char char0 = '$';
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter1, 0, 1, 1, '$', (CharSequence) "null");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'null' exceeds precision of 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      FormattableUtils.toString((Formattable) null);
      MockFile mockFile0 = new MockFile("null");
      Locale locale0 = Locale.CANADA;
      Formatter formatter0 = null;
      try {
        formatter0 = new Formatter(mockFile0, "null", locale0);
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(Throwable e) {
         //
         // null
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      Formatter formatter0 = new Formatter(outputStreamWriter0, (Locale) null);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, formatter0, (-1513), (-1513), (-1513), 'q', (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Formatter formatter0 = null;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 0, 1, 0, '\'', (CharSequence) charBuffer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharSequence charSequence0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=", true);
      Formatter formatter0 = new Formatter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) null, formatter0, 3272, (-3447), 3272, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Locale locale0 = Locale.UK;
      Formatter formatter0 = new Formatter(charBuffer0, locale0);
      int int0 = 2534;
      int int1 = 5016;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, 2534, 5016, 2534);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter();
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      FormattableUtils.append((CharSequence) "", formatter0, (-1), (-1), (-810), '\'', (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) "", formatter0, (-1), (-1), (-810), (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) "", formatter0, 748, (-1), (-1), (CharSequence) charBuffer0);
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      Formatter formatter0 = new Formatter();
      formatter0.close();
      int int0 = (-1178);
      int int1 = 0;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "", formatter0, (-1178), 0, 0, (CharSequence) "");
        fail("Expecting exception: FormatterClosedException");
      } catch(FormatterClosedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(1490);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer1, (Formatter) null, 1490, 1490, 1490, 'd', (CharSequence) charBuffer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Formatter formatter0 = new Formatter(charBuffer0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 1, (-1), (-1), 'Z', (CharSequence) charBuffer0);
      FormattableUtils.append((CharSequence) charBuffer0, formatter1, 327, 0, 0, (CharSequence) charBuffer0);
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Formatter formatter0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) stringBuffer0, (Formatter) null, 32, (-383), 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.FormattableUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(367);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Formatter formatter0 = new Formatter();
      Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 367, 2720, 1247, '^');
      Formatter formatter2 = FormattableUtils.append((CharSequence) charBuffer1, formatter1, 2720, (-4887), 2);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, formatter2, 0, (-840), 0, '#', (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis '\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000' exceeds precision of 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FormattableUtils formattableUtils0 = new FormattableUtils();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('X');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) charBuffer0, (Formatter) null, 1, 1791, 1791);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      Locale locale0 = Locale.ITALY;
      mockPrintStream0.format(locale0, "", objectArray0);
      Formatter formatter0 = new Formatter(printStream0);
      Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, (-854), 477, 477, (CharSequence) "");
      Formatter formatter2 = FormattableUtils.append((CharSequence) "[", formatter0, 477, 477, 477, (CharSequence) "");
      FormattableUtils.append((CharSequence) "", formatter2, (-398), 756, (-398), 'Q');
      Formatter formatter3 = FormattableUtils.append((CharSequence) "", formatter1, (-854), 3, (-854), 'Q');
      Formatter formatter4 = FormattableUtils.append((CharSequence) "", formatter1, 3, (-2999), 1091, 'O');
      Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer());
      FormattableUtils.toString(formattable1);
      Formatter formatter5 = FormattableUtils.append((CharSequence) "", formatter4, 756, 3623, (-854), 'r', (CharSequence) "");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FormattableUtils.toString((Formattable) null);
      CharBuffer.wrap((CharSequence) "null");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Formatter formatter0 = new Formatter((PrintStream) mockPrintStream0);
      FormattableUtils.append((CharSequence) "null", formatter0, (-180), (-2477), 1);
      FormattableUtils.toString((Formattable) null);
      FormattableUtils.toString((Formattable) null);
      // Undeclared exception!
      try { 
        FormattableUtils.append((CharSequence) "null", formatter0, (-2477), 1, 1, '}', (CharSequence) "null");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Specified ellipsis 'null' exceeds precision of 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
