 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>((Callable<Integer>) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // callable
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>((Callable<Delayed>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // callable
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callable<Callable<Delayed>> callable0 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Delayed>>(callable0, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer0.initialize();
      boolean boolean0 = callableBackgroundInitializer0.start();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<Callable<Integer>> callable0 = (Callable<Callable<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<Integer>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Integer>>(callable0);
      Callable<Callable<Delayed>> callable1 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
  }
