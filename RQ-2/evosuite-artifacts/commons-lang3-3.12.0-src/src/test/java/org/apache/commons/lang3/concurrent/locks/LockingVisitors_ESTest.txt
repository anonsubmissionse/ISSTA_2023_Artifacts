 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StampedLock stampedLock0 = new StampedLock();
      LockingVisitors.StampedLockVisitor<Integer> lockingVisitors_StampedLockVisitor0 = new LockingVisitors.StampedLockVisitor<Integer>(integer0, stampedLock0);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReentrantReadWriteLock reentrantReadWriteLock0 = new ReentrantReadWriteLock();
      LockingVisitors.ReadWriteLockVisitor<String> lockingVisitors_ReadWriteLockVisitor0 = new LockingVisitors.ReadWriteLockVisitor<String>("", reentrantReadWriteLock0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LockingVisitors.stampedLockVisitor((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        LockingVisitors.reentrantReadWriteLockVisitor((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Supplier<Lock> supplier0 = (Supplier<Lock>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LockingVisitors.LockVisitor<Object, String> lockingVisitors_LockVisitor0 = new LockingVisitors.LockVisitor<Object, String>(integer0, "", supplier0, supplier0);
      Object object0 = lockingVisitors_LockVisitor0.getObject();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Supplier<Lock> supplier0 = (Supplier<Lock>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LockingVisitors.LockVisitor<Object, Integer> lockingVisitors_LockVisitor0 = new LockingVisitors.LockVisitor<Object, Integer>(integer0, integer0, supplier0, supplier0);
      Integer integer1 = lockingVisitors_LockVisitor0.getLock();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LockingVisitors.StampedLockVisitor<Integer> lockingVisitors_StampedLockVisitor0 = LockingVisitors.stampedLockVisitor(integer0);
      assertNotNull(lockingVisitors_StampedLockVisitor0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LockingVisitors lockingVisitors0 = new LockingVisitors();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LockingVisitors.ReadWriteLockVisitor<String> lockingVisitors_ReadWriteLockVisitor0 = LockingVisitors.reentrantReadWriteLockVisitor("org.apache.commns.lang3.concurrent.locks.ockigVsitors");
      assertNotNull(lockingVisitors_ReadWriteLockVisitor0);
}
