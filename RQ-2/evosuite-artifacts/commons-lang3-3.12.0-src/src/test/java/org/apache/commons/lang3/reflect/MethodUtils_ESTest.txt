 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class1, "toString", classArray0);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, true, false);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[8] = classArray0[1];
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) linkedList0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[2] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, false, "toString", (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "registerNatives");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "Qyt", "trim", (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "toString");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toString", (Class<?>[]) null);
      Object object0 = MethodUtils.invokeExactMethod((Object) method0, "getDeclaredAnnotations", (Object[]) null, (Class<?>[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Object object0 = MethodUtils.invokeExactMethod((Object) "org.apache.commons.lang3.reflect.MethodUtils@1", "toString", (Object[]) classArray0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getEnclosingConstructor");
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "toString");
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toString", (Class<?>[]) null);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) method0;
      accessibleObjectArray0[1] = (AccessibleObject) method0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, (String) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "", (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      try { 
        MethodUtils.invokeMethod((Object) linkedList0, true, "notify");
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "double");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, false, "");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod(object0, true, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "-:Wo*[", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, "getEnclosingConstructor", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getEnclosingConstructor() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      try { 
        MethodUtils.invokeMethod(object0, "() on object: ");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: () on object: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "D", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      try { 
        MethodUtils.invokeExactMethod((Object) classArray0[0], "8&<KGkNx -{Yp", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 8&<KGkNx -{Yp() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(methodArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(classArray0[2], class0, false, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(classArray0[0], class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation((Class<?>) null, class0, true, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class0, false, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // method
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class0, false, false);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Method method0 = MethodUtils.getMatchingMethod(class0, "equals", classArray0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingMethod(class0, "toString", classArray0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "reverseBytes", (Class<?>[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toString", classArray0);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertFalse(method1.isBridge());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "toString", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[0];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "#R!n)Q", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: #R!n)Q() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[5] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(objectArray0[5], "getAnnotatedInterfaces", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 6);
      try { 
        MethodUtils.invokeExactMethod((Object) "toString", "isAssignableFrom", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: isAssignableFrom() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeMethod((Object) "X\"zJOErcaT<'KR!pMQ.", true, "method", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such method: method() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "kelG~~IV", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[1];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "toString", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Object object0 = MethodUtils.invokeMethod((Object) "O", "toString", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Integer> class1 = Integer.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class1, class0, true, false);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class1, "toString", classArray0);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, false, false);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class1, "toString", classArray0);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class0, true, true);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "toString", (Class<?>[]) null);
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Set<Method> set0 = MethodUtils.getOverrideHierarchy(method0, classUtils_Interfaces0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[1];
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "isAssignableFrom", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[1];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeStaticMethod(class0, "toString", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: toString() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "equals", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Object[] objectArray1 = MethodUtils.getVarArgs(objectArray0, classArray0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "toString", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "getDeclaredAnnotations", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      try { 
        MethodUtils.invokeExactMethod(object0, "s9GQ)ocFOJ8j%jY");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: s9GQ)ocFOJ8j%jY() on object: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      try { 
        MethodUtils.invokeMethod((Object) "O", true, "O", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such method: O() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "v_|#n6D[t", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: v_|#n6D[t() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "HT2Vt>j+", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: HT2Vt>j+() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object object0 = MethodUtils.invokeMethod((Object) methodUtils0, false, "toString");
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "notify");
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) classArray0[0], "8&<KGkNx -{Yp", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, true);
      Object[] objectArray0 = new Object[6];
      try { 
        MethodUtils.invokeMethod((Object) list0, "ompa", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ompa() on object: java.util.ArrayList
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, "notify");
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "", classArray0);
      assertNotNull(method0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0);
      try { 
        MethodUtils.invokeMethod((Object) "org.apache.commons.lang3.reflect.MethodUtils@1", true, "notify", (Object[]) methodArray0);
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
