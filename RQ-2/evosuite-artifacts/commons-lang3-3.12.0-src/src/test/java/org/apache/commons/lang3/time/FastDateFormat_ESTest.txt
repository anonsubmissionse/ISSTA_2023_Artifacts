 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2326));
      fastDateFormat1.getLocale();
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Object object0 = new Object();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat3.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat2.format(date0, stringBuffer1);
      FieldPosition fieldPosition0 = new FieldPosition(3);
      // Undeclared exception!
      try { 
        fastDateFormat3.format(object0, stringBuffer2, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      ParsePosition parsePosition0 = new ParsePosition((-1278));
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("i>Dx3aF+%nWvt}+", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      timeZone0.getOffset((long) 2);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = 'P';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      fastDateFormat0.format(1889L, charArrayWriter1);
      fastDateFormat0.format(date0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      fastDateFormat0.format(calendar0, (PipedWriter) null);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2326));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat2.format((-2278L), (StringWriter) null);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      fastDateFormat0.format(1889L, charArrayWriter1);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(date0, stringBuffer1);
      fastDateFormat0.format(1889L, stringBuffer2);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      fastDateFormat0.toString();
      int int0 = 124;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$ISO8601TimeZoneStrategy", ", ");
      locale0.stripExtensions();
      locale0.getUnicodeLocaleAttributes();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDateFormat1.format((-1L), stringBuffer0);
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.before(stringBuffer0);
      fastDateFormat1.format(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat2.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.parallelStream();
      Locale locale1 = Locale.GERMANY;
      linkedHashSet0.add(locale0);
      Locale.lookup(linkedList0, linkedHashSet0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1);
      fastDateFormat0.getMaxLengthEstimate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(14, 1, 14);
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        fastDateFormat1.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[3] = '^';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      fastDateFormat0.format(date0, stringBuffer0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      FastDateFormat.getTimeInstance(0, timeZone0, locale0);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      assertEquals(fastDateFormat0, fastDateFormat1);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      assertEquals(fastDateFormat3, fastDateFormat4);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat2.parse("org.apache.commons.lang3.time.FastDateFormat", parsePosition0, (Calendar) mockGregorianCalendar0);
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat2.getTimeZone();
      FastDateFormat.getInstance("*@;w");
      fastDateFormat3.format((-2473L));
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      assertNotNull(mockDate0.toString());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      assertNotNull(stringBuffer2.toString());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.format((long) 3);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, (-885), locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -885
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      locale0.getDisplayScript();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = null;
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = new Locale("pattern");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(2);
      fastDateFormat0.equals(stringWriter0);
      stringWriter0.append((CharSequence) "pattern", 1, 2);
      fastDateFormat0.getLocale();
      fastDateFormat0.getMaxLengthEstimate();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      System.setCurrentTimeMillis(0);
      Locale locale1 = Locale.forLanguageTag("");
      locale0.getDisplayCountry(locale1);
      ParsePosition parsePosition0 = new ParsePosition((-348));
      parsePosition0.setErrorIndex(1);
      fastDateFormat0.parseObject("fr-CA", parsePosition0);
      fastDateFormat0.parse("fr-CA", parsePosition0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("fr-CA");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat.getInstance();
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.parse(".D5", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[3] = '^';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = ':';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate(316, 3, 1, 2737, 0);
      fastDateFormat0.format((Date) mockDate0, (OutputStreamWriter) null);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat.getInstance("");
      fastDateFormat0.toString();
      fastDateFormat0.getMaxLengthEstimate();
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDateFormat0.format((-1L), stringBuffer0);
      MockFile mockFile0 = new MockFile("", "sR8i3F3&\"#}=ln>mZwG");
      String string0 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Q$Ww&<");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fastDateFormat0.format(calendar0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":y[OE`!k");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 1);
      fastDateFormat1.format((-665L), bufferedWriter0);
      fastDateFormat0.format((-704L));
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 11;
      int int1 = 13;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1679, 11, 11, 0, 1679);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(11, 3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 11
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0, mockDate0);
      fastDateFormat0.getTimeZone();
      Calendar calendar0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2385);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDateFormat$1");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1304);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) charArrayWriter0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.io.CharArrayWriter
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      locale0.clone();
      Locale locale1 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      try { 
        fastDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      fastDateFormat0.getMaxLengthEstimate();
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      int int0 = 12;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = null;
      ParsePosition parsePosition0 = new ParsePosition(1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2665, 1132, 3);
      mockGregorianCalendar0.isWeekDateSupported();
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null, parsePosition0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      fastDateFormat0.equals((Object) null);
      fastDateFormat0.equals((Object) null);
      FastDateFormat.getDateInstance(0, locale0);
      char[] charArray0 = new char[6];
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      fastDateFormat1.hashCode();
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = 'N';
      charArray0[3] = 'V';
      charArray0[4] = 'Q';
      charArray0[5] = 'c';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, (-354));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("]");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      locale0.getDisplayName();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale locale0 = new Locale("qVz");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 1356;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1356, "");
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      fastDateFormat0.parse("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1570), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1570
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      MockDate mockDate0 = new MockDate(0, (-1310), 41, (-1211), 0, (-1310));
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0, mockDate0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G.hvWG?L[TP%!tY5");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getGregorianChange();
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("9@4;{%2: er8%Z6<a]D");
      FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      int int1 = 3;
      int int2 = (-3325);
      int int3 = 48;
      // Undeclared exception!
      try { 
        timeZone0.getOffset(0, 1, 98, 0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", (Locale) null);
      MockCalendar.getInstance();
      fastDateFormat0.clone();
      MockDate mockDate0 = new MockDate(3, 2, 291);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 1903;
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1903, (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1903
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "RLm5V> <-;<'$&;N");
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      simpleTimeZone0.setStartYear((-1615));
      Locale locale1 = new Locale("e.", "e.", "RLm5V> <-;<'$&;N");
      Locale.setDefault(locale0);
      locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale1);
      fastDateFormat1.hashCode();
      ParsePosition parsePosition0 = new ParsePosition(826);
      parsePosition0.setErrorIndex((-649));
      fastDateFormat0.parseObject("RLm5V> <-;<'$&;N", parsePosition0);
      // Undeclared exception!
      FastDateFormat.getTimeInstance(0, locale1);
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(1, 1, locale0);
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h#d");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat.getInstance("6 Fm5", timeZone0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, pipedWriter0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-167), "-[ G<3U|uv(Y=~ ");
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("-[ G<3U|uv(Y=~ ", simpleTimeZone0, (Locale) null, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-Z CgLvf*mRrmLd34s");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "s>";
      Locale locale0 = new Locale("`EH:i+K", "`EH:i+K");
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("s>", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 3, 2, 2, 0);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 789;
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "=#cHC3lS6";
      Locale locale0 = Locale.forLanguageTag("=#cHC3lS6");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(789, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 789
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "1q~Am";
      TimeZone timeZone0 = TimeZone.getTimeZone("1q~Am");
      timeZone0.getOffset((long) (-1));
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      fastDateFormat1.getTimeZone();
      Locale locale0 = new Locale("", ", ");
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(124, 2, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 124
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      assertEquals(fastDateFormat0, simpleTimeZone0);
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      assertNotNull(locale1.getISO3Country());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertTrue(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(1, stringBuffer1.length());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(stringBuffer0, stringBuffer1);
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertNotNull(simpleTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(1, stringBuffer1.length());
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(stringBuffer0, stringBuffer2);
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      assertEquals(stringBuffer0, stringBuffer3);
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      Locale locale1 = Locale.forLanguageTag("`M");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      ;
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(0, stringBuffer1.length());
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(stringBuffer0, stringBuffer1);
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertEquals(0, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertEquals(0, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertEquals(0, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertEquals(0, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertEquals(0, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(0, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(0, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(0, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertEquals(0, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertFalse(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertEquals(0, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertFalse(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      ;
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      assertEquals(1, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertNotNull(date0);
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale1.getCountry());
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertEquals(1, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      String[] stringArray0 = Locale.getISOLanguages();
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = locale1.toLanguageTag();
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ;
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      ;
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      ;
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      assertEquals(0, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      ;
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      ;
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      ;
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      ;
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      ;
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      ;
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      Locale locale0 = fastDateFormat0.getLocale();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = fastDateFormat0.format(0L);
      ;
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      assertEquals(0, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      assertEquals(1, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ;
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      assertEquals(fastDateFormat0, parsePosition0);
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      ;
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      assertEquals(0, parsePosition1.getIndex());
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      assertEquals(0, parsePosition1.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      ;
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      assertEquals(0, parsePosition1.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      ;
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      ;
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      ;
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      ;
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      assertEquals(1, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      assertEquals(1, parsePosition0.getErrorIndex());
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals(object0, stringWriter0);
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(909);
      ParsePosition parsePosition1 = new ParsePosition(12);
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      parsePosition0.setErrorIndex(2);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertEquals(object0, mockPrintWriter0);
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      assertNotNull(simpleTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      ;
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      ;
}
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      assertEquals(0, simpleTimeZone0);
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals(0, parsePosition0.getIndex());
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      ;
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      ;
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      ;
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      ;
}
 @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertEquals(0, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertTrue(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertNotNull(simpleTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertEquals(1, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertEquals(1, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      simpleTimeZone0.setID("P8FV7");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertEquals(fastDateFormat0, fastDateFormat1);
}
 @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ;
}
 @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ;
}
 @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      ;
}
 @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      ;
}
 @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      ;
}
 @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      ;
}
 @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      ;
}
 @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      ;
}
 @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      ;
}
 @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      ;
}
 @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      assertEquals(timeZone0, locale0);
}
 @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      assertEquals(fastDateFormat0, mockDate0);
}
 @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      int int0 = 90;
      ZoneId zoneId0 = ZoneId.systemDefault();
      ;
}
 @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      int int0 = 90;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      ;
}
 @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      int int0 = 90;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
}
 @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      ;
}
 @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      ;
}
 @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      ;
}
 @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      ;
}
 @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      ;
}
 @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayVariant();
      Set<Character> set0 = locale0.getExtensionKeys();
      ;
}
 @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      ;
}
 @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      ;
}
 @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(13, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-596), (-596));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -596
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      ;
}
 @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertEquals(1, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertEquals(1, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      ;
}
 @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(0, stringBuffer1.length());
}
 @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(stringBuffer0, stringBuffer1);
}
 @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      ;
}
 @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test977()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test978()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test979()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test980()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test981()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test982()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test983()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test984()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test985()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test986()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test987()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test988()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test989()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test990()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      ;
}
 @Test(timeout = 4000)
  public void test991()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test992()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test993()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test994()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test995()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test996()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test997()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test998()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      ;
}
 @Test(timeout = 4000)
  public void test999()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      ;
}
 @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      ;
}
 @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      ;
}
 @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      ;
}
 @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ;
}
 @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      ;
}
 @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String[] stringArray0 = Locale.getISOLanguages();
      ;
}
 @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String[] stringArray0 = Locale.getISOLanguages();
      ;
}
 @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      int int0 = 90;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(90);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 90
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      int int0 = (-2213);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2213));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2213
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("a?m{6vq/qi{?", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      int int0 = 87;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(87);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 87
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(fastDateFormat0);
}
 @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      ;
}
 @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      ;
}
 @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      ;
}
 @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      ;
}
 @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      ;
}
 @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3522);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3522
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("iZu1cmnV[KM]a4.X>>");
      ;
}
 @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("iZu1cmnV[KM]a4.X>>");
      assertNotNull(timeZone0);
}
 @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ;
}
 @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ;
}
 @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("m'IDc($mP7rM0&uv");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      ;
}
 @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      assertEquals(fastDateFormat0, locale0);
}
 @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      ;
}
 @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      ;
}
 @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertTrue(charBuffer0.hasArray());
}
 @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      ;
}
 @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertTrue(charBuffer0.hasArray());
}
 @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertFalse(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertFalse(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertTrue(charBuffer0.hasArray());
}
 @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(stringBuffer0, stringBuffer1);
}
 @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(0, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      ;
}
 @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertNotNull(stringBuffer2.toString());
}
 @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(stringBuffer0, stringBuffer2);
}
 @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      ;
}
 @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertNotNull(mockDate0.toString());
}
 @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      ;
}
 @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertEquals(fastDateFormat0, fastDateFormat1);
}
 @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(fastDateFormat0, linkedList0);
}
 @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      assertEquals(fastDateFormat0, mockGregorianCalendar0);
}
 @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      ;
}
 @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      ;
}
 @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertEquals(0, mockGregorianCalendar1.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertFalse(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertNotNull(stringBuffer2.toString());
}
 @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      IntStream intStream0 = stringBuffer0.chars();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      ;
}
 @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      ;
}
 @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertFalse(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      ;
}
 @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      ;
}
 @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(0, charBuffer1.remaining());
}
 @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer1.capacity());
}
 @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertFalse(charBuffer1.isReadOnly());
}
 @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertTrue(charBuffer1.isDirect());
}
 @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(1, charBuffer1.limit());
}
 @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(charBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(0, charBuffer1.length());
}
 @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(0, charBuffer1.position());
}
 @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertTrue(charBuffer1.hasRemaining());
}
 @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertNotNull(charBuffer1);
}
 @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(1, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
}
 @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      ;
}
 @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      ;
}
 @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertEquals(1, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertEquals(1, charArrayWriter1.size());
}
 @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertNotNull(charArrayWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertNotNull(charArrayWriter1);
}
 @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertEquals(1, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertEquals(1, charArrayWriter1.size());
}
 @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(charArrayWriter1.toString());
}
 @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertEquals(1, charArrayWriter2.size());
}
 @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertNotNull(charArrayWriter2.toString());
}
 @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      ;
}
 @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      ;
}
 @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      String string0 = fastDateFormat0.format(date0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h#d");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6 Fm5", timeZone0, locale0);
      FastDateFormat.getDateTimeInstance(3, 3);
      MockFile mockFile0 = new MockFile("]");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 90, 3);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      String string0 = fastDateFormat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
      fastDateFormat1.getTimeZone();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat.getDateTimeInstance(2, 2, locale0);
      String string1 = fastDateFormat1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$ISO8601TimeZoneStrategy", ", ");
      locale0.stripExtensions();
      locale0.getUnicodeLocaleAttributes();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDateFormat0.format((-1L), stringBuffer0);
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.clear();
      calendar0.before(stringBuffer0);
      fastDateFormat0.format(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat1.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }
 @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = new Locale("pattern");
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(2);
      fastDateFormat1.equals(stringWriter0);
      fastDateFormat1.getLocale();
      fastDateFormat1.getMaxLengthEstimate();
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat1.parse("ef", parsePosition0, (Calendar) null);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer1, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 0);
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      String string0 = fastDateFormat1.format((long) 3);
      ;
}
 @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat0.parse("", parsePosition0);
      Locale locale0 = Locale.CANADA;
      fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.format(0L);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3266));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3266
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat.getTimeInstance(1);
      fastDateFormat0.getMaxLengthEstimate();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(3, 1, 3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 2255, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2255
         //
         verifyException("java.text.DateFormat", e);
      }
  }
