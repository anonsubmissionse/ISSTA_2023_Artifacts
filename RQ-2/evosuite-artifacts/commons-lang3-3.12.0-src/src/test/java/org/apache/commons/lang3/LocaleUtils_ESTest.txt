 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("%___");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: %___
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = new Locale("TZea6h)b", "LE$&{r\f+E=b+Uz}rR", "TZea6h)b");
      Locale locale1 = Locale.KOREAN;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = new Locale("TZea6h)b", "LE$&{r\f+E=b+Uz}rR", "TZea6h)b");
      Locale locale1 = Locale.KOREAN;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("Chinese");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = new Locale("", ")LQmcDvS&euG>*a4Wh", "PK$@H )m&]#){");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_FDhW");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _FDhW
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_F_W");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _F_W
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_+sJke");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _+sJke
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("__");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: __
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("_FH");
      locale0.getDisplayLanguage();
      LocaleUtils.countriesByLanguage("'6b/ H9$GdM+{1cr");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("_FH");
      locale0.getDisplayLanguage();
      LocaleUtils.countriesByLanguage("'6b/ H9$GdM+{1cr");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      List<Locale> list1 = LocaleUtils.availableLocaleList();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\n");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("_c2XyBr6uIw(#W)E");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: _c2XyBr6uIw(#W)E
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("");
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = new Locale("", "", "");
      Locale locale1 = LocaleUtils.toLocale(locale0);
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((Locale) null);
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("n__W");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: n__W
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("6PNi@72W[?_L'b/Wg[");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 6PNi@72W[?_L'b/Wg[
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.ITALIAN;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.ITALIAN;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("italiano");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: italiano
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("und");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("und");
      assertNotNull(locale0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("kv_KS?}p{");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kv_KS?}p{
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
