/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:23:56 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableFunction_ESTest extends FailableFunction_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableFunction<Object, String, Throwable> failableFunction0 = FailableFunction.nop();
      FailableFunction<Object, Object, Throwable> failableFunction1 = FailableFunction.identity();
      FailableFunction<Object, String, Throwable> failableFunction2 = failableFunction0.compose((FailableFunction<? super Object, ?, Throwable>) failableFunction1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableFunction<Object, String, Throwable> failableFunction0 = FailableFunction.nop();
      String string0 = failableFunction0.apply((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableFunction<Object, Object, Throwable> failableFunction0 = FailableFunction.identity();
      Object object0 = failableFunction0.apply("");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailableFunction<Object, String, Throwable> failableFunction0 = FailableFunction.nop();
      // Undeclared exception!
      try { 
        failableFunction0.andThen((FailableFunction<? super String, ?, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailableFunction<String, Throwable, Throwable> failableFunction0 = FailableFunction.nop();
      // Undeclared exception!
      try { 
        failableFunction0.compose((FailableFunction<? super String, ? extends String, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FailableFunction<Throwable, Throwable, Throwable> failableFunction0 = FailableFunction.identity();
      FailableFunction<String, Throwable, Throwable> failableFunction1 = FailableFunction.nop();
      FailableFunction<String, Throwable, Throwable> failableFunction2 = failableFunction1.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) failableFunction0);
      ;
}
}
