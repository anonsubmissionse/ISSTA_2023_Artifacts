 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      stopWatch0.resume();
      assertNotNull(stopWatch0.getMessage());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      stopWatch0.start();
      System.setCurrentTimeMillis((-3508L));
      stopWatch0.stop();
      long long0 = stopWatch0.getTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(0L);
      long long0 = stopWatch0.getTime(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      long long0 = stopWatch0.getStopTime();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      System.setCurrentTimeMillis((-835L));
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      long long0 = stopWatch0.getSplitTime();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(0L);
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("Stopwatch must be suspended to resume. ");
      String string0 = stopWatch0.getMessage();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("");
      String string0 = stopWatch0.getMessage();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      String string0 = stopWatch0.formatSplitTime();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis((-2114L));
      // Undeclared exception!
      try { 
        stopWatch0.toString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("s");
      // Undeclared exception!
      try { 
        stopWatch0.toSplitString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(3801L);
      stopWatch0.split();
      // Undeclared exception!
      try { 
        stopWatch0.toSplitString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.getTime((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        stopWatch0.formatTime();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      long long0 = stopWatch0.getSplitNanoTime();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.getSplitNanoTime();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getNanoTime();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      long long0 = stopWatch0.getNanoTime();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.unsplit();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been split. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      stopWatch0.unsplit();
      assertNotNull(stopWatch0.getMessage());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("s");
      String string0 = stopWatch0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("Stopwatch must be suspended to resume. ");
      // Undeclared exception!
      try { 
        stopWatch0.suspend();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be running to suspend. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      stopWatch0.start();
      stopWatch0.suspend();
      stopWatch0.stop();
      assertNotNull(stopWatch0.getMessage());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.reset();
      // Undeclared exception!
      try { 
        stopWatch0.stop();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch is not running. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.start();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch already started. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      // Undeclared exception!
      try { 
        stopWatch0.start();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be reset before being restarted. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.split();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch is not running. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      // Undeclared exception!
      try { 
        stopWatch0.resume();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be suspended to resume. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      stopWatch0.resume();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.getStopTime();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been started
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStopTime();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.getStartTime();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been started
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      String string0 = stopWatch0.toSplitString();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      long long0 = stopWatch0.getTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      String string0 = stopWatch0.formatTime();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isStarted();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isSuspended();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isStarted();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isSuspended();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      boolean boolean0 = stopWatch0.isStarted();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("s");
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      boolean boolean0 = stopWatch0.isSuspended();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.formatSplitTime();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      String string0 = stopWatch0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      String string0 = stopWatch0.getMessage();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.getSplitTime();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      long long0 = stopWatch0.getTime(timeUnit0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isSuspended();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isStarted();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
}
