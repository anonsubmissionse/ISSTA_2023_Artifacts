 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableConsumer<Object, Throwable> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Object, Throwable> failableConsumer1 = failableConsumer0.andThen(failableConsumer0);
      FailableConsumer<Object, Throwable> failableConsumer2 = failableConsumer0.andThen(failableConsumer1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableConsumer<Throwable, Throwable> failableConsumer0 = FailableConsumer.nop();
      failableConsumer0.accept((Throwable) null);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableConsumer<Integer, Throwable> failableConsumer0 = FailableConsumer.nop();
      // Undeclared exception!
      try { 
        failableConsumer0.andThen((FailableConsumer<? super Integer, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
