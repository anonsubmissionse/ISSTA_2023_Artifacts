/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:19:59 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableByte;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableByte_ESTest extends MutableByte_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      MutableByte mutableByte1 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      MutableByte mutableByte1 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Short short0 = new Short((short) (-579));
      byte byte0 = mutableByte0.addAndGet((Number) short0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Short short0 = new Short((short) (-579));
      byte byte0 = mutableByte0.addAndGet((Number) short0);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Long long0 = Long.valueOf(0L);
      mutableByte0.subtract((Number) long0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Float float0 = new Float((-1066.3031113895));
      MutableByte mutableByte0 = new MutableByte(float0);
      mutableByte0.add((Number) float0);
      assertNotNull(mutableByte0.byteValue());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.increment();
      mutableByte0.toByte();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      long long0 = mutableByte0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      long long0 = mutableByte0.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      long long0 = mutableByte0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-99));
      mutableByte0.add((byte)104);
      int int0 = mutableByte0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-78));
      int int0 = mutableByte0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      mutableByte0.getAndDecrement();
      byte byte0 = mutableByte0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      mutableByte0.getAndDecrement();
      byte byte0 = mutableByte0.incrementAndGet();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableByte mutableByte0 = new MutableByte(long0);
      mutableByte0.subtract((byte)22);
      byte byte0 = mutableByte0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableByte mutableByte0 = new MutableByte(long0);
      mutableByte0.subtract((byte)22);
      byte byte0 = mutableByte0.incrementAndGet();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.subtract((byte) (-4));
      mutableByte0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      mutableByte0.subtract((Number) mutableByte0);
      mutableByte0.decrementAndGet();
      mutableByte0.getValue();
      assertEquals(1, mutableByte0.longValue());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long((-733L));
      MutableByte mutableByte0 = new MutableByte(long0);
      byte byte0 = mutableByte0.getAndIncrement();
      assertNotNull(mutableByte0.toString());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long((-733L));
      MutableByte mutableByte0 = new MutableByte(long0);
      byte byte0 = mutableByte0.getAndIncrement();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableByte mutableByte0 = new MutableByte(float0);
      mutableByte0.add((byte) (-48));
      byte byte0 = mutableByte0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableByte mutableByte0 = new MutableByte(float0);
      mutableByte0.add((byte) (-48));
      byte byte0 = mutableByte0.getAndIncrement();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.getAndDecrement();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      byte byte0 = mutableByte0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      byte byte0 = mutableByte0.getAndDecrement();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      byte byte0 = mutableByte0.getAndAdd((Number) mutableByte0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      byte byte0 = mutableByte0.getAndAdd((Number) mutableByte0);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double double0 = new Double(2838.39796);
      MutableByte mutableByte0 = new MutableByte(double0);
      byte byte0 = mutableByte0.getAndAdd((byte)111);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double double0 = new Double(2838.39796);
      MutableByte mutableByte0 = new MutableByte(double0);
      byte byte0 = mutableByte0.getAndAdd((byte)111);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-18));
      byte byte0 = mutableByte0.getAndAdd((byte) (-91));
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-18));
      byte byte0 = mutableByte0.getAndAdd((byte) (-91));
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      float float0 = mutableByte0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableByte mutableByte0 = new MutableByte(long0);
      mutableByte0.subtract((byte)22);
      float float0 = mutableByte0.floatValue();
      assertNotNull(mutableByte0.byteValue());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableByte mutableByte0 = new MutableByte(long0);
      mutableByte0.subtract((byte)22);
      float float0 = mutableByte0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      double double0 = mutableByte0.doubleValue();
      assertNotNull(mutableByte0.byteValue());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      double double0 = mutableByte0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      MutableByte mutableByte1 = new MutableByte();
      mutableByte1.getAndAdd((Number) mutableByte0);
      double double0 = mutableByte1.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      MutableByte mutableByte1 = new MutableByte();
      mutableByte1.getAndAdd((Number) mutableByte0);
      double double0 = mutableByte1.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)1);
      MutableByte mutableByte1 = new MutableByte((byte) (-22));
      int int0 = mutableByte0.compareTo(mutableByte1);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)1);
      MutableByte mutableByte1 = new MutableByte((byte) (-22));
      int int0 = mutableByte0.compareTo(mutableByte1);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      MutableByte mutableByte1 = new MutableByte();
      mutableByte0.getAndDecrement();
      int int0 = mutableByte0.compareTo(mutableByte1);
      assertEquals(1, mutableByte0.longValue());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      MutableByte mutableByte1 = new MutableByte();
      mutableByte0.getAndDecrement();
      int int0 = mutableByte0.compareTo(mutableByte1);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.byteValue();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.byteValue();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)116);
      MutableByte mutableByte1 = new MutableByte((byte)0);
      byte byte0 = mutableByte0.addAndGet((Number) mutableByte1);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)116);
      MutableByte mutableByte1 = new MutableByte((byte)0);
      byte byte0 = mutableByte0.addAndGet((Number) mutableByte1);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.addAndGet((byte)0);
      assertEquals(1, mutableByte0.intValue());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      byte byte0 = mutableByte0.addAndGet((byte)0);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      byte byte0 = mutableByte0.byteValue();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)124);
      mutableByte0.addAndGet((byte)16);
      byte byte0 = mutableByte0.byteValue();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      // Undeclared exception!
      try { 
        mutableByte0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)41);
      // Undeclared exception!
      try { 
        mutableByte0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      // Undeclared exception!
      try { 
        mutableByte0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-1));
      // Undeclared exception!
      try { 
        mutableByte0.compareTo((MutableByte) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)0);
      // Undeclared exception!
      try { 
        mutableByte0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableByte mutableByte0 = null;
      try {
        mutableByte0 = new MutableByte("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableByte mutableByte0 = null;
      try {
        mutableByte0 = new MutableByte((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      byte byte0 = mutableByte0.byteValue();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Object object0 = new Object();
      boolean boolean0 = mutableByte0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      float float0 = mutableByte0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      mutableByte0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      byte byte0 = mutableByte0.incrementAndGet();
      assertEquals(0, mutableByte0.longValue());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      byte byte0 = mutableByte0.incrementAndGet();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndDecrement();
      mutableByte0.toByte();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.setValue((byte) (-6));
      byte byte0 = mutableByte0.getAndAdd((Number) mutableByte0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.setValue((byte) (-6));
      byte byte0 = mutableByte0.getAndAdd((Number) mutableByte0);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      byte byte0 = mutableByte0.decrementAndGet();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      int int0 = mutableByte0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      MutableByte mutableByte1 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte1);
      assertEquals(1, mutableByte0.longValue());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.getAndAdd((byte)114);
      MutableByte mutableByte1 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte("0");
      byte byte0 = mutableByte0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte("0");
      byte byte0 = mutableByte0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      String string0 = mutableByte0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      double double0 = mutableByte0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      mutableByte0.subtract((Number) mutableByte0);
      mutableByte0.increment();
      byte byte0 = mutableByte0.decrementAndGet();
      assertEquals(1, mutableByte0.longValue());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      mutableByte0.subtract((Number) mutableByte0);
      mutableByte0.increment();
      byte byte0 = mutableByte0.decrementAndGet();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      byte byte0 = mutableByte0.addAndGet((byte)0);
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)99);
      mutableByte0.setValue((Number) mutableByte0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte("0");
      int int0 = mutableByte0.compareTo(mutableByte0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte("0");
      Byte byte0 = mutableByte0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      long long0 = mutableByte0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Double double0 = new Double(0.0);
      MutableByte mutableByte0 = new MutableByte(double0);
      // Undeclared exception!
      try { 
        mutableByte0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.decrement();
      assertEquals(0, mutableByte0.intValue());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Byte byte0 = mutableByte0.toByte();
      byte byte1 = mutableByte0.addAndGet((Number) byte0);
      assertNotNull(byte1);
}
}
