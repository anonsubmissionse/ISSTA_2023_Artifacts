 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Streams.FailableStream<String> streams_FailableStream0 = Streams.stream((Collection<String>) linkedList0);
      Stream<String> stream0 = streams_FailableStream0.stream();
      assertNotNull(stream0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Streams.FailableStream<String> streams_FailableStream0 = Streams.stream((Collection<String>) linkedList0);
      streams_FailableStream0.makeTerminated();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      Streams.ArrayCollector<String> streams_ArrayCollector0 = new Streams.ArrayCollector<String>(class0);
      Function<List<String>, String[]> function0 = streams_ArrayCollector0.finisher();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      Streams.ArrayCollector<String> streams_ArrayCollector0 = new Streams.ArrayCollector<String>(class0);
      BinaryOperator<List<String>> binaryOperator0 = streams_ArrayCollector0.combiner();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      Streams.ArrayCollector<String> streams_ArrayCollector0 = new Streams.ArrayCollector<String>(class0);
      Set<Collector.Characteristics> set0 = (Set<Collector.Characteristics>)streams_ArrayCollector0.characteristics();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Streams.stream((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.stream.Streams", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Streams.ArrayCollector<Object> streams_ArrayCollector0 = new Streams.ArrayCollector<Object>(class0);
      Supplier<List<Object>> supplier0 = streams_ArrayCollector0.supplier();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<LongStream> class0 = LongStream.class;
      Streams.ArrayCollector<LongStream> streams_ArrayCollector0 = new Streams.ArrayCollector<LongStream>(class0);
      BiConsumer<List<LongStream>, LongStream> biConsumer0 = streams_ArrayCollector0.accumulator();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Streams streams0 = new Streams();
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Collector<Object, ?, Object[]> collector0 = Streams.toArray(class0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stream<Object> stream0 = Stream.empty();
      Stream<Stream<Object>> stream1 = Stream.of(stream0);
      Streams.FailableStream<Stream<Object>> streams_FailableStream0 = Streams.stream(stream1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      BinaryOperator<Stream<Object>> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Stream<Object>>) comparator0);
      Stream<Object> stream2 = streams_FailableStream0.reduce(stream0, binaryOperator0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stream<Stream<String>> stream0 = Stream.of((Stream<String>) null);
      Streams.FailableStream<Stream<String>> streams_FailableStream0 = Streams.stream(stream0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<String, String> biConsumer1 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string0 = streams_FailableStream0.collect(supplier0, (BiConsumer<String, ? super Stream<String>>) biConsumer0, biConsumer1);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stream<Object> stream0 = Stream.empty();
      Streams.FailableStream<Object> streams_FailableStream0 = new Streams.FailableStream<Object>(stream0);
      streams_FailableStream0.;
}
