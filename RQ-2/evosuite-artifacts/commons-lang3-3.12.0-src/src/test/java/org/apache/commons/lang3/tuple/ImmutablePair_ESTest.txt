 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<Integer, Integer>) mutablePair0);
      Object object0 = immutablePair0.getRight();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = MutablePair.of((String) null, (String) null);
      ImmutablePair<String, String> immutablePair0 = ImmutablePair.of((Map.Entry<String, String>) mutablePair0);
      String string0 = immutablePair0.getLeft();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutablePair<String, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<String, Integer>) null);
      assertNotNull(immutablePair0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>((String) null, (Object) null);
      ImmutablePair<String, Object> immutablePair1 = ImmutablePair.of((Map.Entry<String, Object>) immutablePair0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImmutablePair<String, String> immutablePair0 = new ImmutablePair<String, String>(";:X", ";:X");
      String string0 = immutablePair0.getRight();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Object> immutablePair0 = ImmutablePair.of(integer0, (Object) "");
      Integer integer1 = immutablePair0.getLeft();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutablePair<Object, String>[] immutablePairArray0 = ImmutablePair.emptyArray();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ImmutablePair<String, Object> immutablePair0 = ImmutablePair.nullPair();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-571));
      Pair<Object, Comparable<Object>> pair0 = ImmutablePair.left((Object) integer0);
      assertNotNull(pair0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ImmutablePair<ImmutablePair<Object, String>, String> immutablePair0 = ImmutablePair.of((ImmutablePair<Object, String>) null, "");
      // Undeclared exception!
      try { 
        immutablePair0.setValue("");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.ImmutablePair", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-44));
      Pair<Object, Integer> pair0 = ImmutablePair.right(integer0);
      Pair<Object, Integer> pair1 = Pair.of((Map.Entry<Object, Integer>) pair0);
      ;
}
