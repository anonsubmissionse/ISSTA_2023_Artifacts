 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      ForkJoinTask<Object> forkJoinTask0 = ForkJoinTask.adapt((Runnable) mockThread0, (Object) "C>jwAEO{8U");
      Computable<Integer, ForkJoinTask<Object>> computable0 = (Computable<Integer, ForkJoinTask<Object>>) mock(Computable.class, new ViolatedAssumptionAnswer());
      doReturn(forkJoinTask0).when(computable0).compute(anyInt());
      Memoizer<Integer, ForkJoinTask<Object>> memoizer0 = new Memoizer<Integer, ForkJoinTask<Object>>(computable0);
      Integer integer0 = new Integer(0);
      ForkJoinTask<Object> forkJoinTask1 = memoizer0.compute(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Computable<CompletableFuture<Integer>, CompletionStage<String>> computable0 = (Computable<CompletableFuture<Integer>, CompletionStage<String>>) mock(Computable.class, new ViolatedAssumptionAnswer());
      Memoizer<CompletableFuture<Integer>, CompletionStage<String>> memoizer0 = new Memoizer<CompletableFuture<Integer>, CompletionStage<String>>(computable0, false);
      // Undeclared exception!
      try { 
        memoizer0.compute((CompletableFuture<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Computable<Integer, Object> computable0 = (Computable<Integer, Object>) mock(Computable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(computable0).compute(anyInt());
      Memoizer<Integer, Object> memoizer0 = new Memoizer<Integer, Object>(computable0, true);
      Memoizer<Integer, Object> memoizer1 = new Memoizer<Integer, Object>(memoizer0);
      Integer integer0 = new Integer((-1833));
      memoizer1.compute(integer0);
      memoizer1.compute(integer0);
      MockThrowable mockThrowable0 = new MockThrowable();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      Memoizer<RuntimeException, Delayed> memoizer0 = new Memoizer<RuntimeException, Delayed>((Computable<RuntimeException, Delayed>) null);
      Memoizer<RuntimeException, Delayed> memoizer1 = new Memoizer<RuntimeException, Delayed>(memoizer0, true);
      // Undeclared exception!
      try { 
        memoizer1.compute(mockRuntimeException0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.Memoizer", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Memoizer<Delayed, CompletableFuture<String>> memoizer0 = new Memoizer<Delayed, CompletableFuture<String>>((Computable<Delayed, CompletableFuture<String>>) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Callable<FutureTask<RuntimeException>> callable0 = (Callable<FutureTask<RuntimeException>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<FutureTask<RuntimeException>> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 0, timeUnit0);
      // Undeclared exception!
      try { 
        memoizer0.compute(scheduledFuture0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.Memoizer", e);
      }
  }
