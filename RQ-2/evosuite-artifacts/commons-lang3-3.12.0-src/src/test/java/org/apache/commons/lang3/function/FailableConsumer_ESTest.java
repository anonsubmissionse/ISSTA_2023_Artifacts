/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:24:25 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableConsumer_ESTest extends FailableConsumer_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableConsumer<Object, Throwable> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Object, Throwable> failableConsumer1 = failableConsumer0.andThen(failableConsumer0);
      FailableConsumer<Object, Throwable> failableConsumer2 = failableConsumer0.andThen(failableConsumer1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableConsumer<Throwable, Throwable> failableConsumer0 = FailableConsumer.nop();
      failableConsumer0.accept((Throwable) null);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableConsumer<Integer, Throwable> failableConsumer0 = FailableConsumer.nop();
      // Undeclared exception!
      try { 
        failableConsumer0.andThen((FailableConsumer<? super Integer, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
