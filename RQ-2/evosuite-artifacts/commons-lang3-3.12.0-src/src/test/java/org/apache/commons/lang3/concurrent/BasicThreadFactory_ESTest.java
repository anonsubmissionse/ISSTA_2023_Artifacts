/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:17:22 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatConversionException;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ThreadFactory;
import org.apache.commons.lang3.concurrent.BasicThreadFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicThreadFactory_ESTest extends BasicThreadFactory_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.reset();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      basicThreadFactory0.newThread(mockThread0);
      long long0 = basicThreadFactory0.getThreadCount();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.priority(2389);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.priority(0);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("pattern");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.namingPattern("");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      String string0 = basicThreadFactory0.getNamingPattern();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Boolean boolean0 = basicThreadFactory0.getDaemonFlag();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.daemon(true);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Boolean boolean0 = basicThreadFactory0.getDaemonFlag();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("SK`\"[%9PCVGrDGol{C");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("The string %s does not match the pattern %s");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      ThreadFactory threadFactory0 = basicThreadFactory0.getWrappedFactory();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = basicThreadFactory0.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.daemon(true);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      MockThread mockThread0 = new MockThread();
      Thread thread0 = basicThreadFactory0.newThread(mockThread0);
      assertTrue(thread0.isDaemon());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      basicThreadFactory_Builder0.priority(0);
      MockThread mockThread0 = new MockThread();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      long long0 = basicThreadFactory0.getThreadCount();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      Thread thread0 = basicThreadFactory0.newThread(mockThread0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("The value is invalid: %f");
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      MockThread mockThread0 = new MockThread("The value is invalid: %f");
      // Undeclared exception!
      try { 
        basicThreadFactory0.newThread(mockThread0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Long
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority((-1));
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build();
      Integer integer0 = basicThreadFactory0.getPriority();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();
      BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build();
      BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.wrappedFactory(basicThreadFactory0);
      BasicThreadFactory basicThreadFactory1 = basicThreadFactory_Builder1.build();
      assertEquals(0, basicThreadFactory1.getThreadCount());
}
}
