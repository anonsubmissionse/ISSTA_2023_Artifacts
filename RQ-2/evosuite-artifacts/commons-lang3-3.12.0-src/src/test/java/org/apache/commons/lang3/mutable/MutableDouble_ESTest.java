/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:20:37 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableDouble;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableDouble_ESTest extends MutableDouble_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1150.2370961993765));
      mutableDouble0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      MutableDouble mutableDouble1 = new MutableDouble(mutableDouble0);
      mutableDouble0.increment();
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
//TOGA incorrect assertion       assertTrue(mutableDouble0.shortValue());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      MutableDouble mutableDouble1 = new MutableDouble(mutableDouble0);
      mutableDouble0.increment();
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Double double0 = new Double((-42.48));
      MutableDouble mutableDouble0 = new MutableDouble((Number) double0);
      mutableDouble0.subtract((Number) double0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.subtract((-8.327266443));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.decrementAndGet();
      mutableDouble0.toDouble();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      Double double0 = mutableDouble0.toDouble();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      mutableDouble0.toDouble();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      long long1 = mutableDouble0.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      long long1 = mutableDouble0.longValue();
      assertEquals(0, long1);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(4477.04973543);
      int int0 = mutableDouble0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      int int0 = mutableDouble0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1239.41996584818));
      double double0 = mutableDouble0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-5056.444426104325));
      Double double0 = mutableDouble0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(2486.1497794);
      mutableDouble0.subtract(2486.1497794);
      mutableDouble0.decrement();
      mutableDouble0.incrementAndGet();
      mutableDouble0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      double double0 = mutableDouble0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      double double0 = mutableDouble0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.getAndDecrement();
      assertEquals(0, mutableDouble0.intValue());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      double double0 = mutableDouble0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      double double0 = mutableDouble0.getAndDecrement();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.getAndAdd((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.getAndAdd((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      mutableDouble0.getAndDecrement();
      double double0 = mutableDouble0.getAndAdd((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      mutableDouble0.getAndDecrement();
      double double0 = mutableDouble0.getAndAdd((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.getAndAdd((double) 0L);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.getAndAdd((double) 0L);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      double double0 = mutableDouble0.getAndAdd((-5922.0));
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      double double0 = mutableDouble0.getAndAdd((-5922.0));
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-3073.22143));
      mutableDouble0.setValue(0.0);
      float float0 = mutableDouble0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-3073.22143));
      mutableDouble0.setValue(0.0);
      float float0 = mutableDouble0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      float float0 = mutableDouble0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableDouble mutableDouble0 = new MutableDouble((Number) float0);
      mutableDouble0.getAndAdd(2695.55);
      double double0 = mutableDouble0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.getAndAdd((-1303.619865944761));
      double double0 = mutableDouble0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.getAndAdd((-1303.619865944761));
      double double0 = mutableDouble0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.decrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Long long0 = new Long(0L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      mutableDouble0.getAndIncrement();
      double double0 = mutableDouble0.decrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Byte byte0 = new Byte((byte)124);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      double double0 = mutableDouble0.decrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      MutableDouble mutableDouble1 = new MutableDouble((-1150.2370961993765));
      int int0 = mutableDouble0.compareTo(mutableDouble1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      Short short0 = new Short((short)1);
      MutableDouble mutableDouble1 = new MutableDouble((Number) short0);
      int int0 = mutableDouble0.compareTo(mutableDouble1);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(4477.04973543);
      Double double0 = mutableDouble0.getValue();
      double double1 = mutableDouble0.addAndGet((Number) double0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-1.0));
      double double0 = mutableDouble0.addAndGet((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.addAndGet(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.addAndGet(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-2961));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      double double0 = mutableDouble0.addAndGet((double) (-2961));
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      // Undeclared exception!
      try { 
        mutableDouble0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      // Undeclared exception!
      try { 
        mutableDouble0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      // Undeclared exception!
      try { 
        mutableDouble0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableDouble mutableDouble0 = new MutableDouble((Number) float0);
      // Undeclared exception!
      try { 
        mutableDouble0.compareTo((MutableDouble) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1614.97768396);
      // Undeclared exception!
      try { 
        mutableDouble0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      // Undeclared exception!
      try { 
        mutableDouble0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble((Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableDouble mutableDouble0 = new MutableDouble((Number) float0);
      double double0 = mutableDouble0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      MutableDouble mutableDouble1 = new MutableDouble();
      mutableDouble1.add(1.0);
      mutableDouble0.subtract(1.0);
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      MutableDouble mutableDouble1 = new MutableDouble();
      mutableDouble1.add(1.0);
      mutableDouble0.subtract(1.0);
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      boolean boolean0 = mutableDouble0.equals(mutableDouble0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      Object object0 = new Object();
      boolean boolean0 = mutableDouble0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      mutableDouble0.add((Number) mutableDouble0);
      assertEquals(1, mutableDouble0.longValue());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.decrementAndGet();
      long long0 = mutableDouble0.longValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.addAndGet((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.addAndGet((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble("164");
      Double double0 = mutableDouble0.toDouble();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.addAndGet(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      int int0 = mutableDouble0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.subtract((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1614.97768396);
      Float float0 = new Float((-2680.71380860615));
      double double0 = mutableDouble0.getAndAdd((Number) float0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1614.97768396);
      Float float0 = new Float((-2680.71380860615));
      double double0 = mutableDouble0.getAndAdd((Number) float0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      boolean boolean0 = mutableDouble0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      String string0 = mutableDouble0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      long long0 = mutableDouble0.longValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1614.97768396);
      double double0 = mutableDouble0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1614.97768396);
      double double0 = mutableDouble0.getAndIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      boolean boolean0 = mutableDouble0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.setValue((Number) mutableDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble("4294965544");
      Double double0 = mutableDouble0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      int int0 = mutableDouble0.compareTo(mutableDouble0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.incrementAndGet();
      assertEquals(0, mutableDouble0.longValue());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      double double0 = mutableDouble0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(1.0);
      float float0 = mutableDouble0.floatValue();
      ;
}
}
