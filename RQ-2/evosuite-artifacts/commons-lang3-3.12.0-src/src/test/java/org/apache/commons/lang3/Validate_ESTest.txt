 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1.0), 3517.685286064615, 3517.685286064615, "Expected type: %s, actual: %s");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Expected type: %s, actual: %s
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-630.8727), (-630.8727), (-630.8727), "Qh*q");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Qh*q
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-32.78558), 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 0.0 is not in the specified exclusive range of -32.78558 to 0.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 1.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value -1.0 is not in the specified exclusive range of 0.0 to 1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((long) 860, (long) 860, 1363L, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0L, 0L, 0L, "DXf");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // DXf
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1560L), (-1560L), 439L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 439 is not in the specified exclusive range of -1560 to -1560
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1L), (-1019L), (-1019L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value -1019 is not in the specified exclusive range of -1 to -1019
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Validate.inclusiveBetween(1.0, 1.0, 1.0, (String) null);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Validate.inclusiveBetween((-2522.9158626), 2336.3629937932374, 0.0);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(0.1, (-1.0), 824.69);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 824.69 is not in the specified inclusive range of 0.1 to -1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Validate.inclusiveBetween((-2324L), (-885L), (-1565L), "Gp/R9F)V#rYx.% [E");
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Validate.inclusiveBetween((-150L), 4453L, 4453L);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(locale_FilteringMode0, locale_FilteringMode1, (Comparable<Locale.FilteringMode>) locale_FilteringMode2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value REJECT_EXTENDED_RANGES is not in the specified inclusive range of MAP_EXTENDED_RANGES to EXTENDED_FILTERING
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-511));
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(integer0, (Integer) null, (Comparable<Integer>) integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(557);
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) charBuffer0, 557);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: 557
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLTransientConnectionExceptionArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      EnumSet<Locale.FilteringMode> enumSet1 = Validate.validIndex(enumSet0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Validate.validIndex("^_A\"wbM4", 0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer((-2272));
      Object object0 = Validate.notNull((Object) integer0, ")v|Db24g}r<82", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Validate.notEmpty("The validated collection contains null element at index: %d");
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = Validate.noNullElements(sQLSyntaxErrorExceptionArray0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "9J(.";
      // Undeclared exception!
      try { 
        Validate.validState(false, "The value is invalid: %f", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<BatchUpdateException>[] linkedHashSetArray0 = (LinkedHashSet<BatchUpdateException>[]) Array.newInstance(LinkedHashSet.class, 6);
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSetArray0, 306, "Z$%[nKV", (Object[]) linkedHashSetArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '['
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(dataTruncationArray0, (-1), "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDequeArray0, 3170, "The value is invalid: %f", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.util.ArrayDeque
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, 0, ",*%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        Validate.validIndex(enumSet0, 1, "Minimum abbreviation width with offset is %d", (Object[]) locale_FilteringModeArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, 14, "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.util.LinkedList
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.validIndex(treeSet0, (-1852), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((Vector<Object>) null, 7);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.validIndex("The value is invalid: %f", Integer.MIN_VALUE, "MmjgFV,* >WRz%_;", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "The validated collection index is invalid: %d";
      // Undeclared exception!
      try { 
        Validate.validIndex("The validated collection index is invalid: %d", 64, "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.validIndex((String) null, 0, "5>|Kr{pn", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, 64);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "|3o8j%qX|v\"", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((SQLIntegrityConstraintViolationException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.notEmpty(locale_FilteringModeArray0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLIntegrityConstraintViolationExceptionArray0, "v", (Object[]) sQLIntegrityConstraintViolationExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // v
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) null, "L>nFJdXW%FkB|mV,", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'F'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<SQLException, SQLException> hashMap0 = new HashMap<SQLException, SQLException>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The validated character sequence index is invalid: %d";
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated character sequence index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) null, "NrO7", (Object[]) sQLIntegrityConstraintViolationExceptionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // NrO7
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      HashMap<ClientInfoStatus, SQLTransactionRollbackException> hashMap0 = new HashMap<ClientInfoStatus, SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "D*", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // D*
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, "PP{lS=t`Op%>Z,", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '>'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayDeque<CharBuffer>) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((LinkedHashSet<SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated collection is empty
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, "PkQ;4QCQ%#]F=04ll", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '#'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, "", (Object[]) locale_FilteringModeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharBuffer) null, "=I%Q", (Object[]) sQLIntegrityConstraintViolationExceptionArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")v|Db24g}r<82");
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, "The value is invalid: %f", (Object[]) throwableArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%f'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.notBlank("", "Minimum abbreviation width with offset is %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")v|Db24g}r<82");
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, ".~bW", (Object[]) throwableArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // .~bW
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 0);
      // Undeclared exception!
      try { 
        Validate.notBlank(charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLFeatureNotSupportedException[]) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        Validate.noNullElements(integerArray0, "", (Object[]) integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Object[] objectArray0 = new Object[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The validated object is null", "org.apache.commons.lang3.StringUtils", sQLSyntaxErrorException0);
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTimeoutException0);
      // Undeclared exception!
      Validate.noNullElements(sQLSyntaxErrorException0, "The validated object is null", objectArray0);
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLRecoverableException) null, "42=CS}g:%Wi^", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("B[i0T2-", "B[i0T2-", (-239), intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      batchUpdateException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      Validate.noNullElements(batchUpdateException0);
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLDataException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "Q{v],J}L.O9q", "Q{v],J}L.O9q", "The validated collection index is invalid: %d", (Object[]) sQLTransientConnectionExceptionArray0);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // Q{v],J}L.O9q
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "NH1K)e&in~M}K(k%9 m", "The validated character sequence is blank", "NH1K)e&in~M}K(k%9 m", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '9'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "tJUX-2<uia#K})#jLHu", "PkQ;4QCQ%#S?]F=04ll", "PkQ;4QCQ%#S?]F=04ll", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "The validated character sequence index is invalid: %d", "", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "F2L2[n*ce", "F2L2[n*ce");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // F2L2[n*ce
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The string %s does not match the pattern %s", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The string null does not match the pattern null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "V}4kt 29<gcz", 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // V}4kt 29<gcz
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, "+H-c}b0z9R%6F", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'F'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom((Class<?>) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("", "KoPUh9G88'KB*9e?", (Comparable<String>) "KoPUh9G88'KB*9e?", "Minimum abbreviation width is %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((CharBuffer) null, (CharBuffer) null, (Comparable<CharBuffer>) null, "PB", (Object[]) sQLTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DataTruncation dataTruncation0 = new DataTruncation(2, false, false, 2, 160, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(dataTruncation0, dataTruncation0, (Comparable<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Validate.finite(1086.622653929435, "jIv{/u1H!d[0aj&", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Validate.notNaN(1.0, "C5mGhyg}q81 +_", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Validate.validIndex("{V0'KB?zu|", 1, "{V0'KB?zu|", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSet0, 0, "", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = Validate.validIndex(sQLClientInfoExceptionArray0, 0, (String) null, (Object[]) sQLClientInfoExceptionArray0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("lM]kT=9g5)Y;xU");
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException1 = Validate.noNullElements(sQLDataException0, "lM]kT=9g5)Y;xU", (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ServiceLoader<SQLFeatureNotSupportedException>[] serviceLoaderArray0 = (ServiceLoader<SQLFeatureNotSupportedException>[]) Array.newInstance(ServiceLoader.class, 1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLFeatureNotSupportedException>[] serviceLoaderArray1 = Validate.noNullElements(serviceLoaderArray0, "", (Object[]) serviceLoaderArray0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ServiceLoader<SQLFeatureNotSupportedException>[] serviceLoaderArray0 = (ServiceLoader<SQLFeatureNotSupportedException>[]) Array.newInstance(ServiceLoader.class, 1);
      // Undeclared exception!
      try { 
        Validate.noNullElements(serviceLoaderArray0, "", (Object[]) serviceLoaderArray0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 0);
      EnumSet<ClientInfoStatus>[] enumSetArray1 = Validate.noNullElements(enumSetArray0, "Qg?h)+", (Object[]) enumSetArray0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = Validate.notBlank("jIv{/u1H!d[0aj&", "jIv{/u1H!d[0aj&", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = Validate.notEmpty("MN;xWApg'y7 x<cyPt!", "", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLException> hashMap0 = new HashMap<SQLNonTransientException, SQLException>();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "E1abPd%HyxXjCdj= fD", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%H'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HashMap<BatchUpdateException, SQLNonTransientException> hashMap0 = new HashMap<BatchUpdateException, SQLNonTransientException>();
      int[] intArray0 = new int[3];
      SQLDataException sQLDataException0 = new SQLDataException("The value %s is not in the specified inclusive range of %s to %s", "N!b?s ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException0);
      hashMap0.put(batchUpdateException0, sQLDataException0);
      HashMap<BatchUpdateException, SQLNonTransientException> hashMap1 = Validate.notEmpty(hashMap0, "aO7 k:7a:d!O*$", (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      Object[] objectArray0 = new Object[4];
      EnumSet<Locale.FilteringMode> enumSet1 = Validate.notEmpty(enumSet0, "80o{;34G", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, "F2L2[n*ce", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // F2L2[n*ce
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray1 = Validate.notEmpty(sQLTransactionRollbackExceptionArray0, "MmjgFV,* >WRz%_;", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLDataExceptionArray0, "Cannot assign a %s to a %s", (Object[]) sQLDataExceptionArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = (SQLDataException)Validate.notNull((Object) sQLDataException0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notNull(objectArray0[3], (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "@", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // @
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Validate.isAssignableFrom(class0, class0, "OvZ;3I[7.0", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.sql.SQLNonTransientException to a java.sql.SQLNonTransientConnectionException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Validate.isAssignableFrom(class0, class0);
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, objectArray0[3], "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      Validate.isInstanceOf((Class<?>) class0, (Object) class0, "$sFM},^G9*$(<3JSl", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.DataTruncation, actual: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Pq$x(!?|ZvO}M=]z$", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLClientInfoException, actual: java.sql.SQLFeatureNotSupportedException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Validate.isInstanceOf((Class<?>) class0, (Object) class0);
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1.0, 1.0, 647.35299, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Validate.exclusiveBetween((double) (-1238), (double) 123, 3.0400333467501595, (String) null);
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(497.933206, 0.0, 0.0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-7701.48), (-7701.48), 592.9832532);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 592.9832532 is not in the specified exclusive range of -7701.48 to -7701.48
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Validate.exclusiveBetween((-1.0), 3294.4452709868, 76.93054699205);
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1691.77, 1691.77, 1691.77);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 1691.77 is not in the specified exclusive range of 1691.77 to 1691.77
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Validate.exclusiveBetween((-1560L), 2357L, (-504L), "q0x#G&DA>D");
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1L, 2322L, 2322L, "The value %s is not in the specified inclusive range of %s to %s");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value %s is not in the specified inclusive range of %s to %s
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(2984L, 2984L, (-1268L), "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Validate.exclusiveBetween((-3482L), 855L, 1L);
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1L), 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 0 is not in the specified exclusive range of -1 to 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1L, (long) 0, 1L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 1 is not in the specified exclusive range of 1 to 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-1.0), (-1.0), 2428.695, "4t_y:0rF#");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 4t_y:0rF#
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Validate.inclusiveBetween((-1898.390795864), 1.0, 0.0, (String) null);
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(864.3771, (-310.59), (-310.59), "{EQYGuu!$@wlo],1");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // {EQYGuu!$@wlo],1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Validate.inclusiveBetween((-1278.548886), (-1278.548886), (-1278.548886));
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1411.7436984, 1411.7436984, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value 1.0 is not in the specified inclusive range of 1411.7436984 to 1411.7436984
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(0L, (-1L), 0L, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Validate.inclusiveBetween(0L, 0L, 0L, "");
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(2839L, 0L, 0L, "The validated value is not a number");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated value is not a number
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-4566L), (-2456L), (-1636L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value -1636 is not in the specified inclusive range of -4566 to -2456
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Validate.inclusiveBetween((-1248L), 0L, (-1248L));
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(863L, (-2775L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The value -1 is not in the specified inclusive range of 863 to -2775
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween("dqn5o~--|woc:w", "Y", (Comparable<String>) "Y", "YN0f&K:w", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // YN0f&K:w
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "`o.k0B#Jk<6l#`0dYI", "", "`o.k0B#Jk<6l#`0dYI", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // `o.k0B#Jk<6l#`0dYI
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Validate.matchesPattern((CharSequence) "`o.k0B#Jk<6l#`0dYI", "`o.k0B#Jk<6l#`0dYI", "`o.k0B#Jk<6l#`0dYI", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "X+>r3Eb3MV9PSs`1;", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The string X+>r3Eb3MV9PSs`1; does not match the pattern 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Validate.matchesPattern((CharSequence) "H>'P@>G:Q", "H>'P@>G:Q");
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.validState(false, "hRlE?%E:k&,.jX!F;", objectArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // hRlE?NULL:k&,.jX!F;
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Validate.validState(true, "The value is invalid: %f", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Validate.validState(true);
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "?s*5404S{vzl2` ");
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      // Undeclared exception!
      try { 
        Validate.validIndex("K.$q", 6, "1dXyh4-", (Object[]) stackTraceElementArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // 1dXyh4-
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      Object[] objectArray0 = new Object[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The validated object is null", "", 0, (int[]) null, sQLTransactionRollbackException0);
      stack0.add(batchUpdateException0);
      Stack<BatchUpdateException> stack1 = Validate.validIndex(stack0, 0, "", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray1 = Validate.validIndex(sQLIntegrityConstraintViolationExceptionArray0, 2);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[25];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLWarningArray0, (-1), (String) null, (Object[]) sQLWarningArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.noNullElements(locale_FilteringModeArray0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException>[] arrayListArray0 = (ArrayList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayList.class, 18);
      // Undeclared exception!
      try { 
        Validate.notBlank("", "", (Object[]) arrayListArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notEmpty("", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<SQLNonTransientException, SQLRecoverableException> hashMap0 = new HashMap<SQLNonTransientException, SQLRecoverableException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The validated collection is empty", (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLInvalidAuthorizationSpecException0);
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLRecoverableException0);
      HashMap<SQLNonTransientException, SQLRecoverableException> hashMap1 = Validate.notEmpty(hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      arrayDeque0.add(sQLSyntaxErrorException0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque1 = Validate.notEmpty(arrayDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Stack<Object>[] stackArray0 = (Stack<Object>[]) Array.newInstance(Stack.class, 0);
      // Undeclared exception!
      try { 
        Validate.notEmpty(stackArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Validate.isTrue(true);
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "@pm->P[_M@%@pp'", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Validate.isTrue(true, "yn,z1`KiN \u0005SB|u", (Object[]) null);
  }
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", 1.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Validate.isTrue(true, "", 0.0);
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 2501L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Validate.isTrue(true, "G/l6", 2501L);
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Validate.finite((-421.3574614115336));
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((Stack<Locale.FilteringMode>[]) null, (-379));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Object[] objectArray0 = Validate.notEmpty((Object[]) locale_FilteringModeArray0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException sQLTransientConnectionException1 = Validate.noNullElements(sQLTransientConnectionException0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        Validate.validIndex(treeSet0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: 3
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Validate.notNaN((-1127.68506621789));
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayList<Integer>[] arrayListArray0 = (ArrayList<Integer>[]) Array.newInstance(ArrayList.class, 9);
      // Undeclared exception!
      try { 
        Validate.noNullElements(arrayListArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Validate.notBlank("OvZ;3I[7.0");
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Validate validate0 = new Validate();
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<SQLException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLException, SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 4);
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDequeArray0, 3170, "The value is invalid: %f", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // The value is invalid: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
