/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:15:21 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
import org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventCountCircuitBreaker_ESTest extends EventCountCircuitBreaker_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      eventCountCircuitBreaker0.checkState();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis((-2006L));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2353, 2353, timeUnit0, (-1044));
      eventCountCircuitBreaker0.incrementAndCheckState();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1136), 0L, timeUnit0, (-1));
      eventCountCircuitBreaker0.nanoTime();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2149), 2428L, timeUnit0);
      eventCountCircuitBreaker0.nanoTime();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      System.setCurrentTimeMillis((-2006L));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2353, 2353, timeUnit0, (-1044));
      eventCountCircuitBreaker0.nanoTime();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1986, 1986, timeUnit0, 1);
      Integer integer0 = new Integer(1);
      eventCountCircuitBreaker0.incrementAndCheckState(integer0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      eventCountCircuitBreaker0.getOpeningThreshold();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1782, 1782, timeUnit0, (-1));
      eventCountCircuitBreaker0.getOpeningThreshold();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0, timeUnit0);
      eventCountCircuitBreaker0.getOpeningInterval();
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1782, 1782, timeUnit0, (-1));
      eventCountCircuitBreaker0.getOpeningInterval();
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0L, timeUnit0);
      eventCountCircuitBreaker0.getClosingThreshold();
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1), (-1), timeUnit0, 541);
      eventCountCircuitBreaker0.getClosingThreshold();
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      eventCountCircuitBreaker0.getClosingInterval();
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2, 2, timeUnit0, 2);
      eventCountCircuitBreaker0.getClosingInterval();
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2941, 1139L, timeUnit0, 2941, 1139L, timeUnit0);
      // Undeclared exception!
      try { 
        eventCountCircuitBreaker0.incrementAndCheckState((Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker(17, (-911), timeUnit0, (-911), (-692L), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1793), (-1793), (TimeUnit) null, (-1793));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1793), 1L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1782, 1782, timeUnit0, (-1));
      eventCountCircuitBreaker0.getClosingThreshold();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1), (-1), timeUnit0, 541);
      eventCountCircuitBreaker0.getOpeningThreshold();
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1), (-1), timeUnit0, 541);
      eventCountCircuitBreaker0.getOpeningInterval();
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1), (-1), timeUnit0, 541);
      eventCountCircuitBreaker0.getClosingInterval();
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-63), (-63), timeUnit0, (-63));
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      Integer integer0 = new Integer((-63));
      eventCountCircuitBreaker0.incrementAndCheckState(integer0);
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-63), (-63), timeUnit0, (-63));
      eventCountCircuitBreaker0.checkState();
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-911), (-911), timeUnit0, 17, (-911), timeUnit0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      eventCountCircuitBreaker0.incrementAndCheckState();
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      eventCountCircuitBreaker0.close();
      eventCountCircuitBreaker0.checkState();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-15), (-15), timeUnit0);
      eventCountCircuitBreaker0.open();
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1136), 0L, timeUnit0, (-1));
      eventCountCircuitBreaker0.incrementAndCheckState();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1136), 0L, timeUnit0, (-1));
      eventCountCircuitBreaker0.incrementAndCheckState();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      ;
}
}
