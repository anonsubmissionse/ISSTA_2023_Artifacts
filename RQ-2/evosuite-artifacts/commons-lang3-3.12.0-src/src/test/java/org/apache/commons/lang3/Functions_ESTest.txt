 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Functions.FailableConsumer<Throwable, Error> functions_FailableConsumer0 = (Functions.FailableConsumer<Throwable, Error>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.tryWithResources((Functions.FailableRunnable<? extends Throwable>) null, (Functions.FailableConsumer<Throwable, ? extends Throwable>) functions_FailableConsumer0, (Functions.FailableRunnable<? extends Throwable>[]) null);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Functions.FailablePredicate<Integer, RuntimeException> functions_FailablePredicate0 = (Functions.FailablePredicate<Integer, RuntimeException>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(functions_FailablePredicate0).test(anyInt());
      Integer integer0 = new Integer(1186);
      boolean boolean0 = Functions.test(functions_FailablePredicate0, integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Functions.FailableBiPredicate<Integer, Throwable, Error> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<Integer, Throwable, Error>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(functions_FailableBiPredicate0).test(anyInt() , any(java.lang.Throwable.class));
      Integer integer0 = new Integer((-92));
      boolean boolean0 = Functions.test(functions_FailableBiPredicate0, integer0, (Throwable) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Functions.FailableSupplier<Object, Throwable> functions_FailableSupplier0 = (Functions.FailableSupplier<Object, Throwable>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(functions_FailableSupplier0).get();
      Object object0 = Functions.get(functions_FailableSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockError mockError0 = new MockError("9");
      Functions.FailableCallable<Error, Throwable> functions_FailableCallable0 = (Functions.FailableCallable<Error, Throwable>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockError0).when(functions_FailableCallable0).call();
      Error error0 = Functions.call(functions_FailableCallable0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Functions.FailableFunction<Object, Error, RuntimeException> functions_FailableFunction0 = (Functions.FailableFunction<Object, Error, RuntimeException>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableFunction0).apply(any());
      Error error0 = Functions.apply(functions_FailableFunction0, (Object) functions_FailableFunction0);
      assertNotNull(error0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Functions.FailableBiFunction<Error, String, Integer, Throwable> functions_FailableBiFunction0 = (Functions.FailableBiFunction<Error, String, Integer, Throwable>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableBiFunction0).apply(any(java.lang.Error.class) , anyString());
      MockError mockError0 = new MockError();
      Integer integer0 = Functions.apply(functions_FailableBiFunction0, (Error) mockError0, "runnable");
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.tryWithResources((Functions.FailableRunnable<? extends Throwable>) null, (Functions.FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.test((Functions.FailableBiPredicate<Integer, Integer, Error>) null, (Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.run((Functions.FailableRunnable<RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // throwable
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.get((Functions.FailableSupplier<Integer, RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.call((Functions.FailableCallable<Object, RuntimeException>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.apply((Functions.FailableFunction<String, String, IOException>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Functions.FailableBiFunction<Object, String, Integer, Error> functions_FailableBiFunction0 = (Functions.FailableBiFunction<Object, String, Integer, Error>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Functions.apply((Functions.FailableBiFunction<Object, String, Integer, Error>) null, (Object) functions_FailableBiFunction0, "This stream is already terminated.");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable1 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableConsumer<Throwable, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<Throwable, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 4);
      functions_FailableRunnableArray0[0] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[1] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[2] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[3] = functions_FailableRunnable0;
      Functions.tryWithResources(functions_FailableRunnable1, functions_FailableConsumer0, functions_FailableRunnableArray0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableConsumer<Throwable, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<Throwable, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<RuntimeException>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<RuntimeException>[]) Array.newInstance(Functions.FailableRunnable.class, 4);
      // Undeclared exception!
      try { 
        Functions.tryWithResources(functions_FailableRunnable0, functions_FailableConsumer0, functions_FailableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("cOopo;(j1\"_St|b", mockIOException0);
      // Undeclared exception!
      try { 
        Functions.rethrow(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Functions.FailableSupplier<Integer, IOException> functions_FailableSupplier0 = (Functions.FailableSupplier<Integer, IOException>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableSupplier0).get();
      Integer integer0 = Functions.get(functions_FailableSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.tryWithResources((Functions.FailableRunnable<? extends Throwable>) null, (Functions.FailableConsumer<Throwable, ? extends Throwable>) null, (Functions.FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Functions.FailableRunnable<Error> functions_FailableRunnable0 = (Functions.FailableRunnable<Error>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<Error>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<Error>[]) Array.newInstance(Functions.FailableRunnable.class, 6);
      functions_FailableRunnableArray0[0] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[1] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[2] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[3] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[4] = functions_FailableRunnable0;
      functions_FailableRunnableArray0[5] = functions_FailableRunnable0;
      Functions.tryWithResources(functions_FailableRunnable0, functions_FailableRunnableArray0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      MockError mockError0 = new MockError("\"ovpa1!}|,Vwro^C<'", mockIOException0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      // Undeclared exception!
      try { 
        Functions.rethrow(mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        Functions.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Functions.test((Functions.FailablePredicate<Integer, Error>) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Functions", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockError mockError0 = new MockError("org.apache.commons.lang3.Streams$FailableStream");
      // Undeclared exception!
      try { 
        Functions.rethrow(mockError0);
        fail("Expecting exception: Error");
      } catch(Error e) {
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Functions.FailablePredicate<RuntimeException, Throwable> functions_FailablePredicate0 = (Functions.FailablePredicate<RuntimeException, Throwable>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      Predicate<RuntimeException> predicate0 = Functions.asPredicate((Functions.FailablePredicate<RuntimeException, ?>) functions_FailablePredicate0);
      assertNotNull(predicate0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Functions.FailableCallable<RuntimeException, RuntimeException> functions_FailableCallable0 = (Functions.FailableCallable<RuntimeException, RuntimeException>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(functions_FailableCallable0).call();
      RuntimeException runtimeException0 = Functions.call(functions_FailableCallable0);
      assertNotNull(runtimeException0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Functions.FailableConsumer<Throwable, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<Throwable, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Consumer<Throwable> consumer0 = Functions.asConsumer((Functions.FailableConsumer<Throwable, ?>) functions_FailableConsumer0);
      assertNotNull(consumer0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Functions.FailableRunnable<Error> functions_FailableRunnable0 = (Functions.FailableRunnable<Error>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.FailableRunnable<Error>[] functions_FailableRunnableArray0 = (Functions.FailableRunnable<Error>[]) Array.newInstance(Functions.FailableRunnable.class, 6);
      // Undeclared exception!
      try { 
        Functions.tryWithResources(functions_FailableRunnable0, functions_FailableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Functions.FailableSupplier<Error, Throwable> functions_FailableSupplier0 = (Functions.FailableSupplier<Error, Throwable>) mock(Functions.FailableSupplier.class, new ViolatedAssumptionAnswer());
      Supplier<Error> supplier0 = Functions.asSupplier((Functions.FailableSupplier<Error, ?>) functions_FailableSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Functions functions0 = new Functions();
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Functions.FailableBiConsumer<String, Integer, RuntimeException> functions_FailableBiConsumer0 = (Functions.FailableBiConsumer<String, Integer, RuntimeException>) mock(Functions.FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Functions.accept(functions_FailableBiConsumer0, "RMLp9U]4", integer0);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      Integer integer0 = new Integer(588);
      Functions.FailableBiFunction<Integer, Integer, Object, RuntimeException> functions_FailableBiFunction0 = (Functions.FailableBiFunction<Integer, Integer, Object, RuntimeException>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(functions_FailableBiFunction0).apply(anyInt() , anyInt());
      Object object0 = Functions.apply(functions_FailableBiFunction0, integer0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Functions.FailableCallable<RuntimeException, IOException> functions_FailableCallable0 = (Functions.FailableCallable<RuntimeException, IOException>) mock(Functions.FailableCallable.class, new ViolatedAssumptionAnswer());
      Callable<RuntimeException> callable0 = Functions.asCallable((Functions.FailableCallable<RuntimeException, ?>) functions_FailableCallable0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Functions.FailableBiPredicate<Integer, Integer, Error> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<Integer, Integer, Error>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(functions_FailableBiPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = Functions.test(functions_FailableBiPredicate0, (Integer) null, (Integer) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Functions.FailableBiPredicate<RuntimeException, Object, RuntimeException> functions_FailableBiPredicate0 = (Functions.FailableBiPredicate<RuntimeException, Object, RuntimeException>) mock(Functions.FailableBiPredicate.class, new ViolatedAssumptionAnswer());
      BiPredicate<RuntimeException, Object> biPredicate0 = Functions.asBiPredicate((Functions.FailableBiPredicate<RuntimeException, Object, ?>) functions_FailableBiPredicate0);
      assertNotNull(biPredicate0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Functions.FailableBiFunction<Integer, String, Error, Error> functions_FailableBiFunction0 = (Functions.FailableBiFunction<Integer, String, Error, Error>) mock(Functions.FailableBiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Integer, String, Error> biFunction0 = Functions.asBiFunction((Functions.FailableBiFunction<Integer, String, Error, ?>) functions_FailableBiFunction0);
      assertNotNull(biFunction0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Functions.FailableConsumer<String, RuntimeException> functions_FailableConsumer0 = (Functions.FailableConsumer<String, RuntimeException>) mock(Functions.FailableConsumer.class, new ViolatedAssumptionAnswer());
      Functions.accept(functions_FailableConsumer0, "");
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Functions.FailableBiConsumer<Error, String, RuntimeException> functions_FailableBiConsumer0 = (Functions.FailableBiConsumer<Error, String, RuntimeException>) mock(Functions.FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Error, String> biConsumer0 = Functions.asBiConsumer((Functions.FailableBiConsumer<Error, String, ?>) functions_FailableBiConsumer0);
      assertNotNull(biConsumer0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Functions.FailableRunnable<Error> functions_FailableRunnable0 = (Functions.FailableRunnable<Error>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Runnable runnable0 = Functions.asRunnable(functions_FailableRunnable0);
      assertNotNull(runnable0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Functions.FailableRunnable<RuntimeException> functions_FailableRunnable0 = (Functions.FailableRunnable<RuntimeException>) mock(Functions.FailableRunnable.class, new ViolatedAssumptionAnswer());
      Functions.run(functions_FailableRunnable0);
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Functions.FailableFunction<Integer, String, RuntimeException> functions_FailableFunction0 = (Functions.FailableFunction<Integer, String, RuntimeException>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function0 = Functions.asFunction((Functions.FailableFunction<Integer, String, ?>) functions_FailableFunction0);
      assertNotNull(function0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Functions.FailablePredicate<Integer, Error> functions_FailablePredicate0 = (Functions.FailablePredicate<Integer, Error>) mock(Functions.FailablePredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(functions_FailablePredicate0).test(anyInt());
      Integer integer0 = new Integer((-575));
      boolean boolean0 = Functions.test(functions_FailablePredicate0, integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-2736));
      Functions.FailableFunction<Integer, Object, Error> functions_FailableFunction0 = (Functions.FailableFunction<Integer, Object, Error>) mock(Functions.FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn("This stream is already terminated.").when(functions_FailableFunction0).apply(anyInt());
      Object object0 = Functions.apply(functions_FailableFunction0, integer0);
      assertNotNull(object0);
}
