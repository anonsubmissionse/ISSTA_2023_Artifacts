 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      Pair<Integer, Object> pair0 = ImmutablePair.left(integer0);
      MutablePair<Integer, Object> mutablePair0 = MutablePair.of((Map.Entry<Integer, Object>) pair0);
      assertNotNull(mutablePair0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Object> mutablePair0 = MutablePair.of("o>.2Mm}jjzw", (Object) integer0);
      Object object0 = mutablePair0.setValue("");
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Object> mutablePair0 = MutablePair.of("o>.2Mm}jjzw", (Object) integer0);
      Object object0 = mutablePair0.setValue("");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutablePair<Object, Integer> mutablePair0 = new MutablePair<Object, Integer>();
      Object object0 = mutablePair0.getLeft();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Integer> mutablePair0 = new MutablePair<String, Integer>("", integer0);
      Object object0 = mutablePair0.getLeft();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Integer> mutablePair0 = new MutablePair<String, Integer>("", integer0);
      Object object0 = mutablePair0.getLeft();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(405);
      MutablePair<Integer, Object> mutablePair0 = MutablePair.of(integer0, (Object) "?-}`J");
      Object object0 = mutablePair0.getRight();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(405);
      MutablePair<Integer, Object> mutablePair0 = MutablePair.of(integer0, (Object) "?-}`J");
      Object object0 = mutablePair0.getRight();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      MutablePair<Object, Object> mutablePair1 = MutablePair.of((Object) mutablePair0, (Object) mutablePair0);
      mutablePair0.setRight(mutablePair1);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutablePair<MutablePair<Object, String>, String>[] mutablePairArray0 = MutablePair.emptyArray();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Map.Entry<Object, Object>) null);
      Object object0 = mutablePair0.setValue((Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>();
      mutablePair0.setLeft("org.apache.commons.lang3.tuple.MutablePair");
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePair<Integer, String> mutablePair0 = new MutablePair<Integer, String>();
      String string0 = mutablePair0.getRight();
      assertNotNull(string0);
}
