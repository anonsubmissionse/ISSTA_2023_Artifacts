/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:46:43 GMT 2022
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      assertEquals(1, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.divideBy(fraction1);
      int int0 = fraction1.THREE_FIFTHS.compareTo(fraction2);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.divideBy(fraction1);
      int int0 = fraction1.THREE_FIFTHS.compareTo(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2834, (-76));
      fraction0.hashCode();
      fraction0.hashCode();
      assertEquals(0, fraction0.getDenominator());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2834, (-76));
      fraction0.hashCode();
      fraction0.hashCode();
      assertEquals(1, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.reduce();
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.reduce();
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 1420);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 1420);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 1420);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/Kd^<oU,0$m");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" ");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".r");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1451.233646));
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1451.233646));
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.getFraction(3978.58801412703);
      Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1047.20527168834));
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1047.20527168834));
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1047.20527168834));
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1664, 1664);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.pow(345);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1664, 1664);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.pow(345);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1664, 1664);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.pow(345);
      assertEquals(0, fraction1.longValue());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 969);
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 969);
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 969);
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1640.948059182373));
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1640.948059182373));
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.multiplyBy(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      long long0 = fraction0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      long long0 = fraction1.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.invert();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.invert();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.invert();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      Fraction fraction2 = fraction1.invert();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1047.20527168834));
      int int0 = fraction0.intValue();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1047.20527168834));
      int int0 = fraction0.intValue();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getProperWhole();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getProperWhole();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      int int0 = fraction2.getNumerator();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      int int0 = fraction2.getNumerator();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1, 1);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      int int0 = fraction2.getNumerator();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getNumerator();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1");
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1");
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), 2147483646, 2);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.reduce();
      float float0 = fraction1.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.reduce();
      float float0 = fraction1.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.ONE_QUARTER.negate();
      float float0 = fraction1.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.reduce();
      double double0 = fraction1.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.reduce();
      double double0 = fraction1.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      double double0 = fraction0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      double double0 = fraction0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-723.67));
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.divideBy(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-723.67));
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertEquals(0, fraction0.getProperWhole());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      int int0 = fraction0.compareTo(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.negate();
      Fraction fraction2 = fraction1.TWO_QUARTERS.add(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_HALF.negate();
      Fraction fraction2 = fraction1.TWO_QUARTERS.add(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.ONE_QUARTER.add(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((-3967.23992894));
      Fraction fraction2 = fraction1.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      Fraction fraction3 = fraction2.abs();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      Fraction fraction3 = fraction2.abs();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 4);
      Fraction fraction1 = fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 4);
      Fraction fraction1 = fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      Fraction fraction1 = fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      Fraction fraction1 = fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.multiplyBy((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // str
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1959), (-1959));
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1662);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      boolean boolean0 = fraction1.equals(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      boolean boolean0 = fraction1.equals(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((double) 4);
      boolean boolean0 = fraction1.equals(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_QUARTER.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.pow(37);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.pow(1);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-7843.782072303048));
      Fraction fraction1 = fraction0.invert();
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-7843.782072303048));
      Fraction fraction1 = fraction0.invert();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-7843.782072303048));
      Fraction fraction1 = fraction0.invert();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.invert();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      int int0 = fraction0.getProperWhole();
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      int int0 = fraction0.getProperWhole();
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2447), (-2042));
      int int0 = fraction0.getProperWhole();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.getDenominator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 2, 16);
      String string0 = fraction0.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2, 2, 16);
      String string0 = fraction0.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      String string0 = fraction1.toProperString();
      assertEquals(0, fraction1.getDenominator());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = (-3423);
      Fraction.getFraction((-3423), (-3423));
      Fraction fraction1 = Fraction.ONE;
      fraction0.FOUR_FIFTHS.divideBy(fraction0);
      String string0 = fraction0.ONE.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1670.37951180613));
      fraction0.ZERO.toProperString();
      fraction0.TWO_QUARTERS.toProperString();
      Fraction fraction1 = fraction0.negate();
      fraction0.THREE_QUARTERS.negate();
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction.getFraction("0");
      fraction2.ONE_QUARTER.divideBy(fraction0);
      Fraction fraction3 = Fraction.TWO_FIFTHS;
      Fraction.getReducedFraction((-8), 4);
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction4.TWO_FIFTHS.pow((-321));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      fraction0.ONE_HALF.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      fraction0.ONE_HALF.toProperString();
      assertEquals(1, fraction0.getProperWhole());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      fraction0.ONE_HALF.toProperString();
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.ONE_THIRD.toString();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.ONE_THIRD.toString();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      Fraction fraction3 = Fraction.getFraction((double) 2);
      int int0 = fraction2.compareTo(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      Fraction fraction3 = Fraction.getFraction((double) 2);
      int int0 = fraction2.compareTo(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      Fraction fraction3 = Fraction.getFraction((double) 2);
      int int0 = fraction2.compareTo(fraction3);
      assertEquals(0, fraction3.getProperWhole());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      Fraction fraction3 = Fraction.getFraction((double) 2);
      int int0 = fraction2.compareTo(fraction3);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      int int0 = fraction2.compareTo(fraction0);
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      int int0 = fraction2.compareTo(fraction0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      int int0 = fraction2.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.THREE_QUARTERS.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      fraction0.FOUR_FIFTHS.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      fraction0.FOUR_FIFTHS.hashCode();
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getFraction((-3423), (-3423));
      Fraction fraction2 = fraction0.divideBy(fraction1);
      boolean boolean0 = fraction0.equals(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getFraction((-3423), (-3423));
      Fraction fraction2 = fraction0.divideBy(fraction1);
      boolean boolean0 = fraction0.equals(fraction2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getFraction((-3423), (-3423));
      Fraction fraction2 = fraction0.divideBy(fraction1);
      boolean boolean0 = fraction0.equals(fraction2);
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getFraction(2, 2, 2);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getFraction(2, 2, 2);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getFraction(2, 2, 2);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      Object object0 = new Object();
      fraction0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-613), (-613));
      Object object0 = new Object();
      fraction0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getFraction(1.8967335702058108E-8);
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      Fraction fraction3 = fraction0.THREE_QUARTERS.multiplyBy(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      Fraction fraction3 = fraction0.THREE_QUARTERS.multiplyBy(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(735, 1484);
      Fraction fraction1 = Fraction.getFraction(1484, 735, 735);
      Fraction fraction2 = fraction0.divideBy(fraction1);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getFraction(1.8967335702058108E-8);
      Fraction fraction2 = fraction0.subtract(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-991), 1187, 1187);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-991), 1187, 1187);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, 238);
      // Undeclared exception!
      try { 
        fraction0.ONE.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1935);
      Fraction fraction1 = Fraction.getFraction(1935, (-1));
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(619.8996980937626);
      Fraction fraction1 = fraction0.negate();
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE_FIFTH.pow(0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_FIFTH.abs();
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MIN_VALUE, 1187);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-991), 1187, 1187);
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 1935);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.ZERO.invert();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reduce();
      String string0 = fraction1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reduce();
      String string0 = fraction1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 2147483646);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 2147483646);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 2147483646);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 2147483646);
      Fraction fraction1 = fraction0.reduce();
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("2 2/16");
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("Numerator too large to represent as an Integer.");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/2");
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/2");
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(47, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 2);
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-735), 0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2, 2147483646, 2147483646);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2147483646), 1827, 3);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, (-2348), 590);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, (-1));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(47, 0, 0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(235, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getProperNumerator();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getProperNumerator();
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2797, (-1));
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1991), 0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      double double0 = fraction0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      long long0 = fraction0.longValue();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      float float0 = fraction0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      String string0 = fraction2.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      String string0 = fraction2.toProperString();
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_HALF.divideBy(fraction0);
      Fraction fraction2 = fraction1.divideBy(fraction0);
      String string0 = fraction2.toProperString();
      assertEquals(1, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.pow(254);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.pow(254);
      Fraction fraction2 = Fraction.getFraction(254, 10000);
      Fraction fraction3 = fraction2.TWO_FIFTHS.subtract(fraction0);
      fraction3.ONE.hashCode();
      Fraction fraction4 = Fraction.getFraction(10000, 1879);
      Fraction fraction5 = Fraction.getReducedFraction(254, 1879);
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.pow(254);
      Fraction fraction2 = Fraction.getFraction(254, 10000);
      Fraction fraction3 = fraction2.TWO_FIFTHS.subtract(fraction0);
      fraction3.ONE.hashCode();
      Fraction fraction4 = Fraction.getFraction(10000, 1879);
      Fraction fraction5 = Fraction.getReducedFraction(254, 1879);
      fraction3.TWO_THIRDS.toProperString();
      Fraction fraction6 = fraction3.THREE_QUARTERS.subtract(fraction4);
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.pow(254);
      Fraction fraction2 = Fraction.getFraction(254, 10000);
      Fraction fraction3 = fraction2.TWO_FIFTHS.subtract(fraction0);
      fraction3.ONE.hashCode();
      Fraction fraction4 = Fraction.getFraction(10000, 1879);
      Fraction fraction5 = Fraction.getReducedFraction(254, 1879);
      fraction3.TWO_THIRDS.toProperString();
      Fraction fraction6 = fraction3.THREE_QUARTERS.subtract(fraction4);
      Fraction fraction7 = Fraction.getReducedFraction(46, 10000);
      Fraction fraction8 = fraction7.TWO_QUARTERS.multiplyBy(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ZERO.pow(254);
      Fraction fraction2 = Fraction.getFraction(254, 10000);
      Fraction fraction3 = fraction2.TWO_FIFTHS.subtract(fraction0);
      fraction3.ONE.hashCode();
      Fraction fraction4 = Fraction.getFraction(10000, 1879);
      Fraction fraction5 = Fraction.getReducedFraction(254, 1879);
      fraction3.TWO_THIRDS.toProperString();
      Fraction fraction6 = fraction3.THREE_QUARTERS.subtract(fraction4);
      Fraction fraction7 = Fraction.getReducedFraction(46, 10000);
      Fraction fraction8 = fraction7.TWO_QUARTERS.multiplyBy(fraction3);
      Fraction fraction9 = fraction0.ONE_THIRD.add(fraction4);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
}
}
