/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:10:27 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Serializable;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.SerializationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerializationUtils_ESTest extends SerializationUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "@!nRJx";
      SerializationUtils.clone("@!nRJx");
      SerializationUtils.clone((Integer) null);
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) "@!nRJx");
      SerializationUtils.clone("-z9");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(byteArray0);
      SerializationUtils.deserialize((InputStream) pipedInputStream0);
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) "@!nRJx", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SerializationUtils.roundtrip("#5$bE&|pr&!gwFw7");
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) "#5$bE&|pr&!gwFw7");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SerializationUtils.roundtrip("#5$bE&|pr&!gwFw7");
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) "#5$bE&|pr&!gwFw7");
      SerializationUtils.deserialize(byteArray0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = SerializationUtils.clone(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) null);
      SerializationUtils.deserialize(byteArray0);
      String string0 = SerializationUtils.roundtrip("wR? ReD2z&'T7JaA'");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SerializationUtils.clone("objectData");
      SerializationUtils.roundtrip("objectData");
      SerializationUtils.roundtrip("objectData");
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) "objectData");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SerializationUtils.ClassLoaderAwareObjectInputStream serializationUtils_ClassLoaderAwareObjectInputStream0 = new SerializationUtils.ClassLoaderAwareObjectInputStream(pushbackInputStream0, classLoader1);
      String string0 = "org.apache.commons.lang3.SerializationException";
      boolean boolean0 = true;
      classLoader1.setPackageAssertionStatus("org.apache.commons.lang3.SerializationException", true);
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize((InputStream) serializationUtils_ClassLoaderAwareObjectInputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      String string0 = "x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) linkedList1;
      objectArray0[3] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockFileOutputStream0.write(byteArray0, (int) (byte)0, 933);
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) "x";
      objectArray0[6] = (Object) "x";
      objectArray0[7] = (Object) linkedList1;
      PrintStream printStream0 = mockPrintStream0.format("x", objectArray0);
      SerializationUtils.serialize((Serializable) null, (OutputStream) printStream0);
      SerializationUtils.roundtrip("");
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) (byte)0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SerializationUtils serializationUtils0 = new SerializationUtils();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) locale0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SerializationUtils serializationUtils0 = new SerializationUtils();
      SerializationUtils.clone((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize((InputStream) pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.US;
      SerializationUtils.serialize((Serializable) locale0);
      Integer integer0 = SerializationUtils.clone((Integer) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_BLOCK_DATA;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      SerializationUtils.serialize((Serializable) (byte)8, (OutputStream) filterOutputStream0);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerializationUtils.roundtrip((String) null);
      SerializationUtils.serialize((Serializable) null);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "-DXG|c$<bGWkHl\">h";
      SerializationUtils.clone("-DXG|c$<bGWkHl\">h");
      String string1 = "";
      SerializationUtils.clone("");
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SerializationUtils.roundtrip("$S83[jl%$~9");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)66;
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize(byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.StreamCorruptedException: invalid stream header: FF42019C
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize(byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SerializationUtils.ClassLoaderAwareObjectInputStream serializationUtils_ClassLoaderAwareObjectInputStream0 = null;
      try {
        serializationUtils_ClassLoaderAwareObjectInputStream0 = new SerializationUtils.ClassLoaderAwareObjectInputStream((InputStream) null, classLoader1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // objectData
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "wPK{Z~HE!f\"C\\n>";
      MockFile mockFile0 = new MockFile("wPK{Z~HE!f\"C\n>", ",M~mkkIjQ{f%");
      mockFile0.getAbsolutePath();
      mockFile0.toPath();
      mockFile0.toURL();
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) mockFile0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SerializationUtils.clone("iK");
      SerializationUtils serializationUtils0 = new SerializationUtils();
      String string0 = SerializationUtils.clone("iK");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = "K*C_Evso7xGmU;V<D51";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K*C_Evso7xGmU;V<D51");
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) 2, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Error in writing to file
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VtOwG{u");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "fh");
      SerializationUtils.clone("VtOwG{u");
      SerializationUtils serializationUtils0 = new SerializationUtils();
      MockFile mockFile0 = new MockFile("VtOwG{u", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The validated collection is empty");
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) mockFile0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Error in writing to file
         //
         verifyException("org.apache.commons.lang3.SerializationUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      SerializationUtils.serialize((Serializable) (byte)126, (OutputStream) mockPrintStream0);
      byte[] byteArray0 = SerializationUtils.serialize((Serializable) "e");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = SerializationUtils.deserialize((InputStream) byteArrayInputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SerializationUtils.clone((String) null);
      Integer integer0 = new Integer(3295);
      SerializationUtils.roundtrip(integer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SerializationUtils.ClassLoaderAwareObjectInputStream serializationUtils_ClassLoaderAwareObjectInputStream0 = null;
      try {
        serializationUtils_ClassLoaderAwareObjectInputStream0 = new SerializationUtils.ClassLoaderAwareObjectInputStream(sequenceInputStream0, classLoader1);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializationUtils.clone("%LG.");
      Integer integer0 = new Integer(3295);
      SerializationUtils.roundtrip(integer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<Object> class0 = Object.class;
      ObjectStreamClass.lookup(class0);
      // Undeclared exception!
      try { 
        SerializationUtils.deserialize((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 3397;
      Integer integer0 = new Integer(3397);
      Integer integer1 = SerializationUtils.roundtrip(integer0);
      // Undeclared exception!
      try { 
        SerializationUtils.serialize((Serializable) integer1, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SerializationUtils.clone("DWxYLXlku_xD@@");
      Integer integer0 = new Integer((-1060));
      Integer integer1 = SerializationUtils.clone(integer0);
      ;
}
}
