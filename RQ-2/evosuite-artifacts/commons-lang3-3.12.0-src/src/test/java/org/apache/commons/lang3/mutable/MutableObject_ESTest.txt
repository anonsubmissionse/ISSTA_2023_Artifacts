 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableObject<Integer> mutableObject0 = new MutableObject<Integer>();
      Object object0 = mutableObject0.getValue();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      MutableObject<Object> mutableObject1 = new MutableObject<Object>(mutableObject0);
      mutableObject0.setValue(mutableObject1);
      Object object0 = mutableObject0.getValue();
      // Undeclared exception!
      try { 
        mutableObject0.equals(object0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      MutableObject<String> mutableObject1 = new MutableObject<String>("");
      // Undeclared exception!
      try { 
        mutableObject0.equals(mutableObject1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableObject<MutableObject<String>> mutableObject0 = new MutableObject<MutableObject<String>>();
      boolean boolean0 = mutableObject0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      String string0 = mutableObject0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>();
      MutableObject<MutableObject<String>> mutableObject1 = new MutableObject<MutableObject<String>>(mutableObject0);
      String string0 = mutableObject1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      mutableObject0.hashCode();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      MutableObject<MutableObject<Object>> mutableObject1 = new MutableObject<MutableObject<Object>>(mutableObject0);
      mutableObject1.hashCode();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>();
      MutableObject<MutableObject<String>> mutableObject1 = new MutableObject<MutableObject<String>>(mutableObject0);
      MutableObject<Object> mutableObject2 = new MutableObject<Object>();
      boolean boolean0 = mutableObject1.equals(mutableObject2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      boolean boolean0 = mutableObject0.equals(mutableObject0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      Object object0 = new Object();
      boolean boolean0 = mutableObject0.equals(object0);
      assertTrue(boolean0);
}
