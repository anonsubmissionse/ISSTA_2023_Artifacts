/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 16:04:58 GMT 2022
 */

package org.asynchttpclient.extras.rxjava;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.BoundRequestBuilder;
import org.asynchttpclient.ListenableFuture;
import org.asynchttpclient.Response;
import org.asynchttpclient.extras.rxjava.AsyncHttpObservable;
import org.asynchttpclient.request.body.generator.BodyGenerator;
import org.asynchttpclient.request.body.generator.FileBodyGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import rx.Observable;
import rx.functions.Func0;
import rx.functions.Func1;
import rx.plugins.RxJavaHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncHttpObservable_ESTest extends AsyncHttpObservable_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AsyncHttpObservable asyncHttpObservable0 = new AsyncHttpObservable();
      RxJavaHooks.clear();
      RxJavaHooks.clear();
      RxJavaHooks.clearAssemblyTracking();
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncHttpClient0).executeRequest(any(org.asynchttpclient.Request.class) , nullable(org.asynchttpclient.AsyncHandler.class));
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, "", true);
      MockFile mockFile0 = new MockFile("d}DcE\"w'@e>");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-2995L));
      boundRequestBuilder0.setBody((BodyGenerator) fileBodyGenerator0);
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn(boundRequestBuilder0).when(func0_0).call();
      AsyncHttpObservable.observe(func0_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      AsyncHttpObservable.toObservable(func0_1);
      Func0<BoundRequestBuilder> func0_2 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_2).call();
      AsyncHttpObservable.observe(func0_2);
      Func0<BoundRequestBuilder> func0_3 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_3).call();
      AsyncHttpObservable.observe(func0_3);
      Func0<BoundRequestBuilder> func0_4 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_4).call();
      Observable<Response> observable0 = AsyncHttpObservable.observe(func0_4);
      Func0<BoundRequestBuilder> func0_5 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_5).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_5);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = null;
      // Undeclared exception!
      try { 
        AsyncHttpObservable.toObservable((Func0<BoundRequestBuilder>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.rxjava.AsyncHttpObservable", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Observable<Response> observable0 = AsyncHttpObservable.toObservable(func0_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Observable<Response> observable0 = AsyncHttpObservable.observe(func0_0);
      AsyncHttpObservable asyncHttpObservable0 = new AsyncHttpObservable();
      Func1<Observable.OnSubscribe, Observable.OnSubscribe> func1_0 = (Func1<Observable.OnSubscribe, Observable.OnSubscribe>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_0).call(nullable(rx.Observable.OnSubscribe.class));
      RxJavaHooks.setOnObservableCreate(func1_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_1);
      ;
}
}
