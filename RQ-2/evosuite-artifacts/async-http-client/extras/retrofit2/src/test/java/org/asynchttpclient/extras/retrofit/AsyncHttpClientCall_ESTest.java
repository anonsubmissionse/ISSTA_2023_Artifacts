/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 16:16:16 GMT 2022
 */

package org.asynchttpclient.extras.retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.LinkedTransferQueue;
import java.util.function.Consumer;
import java.util.function.Supplier;
import okhttp3.Request;
import okhttp3.Response;
import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.RequestBuilder;
import org.asynchttpclient.extras.retrofit.AsyncHttpClientCall;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncHttpClientCall_ESTest extends AsyncHttpClientCall_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedTransferQueue<Consumer<String>> linkedTransferQueue0 = new LinkedTransferQueue<Consumer<String>>();
      AsyncHttpClientCall.runConsumers((Collection<Consumer<String>>) linkedTransferQueue0, "WatchKey not recognized: {}");
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1412));
      AsyncHttpClientCall.runConsumer(consumer0, integer0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestStart();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      LinkedList<Consumer<Response>> linkedList0 = new LinkedList<Consumer<Response>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess((Collection<? extends Consumer<Response>>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Stack<Consumer<RequestBuilder>> stack0 = new Stack<Consumer<RequestBuilder>>();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizers(stack0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearRequestCustomizers();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearRequestCustomizers();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure(consumer0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.clearOnRequestFailure();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestFailure();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Vector<Consumer<Request>> vector0 = new Vector<Consumer<Request>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) vector0);
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
      ArrayDeque<Consumer<Request>> arrayDeque0 = new ArrayDeque<Consumer<Request>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) arrayDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // onRequestStart cannot be null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall$AsyncHttpClientCallBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder1.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Vector<Consumer<Throwable>> vector0 = new Vector<Consumer<Throwable>>(41, 154);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure((Collection<? extends Consumer<Throwable>>) vector0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.httpClientSupplier((Supplier<AsyncHttpClient>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall$AsyncHttpClientCallBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      Consumer<Response> consumer1 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer1).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer1);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.request(request0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.clearOnRequestSuccess();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestSuccess();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Consumer<RequestBuilder> consumer0 = (Consumer<RequestBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("exception is marked non-null but is null").when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizer(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      TreeSet<Consumer<RequestBuilder>> treeSet0 = new TreeSet<Consumer<RequestBuilder>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizers(treeSet0);
      Consumer<RequestBuilder> consumer0 = (Consumer<RequestBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.requestCustomizer(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Consumer<RequestBuilder>> vector0 = new Vector<Consumer<RequestBuilder>>();
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<Request>> linkedList0 = new LinkedList<Consumer<Request>>();
      AsyncHttpClientCall asyncHttpClientCall0 = null;
      try {
        asyncHttpClientCall0 = new AsyncHttpClientCall(supplier0, (Request) null, vector0, linkedList0, (List<Consumer<Throwable>>) null, (List<Consumer<Response>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // request is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCall", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      String string0 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.toString();
      ;
}
}
