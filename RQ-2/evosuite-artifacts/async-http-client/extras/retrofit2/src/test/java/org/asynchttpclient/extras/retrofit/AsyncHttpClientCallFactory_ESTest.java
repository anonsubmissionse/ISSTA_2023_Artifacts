/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 16:16:14 GMT 2022
 */

package org.asynchttpclient.extras.retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Consumer;
import java.util.function.Supplier;
import okhttp3.Call;
import okhttp3.Request;
import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.extras.retrofit.AsyncHttpClientCall;
import org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncHttpClientCallFactory_ESTest extends AsyncHttpClientCallFactory_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = new AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> list0 = asyncHttpClientCallFactory0.getCallCustomizers();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> vector0 = new Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, vector0);
      List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> list0 = asyncHttpClientCallFactory0.getCallCustomizers();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      LinkedBlockingDeque<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedBlockingDeque0 = new LinkedBlockingDeque<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClient((AsyncHttpClient) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClient is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer0).toString();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer1 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer1).toString();
      linkedList0.add(consumer1);
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer0).toString();
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.clearCallCustomizers();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> vector0 = new Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, vector0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      TreeSet<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> treeSet0 = new TreeSet<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers(treeSet0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers((Collection<? extends Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // callCustomizers cannot be null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClientSupplier((Supplier<AsyncHttpClient>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(supplier0).toString();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, (List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizer(consumer0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException("org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(supplier0).toString();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, (List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      Supplier<AsyncHttpClient> supplier1 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier1).toString();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClientSupplier(supplier1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      asyncHttpClientCallFactory0.hashCode();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request0).toString();
      Call call0 = asyncHttpClientCallFactory0.newCall(request0);
      assertNotNull(call0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      String string0 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      String string0 = asyncHttpClientCallFactory0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClient asyncHttpClient0 = asyncHttpClientCallFactory0.getHttpClient();
      assertNotNull(asyncHttpClient0);
}
}
