 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setHeader("io.netty.handler.ssl.JettyAlpnSslEngine", simpleAsyncHttpClient_Builder0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'p';
      charArray0[2] = '4';
      charArray0[3] = '5';
      AsciiString asciiString0 = new AsciiString(charArray0);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addHeader(asciiString0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setVirtualHost("EMI");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient_Builder0.setUrl("61");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 61 could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setResumableDownload(true);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setFormParams((List<Param>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setFollowRedirect(false);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addQueryParam("8", "GET");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addFormParam("Reauthenticated cached principal '", "-H3>As^1EOC=G65T+");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      byte[] byteArray0 = new byte[7];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("low", byteArray0, "CjZol");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addBodyPart(byteArrayPart0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setHeaders((HttpHeaders) null);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultCookie defaultCookie0 = new DefaultCookie("domain", "domain");
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addCookie(defaultCookie0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setHeader("DELETE", "h;<fyB4`;");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("nm");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addHeader(">e", jMXPrincipal0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPrincipal("");
      simpleAsyncHttpClient_Builder1.setProxyHost("");
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder1.build();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder0.build();
      simpleAsyncHttpClient0.close();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder0.build();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient0.post((BodyConsumer) fileBodyConsumer0, (Part[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.extras.simple.SimpleAsyncHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addFormParam("", "GET");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setPooledConnectionIdleTimeout(3);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setResumableDownload(false);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFollowRedirect(true);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient_Builder0.setUrl((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      ThrowableHandler throwableHandler0 = mock(ThrowableHandler.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setDefaultThrowableHandler(throwableHandler0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultCookie defaultCookie0 = new DefaultCookie("}C;u'p,4;", "UXRe{\"VEAC");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addCookie(defaultCookie0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addBodyPart((Part) null);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPassword("EHjy}q,8l:Xg}K");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setCompressionEnforced(true);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyAuthScheme(realm_AuthScheme0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setConnectTimeout((-1255));
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPort(0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setRealm(realm0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addQueryParam("8%*", "8%*");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setKeepAlive(false);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAHCTransferListener simpleAHCTransferListener0 = mock(SimpleAHCTransferListener.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setListener(simpleAHCTransferListener0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setSslEngineFactory(jsseSslEngineFactory0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Vector<Param> vector0 = new Vector<Param>();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFormParams((List<Param>) vector0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setUserAgent("O!tA$T;sS1Y");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setVirtualHost("j2jq=Gi>Uy");
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setAcceptAnyCertificate(false);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFormParams((Map<String, List<String>>) hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.ErrorDocumentBehaviour simpleAsyncHttpClient_ErrorDocumentBehaviour0 = SimpleAsyncHttpClient.ErrorDocumentBehaviour.WRITE;
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setErrorDocumentBehaviour(simpleAsyncHttpClient_ErrorDocumentBehaviour0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxConnectionsPerHost(2003);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setSslContext((SslContext) null);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxRequestRetry(444);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders(false);
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setHeaders((HttpHeaders) defaultHttpHeaders0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory("8%*", true);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setThreadFactory(defaultThreadFactory0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyHost("");
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder1.build();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxRedirects(435);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxConnections(0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setRequestTimeout(3006);
      ;
}
