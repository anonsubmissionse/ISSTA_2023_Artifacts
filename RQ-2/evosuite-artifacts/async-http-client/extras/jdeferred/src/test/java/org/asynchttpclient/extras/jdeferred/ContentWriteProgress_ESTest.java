/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:58:18 GMT 2022
 */

package org.asynchttpclient.extras.jdeferred;

import org.junit.Test;
import static org.junit.Assert.*;
import org.asynchttpclient.extras.jdeferred.ContentWriteProgress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentWriteProgress_ESTest extends ContentWriteProgress_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getTotal();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
      assertEquals(0, contentWriteProgress0.getAmount());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getCurrent();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
      assertEquals(1, contentWriteProgress0.getAmount());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getAmount();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
      assertEquals(0, contentWriteProgress0.getAmount());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      String string0 = contentWriteProgress0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
      assertEquals(0, contentWriteProgress0.getCurrent());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
      ;
}
}
