 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      realm_Builder1.parseWWWAuthenticateHeader("Digestagoritm not supporte): ");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digestagoritm not supporte): ");
      realm_Builder3.setNonce("////");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri("'null'", "Digestagoritm not supporte): ", "////", (-1436), "'null'", "auth-int", "PathWatcher must be stopped before reset.");
      Uri uri1 = uri0.withNewScheme("////");
      Uri uri2 = uri1.withNewQuery("auth-int");
      realm_Builder3.setUri(uri2);
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm0.getQop();
      Realm.AuthScheme.values();
      Realm realm1 = realm_Builder4.build();
      realm1.getRealmName();
      Realm.AuthScheme.values();
      realm1.getCustomLoginConfig();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("");
      Realm.Builder realm_Builder3 = realm_Builder2.setUseCanonicalHostname(true);
      realm_Builder2.setResponse("");
      realm_Builder1.setAlgorithm("");
      realm_Builder3.parseProxyAuthenticateHeader("MD5");
      Realm.Builder realm_Builder4 = realm_Builder3.setRealmName("");
      Realm realm0 = realm_Builder4.build();
      realm_Builder1.parseWWWAuthenticateHeader("");
      realm0.toString();
      realm0.getCnonce();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder0.setNonce((String) null);
      realm0.getScheme();
      realm0.getPrincipal();
      realm0.getCnonce();
      realm0.getCharset();
      realm0.toString();
      realm0.getNonce();
      realm0.getRealmName();
      realm0.getUri();
      realm0.getQop();
      realm0.getCustomLoginConfig();
      realm0.getScheme();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmHost("n|d<Ma.0oR)_iijd{");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("R$]lDw{.InNWG");
      realm_Builder0.parseProxyAuthenticateHeader((String) null);
      realm_Builder1.setNtlmHost((String) null);
      realm_Builder2.setUri((Uri) null);
      Realm realm0 = realm_Builder2.build();
      realm_Builder2.setUseAbsoluteURI(true);
      realm0.getPrincipal();
      realm0.getNtlmHost();
      realm0.toString();
      realm0.toString();
      realm_Builder0.parseProxyAuthenticateHeader((String) null);
      realm0.getQop();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setRealmName("AqQK{MN.");
      realm_Builder0.setNtlmHost("AqQK{MN.");
      realm_Builder0.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName("'null'");
      realm_Builder1.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmHost("'null'");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce("'null'");
      realm_Builder4.setNtlmHost("AqQK{MN.");
      realm_Builder3.setUseCanonicalHostname(false);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder4.build();
      realm0.getNonce();
      realm_Builder0.setResponse("n!5rs[5YR%");
      realm0.getCharset();
      realm0.getRealmName();
      realm0.getCustomLoginConfig();
      realm0.toString();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("'null'", "'null'");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      realm_Builder1.setRealmName("/.");
      Uri uri0 = new Uri("'null'", "////", "'null'", 6, "'null'", "'null'", "'null'");
      realm_Builder0.setUri(uri0);
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName("'null'");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("D]bMJi;");
      realm_Builder3.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(true);
      realm_Builder3.setUseAbsoluteURI(false);
      realm_Builder4.setAlgorithm("/C");
      realm_Builder2.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm_Builder3.setMethodName("auth-int");
      realm0.getAlgorithm();
      realm0.getScheme();
      realm0.getCustomLoginConfig();
      realm0.getNc();
      realm_Builder2.setUseCanonicalHostname(false);
      realm_Builder2.setNc("ws");
      realm0.getPrincipal();
      realm0.getNtlmHost();
      realm0.getQop();
      realm0.getCharset();
      realm0.getPassword();
      realm0.getUri();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("ot@9", "scheme");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("d41d8cd98f00b204e9800998ecf8427e");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmHost("d41d8cd98f00b204e9800998ecf8427e");
      realm_Builder0.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder4 = realm_Builder0.setUseAbsoluteURI(false);
      realm_Builder3.setResponse("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder3.setNtlmHost((String) null);
      Realm.Builder realm_Builder5 = realm_Builder4.setMethodName((String) null);
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm_Builder5.setUri((Uri) null);
      Realm realm1 = realm_Builder5.build();
      realm1.getPrincipal();
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("$VALUES", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setOmitQuery(false);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder4 = realm_Builder3.setOpaque("");
      Realm realm0 = realm_Builder4.build();
      realm0.getOpaque();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(true);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder4 = realm_Builder3.setUseCanonicalHostname(true);
      realm_Builder0.setNtlmDomain("Na");
      realm_Builder0.setResponse("Na");
      realm_Builder4.setResponse("L!k");
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getNonce();
      realm0.toString();
      realm0.toString();
      realm0.getPrincipal();
      realm_Builder3.setUsePreemptiveAuth(false);
      realm0.getQop();
      realm0.getPassword();
      realm_Builder4.setAlgorithm("Realm{principal='null', password='null', scheme=SPNEGO, realmName='null', nonce='null', algorithm='null', response='L!k', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=true, charset=UTF-8, ntlmHost='localhost', ntlmDomain='Na', useAbsoluteURI=true, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=true, loginContextName='null'}");
      realm_Builder4.setOpaque((String) null);
      realm0.getResponse();
      realm0.toString();
      realm_Builder0.setServicePrincipalName((String) null);
      realm_Builder1.setMethodName("L!k");
      realm0.getLoginContextName();
      realm_Builder2.parseWWWAuthenticateHeader("");
      realm0.isUseCanonicalHostname();
      realm_Builder4.setServicePrincipalName("");
      realm0.getPassword();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque("");
      Realm.Builder realm_Builder2 = realm_Builder1.setQop("");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("");
      Realm.Builder realm_Builder4 = realm_Builder3.setOmitQuery(false);
      realm_Builder2.setUseCanonicalHostname(false);
      realm_Builder1.parseWWWAuthenticateHeader("auth");
      String string0 = "";
      Realm.Builder realm_Builder5 = realm_Builder4.setAlgorithm("");
      realm_Builder5.setServicePrincipalName((String) null);
      Realm.Builder realm_Builder6 = realm_Builder5.setAlgorithm("");
      realm_Builder6.setNonce("%s@%x{i=%s,ip=%s,e=%s,ep=%s}");
      realm_Builder5.setNc((String) null);
      Realm realm0 = realm_Builder4.build();
      realm0.getNc();
      realm0.toString();
      Uri uri0 = null;
      try {
        uri0 = new Uri((String) null, "", (String) null, 3, "", "", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(false);
      Realm realm0 = realm_Builder2.build();
      realm_Builder1.setNtlmHost((String) null);
      realm_Builder0.setLoginContextName((String) null);
      realm0.toString();
      realm0.toString();
      realm0.toString();
      realm0.getUri();
      realm0.getPrincipal();
      Charset charset0 = Charset.defaultCharset();
      realm_Builder2.setCharset(charset0);
      realm0.getRealmName();
      realm0.getCustomLoginConfig();
      realm_Builder0.setNtlmHost("{} {}");
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      realm0.isUsePreemptiveAuth();
      realm_Builder1.parseProxyAuthenticateHeader("Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}");
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setOpaque("'W=g:3Bw<6A=WP2P");
      Realm.Builder realm_Builder3 = realm_Builder2.setAlgorithm("'W=g:3Bw<6A=WP2P");
      Realm.Builder realm_Builder4 = realm_Builder3.parseProxyAuthenticateHeader("'W=g:3Bw<6A=WP2P");
      Realm realm0 = realm_Builder4.build();
      realm0.isUseCanonicalHostname();
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce(", nonce='");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain(", customLoginConfig=");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder3 = realm_Builder2.setCharset(charset0);
      realm_Builder3.parseWWWAuthenticateHeader(", nonce='");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(false);
      realm_Builder4.parseProxyAuthenticateHeader(", nonce='");
      Realm realm0 = realm_Builder4.build();
      realm0.getRealmName();
      realm_Builder2.setNtlmHost((String) null);
      realm0.getCharset();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setAlgorithm(")");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader(")");
      Realm.Builder realm_Builder3 = realm_Builder2.setUri((Uri) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig(hashMap0);
      Realm realm0 = realm_Builder4.build();
      realm0.getPassword();
      realm0.isUsePreemptiveAuth();
      realm0.getOpaque();
      hashMap0.put(")", "");
      realm_Builder3.setOmitQuery(false);
      realm0.toString();
      realm_Builder1.setNc("");
      realm0.getNc();
      realm0.getRealmName();
      realm0.getCnonce();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      realm0.getCustomLoginConfig();
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost("d41d8cd98f00b204e9800998ecf8427e");
      realm_Builder1.setMethodName("d41d8cd98f00b204e9800998ecf8427e");
      realm_Builder0.setServicePrincipalName("");
      Realm.Builder realm_Builder3 = realm_Builder0.setNc("");
      realm_Builder2.parseProxyAuthenticateHeader("PV*");
      Realm realm0 = realm_Builder3.build();
      realm0.getServicePrincipalName();
      realm0.getServicePrincipalName();
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse("");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder3 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder4 = realm_Builder2.setRealmName("A!&^cfXnzwOo_9nZs");
      realm_Builder4.setNtlmDomain("A!&^cfXnzwOo_9nZs");
      realm_Builder0.setQop("A!&^cfXnzwOo_9nZs");
      Realm.Builder realm_Builder5 = realm_Builder4.setOmitQuery(false);
      Realm.Builder realm_Builder6 = realm_Builder1.setQop("jiRx8f$K-#/Tt$LtB ");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("", biFunction0);
      realm_Builder5.setAlgorithm("NTLM");
      Realm.Builder realm_Builder7 = realm_Builder1.setLoginContextName("jiRx8f$K-#/Tt$LtB ");
      realm_Builder6.setQop("scheme");
      Realm realm0 = realm_Builder5.build();
      realm0.getQop();
      Realm.AuthScheme.values();
      realm0.getResponse();
      realm0.toString();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder6.build();
      realm_Builder5.setCharset((Charset) null);
      realm_Builder3.setUseCanonicalHostname(true);
      realm_Builder7.setUseAbsoluteURI(false);
      realm0.getNtlmHost();
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder2 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder3 = realm_Builder2.setAlgorithm(", nonce='");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder3.setNtlmHost("");
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName("'");
      realm_Builder4.setMethodName("");
      Realm realm0 = realm_Builder4.build();
      realm0.getNtlmHost();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      realm_Builder0.setLoginContextName((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder3 = realm_Builder2.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName("");
      Realm realm0 = realm_Builder4.build();
      realm0.getOpaque();
      realm0.getNtlmDomain();
      realm0.getLoginContextName();
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader(")%Cm*q@g7;*j");
      Realm.Builder realm_Builder2 = realm_Builder1.setRealmName(")%Cm*q@g7;*j");
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse(")%Cm*q@g7;*j");
      Realm realm0 = realm_Builder0.build();
      realm0.getCustomLoginConfig();
      realm_Builder3.setMethodName("[*&nYy");
      realm_Builder2.setRealmName((String) null);
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      Realm.Builder realm_Builder4 = realm_Builder3.parseProxyAuthenticateHeader("");
      realm_Builder4.setResponse(")%Cm*q@g7;*j");
      realm0.getLoginContextName();
      realm_Builder1.setResponse("PHgWY+:`U#Fu");
      realm0.isUsePreemptiveAuth();
      realm0.isOmitQuery();
      realm0.getRealmName();
      realm0.getOpaque();
      realm_Builder2.setAlgorithm(", opaque='");
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      realm_Builder0.setNonce(" '");
      realm_Builder0.setRealmName(" '");
      Realm realm0 = realm_Builder0.build();
      realm_Builder0.setUsePreemptiveAuth(false);
      realm0.toString();
      realm_Builder1.setRealmName("-EaRwAvBi{");
      realm_Builder1.setResponse("V9*l0@,mQwiO");
      realm0.toString();
      realm0.toString();
      realm0.toString();
      realm0.getRealmName();
      realm0.getPassword();
      realm0.isUsePreemptiveAuth();
      realm_Builder1.setOmitQuery(false);
      realm0.toString();
      realm_Builder0.setAlgorithm("Realm{principal='null', password='null', scheme=KERBEROS, realmName=' '', nonce=' '', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='a13e6ed2f3eb10c38c507ec50dba54b3', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}");
      realm_Builder1.setNonce("#");
      realm0.getNtlmHost();
      realm0.getCnonce();
      realm0.getAlgorithm();
      Realm.AuthScheme.values();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("Zty");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("Zty");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("Zty");
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig((Map<String, String>) null);
      realm_Builder4.setServicePrincipalName("Zty");
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getServicePrincipalName();
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setOpaque("om/>FzeK 7mSM:%XGG");
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmDomain(" could not be parsed into a proper Uri, missing scheme");
      realm_Builder1.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder0.setUseCanonicalHostname(false);
      realm_Builder1.parseProxyAuthenticateHeader("");
      realm_Builder2.setAlgorithm("");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.getCustomLoginConfig();
      realm0.getLoginContextName();
      realm_Builder2.setServicePrincipalName("");
      realm0.getAlgorithm();
      realm_Builder0.setNonce("luh2ZX.");
      realm0.getPrincipal();
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      realm_Builder0.setAlgorithm(",");
      realm_Builder1.parseWWWAuthenticateHeader(",");
      Realm realm0 = realm_Builder1.build();
      realm0.toString();
      realm0.toString();
      realm0.toString();
      Realm realm1 = realm_Builder0.build();
      realm0.toString();
      realm0.toString();
      realm1.getUri();
      realm0.toString();
      realm_Builder1.setUri((Uri) null);
      realm0.getUri();
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("https");
      Charset charset0 = realm0.getCharset();
      realm_Builder0.setCharset(charset0);
      realm1.toString();
      realm_Builder2.build();
      Realm.AuthScheme.values();
      realm0.getResponse();
      realm0.getLoginContextName();
      realm1.getNc();
      Realm.AuthScheme.values();
      realm1.getNtlmDomain();
      realm_Builder2.setNc("://");
      realm_Builder1.setServicePrincipalName("ws");
      realm1.isOmitQuery();
      realm_Builder1.parseProxyAuthenticateHeader("wss");
      realm0.getOpaque();
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("#:p\"a0k'fb\u0005U", "#:p\"a0k'fb\u0005U");
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque("93'\"S;");
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse("93'\"S;");
      Uri uri0 = new Uri("93'\"S;", "", ":>", (-1385), "93'\"S;", "", "");
      Uri uri1 = uri0.withNewQuery("");
      realm_Builder2.setUri(uri1);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder3.setScheme(realm_AuthScheme0);
      realm_Builder3.setUseAbsoluteURI(true);
      Realm realm0 = realm_Builder3.build();
      realm_Builder0.setScheme(realm_AuthScheme0);
      realm0.getPassword();
      realm0.toString();
      realm_Builder0.setAlgorithm("~)Yv)X$wT?MXZDJ9H");
      Realm.Builder realm_Builder4 = realm_Builder1.setQop("");
      realm_Builder4.setOmitQuery(true);
      realm0.getQop();
      realm0.getScheme();
      realm_Builder4.setUseAbsoluteURI(true);
      realm0.getQop();
      realm0.getOpaque();
      realm0.isUseAbsoluteURI();
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, "TxM>:Q");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      Realm.Builder realm_Builder4 = realm_Builder3.setRealmName("");
      Realm.Builder realm_Builder5 = realm_Builder4.setNtlmDomain("");
      realm_Builder5.parseProxyAuthenticateHeader("opaque");
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(", charset=", "{");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse(":");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder3 = realm_Builder2.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setAlgorithm("");
      Realm realm0 = realm_Builder4.build();
      realm0.isUsePreemptiveAuth();
      realm_Builder0.setUseAbsoluteURI(true);
      realm_Builder3.setLoginContextName("d>eZ8/");
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque("NTLM");
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName("7JSvi2D)2");
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("NTLM");
      Realm realm0 = realm_Builder3.build();
      realm0.getServicePrincipalName();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("auth-int");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.getQop();
      realm_Builder1.parseWWWAuthenticateHeader("Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}");
      Realm.AuthScheme.values();
      realm0.toString();
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName("I(TC(D=tW{");
      realm0.isUseAbsoluteURI();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      realm_Builder2.setScheme(realm_AuthScheme0);
      realm_Builder1.setNc("auth-int");
      realm0.getCharset();
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("cc)u|VWnU@Cxh|R,Z):");
      Realm realm0 = realm_Builder1.build();
      realm0.getResponse();
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader(":");
      Realm realm0 = realm_Builder1.build();
      Charset charset0 = realm0.getCharset();
      Realm.Builder realm_Builder3 = realm_Builder0.setCharset(charset0);
      realm0.toString();
      Realm.Builder realm_Builder4 = realm_Builder2.setRealmName(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      Realm.Builder realm_Builder5 = realm_Builder4.setNtlmDomain(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      realm_Builder4.setNonce(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      realm_Builder5.setUseCanonicalHostname(true);
      Realm realm1 = realm_Builder5.build();
      realm1.toString();
      realm1.getCharset();
      realm_Builder3.setCharset(charset0);
      realm0.getNonce();
      realm_Builder1.parseProxyAuthenticateHeader("(f?D9");
      realm1.getNtlmDomain();
      realm1.getAlgorithm();
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("R kAvp:o)4O[A,#){", "omV{jn7");
      Realm.Builder realm_Builder1 = realm_Builder0.setMethodName("R kAvp:o)4O[A,#){");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder2 = realm_Builder1.setCharset(charset0);
      charset0.aliases();
      realm_Builder1.parseProxyAuthenticateHeader("\u0010");
      realm_Builder2.setLoginContextName("R kAvp:o)4O[A,#){");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder4 = realm_Builder3.setNtlmHost("");
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset0.decode(byteBuffer0);
      Realm realm0 = realm_Builder4.build();
      realm_Builder4.setNtlmHost("");
      realm0.toString();
      charset0.aliases();
      realm0.getLoginContextName();
      realm0.getQop();
      realm_Builder0.parseProxyAuthenticateHeader("omV{jn7");
      Realm.AuthScheme.values();
      Realm.AuthScheme.values();
      realm0.getScheme();
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(", qop='", ", qop='");
      Realm.Builder realm_Builder1 = realm_Builder0.setAlgorithm(", qop='");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("/m&wrzzDpwjYr-");
      Realm.Builder realm_Builder3 = realm_Builder2.setUseAbsoluteURI(false);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName("d$Tk@1D;");
      Realm realm0 = realm_Builder4.build();
      realm0.getNtlmDomain();
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost("1g%-Vl3*");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("org.asynchttpclient.uri.Uri");
      realm_Builder2.parseWWWAuthenticateHeader("1g%-Vl3*");
      Realm realm0 = realm_Builder3.build();
      realm0.getAlgorithm();
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse("/\"Lk");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader("@X");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("zx]4esJIi8=.");
      Realm realm0 = realm_Builder3.build();
      realm0.getLoginContextName();
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmHost("");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("q");
      Realm.Builder realm_Builder4 = realm_Builder3.setOmitQuery(false);
      Realm realm0 = realm_Builder4.build();
      realm0.getScheme();
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "'frfy}vV@anN-jUh");
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("I7sux,>{~i\"C#ssDV");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("");
      Realm.Builder realm_Builder4 = realm_Builder2.setOpaque("b of");
      Realm.Builder realm_Builder5 = realm_Builder3.setNc("3tys\"m/g.~");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder5.build();
      realm0.getOpaque();
      realm0.isOmitQuery();
      realm_Builder4.parseProxyAuthenticateHeader("");
      realm0.getPrincipal();
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setServicePrincipalName("");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("");
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName("");
      Realm.Builder realm_Builder4 = realm_Builder1.setResponse("");
      Realm.Builder realm_Builder5 = realm_Builder3.parseProxyAuthenticateHeader("o1/h");
      realm_Builder3.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder6 = realm_Builder5.setUseCanonicalHostname(false);
      realm_Builder6.setAlgorithm("QZj\"@aM1M($._KOuxB");
      realm_Builder4.setOpaque("");
      Realm realm0 = realm_Builder4.build();
      realm0.getPassword();
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder1.setRealmName("3#'g 8P}Eb7mxS?nc");
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("");
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.isOmitQuery();
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader((String) null);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName("fbCS.HHdJ");
      Realm.Builder realm_Builder4 = realm_Builder3.setServicePrincipalName("fbCS.HHdJ");
      Realm realm0 = realm_Builder4.build();
      realm0.getPrincipal();
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("auth-int", "auth-int");
      Realm.Builder realm_Builder1 = realm_Builder0.setLoginContextName("");
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("auth-int");
      Realm.Builder realm_Builder4 = realm_Builder3.setNtlmDomain("");
      realm_Builder4.setOmitQuery(false);
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("");
      realm_Builder2.setNonce("{kJ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder2.setCustomLoginConfig(hashMap0);
      realm_Builder1.setNonce("");
      Realm realm0 = realm_Builder1.build();
      realm0.getCustomLoginConfig();
      realm0.toString();
      realm0.getRealmName();
      realm0.getQop();
      Realm.AuthScheme.values();
      realm0.getNonce();
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse("/../");
      realm_Builder1.setNtlmDomain("qz`Zk\">oj}9ZV");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce("/T`ku");
      realm_Builder4.setNtlmDomain((String) null);
      realm_Builder2.setCharset((Charset) null);
      realm_Builder4.setRealmName("`'\"mO>");
      Realm realm0 = realm_Builder2.build();
      realm0.toString();
      realm_Builder0.setCharset((Charset) null);
      realm_Builder3.setNtlmDomain((String) null);
      Realm realm1 = realm_Builder4.build();
      realm1.toString();
      realm_Builder3.setUseAbsoluteURI(true);
      realm1.getCnonce();
      realm1.getUri();
      realm_Builder3.setMethodName("auth-int");
      realm1.getCharset();
      realm1.getCharset();
      realm1.getCnonce();
      realm1.getNc();
      Realm.AuthScheme.values();
      realm1.getNc();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf("c8fe083cd113415405a6a151abd4aaf5");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.asynchttpclient.Realm.AuthScheme.c8fe083cd113415405a6a151abd4aaf5
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("n}1onC\"IH&W+dB+`", "n}1onC\"IH&W+dB+`");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("n}1onC\"IH&W+dB+`");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.setServicePrincipalName("");
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(true);
      realm_Builder4.setNonce("n}1onC\"IH&W+dB+`");
      Realm.Builder realm_Builder5 = realm_Builder4.setUseCanonicalHostname(true);
      Realm realm0 = realm_Builder4.build();
      realm0.getCnonce();
      Realm.AuthScheme.values();
      realm_Builder0.setMethodName("");
      realm_Builder5.setNonce("");
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digest algorithm not supported: ");
      realm_Builder3.setNonce("////");
      Charset.defaultCharset();
      Uri uri0 = new Uri("'null'", "Digest algorithm not supported: ", "////", (-1436), "scheme", "auth-int", "PathWatcher must be stopped before reset.");
      Uri uri1 = uri0.withNewScheme("////");
      realm_Builder3.setQop("iO Dec,si-&Wiiek");
      Uri uri2 = uri1.withNewQuery("auth-int");
      realm_Builder3.setUri(uri2);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Digest qop not supported: iO Dec,si-&Wiiek
         //
         verifyException("org.asynchttpclient.Realm$Builder", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digest algorithm not supported: ");
      realm_Builder3.setNonce("////");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri("'null'", "Digest algorithm not supported: ", "////", (-1436), "scheme", "////", "PathWatcher must be stopped before reset.");
      uri0.withNewScheme("////");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder4.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("GET", "Realm{principal='");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(false);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("Realm{principal='");
      Realm realm0 = realm_Builder3.build();
      realm0.getCustomLoginConfig();
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      realm_Builder1.setMethodName("");
      Realm realm0 = realm_Builder1.build();
      realm0.getQop();
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("dN)?4QqQE u>Ny(b");
      Realm realm0 = realm_Builder1.build();
      realm0.getNonce();
      realm0.getNtlmHost();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder0.setScheme(realm_AuthScheme0);
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("f\"kZ%N%an'Cqtk");
      Realm.Builder realm_Builder2 = realm_Builder1.setNc("f\"kZ%N%an'Cqtk");
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader(" 0a");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce("}zcU7+_a0gN");
      Realm realm0 = realm_Builder4.build();
      realm0.getRealmName();
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNc((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.isUseAbsoluteURI();
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("Yv,L>OPjnqxVQaTY-Q");
      Realm.Builder realm_Builder2 = realm_Builder1.setUseAbsoluteURI(true);
      realm_Builder2.setServicePrincipalName("Yv,L>OPjnqxVQaTY-Q");
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setNtlmHost("");
      // Undeclared exception!
      try { 
        realm_Builder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("W$X,$ox!X", "W$X,$ox!X");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("W$X,$ox!X");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("'_:,4wgy*,nDZ<");
      realm_Builder2.setUseCanonicalHostname(true);
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("A", "A");
      realm_Builder0.parseProxyAuthenticateHeader("A");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.toString();
      realm_Builder0.parseProxyAuthenticateHeader(", useCanonicalHostname=");
      realm0.getOpaque();
      realm0.getPassword();
      realm0.getUri();
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("starting {}", "starting {}");
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse("starting {}");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder2 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder4 = realm_Builder3.setAlgorithm("qop");
      Realm realm0 = realm_Builder4.build();
      realm0.getCnonce();
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("");
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig((Map<String, String>) null);
      Realm realm0 = realm_Builder4.build();
      realm0.getNc();
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder1.build();
      realm0.getCharset();
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("d5g", "d5g");
      // Undeclared exception!
      try { 
        realm_Builder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digest algorithm not supported: ");
      realm_Builder3.setNonce("////");
      Charset.defaultCharset();
      Uri uri0 = new Uri("'null'", "Digest algorithm not supported: ", "////", (-1436), "scheme", "auth-int", "PathWatcher must be stopped before reset.");
      realm_Builder3.setQop("https");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Digest qop not supported: https
         //
         verifyException("org.asynchttpclient.Realm$Builder", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder("GQDuKNzIXhY<\"", "GQDuKNzIXhY<\"");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("GQDuKNzIXhY<\"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder3 = realm_Builder2.setScheme(realm_AuthScheme0);
      realm_Builder3.setNc("GQDuKNzIXhY<\"");
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName("GQDuKNzIXhY<\"");
      realm_Builder4.setNonce("GQDuKNzIXhY<\"");
      realm_Builder0.setOpaque("GQDuKNzIXhY<\"");
      Realm.Builder realm_Builder5 = realm_Builder3.setNonce("GQDuKNzIXhY<\"");
      Realm realm0 = realm_Builder4.build();
      realm_Builder0.setNonce("NTLM");
      realm0.toString();
      realm0.getNc();
      realm_Builder1.setUseCanonicalHostname(false);
      realm0.toString();
      realm_Builder3.parseProxyAuthenticateHeader("scheme");
      realm_Builder2.setServicePrincipalName("wA!70+h");
      realm0.getScheme();
      realm0.getPrincipal();
      realm0.getNtlmDomain();
      Realm.Builder realm_Builder6 = realm_Builder5.setResponse("GQDuKNzIXhY<\"");
      Realm.Builder realm_Builder7 = realm_Builder0.parseWWWAuthenticateHeader("NTLM");
      realm0.isUseCanonicalHostname();
      realm_Builder6.parseProxyAuthenticateHeader("NTLM");
      Realm realm1 = realm_Builder7.build();
      realm1.toString();
      realm_Builder1.parseProxyAuthenticateHeader("Realm{principal='GQDuKNzIXhY<\"', password='GQDuKNzIXhY<\"', scheme=BASIC, realmName='null', nonce='GQDuKNzIXhY<\"', algorithm='null', response='GQDuKNzIXhY<\"', opaque='null', qop='null', nc='GQDuKNzIXhY<\"', cnonce='6da1992a2b8d1ed0d3f9eddc660f08a4', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='GQDuKNzIXhY<\"'}");
      realm_Builder5.parseWWWAuthenticateHeader("Realm{principal='GQDuKNzIXhY<\"', password='GQDuKNzIXhY<\"', scheme=BASIC, realmName='null', nonce='GQDuKNzIXhY<\"', algorithm='null', response='GQDuKNzIXhY<\"', opaque='null', qop='null', nc='GQDuKNzIXhY<\"', cnonce='6da1992a2b8d1ed0d3f9eddc660f08a4', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='GQDuKNzIXhY<\"'}");
      realm0.getCharset();
      realm1.toString();
      realm0.getUri();
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setServicePrincipalName("");
      Realm.Builder realm_Builder2 = new Realm.Builder("", "");
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmDomain("MD5");
      Realm.Builder realm_Builder4 = realm_Builder1.setResponse("");
      Realm.Builder realm_Builder5 = realm_Builder3.parseProxyAuthenticateHeader("o1/h");
      realm_Builder3.setUseCanonicalHostname(true);
      Realm realm0 = realm_Builder5.build();
      realm0.getCustomLoginConfig();
      realm_Builder5.setCustomLoginConfig((Map<String, String>) null);
      Realm.Builder realm_Builder6 = realm_Builder5.setUseCanonicalHostname(false);
      realm_Builder6.setAlgorithm("MD5");
      realm_Builder4.setOpaque("");
      realm0.getLoginContextName();
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setNonce("org.asynchttpclient.uri.Uri");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("p(T");
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName("p(T");
      realm_Builder2.setNonce("#KBjlK285nv");
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName("#KBjlK285nv");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      Realm.AuthScheme realm_AuthScheme1 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder4 = realm_Builder3.setScheme(realm_AuthScheme1);
      realm_Builder1.setLoginContextName("p(T");
      Realm realm0 = realm_Builder4.build();
      realm0.getResponse();
      Realm.AuthScheme.values();
      realm0.getOpaque();
      realm0.getNonce();
      Realm.Builder realm_Builder5 = realm_Builder0.setMethodName("algorithm");
      realm0.getCustomLoginConfig();
      realm0.toString();
      realm_Builder0.parseWWWAuthenticateHeader("#KBjlK285nv");
      realm_Builder5.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder6 = realm_Builder1.setLoginContextName("p(T");
      realm_Builder6.setLoginContextName("");
      realm0.isUseAbsoluteURI();
      realm_Builder6.setNtlmDomain("P 4MDy");
      realm0.getAlgorithm();
      realm_Builder6.build();
      realm0.getPassword();
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digest algorithm not supported: ");
      realm_Builder3.setNonce("////");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri("'null&'", "Digest algorithm not supported: ", "////", (-1436), "scheme", "////", "PathWatcher must be stopped before reset.");
      uri0.withNewScheme("////");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder4.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      realm_Builder1.parseWWWAuthenticateHeader("Digest algorithm not supported: ");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("Digest algorithm not supported: ");
      realm_Builder3.setNonce("////");
      Charset charset0 = Charset.defaultCharset();
      realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri("'null'", "Digest algorithm not supported: ", "////", (-1436), "'null'", "auth-int", "PathWatcher must be stopped before reset.");
      Uri uri1 = uri0.withNewScheme("////");
      Uri uri2 = uri1.withNewQuery("auth-int");
      realm_Builder3.setUri(uri2);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Digest algorithm not supported: not supported: 
         //
         verifyException("org.asynchttpclient.Realm$Builder", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce(", nonce='");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder2 = realm_Builder1.setCharset(charset0);
      realm_Builder2.setNtlmDomain(", nonce='");
      realm_Builder2.parseProxyAuthenticateHeader(", nonce='");
      Realm realm0 = realm_Builder2.build();
      realm0.getRealmName();
      realm_Builder0.setNtlmHost((String) null);
      realm0.getCharset();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("RkAvp:o)4O[A,#){", "omV{jn7");
      Realm.Builder realm_Builder1 = realm_Builder0.setMethodName("RkAvp:o)4O[A,#){");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("omV{jn7");
      Realm.Builder realm_Builder3 = realm_Builder0.setLoginContextName("RkAvp:o)4O[A,#){");
      realm_Builder1.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder4 = realm_Builder0.parseProxyAuthenticateHeader("omV{jn7");
      Realm realm0 = realm_Builder3.build();
      realm0.getCustomLoginConfig();
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      realm_Builder1.setQop("RkAvp:o)4O[A,#){");
      Realm realm1 = realm_Builder2.build();
      realm_Builder4.setNtlmHost("omV{jn7");
      realm1.toString();
      realm1.getQop();
      Realm.AuthScheme.values();
      realm1.getScheme();
      realm1.getQop();
      realm1.getUri();
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setLoginContextName("d");
      Realm.Builder realm_Builder2 = realm_Builder0.setNc((String) null);
      Realm.Builder realm_Builder3 = realm_Builder0.setLoginContextName("d");
      realm_Builder3.parseProxyAuthenticateHeader("d");
      Realm realm0 = realm_Builder2.build();
      realm0.getCustomLoginConfig();
      Realm.Builder realm_Builder4 = realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      Realm realm1 = realm_Builder1.build();
      realm1.toString();
      realm1.isUseAbsoluteURI();
      Realm.Builder realm_Builder5 = realm_Builder2.setNc("Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}");
      realm_Builder1.parseWWWAuthenticateHeader("Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}");
      realm1.getResponse();
      realm_Builder0.setLoginContextName((String) null);
      Realm.AuthScheme.values();
      realm1.isUsePreemptiveAuth();
      realm0.getServicePrincipalName();
      realm_Builder0.setServicePrincipalName("Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}");
      realm1.toString();
      realm_Builder4.setResponse("Om(lo,exB*R");
      realm_Builder2.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder6 = realm_Builder4.setUseAbsoluteURI(false);
      realm0.getCnonce();
      realm_Builder5.setMethodName((String) null);
      realm_Builder6.setNc("-o");
      realm0.isOmitQuery();
      realm_Builder3.setNonce("");
      realm1.toString();
      String string0 = realm1.toString();
      ;
}
