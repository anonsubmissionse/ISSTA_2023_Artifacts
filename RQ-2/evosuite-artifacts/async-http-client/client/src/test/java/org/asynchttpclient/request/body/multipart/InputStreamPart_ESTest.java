/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:51:37 GMT 2022
 */

package org.asynchttpclient.request.body.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import org.asynchttpclient.request.body.multipart.InputStreamPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputStreamPart_ESTest extends InputStreamPart_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart("ENTER", pushbackInputStream0, "ENTER", (-1L), "ENTER", charset0, "", "ENTER");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart((String) null, (InputStream) null, "", 0L, (String) null, charset0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("", (InputStream) null, "=Px[P!/K/", 0L, "=Px[P!/K/", charset0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("The prefix must not be null", (InputStream) null, "~9JmQiF?77ZZY]", 0L, "inputStream");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("!R%Bzc^f.n]t>UzU", (InputStream) null, "!R%Bzc^f.n]t>UzU", 1256L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("$VALUES", (InputStream) null, "Bp");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1327);
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, pipedInputStream0, (String) null, 1327, (String) null, (Charset) null, "");
      long long0 = inputStreamPart0.getContentLength();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("7S6nk-2RbjMe", mockFileInputStream0, "A]vPDjaVx{", 0L, "A]vPDjaVx{");
      long long0 = inputStreamPart0.getContentLength();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pipedInputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("xnpb<mXf7\"NIxBFwE", sequenceInputStream0, "xnpb<mXf7\"NIxBFwE", 2429L, "xnpb<mXf7\"NIxBFwE", (Charset) null);
      assertEquals(0, inputStreamPart0.getContentLength());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("", (InputStream) null, "org.eclipse.jetty.util.RegexSet", 1000L, "", (Charset) null, "@iQY0?", "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamPart inputStreamPart0 = new InputStreamPart("", inputStream0, "L?Ul<'5*/V@");
      long long0 = inputStreamPart0.getContentLength();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("", pipedInputStream0, "W'rn9&W%g.1!#sT", 0L);
      InputStream inputStream0 = inputStreamPart0.getInputStream();
      ;
}
}
