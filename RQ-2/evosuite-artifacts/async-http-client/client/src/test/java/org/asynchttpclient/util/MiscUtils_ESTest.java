/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:29:23 GMT 2022
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import org.asynchttpclient.util.MiscUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MiscUtils_ESTest extends MiscUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = MiscUtils.withDefault((String) null, "@ZnNkMiugh~AA");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(62);
      Integer integer1 = new Integer(0);
      Integer integer2 = MiscUtils.withDefault(integer0, integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "ZtrvX>><Vw~");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MiscUtils.closeSilently(mockFileWriter0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MiscUtils.getCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.MiscUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        MiscUtils.closeSilently(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty("org.asynchttpclient.util.MiscUtils");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("^vq0oZYP~Z%W w");
      MockThrowable mockThrowable1 = new MockThrowable("{vg/O.7W&d|dd>K1", mockThrowable0);
      Throwable throwable0 = MiscUtils.getCause(mockThrowable1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("^vq0oZYP~Z%W w");
      Throwable throwable0 = MiscUtils.getCause(mockThrowable0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "ZtrvX>><Vw~");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MiscUtils.closeSilently(mockFileWriter0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MiscUtils.closeSilently((Closeable) null);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = MiscUtils.withDefault((Object) null, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedHashSet0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedHashSet0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((byte[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = MiscUtils.isNonEmpty(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = MiscUtils.isNonEmpty(objectArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Object[]) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty("test({}) -> [depth {}>{}]");
      assertTrue(boolean0);
}
}
