/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:48:58 GMT 2022
 */

package org.asynchttpclient.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Semaphore;
import org.asynchttpclient.AsyncCompletionHandlerBase;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.filter.ReleasePermitOnComplete;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReleasePermitOnComplete_ESTest extends ReleasePermitOnComplete_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Semaphore semaphore0 = new Semaphore((-1286498783));
      // Undeclared exception!
      try { 
        ReleasePermitOnComplete.wrap((AsyncHandler<AsyncCompletionHandlerBase>) null, semaphore0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.filter.ReleasePermitOnComplete", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReleasePermitOnComplete releasePermitOnComplete0 = new ReleasePermitOnComplete();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncHandler<AsyncCompletionHandlerBase> asyncHandler0 = (AsyncHandler<AsyncCompletionHandlerBase>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler0).toString();
      Semaphore semaphore0 = new Semaphore((-1286498783));
      AsyncHandler<AsyncCompletionHandlerBase> asyncHandler1 = ReleasePermitOnComplete.wrap((AsyncHandler<AsyncCompletionHandlerBase>) asyncHandler0, semaphore0);
      ;
}
}
