 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile("9W%J0tMgd-3\".", "UD-Fq?xC,.&Gs%B9;ou");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("z", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("z").when(filePart0).getContentId();
      doReturn("axU6c)E0`wYw").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("axU6c)E0`wYw", "").when(filePart0).getDispositionType();
      doReturn("axU6c)E0`wYw", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("axU6c)E0`wYw").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      fileMultipartPart0.transferContentTo(socketChannel0);
      assertTrue(fileMultipartPart0.isTargetSlow());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile("9W%J0tMgd-3\".", "UD-Fq?xC,.&Gs%B9;ou");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("z", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("z").when(filePart0).getContentId();
      doReturn("axU6c)E0`wYw").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("axU6c)E0`wYw", "").when(filePart0).getDispositionType();
      doReturn("axU6c)E0`wYw", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("axU6c)E0`wYw").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile("9W%J0tMgd-3\".", "UD-Fq?xC,.&Gs%B9;ou");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("z", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("z").when(filePart0).getContentId();
      doReturn("axU6c)E0`wYw").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("axU6c)E0`wYw", "").when(filePart0).getDispositionType();
      doReturn("axU6c)E0`wYw", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("axU6c)E0`wYw").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(64L).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("r", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("r").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "9W%J0tMgd-3\".").when(filePart0).getDispositionType();
      doReturn("", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("z", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("z").when(filePart0).getContentId();
      doReturn("axU6c)E0`wYw").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("axU6c)E0`wYw", "").when(filePart0).getDispositionType();
      doReturn("axU6c)E0`wYw", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("axU6c)E0`wYw").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      File file0 = MockFile.createTempFile("|5bK.ev.b", (String) null);
      FilePart filePart0 = new FilePart("|5bK.ev.b", file0, ",`L");
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      } catch(NonWritableChannelException e) {
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "recordLeakNonRefCountingOperation").when(filePart0).getFileName();
      doReturn(mockFile0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "oqnr{xCOl@b").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-32);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      PartVisitor partVisitor0 = mock(PartVisitor.class, new ViolatedAssumptionAnswer());
      fileMultipartPart0.visitStart(partVisitor0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(0L).when(file0).length();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("=U]\"", "Qu?Y&$#c(w:o$;r~th").when(filePart0).getFileName();
      doReturn(file0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0).when(filePart0).getCharset();
      doReturn("=U]\"").when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn("=U]\"", "XjwD+Rya+[UW~'=VA`S").when(filePart0).getName();
      doReturn("v$+ b").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(writableByteChannel0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      mockFile0.toURL();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(filePart0).getFileName();
      doReturn(mockFile0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "oqnr{xCOl@b").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      Charset.defaultCharset();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/async-http-client/client");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(datagramChannel0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(5234L).when(file0).length();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      MockFile mockFile0 = new MockFile("XjwD+Rya+[UW~'=VA`S");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("=U]\"", "Qu?Y&$#c(w:o$;r~th").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0).when(filePart0).getCharset();
      doReturn("=U]\"").when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn("=U]\"", "XjwD+Rya+[UW~'=VA`S").when(filePart0).getName();
      doReturn("v$+ b").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      try { 
        fileMultipartPart0.transferContentTo(writableByteChannel0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentId();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getDispositionType();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getName();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[12];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      unpooledUnsafeDirectByteBuf0.release();
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("aJ$[W.ZFrU", "J<N");
      FilePart filePart0 = new FilePart("aJ$[W.ZFrU", file0, "-Dio.netty.noResourceLeakDetection: {}", (Charset) null, "H- W\"Ln9");
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.ReadOnlyByteBuf", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "recordLeakNonRefCountingOperation").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "oqnr{xCOl@b").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/async-http-client/client");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "recordLeakNonRefCountingOperation").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "oqnr{xCOl@b").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      mockFile0.delete();
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filePart0).getFileName();
      doReturn((File) null).when(filePart0).getFile();
      doReturn((String) null).when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn((String) null).when(filePart0).getName();
      doReturn((String) null).when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.FileMultipartPart", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("|5bK.ev.b", (String) null);
      FilePart filePart0 = new FilePart("|5bK.ev.b", file0, ",`L");
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentId();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getDispositionType();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getName();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentId();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getDispositionType();
      doReturn("IZ'<Q6Y<;{*j[Q", "IZ'<Q6Y<;{*j[Q").when(filePart0).getName();
      doReturn("IZ'<Q6Y<;{*j[Q").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "recordLeakNonRefCountingOperation").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "oqnr{xCOl@b").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      fileMultipartPart0.transferContentTo(byteBuf0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ArrayList<ByteBuf> arrayList0 = new ArrayList<ByteBuf>();
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, (byte)34, arrayList0);
      try { 
        fileMultipartPart0.transferContentTo(compositeByteBuf0);
        fail("Expecting exception: ClosedChannelException");
      } catch(ClosedChannelException e) {
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      MockFile mockFile0 = new MockFile("q{YGe(5@A", "q{YGe(5@A");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("q{YGe(5@A").when(filePart0).getContentId();
      doReturn("q{YGe(5@A").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getDispositionType();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getName();
      doReturn("q{YGe(5@A").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
      assertTrue(fileMultipartPart0.isTargetSlow());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      MockFile mockFile0 = new MockFile("q{YGe(5@A", "q{YGe(5@A");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("q{YGe(5@A").when(filePart0).getContentId();
      doReturn("q{YGe(5@A").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getDispositionType();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getName();
      doReturn("q{YGe(5@A").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn("").when(file0).getAbsolutePath();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", "9W%J0tMgd-3\".").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("", "").when(filePart0).getDispositionType();
      doReturn("", "9`%GfuyIrs<)?CbX").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // File part can't be read: 
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.FileMultipartPart", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("lHe4,K", "lHe4,K");
      FilePart filePart0 = new FilePart("lHe4,K", file0);
      byte[] byteArray0 = new byte[1];
      file0.delete();
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // File part doesn't exist: /tmp/lHe4,K0lHe4,K
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.FileMultipartPart", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("q{YGe(5@A").when(filePart0).getContentId();
      doReturn("q{YGe(5@A").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getDispositionType();
      doReturn("q{YGe(5@A", "q{YGe(5@A").when(filePart0).getName();
      doReturn("q{YGe(5@A").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      fileMultipartPart0.close();
      ;
}
