/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 14:57:02 GMT 2022
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Uri_ESTest extends Uri_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      Uri uri1 = Uri.create(uri0, "");
      boolean boolean0 = uri1.isSameBase(uri0);
      assertTrue(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Uri uri0 = new Uri("^iy)!", "oB41B", "^iy)!", 1307, "^iy)!", "http", "8:2");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertTrue(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", 0, (String) null, ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", (-1), "wss", "wss", "wss");
      Uri uri1 = uri0.withNewQuery("ws");
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertTrue(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertFalse(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = uri0.withNewQuery("WQAu>9`f*4E");
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uRI0.toString());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      assertNotNull(uRI0.toString());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      Uri uri1 = uri0.withNewScheme("/");
      URI uRI0 = uri1.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Uri uri0 = new Uri("ro", "", "ro", 0, "", "ro", "");
      URI uRI0 = uri0.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Uri uri0 = new Uri("ro", "", "ro", 0, "", "ro", "");
      URI uRI0 = uri0.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Uri uri0 = new Uri("ro", "", "ro", 0, "", "ro", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Uri uri0 = new Uri("ro", "", "ro", 0, "", "ro", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 1, "", ":", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 1, "", ":", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uRI0.toString());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 1, "", ":", "");
      URI uRI0 = uri0.toJavaNetURI();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 1, "", ":", "");
      URI uRI0 = uri0.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      URI uRI0 = uri0.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      URI uRI0 = uri0.toJavaNetURI();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      URI uRI0 = uri0.toJavaNetURI();
      assertNotNull(uRI0.toString());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Uri uri0 = new Uri("D#2ML", "D#2ML", "D#2ML", (-2084441635), (String) null, (String) null, "D#2ML");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals(1, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      assertEquals(1, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Uri uri0 = new Uri("}s", "H:Bi22vA(pjak&KTc", "}s", 0, "ws", "", "ws");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      String string0 = uri0.getUserInfo();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertFalse(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertTrue(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Uri uri0 = new Uri("http", ":L~~Yd?", "http", 64, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool");
      Uri uri1 = Uri.create(uri0, ".qmcuAgkbxc*h5)");
      String string0 = uri1.getQuery();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Uri uri0 = new Uri("/", "/", "v", (-1448), "v", "", "/");
      String string0 = uri0.getQuery();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 24, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Uri uri0 = new Uri("S3R$ *P*VG. @JK", "", "S3R$ *P*VG. @JK", 1598, "S3R$ *P*VG. @JK", "", "");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Uri uri0 = new Uri("503$Wbn", "503$Wbn", "503$Wbn", 1626, "", "", "://");
      String string0 = uri0.getPath();
      assertEquals(1, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Uri uri0 = new Uri("org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", 0, "org.asynchttpclient.util.StringBuilderPool", "org.asynchttpclient.util.StringBuilderPool", (String) null);
      String string0 = uri0.getFragment();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertFalse(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      String string0 = uri0.getFragment();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      int int0 = uri0.getExplicitPort();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertFalse(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Uri uri0 = new Uri("https", "~N7tv<]Ic;dDA,", "~N7tv<]Ic;dDA,", 512, "https", "~N7tv<]Ic;dDA,", "");
      Uri uri1 = Uri.create(uri0, "ws");
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Uri uri0 = Uri.create("wss://kV$}!6_97rIf!O:0");
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Uri uri0 = Uri.create("r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme");
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Uri uri0 = Uri.create("dqp://(s.T:11");
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Uri uri0 = new Uri("7B:", "", "7B:", 0, "", "", "");
      // Undeclared exception!
      try { 
        uri0.withNewScheme((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Uri uri0 = new Uri("#", "#", "#", (-1651), "", "#", "");
      // Undeclared exception!
      try { 
        uri0.withNewScheme("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme((Uri) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      // Undeclared exception!
      try { 
        uri0.isSameBase((Uri) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      // Undeclared exception!
      try { 
        Uri.create(uri0, "https://http:0osZjy!{U{y\"<PIN");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"0osZjy!{U{y\"<PIN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Uri uri0 = new Uri("host", "/", "host", (-666), "/", "host", "h");
      // Undeclared exception!
      try { 
        Uri.create(uri0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("https://http:24osZjy!{U{y\"<PIN");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"24osZjy!{U{y\"<PIN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("?", "?", (String) null, 1643, (String) null, "?", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri("http", "http", "", 891, "http", "", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // empty host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toUrl();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, ":M?tkc+F/.qX", (-18), ":M?tkc+F/.qX", ":M?tkc+F/.qX", ":M?tkc+F/.qX");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Uri uri0 = new Uri("\"c.QW?bDaM1.Y.q", "", "\"c.QW?bDaM1.Y.q", 91, "\"c.QW?bDaM1.Y.q", " could not be parsed into a proper Uri, missing scheme", ";+FUY");
      Uri uri1 = uri0.withNewScheme("}vb=0*d;");
      String string0 = uri1.toUrl();
      assertEquals(1, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals(1, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      int int0 = uri0.getSchemeDefaultPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      int int0 = uri0.getExplicitPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Uri uri0 = new Uri("P", "P", "ts&(XjfO.j&", (-180), "6kx0sS~I/.M", "P", "P");
      int int0 = uri0.getExplicitPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "N:.0T,@BX\"yhm}Qw]!*");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // N:.0T,@BX\"yhm}Qw]!* could not be parsed into a proper Uri, missing host
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, "mxr\"czX8o/D:");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // mxr\"czX8o/D: could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertFalse(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Uri uri0 = new Uri("scheme", "scheme", "scheme", 0, "scheme", "", "");
      String string0 = uri0.getScheme();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertEquals(1, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      String string0 = uri0.getQuery();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      int int0 = uri0.getPort();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getHost();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Uri uri0 = new Uri(")=`P0`/xpV0^Ne", ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", 512, ")=`P0`/xpV0^Ne", " r0:5LV}Fq0,:zic@", ")=`P0`/xpV0^Ne");
      boolean boolean0 = uri0.isSecured();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.getUserInfo();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Uri uri0 = new Uri("QI#", "M", "M", (-1), "QI#", "QI#", "M");
      String string0 = uri0.getFragment();
      ;
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Uri uri0 = new Uri(":m?tkc+f/.qx", (String) null, "k{f.`m", 787, (String) null, "k{f.`m", ":m?tkc+f/.qx");
      String string0 = uri0.getPath();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Uri uri0 = new Uri(":M?[tkc+F/.qX", (String) null, ":M?[tkc+F/.qX", (-6), (String) null, ":M?[tkc+F/.qX", ":M?[tkc+F/.qX");
      Uri uri1 = uri0.withNewScheme("wss");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Uri uri0 = new Uri("https", "http", "http", 0, "#", (String) null, "http");
      Uri.validateSupportedScheme(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      Uri uri1 = uri0.withNewScheme("http");
      Uri.validateSupportedScheme(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals(0, uri1.getPort());
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Uri uri0 = new Uri("s", "s", "s", (-2761), "s", "s", "s");
      Uri uri1 = Uri.create(uri0, "s?s");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri2.getPath());
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri2.getHost());
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertFalse(uri2.isWebSocket());
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme(" qXMAI~+zRs\u0006YWHo8N");
      boolean boolean0 = uri1.equals(uri2);
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertFalse(uri2.isSecured());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri2.getPath());
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri2.getUserInfo());
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri2.getHost());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertEquals(0, uri2.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri2.getFragment());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Uri uri0 = new Uri("Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j", "Fc\r&fWvh(d0$j");
      Uri uri1 = new Uri("Fc\r&fWvh(d0$j", "ws", "Fc\r&fWvh(d0$j", 263, "Fc\r&fWvh(d0$j", "ws", "ws");
      Uri uri2 = uri0.withNewQuery("ws");
      uri2.equals(uri1);
      assertNotNull(uri2.getScheme());
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getHost());
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getFragment());
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getPath());
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getScheme());
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getQuery());
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Uri uri0 = new Uri("JO0o!W#8%|$98jzQ", (String) null, "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ", "JO0o!W#8%|$98jzQ");
      Uri uri1 = new Uri("JO0o!W#8%|$98jzQ", "ws", "JO0o!W#8%|$98jzQ", (-1075830814), "JO0o!W#8%|$98jzQ", "ws", "http");
      Uri uri2 = uri0.withNewQuery("ws");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Uri uri0 = new Uri("#", (String) null, "#", 0, (String) null, "#", "#");
      Uri uri1 = uri0.withNewQuery("#");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Uri uri0 = new Uri("ws", "ws", "ws", 1951, "ws", "ws", "ws");
      Uri uri1 = Uri.create(uri0, "ws");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getHost());
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getPath());
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertTrue(uri2.isWebSocket());
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertEquals(0, uri2.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      boolean boolean0 = uri2.equals(uri1);
      assertNotNull(uri2.getUserInfo());
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Uri uri0 = new Uri("yq", "yq", "yq", (-2236), "yq", "yq", "yq");
      Uri uri1 = Uri.create(uri0, "ws");
      uri1.equals(uri0);
      assertFalse(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZjy!{U{y\"<PIN", 0, (String) null, (String) null, ":M?tkc+F/.qX");
      Uri uri1 = Uri.create(uri0, ":");
      boolean boolean0 = uri0.equals(uri1);
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertFalse(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri1.equals(uri0);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      ;
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Uri uri0 = new Uri("#", "&uqe7KX}XQ_T0d`6d", "K2;6%]lyE3a0wy~XBs", 0, "org.asynchttpclient.uri.Uri", "#", "Z>vLBe0R?(H3`H");
      boolean boolean0 = uri0.equals("");
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      boolean boolean0 = uri0.equals((Object) null);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      uri0.equals(uri0);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri2.getScheme());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri2.getUserInfo());
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri2.getHost());
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertNotNull(uri2.getPath());
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertEquals(0, uri2.getPort());
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Uri uri0 = new Uri(" qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", (-1073741822), " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N", " qXMAI~+zRs\u0006YWHo8N");
      Uri uri1 = Uri.create(uri0, "https");
      Uri uri2 = uri1.withNewScheme("wss");
      uri2.hashCode();
      assertEquals(0, uri2.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Uri uri0 = new Uri("org.Isynchttpcliet.uriUriParser", (String) null, "org.Isynchttpcliet.uriUriParser", 1334, (String) null, "org.Isynchttpcliet.uriUriParser", "org.Isynchttpcliet.uriUriParser");
      uri0.hashCode();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Uri uri0 = new Uri("ZH", "ZH", "ZH", (-1), " could not be parsed into a proper Uri, missing scheme", "ZH", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      ;
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.getNonEmptyPath();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Uri uri0 = new Uri("lso", "lso", "lso", 106, "lso", "lso", "lso");
      Uri uri1 = new Uri("lso", "wss", "wss", 106, "https", "ws", "wss");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertTrue(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      Uri uri1 = new Uri("wss", "wss", "ws", (-4), "https", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX://osZV\">{U{y\"<PIN:-44Pt+P|-G/'V^5.Zng");
      boolean boolean0 = uri0.isSameBase(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      String string0 = uri0.toFullUrl();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      String string0 = uri0.toFullUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      String string0 = uri0.toFullUrl();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Uri uri0 = new Uri("url:", ":M?tkc+F/https", "url:", 2730, "https", "https", (String) null);
      String string0 = uri0.toFullUrl();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toFullUrl();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toFullUrl();
      ;
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toFullUrl();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Uri uri0 = new Uri("kqXah", "kqXah", "kqXah", 31, "kqXah", (String) null, "kqXah");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Uri uri0 = new Uri("NDG", "NDG", "[\"g*tk$", (-2084441645), (String) null, "~?&#IaqCK_F$]i%j_", "NDG");
      String string0 = uri0.toRelativeUrl();
      ;
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      ;
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Uri uri0 = new Uri("wss", "kV$}!6_97rIf!O", "kV$}!6_97rIf!O", 0, "", "wss", "kV$}!6_97rIf!O");
      String string0 = uri0.toBaseUrl();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      ;
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Uri uri0 = new Uri("+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", (-1), "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r", "+6 v`G4+GFhjb08r");
      String string0 = uri0.toBaseUrl();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.toUrl();
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Uri uri0 = new Uri("-{xAWr)is-%&!Y3}mjO", (String) null, "-{xAWr)is-%&!Y3}mjO", (-23), (String) null, (String) null, "-{xAWr)is-%&!Y3}mjO");
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme(uri0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI -{xAWr)is-%&!Y3}mjO://-{xAWr)is-%&!Y3}mjO:-23, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      Uri uri1 = Uri.create(uri0, "K5j");
      String string0 = uri1.toString();
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      ;
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      ;
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      ;
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Uri uri0 = new Uri("r", "r", "r", (-1), " could not be parsed into a proper Uri, missing scheme", "r", " could not be parsed into a proper Uri, missing scheme");
      String string0 = uri0.getAuthority();
      ;
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("zh:");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // zh: could not be parsed into a proper Uri, missing host
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      String string0 = uri0.getBaseUrl();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      ;
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Uri uri0 = new Uri("wss", "wss", "wss", 13, "", "wss", "wss");
      boolean boolean0 = uri0.isWebSocket();
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Uri uri0 = new Uri("VS-KYBo-jHq9V", "[K]llPlJao", "HW", 80, "syizPT$|P|", "syizPT$|P|", "VS-KYBo-jHq9V");
      try { 
        uri0.toJavaNetURI();
        fail("Expecting exception: URISyntaxException");
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 16: VS-KYBo-jHq9V://[K]llPlJao@HW:80syizPT$|P|?syizPT$|P|
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      assertEquals(1, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", (-4), "4Pt+P|-G/'V^5.Zng", "", ":M?tkc+F/.qX");
      String string0 = uri0.toBaseUrl();
      ;
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Uri uri0 = new Uri(":M?tkc+F/.qX", (String) null, "osZV\">{U{y\"<PIN", 0, "_/../", "osZV\">{U{y\"<PIN", ":M?tkc+F/.qX");
      // Undeclared exception!
      Uri.create(uri0, "https");
  }
}
