 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("boundary=ul6x#+");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("boundary=ul6x#+");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("^npw~3boundary=#");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("^npw~3boundary=#");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Uri uri0 = new Uri("r<;)05@[[Sv$HI", "charset=", "r<;)05@[[Sv$HI", 815, ")g", "r<;)05@[[Sv$HI", "!)vGZmkd*p");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getQuery());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Uri uri0 = new Uri("Ksh}\"C,L", "Ksh}\"C,L", "=]nI`!jwX-", 318, "Ksh}\"C,L", "bW", "=]nI`!jwX-");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getPath());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getScheme());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Uri uri0 = new Uri("~(|-\"&Fv^CY[", "~(|-\"&Fv^CY[", "85JB<)]b@jIjRF", (-403371614), "", " boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2", "w5");
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(", br");
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(", br");
      assertNotNull(charSequence0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams((List<Param>) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached("io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe");
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.originHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.hostHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.filterOutBrotliFromAcceptEncoding((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute("http.acharset=t=omain");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // t=omain
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1, br");
      assertNotNull(charSequence0);
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1, br");
      assertNotNull(charSequence0);
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(";");
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding(";");
      assertNotNull(charSequence0);
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, stack0.capacity());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertFalse(stack0.empty());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(stack0.isEmpty());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, stack0.size());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(charset0.isRegistered());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, byteBuffer0.position());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(byteBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(1, byteBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, byteBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(byteBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("*/*", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertFalse(stack0.empty());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(stack0.isEmpty());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertNotNull(charset0.name());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(charset0.isRegistered());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(byteBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, byteBuffer0.position());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(1, byteBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, byteBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertTrue(byteBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(0, byteBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("ISY+\"", "lift is null");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute("icharset=o;=dx");
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // o
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(" boundary=e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8, br");
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(" boundary=e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8, br");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("boundary=");
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute((String) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Charset charset0 = HttpUtils.extractContentTypeCharsetAttribute("");
      assertNotNull(charset0);
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertTrue(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getHost());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri1.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getPath());
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri1.getPort());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertFalse(uri1.isWebSocket());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getQuery());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getScheme());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertEquals(0, uri1.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertFalse(uri1.isSecured());
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getFragment());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(uri1.getUserInfo());
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Uri uri0 = new Uri("+VR4W7fw;BJo>1", "o@", "=Ft$vI", (-1), "lLD", "o@", (String) null);
      Uri uri1 = uri0.withNewScheme("https");
      String string0 = HttpUtils.originHeader(uri1);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertNotNull(uri0.getUserInfo());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertFalse(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getExplicitPort());
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Uri uri0 = new Uri("#*NK}=rvL;%]v", (String) null, "#*NK}=rvL;%]v", 61, "", "F(z/`~V9", "F(z/`~V9");
      String string0 = HttpUtils.originHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getPort());
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertFalse(uri0.isWebSocket());
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getFragment());
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertEquals(0, uri0.getSchemeDefaultPort());
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertNotNull(uri0.getHost());
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      assertTrue(uri0.isSecured());
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Uri uri0 = new Uri("@", "@", "htcharset=arset=omain", (-1), ", br", "@", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(16384);
      byte[] byteArray0 = new byte[2];
      String string0 = HttpUtils.patchContentTypeWithBoundaryAttribute(charBuffer0, byteArray0);
      // Undeclared exception!
      HttpUtils.extractContentTypeBoundaryAttribute(string0);
  }
