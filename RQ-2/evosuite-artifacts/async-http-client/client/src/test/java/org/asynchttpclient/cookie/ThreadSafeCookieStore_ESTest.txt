 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("/../", "/0/lSy", "im<.,", 907, "/../", "L+t-IB949r", "/sh?fJkilaZQ>iFy0FQ");
      DefaultCookie defaultCookie0 = new DefaultCookie("m2u<+CH:C[%@4<[Bu@", "JHkU33+Xc/");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(" 0Um?,Q#F5@").when(uri0).getHost();
      doReturn("").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("Yz)VUa$").when(cookie0).domain();
      doReturn((-9223372036854775808L), 784L, (-431L), 1L, 0L).when(cookie0).maxAge();
      doReturn("Yz)VUa$").when(cookie0).name();
      doReturn("https").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      threadSafeCookieStore0.evictExpired();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("MhOS3%>K8w|M@").when(uri0).getHost();
      doReturn("UNKNOWN", "MhOS3%>K8w|M@").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("UNKNOWN").when(cookie0).domain();
      doReturn(1L, (long)3, 3L, (long)2, 1002L).when(cookie0).maxAge();
      doReturn("UNKNOWN").when(cookie0).name();
      doReturn("wss").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      System.setCurrentTimeMillis(1002L);
      threadSafeCookieStore0.evictExpired();
      assertEquals(0, threadSafeCookieStore0.count());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("/H|_ ;\"e").when(uri0).getHost();
      doReturn("'Uc@#2g*<R>!|NU", "").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("H\"~5y<Y~").when(cookie0).domain();
      doReturn(0L, 0L).when(cookie0).maxAge();
      doReturn("/H|_ ;\"e").when(cookie0).name();
      doReturn("org.asynchttpclient.cookie.ThreadSafeCookieStore$DomainUtils").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      assertEquals(0, threadSafeCookieStore0.count());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      String string0 = " 0Um?,Q#F5@";
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(" 0Um?,Q#F5@").when(uri0).getHost();
      doReturn(".tr_6W^wExLh2c=.Db", (String) null).when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(".tr_6W^wExLh2c=.Db").when(cookie0).domain();
      doReturn("https").when(cookie0).path();
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.add(uri0, cookie0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.cookie.ThreadSafeCookieStore", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(" 0Um?,Q#F5@").when(uri0).getHost();
      doReturn(" 0Um?,Q#F5@", "http").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(" 0Um?,Q#F5@").when(cookie0).domain();
      doReturn((-9223372036854775789L), (-9223372036854775789L)).when(cookie0).maxAge();
      doReturn("https").when(cookie0).name();
      doReturn(" 0Um?,Q#F5@").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      assertEquals(1, threadSafeCookieStore0.count());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      threadSafeCookieStore0.decrementAndGet();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.incrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      threadSafeCookieStore0.incrementAndGet();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.incrementAndGet();
      threadSafeCookieStore0.incrementAndGet();
      int int1 = threadSafeCookieStore0.decrementAndGet();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.get((Uri) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.cookie.ThreadSafeCookieStore", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain("wss");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain("org.asynchttpclient.uri.UriParser");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain("org.asynchttpclient.uri.UriParser");
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain("");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("/", "/", "/", 433, "/", "/", "/");
      DefaultCookie defaultCookie0 = new DefaultCookie("/", "wss");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("/../", "/../", "/../", 895, "/8xQvy$L4j})H", "/../", "/8xQvy$L4j})H");
      DefaultCookie defaultCookie0 = new DefaultCookie("ws", "http");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("eclipse.jetty.util.InetAddressSet$LegacyInetRange", "eclipse.jetty.util.InetAddressSet$LegacyInetRange", "eclipse.jetty.util.InetAddressSet$LegacyInetRange", 1, "", "", "eclipse.jetty.util.InetAddressSet$LegacyInetRange");
      DefaultCookie defaultCookie0 = new DefaultCookie("org.eclipse.jetty.util.InetAddressSet$LegacyInetRange", "eclipse.jetty.util.InetAddressSet$LegacyInetRange");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("/c/a/l]SP").when(uri0).getHost();
      doReturn("/c/a/l]SP", "http").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("/c/a/l]SP").when(cookie0).domain();
      doReturn((-9223372036854775766L), (-9223372036854775766L), 708L, 708L, (-9223372036854775766L)).when(cookie0).maxAge();
      doReturn("https").when(cookie0).name();
      doReturn("/c/a/l]SP").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      threadSafeCookieStore0.evictExpired();
      assertEquals(0, threadSafeCookieStore0.count());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("MhOS3%>K8w|M@").when(uri0).getHost();
      doReturn("UNKNOWN", "MhOS3%>K8w|M@").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("UNKNOWN").when(cookie0).domain();
      doReturn((-1671L), 1L, (long)3, 3L, 9223372036854775794L).when(cookie0).maxAge();
      doReturn("UNKNOWN").when(cookie0).name();
      doReturn("wss").when(cookie0).path();
      doReturn("&u>[%`p@n\"{ ").when(cookie0).toString();
      threadSafeCookieStore0.add(uri0, cookie0);
      List<Cookie> list0 = threadSafeCookieStore0.getAll();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("Q'u9C<u:vqt]").when(uri0).getHost();
      doReturn("Q'u9C<u:vqt]", "").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("Yz)VUa$").when(cookie0).domain();
      doReturn(1L, (-9223372036854775808L)).when(cookie0).maxAge();
      doReturn("https").when(cookie0).name();
      doReturn("1InM//PXzkqvL").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("BL+fio 1Ec\"sn!wg", "/0/lSy", "BL+fio 1Ec\"sn!wg", (-1), "/0/lSy", "/0/lSy", "/0/lSy");
      DefaultCookie defaultCookie0 = new DefaultCookie("http", "/0/lSy");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("MhOS3%>K8w|M@").when(uri0).getHost();
      doReturn("UNKNOWN", "MhOS3%>K8w|M@").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("UNKNOWN").when(cookie0).domain();
      doReturn((-1671L), 1L, (long)3).when(cookie0).maxAge();
      doReturn("UNKNOWN").when(cookie0).name();
      doReturn("wss").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.remove((Predicate<Cookie>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.cookie.ThreadSafeCookieStore", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      boolean boolean0 = threadSafeCookieStore0.clear();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("").when(uri0).getHost();
      doReturn("").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cookie0).domain();
      doReturn((long)1, (long)1, (long)1).when(cookie0).maxAge();
      doReturn("").when(cookie0).name();
      doReturn("").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      boolean boolean0 = threadSafeCookieStore0.clear();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("").when(uri0).getHost();
      doReturn("Parameter can't be null", "").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("").when(cookie0).domain();
      doReturn((long)1, (long)1, (long)1).when(cookie0).maxAge();
      doReturn("ws").when(cookie0).name();
      doReturn("").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      IncludeExclude<Cookie> includeExclude0 = new IncludeExclude<Cookie>();
      boolean boolean0 = threadSafeCookieStore0.remove(includeExclude0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Predicate<Cookie> predicate0 = (Predicate<Cookie>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = threadSafeCookieStore0.remove(predicate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.count();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      List<Cookie> list0 = threadSafeCookieStore0.getAll();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri("`", "`", "`", 0, "0/E2Sy", "0/E2Sy", "`");
      DefaultCookie defaultCookie0 = new DefaultCookie("ws", "ws");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.count();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.incrementAndGet();
      int int1 = threadSafeCookieStore0.count();
      ;
}
