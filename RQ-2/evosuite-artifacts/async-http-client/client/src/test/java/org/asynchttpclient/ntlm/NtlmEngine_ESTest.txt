 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.count = (-4014L);
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.count = 2360L;
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message((String) null, (String) null, "Error getting md5 message digest implementation: ", "TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAABAAEADqAAAAtYKI4gUBKAoAAAAP/JlyWYeZLeAAAAAAAAAAAAAAAAAAAAAAAnwLZ4KSKUwbMMQz4rCHITNObeAPHJZkPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEAgY/nKCbwx9T/wg91i5BWhQ==", byteArray0, (-2903), "The list of names must not be null", byteArray0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft(2382, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", byteArray0, (-9), (String) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      ntlmEngine_Type3Message0.addBytes(byteArray1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      NtlmEngine.writeULong(byteArray0, (byte)7, (byte)1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("8}zP(", "D1W_|@(BK3YNtL<q", "8}zP(", "D1W_|@(BK3YNtL<q", byteArray0, (-1455), "", byteArray0);
      ntlmEngine_Type3Message0.prepareResponse((byte)40, (byte) (-36));
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("NTLM type ", "NTLM type ", "YJNCC@ba6)UT;ug/", "YJNCC@ba6)UT;ug/", byteArray0, 11, "YJNCC@ba6)UT;ug/", byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addUShort((byte) (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", byteArray0, 3, (String) null, byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addULong((-161));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("8}zP(", "D1W_|@(BK3YNtL<q", "8}zP(", "D1W_|@(BK3YNtL<q", byteArray0, (-1455), "", byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addByte((byte)6);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = new byte[0];
      ntlmEngine_MD4_0.update(byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      int[] intArray0 = new int[20];
      ntlmEngine_MD4_0.round3(intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ntlmEngine_MD4_0.round2(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$MD4", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      // Undeclared exception!
      try { 
        ntlmEngine_MD4_0.round1((int[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$MD4", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.processBuffer();
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft((-2087), (-2087));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = NtlmEngine.H(40, 40, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = NtlmEngine.H(4, 4, 4);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = NtlmEngine.H((-271733879), (-271733879), (-271733879));
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = NtlmEngine.G(0, 0, 805351646);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = NtlmEngine.G(2, 4, (-2146));
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = NtlmEngine.G((-271733879), (-271733879), (-271733879));
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = NtlmEngine.F(1732584193, 56, 1732584193);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = NtlmEngine.F(38, (-1576500735), 1138);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = NtlmEngine.F((-2486), (-2486), (-2486));
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NtlmEngine.writeULong((byte[]) null, (-1), 8);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NtlmEngine.writeULong(byteArray0, (-3278), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      try { 
        ntlmEngine0.INSTANCE.generateType3Msg("NTLM message decoding error - packet too short", "NTLM message decoding error - packet too short", "i]", "", "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // NTLM message decoding error - packet too short
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      // Undeclared exception!
      try { 
        ntlmEngine0.generateType3Msg((String) null, "EaVt", "", " raU| KD <nV@", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = null;
      try {
        ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("The offset cannot be negative", "The offset cannot be negative", "The offset cannot be negative", "The offset cannot be negative", byteArray0, (byte) (-15), "The offset cannot be negative", byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Input length not multiple of 8 bytes
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("NTLM type ", "NTLM type ", "NTLM type ", "NTLM type ", byteArray0, 17, "NTLM type ", byteArray0);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NtlmEngine.Type2Message ntlmEngine_Type2Message0 = null;
      try {
        ntlmEngine_Type2Message0 = new NtlmEngine.Type2Message("Insensitive");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // NTLM message expected - instead got unrecognized bytes
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = null;
      try {
        ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("d'x:96o\"", "d'x:96o\"", "d'x:96o\"", "d'x:96o\"", (byte[]) null, (-2749), "d'x:96o\"", (byte[]) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Null input buffer
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("", "", "", "B~E1-`$%p+}cQ#f%Z\"", byteArray0, (-992), "", (byte[]) null);
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("", "UKh.|DeJ", "UKh.|DeJ", "-7", byteArray0, (-2), "", byteArray0);
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", "?SU)|5!Ed\b*HT`lxa", byteArray0, 128, (String) null, byteArray0);
      String string0 = ntlmEngine_Type3Message0.getResponse();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NtlmEngine.Type2Message ntlmEngine_Type2Message0 = null;
      try {
        ntlmEngine_Type2Message0 = new NtlmEngine.Type2Message("TlRMTVNTUAABAAAAAYIIogAAAAAoAAAAAAAAACgAAAAFASgKAAAADw==");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // NTLM type 2 message expected - instead got type 1
         //
         verifyException("org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      String string0 = ntlmEngine0.generateType1Msg();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message((String) null, (String) null, "TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAAAAAAADqAAAAgAAAAgUBKAoAAAAPhDdVWEKTK1KSOkqHAxdYbv7oWVlGD8pR7Qgs8FdSoUex1hFfMdfO/QiB1VtypiRVPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEA", "registerTree {} {} {}", byteArray0, 583263097, "TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAAAAAAADqAAAAgAAAAgUBKAoAAAAPhDdVWEKTK1KSOkqHAxdYbv7oWVlGD8pR7Qgs8FdSoUex1hFfMdfO/QiB1VtypiRVPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEA", byteArray0);
      String string0 = ntlmEngine_Type3Message0.getResponse();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      // Undeclared exception!
      try { 
        ntlmEngine0.INSTANCE.generateType3Msg("", "B~E1-`$%p+}cQ#f%Z\"", "x$3Xw\"/Jr 7", "x$3Xw\"/Jr 7", "NTLM type 2 message indicates no support for Unicode. Flags are: ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 20
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }
