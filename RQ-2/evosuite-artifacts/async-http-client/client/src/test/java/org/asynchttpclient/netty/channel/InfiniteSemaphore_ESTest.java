/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 15:50:42 GMT 2022
 */

package org.asynchttpclient.netty.channel;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.asynchttpclient.netty.channel.InfiniteSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InfiniteSemaphore_ESTest extends InfiniteSemaphore_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.availablePermits();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.isFair();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      Collection<Thread> collection0 = infiniteSemaphore0.getQueuedThreads();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.tryAcquire());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire((long) Integer.MAX_VALUE, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.reducePermits(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.tryAcquire());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.drainPermits();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly();
      assertEquals(0, infiniteSemaphore0.availablePermits());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE, (long) Integer.MAX_VALUE, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire(Integer.MAX_VALUE);
      assertTrue(infiniteSemaphore0.isFair());
}
}
