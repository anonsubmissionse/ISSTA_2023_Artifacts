 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn("D+z:4S(B<", "D+z:4S(B<", "D+z:4S(B<", "=").when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      jaxbBase64_0.internalEncode(byteArray0);
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn("D+z:4S(B<", "D+z:4S(B<", "D+z:4S(B<", "=").when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      jaxbBase64_0.internalEncode(byteArray0);
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      String string1 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[2];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      String string0 = jaxbBase64_0.internalEncode(byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[0];
      String string0 = jaxbBase64_0.internalEncode(byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      // Undeclared exception!
      try { 
        jaxbBase64_0.internalEncode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jakarta.xml.bind.DatatypeConverterImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = JaxbBase64.isAvailable();
      assertTrue(boolean0);
}
