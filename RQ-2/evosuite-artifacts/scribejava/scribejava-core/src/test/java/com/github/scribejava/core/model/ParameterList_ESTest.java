/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 02:53:49 GMT 2022
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.Parameter;
import com.github.scribejava.core.model.ParameterList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterList_ESTest extends ParameterList_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add("", "@Z<lD");
      ParameterList parameterList1 = parameterList0.sort();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("]<", "]<");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      int int0 = parameterList0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("=", "E");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("c~HO=u8]QQya K[w");
      parameterList0.asOauthBaseString();
      assertEquals(0, parameterList0.size());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.add((String) null, (String) null);
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList1 = new ParameterList(linkedList0);
      parameterList0.addAll(parameterList1);
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add((String) null, "@Z<lD");
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.appendTo("h!mfy?wNpK(`hlE@qV");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      // Undeclared exception!
      try { 
        parameterList0.appendTo((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList((Map<String, String>) null);
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring("Pq-ZG2!#3%IFl]&&N");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"IF\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring("=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      // Undeclared exception!
      try { 
        parameterList0.addAll((ParameterList) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.ParameterList", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      List<Parameter> list0 = linkedList0.subList(0, 0);
      Parameter parameter0 = new Parameter("%7D%402tiRoM55v5%3A=", "K=K~?fRB");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = null;
      try {
        parameterList0 = new ParameterList(list0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterList parameterList0 = null;
      try {
        parameterList0 = new ParameterList((List<Parameter>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      String string0 = parameterList0.asFormUrlEncodedString();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add("", "@Z<lD");
      String string0 = parameterList0.asFormUrlEncodedString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Parameter parameter0 = new Parameter("", "");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      boolean boolean0 = parameterList0.contains(parameter0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      Parameter parameter0 = new Parameter((String) null, "%2A");
      boolean boolean0 = parameterList0.contains(parameter0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("\"");
      assertEquals(1, parameterList0.size());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("");
      assertEquals(0, parameterList0.size());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring((String) null);
      assertEquals(0, parameterList0.size());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Parameter parameter0 = new Parameter("", "");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      String string0 = parameterList0.appendTo("CScJ%%0[cipX?");
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("c~HO=u8]QQya K[w");
      parameterList0.appendTo("c~HO=u8]QQya K[w");
      assertEquals(0, parameterList0.size());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("=", "E");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.add((String) null, "S?9#c%W0SQa8(JC");
      // Undeclared exception!
      try { 
        parameterList0.sort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Parameter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList((Map<String, String>) null);
      String string0 = parameterList0.appendTo("");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      int int0 = parameterList0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      String string0 = parameterList0.asOauthBaseString();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      ParameterList parameterList1 = parameterList0.sort();
      ;
}
}
