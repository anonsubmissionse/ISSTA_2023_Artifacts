/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:06:37 GMT 2022
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.OAuth1AccessTokenExtractor;
import com.github.scribejava.core.extractors.OAuth1RequestTokenExtractor;
import com.github.scribejava.core.model.Response;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractOAuth1TokenExtractor_ESTest extends AbstractOAuth1TokenExtractor_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract((Response) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[0];
      Response response0 = new Response(1, "", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = OAuth1RequestTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(83, "", hashMap0, "");
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.extract(response0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-121), 61);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response(61, "", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response((-1166), "Response body is incorrect. Can't extract token and secret from this: '", hashMap0, sequenceInputStream1, closeableArray0);
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(30, "oauth_token=([^&D+)", hashMap0, "oauth_token=([^&D+)");
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract token and secret from this: 'oauth_token=([^&D+)'
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor", e);
      }
  }
}
