 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("%P_X*nH\">S");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      ServiceBuilder serviceBuilder1 = serviceBuilder0.httpClientConfig(jDKHttpClientConfig0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("7JBVk+H3,2w-z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7JBVk+H3,2w-z", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debugStream(mockPrintStream0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      ServiceBuilder serviceBuilder1 = (ServiceBuilder)serviceBuilder0.withScope("verification_uri");
      serviceBuilder0.callback("2Q<^P72/#L");
      ServiceBuilder serviceBuilder2 = serviceBuilder0.apiSecret("0H+");
      serviceBuilder2.userAgent("Invalid OAuth scope");
      OAuth20Service oAuth20Service0 = mock(OAuth20Service.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(oAuth20Service0).toString();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth20Service0).when(defaultApi20_0).createService(anyString() , anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth20Service oAuth20Service1 = serviceBuilder1.build(defaultApi20_0);
      assertNotNull(oAuth20Service1.getVersion());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      ServiceBuilder serviceBuilder1 = (ServiceBuilder)serviceBuilder0.withScope("verification_uri");
      ServiceBuilder serviceBuilder2 = serviceBuilder1.userAgent("httpClientConfig can't be null");
      serviceBuilder0.apiSecret("0H+");
      serviceBuilder2.callback("FH#FxX,,@;wRbPRVn");
      OAuth10aService oAuth10aService0 = mock(OAuth10aService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(oAuth10aService0).toString();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth10aService0).when(defaultApi10a0).createService(anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth10aService oAuth10aService1 = serviceBuilder1.build(defaultApi10a0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("jvm without UTF-8, really?");
      // Undeclared exception!
      try { 
        serviceBuilder0.withScope("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("code");
      // Undeclared exception!
      try { 
        serviceBuilder0.responseType("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth responseType
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(">5x}}3r[whaPZ+Yi");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Adj~cw`H^r1*");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope(scopeBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("LNHgv%");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope((ScopeBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.builder.ServiceBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("PUT");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder("");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope(scopeBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("9kk8L&dUW5W~\u0003C]C");
      // Undeclared exception!
      try { 
        serviceBuilder0.build((DefaultApi20) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.builder.ServiceBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("com.github.scribejava.core.builder.ServiceBuilder");
      // Undeclared exception!
      try { 
        serviceBuilder0.build((DefaultApi10a) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.builder.ServiceBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("Device Authorization Codes");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiSecret("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api secret
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("d?BL");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = null;
      try {
        serviceBuilder0 = new ServiceBuilder("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("%P_X*nH\">S");
      // Undeclared exception!
      try { 
        serviceBuilder0.debugStream((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // debug stream can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("jvm without UTF-8, really?");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiKey("jvm without UTF-8, really?");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder("httpClientConfig can't be null");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.defaultScope(scopeBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("PUT");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.defaultScope("PUT");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("jvm without UTF-8, really?");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiSecretIsEmptyStringUnsafe();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((OAuth10aService) null).when(defaultApi10a0).createService(anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth10aService oAuth10aService0 = serviceBuilder0.build(defaultApi10a0);
      assertNotNull(oAuth10aService0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("g8x;]sy");
      // Undeclared exception!
      try { 
        serviceBuilder0.httpClientConfig((HttpClientConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // httpClientConfig can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debug();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("httpClientConfig can't be null");
      OAuth20Service oAuth20Service0 = mock(OAuth20Service.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth20Service0).when(defaultApi20_0).createService(anyString() , anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth20Service oAuth20Service1 = serviceBuilder0.build(defaultApi20_0);
      assertNotNull(oAuth20Service1);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(">5x}}3r[whaPZ+Yi");
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ServiceBuilder serviceBuilder1 = serviceBuilder0.httpClient(jDKHttpClient0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(">5x}}3r[whaPZ+Yi");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.responseType("M\"($au\"`/8f|pQc[T");
      ;
}
