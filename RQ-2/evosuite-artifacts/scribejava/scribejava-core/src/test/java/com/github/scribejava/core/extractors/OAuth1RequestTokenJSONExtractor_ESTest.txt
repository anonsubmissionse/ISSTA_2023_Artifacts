 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenJSONExtractor0.createToken((String) null, (String) null, ";MP3<!j`S)=9j<AO}u");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = OAuth1RequestTokenJSONExtractor.instance();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("", "", "");
      assertNotNull(oAuth1RequestToken0.getToken());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("VDO", ";MP3<!j`S)=9j<AO}u", ";MP3<!j`S)=9j<AO}u");
      assertNotNull(oAuth1RequestToken0.getToken());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("VDO", ";MP3<!j`S)=9j<AO}u", ";MP3<!j`S)=9j<AO}u");
      assertNotNull(oAuth1RequestToken0.getTokenSecret());
}
