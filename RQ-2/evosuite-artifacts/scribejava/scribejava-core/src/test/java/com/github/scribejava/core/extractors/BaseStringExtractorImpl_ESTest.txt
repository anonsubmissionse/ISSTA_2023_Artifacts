 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "y");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      baseStringExtractorImpl0.checkPreconditions(oAuthRequest0);
      assertNotNull(oAuthRequest0.getUrl());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      String string0 = baseStringExtractorImpl0.getUrl(oAuthRequest0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      String string0 = baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://");
      String string0 = baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getVerb((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.BaseStringExtractorImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getUrl(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams((OAuthRequest) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.BaseStringExtractorImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "https://");
      oAuthRequest0.addBodyParameter((String) null, "?.*");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract((OAuthRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract base string from a null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.checkPreconditions((OAuthRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract base string from a null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.checkPreconditions(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(GET http://). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException("com.github.scribejava.core.extractors.BaseStringExtractorImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      String string0 = baseStringExtractorImpl0.extract(oAuthRequest0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      String string0 = baseStringExtractorImpl0.getUrl(oAuthRequest0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      String string0 = baseStringExtractorImpl0.getVerb(oAuthRequest0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "http://");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(GET http://). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException("com.github.scribejava.core.extractors.BaseStringExtractorImpl", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("com.github.scribejava.core.model.OAuthRequest", e);
      }
  }
