 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Short short0 = new Short((short)0);
      objectNode0.put("", short0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, "", "");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Long long0 = new Long(3246L);
      ObjectNode objectNode1 = objectNode0.put("no delegate creator specified", long0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, "no delegate creator specified", "F>&{vb2K%2");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.put(" O)&W", 44);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, " O)&W", "x.kr");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("H`(5],FiH", 3333.4353F);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, "H`(5],FiH", "");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putObject(" O)&W");
      ObjectNode objectNode2 = objectNode1.put("", 3333.4353F);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, " O)&W", "");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Double double0 = new Double(0.0);
      ObjectNode objectNode1 = objectNode0.put("", double0);
      DoubleNode doubleNode0 = (DoubleNode)AbstractJsonExtractor.extractRequiredParameter(objectNode1, "", "");
      assertFalse(doubleNode0.isNaN());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      hashMap0.put("H`(5],FiH", arrayNode0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, "H`(5],FiH", "");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", true);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, "", ":ikW\"T?");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractJsonExtractor.extractRequiredParameter((JsonNode) null, "O|Bu!Hq", "O|Bu!Hq");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.AbstractJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      try { 
        AbstractJsonExtractor.extractRequiredParameter(objectNode0, " O)&W", "H`(5],FiH");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a ' O)&W' from this: 'H`(5],FiH'
         //
         verifyException("com.github.scribejava.core.extractors.AbstractJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
  }
