/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:04:30 GMT 2022
 */

package com.github.scribejava.core.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.builder.api.DefaultApi10a;
import com.github.scribejava.core.builder.api.OAuth1SignatureType;
import com.github.scribejava.core.extractors.BaseStringExtractor;
import com.github.scribejava.core.extractors.HeaderExtractor;
import com.github.scribejava.core.extractors.TokenExtractor;
import com.github.scribejava.core.httpclient.HttpClient;
import com.github.scribejava.core.httpclient.HttpClientConfig;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClient;
import com.github.scribejava.core.httpclient.jdk.JDKHttpClientConfig;
import com.github.scribejava.core.model.OAuth1AccessToken;
import com.github.scribejava.core.model.OAuth1RequestToken;
import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
import com.github.scribejava.core.model.OAuthRequest;
import com.github.scribejava.core.model.Token;
import com.github.scribejava.core.model.Verb;
import com.github.scribejava.core.oauth.OAuth10aService;
import com.github.scribejava.core.services.SignatureService;
import com.github.scribejava.core.services.TimestampService;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.UnknownServiceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth10aService_ESTest extends OAuth10aService_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("BR5X1\"a5nR", "BR5X1\"a5nR", "BR5X1\"a5nR");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      TokenExtractor<OAuth1RequestToken> tokenExtractor1 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      Verb verb1 = Verb.DELETE;
      BaseStringExtractor baseStringExtractor1 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      HeaderExtractor headerExtractor1 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService2 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("https://").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb1).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0, (HeaderExtractor) null).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0, oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "https://", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, "https://");
      // Undeclared exception!
      try { 
        oAuth10aService0.appendSignature(oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("mM?n").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("g)").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "d!i|,9$", "d!i|,9$", "", "", bufferedOutputStream0, "~aRk[K_H8j&6R]", (HttpClientConfig) null, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "~aRk[K_H8j&6R]");
      oAuth10aService0.addOAuthParams(oAuthRequest0, ", message='");
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("http://").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("http://").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("http://").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("http://").when(timestampService1).getNonce();
      TokenExtractor<OAuth1AccessToken> tokenExtractor0 = (TokenExtractor<OAuth1AccessToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("http://").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getAccessTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn("e1").when(defaultApi10a0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "http://", "com.github.scribejava.core.oauth.OAuth10aService$3", "http://", "http://", (OutputStream) null, "http://", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("http://", "Unknown new Signature Type '");
      oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "h2b 2(;");
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.prepareRequestTokenRequest();
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1z\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1z\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1z\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1z\"a5nR").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("|i2lk5|*k5h:eEIs0~", "Unknown new Signature Type '", false, "|i2lk5|*k5h:eEIs0~");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1RequestToken0).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1z\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1z\"a5nR", "BR5X1z\"a5nR", (OutputStream) null, "BR5X1z\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", "");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1RequestToken0).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream("$W~=@wsc+l");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "$W~=@wsc+l", "", "$W~=@wsc+l", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "w\bUoAfq", false, "G[rV@-A8S");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpProvider").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream("$W~=@wsc+l");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "$W~=@wsc+l", "", "$W~=@wsc+l", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "w\bUoAfq", false, "G[rV@-A8S");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream("$W~=@wsc+l");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "$W~=@wsc+l", "", "$W~=@wsc+l", "", mockPrintStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "w\bUoAfq", false, "G[rV@-A8S");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, "v(%VXd*DGKtRS!5", "v(%VXd*DGKtRS!5", "", "j!$`H4", byteArrayOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      DefaultApi10a defaultApi10a0 = oAuth10aService0.getApi();
      assertNotNull(defaultApi10a0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "996jbJh+LjS>", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "oauth_signature", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("996jbJh+LjS>", "996jbJh+LjS>", "");
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ")f8MyXvbbi$?[q0");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R]/T-Mf%=0[");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "async obtaining request token from %s", "Different boundaries was passed in constructors. One as argument, second as header", "Different boundaries was passed in constructors. One as argument, second as header", "Bzl?{b~>,q(%{JWk5]", mockFileOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "async obtaining request token from %s");
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "'.", "", "", dataOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "HEAD", "Iqi3]ZU", "com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "HEAD", (OutputStream) null, "@-K<dGAhjY.bAh", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("996jbJh+LjS>", "", false, "996jbJh+LjS>");
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, "8^+\"sYgSq1^");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", ">N`fHmVDJeK|Hi", "4mQX!.", ">N`fHmVDJeK|Hi", pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest((OAuth1RequestToken) null, "4mQX!.");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("oauth_token_secret can't be null").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "d!i|,9$", "d!i|,9$", "", "", bufferedOutputStream0, "~aRk[K_H8j&6R]", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "oauth_signature", "996jbJh+LjS>", "", pipedOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.POST;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q#3@CN,RkD8/{yiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: UnknownServiceException");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.PATCH;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: ProtocolException");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "oauth_signature", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, "v(%VXd*DGKtRS!5", "v(%VXd*DGKtRS!5", "", "j!$`H4", byteArrayOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer((-857));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(signatureService0).getSignatureMethod();
      String string0 = "mM?n";
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("mM?n").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("PxE", "", (String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0, (Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1, (TimestampService) null).when(defaultApi10a0).getTimestampService();
      String string1 = "d!i|,9$";
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      String string2 = "~aRk[K_H8j&6R]";
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "d!i|,9$", "d!i|,9$", "", "", bufferedOutputStream0, "~aRk[K_H8j&6R]", (HttpClientConfig) null, jDKHttpClient0);
      boolean boolean0 = true;
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.setProxy(proxy0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("").when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "oauth_signature", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "996jbJh+LjS>", "");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "\u0001`2", oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("mM?n").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L", ")x^L").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "d!i|,9$", "d!i|,9$", "", "", bufferedOutputStream0, "~aRk[K_H8j&6R]", (HttpClientConfig) null, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("~aRk[K_H8j&6R]", "d!i|,9$", true, "~aRk[K_H8j&6R]");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "d!i|,9$", oAuthAsyncRequestCallback0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "oauth_signature", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("996jbJh+LjS>", "", false, "oauth_signature");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "996jbJh+LjS>");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      MockFile mockFile0 = new MockFile("S6^,.T", "3`6<l~.8VS1@!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "S6^,.T", "3`6<l~.8VS1@!", "", "oauth_callback", mockPrintStream0, "22I5x>`j", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "22I5x>`j", "O");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("1@uh='Zo").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "BR5X1\"a5nR").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "", "", "", byteArrayOutputStream0, ", message='", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "-*<#7XV <>R", ", message='");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "5&.*B[^");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("1@uh='Zo").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("1@uh='Zo").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("98rjT=sH").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "BR5X1\"a5nR").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "-*#7XV <>R", "");
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no protocol: BR5X1\"a5nR
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "996jbJh+LjS>", "", "996jbJh+LjS>", "996jbJh+LjS>", pipedOutputStream0, "oauth_signature", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("996jbJh+LjS>", "", false, "oauth_signature");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, "'.");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("1@uh='Zo").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "BR5X1\"a5nR").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, ", message='", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "-*<#7XV <>R", ", message='");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      File file0 = MockFile.createTempFile("com.github.scribejava.core.builder.api.OAuth1SignatureType", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", ",~`#,Zh<sI$bgoou", "", ",~`#,Zh<sI$bgoou", mockFileOutputStream0, "6)~@`88", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      mockFileOutputStream0.close();
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "");
      // Undeclared exception!
      try { 
        oAuth10aService0.appendSignature(oAuthRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"30PA");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "com.github.scribejava.core.builder.api.OAuth1SignatureType", "com.github.scribejava.core.builder.api.OAuth1SignatureType", "com.github.scribejava.core.builder.api.OAuth1SignatureType", "com.github.scribejava.core.builder.api.OAuth1SignatureType", objectOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "com.github.scribejava.core.builder.api.OAuth1SignatureType");
      // Undeclared exception!
      try { 
        oAuth10aService0.addOAuthParams(oAuthRequest0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "signature is: %s", "", "", "signature is: %s", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync((OAuth1RequestToken) null, "", oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "&iWF'", "", "Y`H~d/HLkH", pipedOutputStream0, "response status code: %s", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException("com.github.scribejava.core.oauth.OAuthService", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "oauth_consumer_key", "oauth_consumer_key", "", "", (OutputStream) null, "oauth_consumer_key", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("2:q!3@CN,RkD8/{AiCU").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn("3%xi4\"mZ&>1qE5\"b").when(defaultApi10a0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestTokenAsync();
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      doReturn(true).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "oob", "oob", "", (OutputStream) null, "oob", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "");
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "oob");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      doReturn(false).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "gxIvF<:/hm?", "gxIvF<:/hm?", "gxIvF<:/hm?", (OutputStream) null, "gxIvF<:/hm?", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "", "gxIvF<:/hm?");
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "gxIvF<:/hm?");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("Content-Disposition").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1, (TimestampService) null).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, ", message='", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "-*<#7XV <>R", ", message='");
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "async obtaining request token from %s");
      OAuthRequest oAuthRequest0 = oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, (String) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L", ")x^L").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ")x^L", ")x^L", ")x^L", ")x^L", bufferedOutputStream0, ")x^L", (HttpClientConfig) null, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(")x^L", ")x^L", false, ")x^L");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ")x^L", oAuthAsyncRequestCallback0);
      assertNotNull(oAuth10aService0.getVersion());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("1@uh='Zo").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "BR5X1\"a5nR").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", "-*#7XV <>R", "");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "ey8XPV|", "ey8XPV|", "ey8XPV|", "ey8XPV|", (OutputStream) null, "^", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("^", "b6[r+M3");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, "ey8XPV|");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("kq9{@4r(3@XWZ").when(timestampService0).getTimestampInSeconds();
      MockFile mockFile0 = new MockFile("w)Fe#R!Biu1KVY$pF/", "User-Agent");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("", "").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, "using Http Header signature", (String) null, "using Http Header signature", mockFileOutputStream0, "", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("Unknown new Signature Type '").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("BR5X1\"a5nR").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn("https://").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((TokenExtractor) null).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "BR5X1\"a5nR", "com.github.scribejava.core.oauth.OAuth10aService$3", "BR5X1\"a5nR", "BR5X1\"a5nR", (OutputStream) null, "BR5X1\"a5nR", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("k").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(")x^L").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("%\"[kYtNeV\"5*E7ED").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("O").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("", "").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn((OAuth1SignatureType) null).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "d!i|,9$", "d!i|,9$", "", "", bufferedOutputStream0, "~aRk[K_H8j&6R]", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("b0=W5X\"EN%J");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, "+TObK6vLo", "using Http Header signature", "b0=W5X\"EN%J", "b0=W5X\"EN%J", mockPrintStream0, "+TObK6vLo", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l)fx0BqHJXc[#", "jXqnf", "+TObK6vLo");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ")x^L", ")x^L", ")x^L", ")x^L", bufferedOutputStream0, ")x^L", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.OAuth10aService", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "", "c7(E#T2.&ZU?E-G^-/]", "", "", (OutputStream) null, "", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getVersion();
      ;
}
}
