/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:03:05 GMT 2022
 */

package com.github.scribejava.core.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.model.OAuth1AccessToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OAuth1AccessToken_ESTest extends OAuth1AccessToken_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("]:!p7o.'@-Dj{< IH", "]:!p7o.'@-Dj{< IH");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("Wz)X+&\":q)9e7*lu-?", "", "");
      String string0 = oAuth1AccessToken0.getTokenSecret();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("kS%h*_G", "kS%h*_G", "");
      String string0 = oAuth1AccessToken0.getToken();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = null;
      try {
        oAuth1AccessToken0 = new OAuth1AccessToken((String) null, "vlGzbb6\"Vl_X", "vlGzbb6\"Vl_X");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = null;
      try {
        oAuth1AccessToken0 = new OAuth1AccessToken((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("", "", "");
      String string0 = oAuth1AccessToken0.getToken();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("W {fQH|kx9RJ,", "]f9]fWKnK26i", "W {fQH|kx9RJ,");
      String string0 = oAuth1AccessToken0.getTokenSecret();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("nmV)!dmJge7Cu|)a", "nmV)!dmJge7Cu|)a");
      OAuth1AccessToken oAuth1AccessToken1 = new OAuth1AccessToken("Tis tnken object was not constructed by ScribeJava and dos2not hav a rwRsp{nse", "nmV)!dmJge7Cu|)a");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("nmV)!dmJge7Cu|)a", "nmV)!dmJge7Cu|)a");
      boolean boolean0 = oAuth1AccessToken0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("nmV)!dmJge7Cu|)a", "nmV)!dmJge7Cu|)a");
      boolean boolean0 = oAuth1AccessToken0.equals("Tis tnken object was not constructed by ScribeJava and dos2not hav a rwRsp{nse");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("nmV)!dmJge7Cu|)a", "nmV)!dmJge7Cu|)a");
      oAuth1AccessToken0.hashCode();
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("]:!p7o.'@-Dj{< IH", "]:!p7o.'@-Dj{< IH");
      OAuth1AccessToken oAuth1AccessToken1 = new OAuth1AccessToken("]:!p7o.'@-Dj{< IH", "]:!p7o.'@-Dj{< IH");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken1);
      assertTrue(boolean0);
}
}
