 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`LYaV", "`LYaV", "");
      oAuth1RequestToken0.hashCode();
      assertFalse(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("98n:k[n]pz #o6'zM", "98n:k[n]pz #o6'zM", false, "98n:k[n]pz #o6'zM");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", "");
      oAuth1RequestToken0.getTokenSecret();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("2SjHM", "");
      oAuth1RequestToken0.getToken();
      assertFalse(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken((String) null, "ejrjw`0b?f4UR9-f ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken("$}N`ZhNRUK", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("`LYaV", "`LYaV", "");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", false, (String) null);
      oAuth1RequestToken0.getToken();
      assertFalse(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("This token object was not constructed by ScribeJava and does not have a rawResponse", "This token object was not constructed by ScribeJava and does not have a rawResponse", "This token object was not constructed by ScribeJava and does not have a rawResponse");
      oAuth1RequestToken0.getTokenSecret();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("ih{#t~vm8t}TGKr`", "l4^-j-leR4", (String) null);
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertFalse(oAuth1RequestToken1.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("ih{#t~vm8t}TGKr`", "l4^-j-leR4", (String) null);
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(oAuth1RequestToken1.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals("l4^-j-leR4");
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals("l4^-j-leR4");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals((Object) null);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("l4^-j-leR4", "l4^-j-leR4", "l4^-j-leR4");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken0);
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", false, "");
      oAuth1RequestToken0.hashCode();
      assertTrue(oAuth1RequestToken0.isOauthCallbackConfirmed());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", "");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("", "", false, "");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("", "", "");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("", "", false, "");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
      assertTrue(oAuth1RequestToken1.isOauthCallbackConfirmed());
}
