 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder((OAuth20Service) null);
      PKCE pKCE0 = new PKCE();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.pkce(pKCE0);
      PKCE pKCE1 = authorizationUrlBuilder1.getPkce();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("2GPM=gOA\"){", "").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF8", "UTF8");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "UTF8", "UTF8", "UTF8", "UTF8", "UTF8", mockPrintStream0, "UTF8", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder(oAuth20Service0);
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.initPKCE();
      authorizationUrlBuilder0.state("");
      String string0 = authorizationUrlBuilder1.build();
      String string1 = authorizationUrlBuilder1.build();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder((OAuth20Service) null);
      // Undeclared exception!
      try { 
        authorizationUrlBuilder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.oauth.AuthorizationUrlBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("AaQe").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream("AaQe");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "AaQe", "AaQe", "AaQe", "AaQe", "AaQe", mockPrintStream0, "AaQe", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.scope("AaQe");
      String string0 = authorizationUrlBuilder1.build();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("i9r@ZdqQ").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream("i9r@ZdqQ");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "i9r@ZdqQ", "i9r@ZdqQ", "i9r@ZdqQ", "i9r@ZdqQ", "i9r@ZdqQ", mockPrintStream0, "i9r@ZdqQ", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      authorizationUrlBuilder0.initPKCE();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.additionalParams(hashMap0);
      String string0 = authorizationUrlBuilder1.build();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("AaQe");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "AaQe", "AaQe", "AaQe", "AaQe", "AaQe", mockPrintStream0, "AaQe", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      PKCE pKCE0 = authorizationUrlBuilder0.getPkce();
      assertNotNull(pKCE0);
}
