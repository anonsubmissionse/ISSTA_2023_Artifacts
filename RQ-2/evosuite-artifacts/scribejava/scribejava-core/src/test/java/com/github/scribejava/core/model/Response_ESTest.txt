 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1155, "", hashMap0, "");
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1155, "", hashMap0, "");
      boolean boolean0 = response0.isSuccessful();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.getStream();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, "#|?a");
      response0.getMessage();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, (String) null);
      response0.getMessage();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, (String) null);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("B);%*_Mox(On.<", "B);%*_Mox(On.<", biFunction0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(0, "B);%*_Mox(On.<", hashMap0, (InputStream) null, closeableArray0);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Xx", hashMap0, "Ai");
      response0.getHeader((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, "#|?a");
      hashMap0.put((String) null, "Response{code=-3688, message='null', body='#|?a', headers={}}");
      response0.getHeader((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      Response response0 = new Response((-1), "j` Q~", hashMap0, "X");
      response0.getHeader("");
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, "");
      int int0 = response0.getCode();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Xx", hashMap0, "Ai");
      int int0 = response0.getCode();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = new MockFile("cHQX^f(; 5yc", "");
      File file0 = MockFile.createTempFile("com.github.scribejava.core.model.Response", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(125, (String) null, hashMap0, mockFileInputStream0, closeableArray0);
      String string0 = response0.getBody();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = new MockFile("cHQX^f(; 5yc", "");
      File file0 = MockFile.createTempFile("com.github.scribejava.core.model.Response", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(125, (String) null, hashMap0, mockFileInputStream0, closeableArray0);
      String string0 = response0.getBody();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.getBody();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[3];
      closeableArray0[0] = (Closeable) dataInputStream0;
      Response response0 = new Response(200, "", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      closeableArray0[3] = (Closeable) mockFileInputStream0;
      Response response0 = new Response(2993, "TfF-8", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.close();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      closeableArray0[0] = (Closeable) sequenceInputStream0;
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.close();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "Oa&:#L7n+,on4/R", hashMap0, "Oa&:#L7n+,on4/R");
      response0.close();
      response0.close();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      String string0 = response0.getBody();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      String string0 = response0.getBody();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, "Osx", hashMap0, "Osx");
      boolean boolean0 = response0.isSuccessful();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, "", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      boolean boolean0 = response0.isSuccessful();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Response response0 = new Response(0, "4", (Map<String, String>) null, "4");
      boolean boolean0 = response0.isSuccessful();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Response response0 = new Response(0, "4", (Map<String, String>) null, "4");
      boolean boolean0 = response0.isSuccessful();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(643);
      hashMap0.put("Content-Encoding", "gzip");
      PipedInputStream pipedInputStream0 = new PipedInputStream(643);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(643, "gzip", hashMap0, pipedInputStream0, closeableArray0);
      try { 
        response0.getBody();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Response response0 = new Response(20, "", (Map<String, String>) null, (String) null);
      String string0 = response0.getBody();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Response response0 = new Response(20, "", (Map<String, String>) null, (String) null);
      String string0 = response0.getBody();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      // Undeclared exception!
      try { 
        response0.getHeader("U)A Q?]D");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      int int0 = response0.getCode();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Response response0 = new Response(20, "", (Map<String, String>) null, (String) null);
      response0.getStream();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Response response0 = new Response((-1092), "Pw{.Ya-kl+^:6eY?", (Map<String, String>) null, "Pw{.Ya-kl+^:6eY?");
      response0.getMessage();
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(566, "kr),Szt", hashMap0, "kr),Szt");
      String string0 = response0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      Response response0 = new Response(2993, "TfF-8", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.getHeaders();
      assertEquals(0, response0.getCode());
}
