/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 12 03:05:17 GMT 2022
 */

package com.github.scribejava.core.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.scribejava.core.extractors.OAuth1AccessTokenJSONExtractor;
import com.github.scribejava.core.extractors.OAuth1RequestTokenJSONExtractor;
import com.github.scribejava.core.model.Response;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractOAuth1JSONTokenExtractor_ESTest extends AbstractOAuth1JSONTokenExtractor_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract((Response) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1JSONTokenExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(1380, "JM(i", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = OAuth1RequestTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      File file0 = MockFile.createTempFile("c![K*z&NbXIH9R", "bxC[ao~20/%KT");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(44, "Internal error: unable to locate supertype (%s) from resolved subtype %s", hashMap0, mockFileInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1RequestTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException("com.github.scribejava.core.utils.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2955), 34);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response(1850, "com.fasterxml.jackson.core.JsonFactoryBuilder", hashMap0, sequenceInputStream0, closeableArray0);
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = new OAuth1AccessTokenJSONExtractor();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(39, "> J+?My^l,-&R", hashMap0, pipedInputStream0, closeableArray0);
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-1520), ", new = ", hashMap0, ",uh]*-T/");
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\",uh]*-T/\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1079, "\"4$mxmHbZ|p5[3N", hashMap0, "\"4$mxmHbZ|p5[3N");
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (String)\"\"4$mxmHbZ|p5[3N\"; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = new OAuth1AccessTokenJSONExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1046, "7", hashMap0, "7");
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract token and secret from this: '7'
         //
         verifyException("com.github.scribejava.core.extractors.AbstractOAuth1JSONTokenExtractor", e);
      }
  }
}
