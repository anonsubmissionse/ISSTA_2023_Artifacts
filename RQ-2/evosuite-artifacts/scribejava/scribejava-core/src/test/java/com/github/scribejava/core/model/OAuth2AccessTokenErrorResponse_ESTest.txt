 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_TOKEN_TYPE;
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (-1), (String) null, "", "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(1513, "com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse", hashMap0, (InputStream) null, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      URI uRI1 = oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertFalse(uRI1.isOpaque());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INVALID_TOKEN;
      URI uRI0 = MockURI.aFTPURI;
      Response response0 = new Response(0, "~oaXKKp/BR", (Map<String, String>) null, "(Tv8.Fx>,,vZ LD%1 h");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      URI uRI1 = oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertEquals(1, uRI1.getPort());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INVALID_TOKEN;
      URI uRI0 = MockURI.aFTPURI;
      Response response0 = new Response(0, "~oaXKKp/BR", (Map<String, String>) null, "(Tv8.Fx>,,vZ LD%1 h");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INSUFFICIENT_SCOPE;
      URI uRI0 = MockURI.create("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "", hashMap0, "");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "", uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.EXPIRED_TOKEN;
      URI uRI0 = MockURI.aFileURI;
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, (Response) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.OAuthResponseException", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-116), (byte)72);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response((-797), "-d`<*,`q", hashMap0, byteArrayInputStream0, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "-d`<*,`q", uRI0, response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.SLOW_DOWN;
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(808, "", hashMap0, pushbackInputStream0, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "uS8JU-v`tA5zP=l9G", uRI0, response0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1593, "", hashMap0, "");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "", (URI) null, response0);
      URI uRI0 = oAuth2AccessTokenErrorResponse0.getErrorUri();
      assertNotNull(uRI0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(590, "nhKuzq~/,q*p%C", hashMap0, "nhKuzq~/,q*p%C");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "nhKuzq~/,q*p%C", uRI0, response0);
      OAuth2Error oAuth2Error1 = oAuth2AccessTokenErrorResponse0.getError();
      assertNotNull(oAuth2Error1.getErrorString());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.EXPIRED_TOKEN;
      URI uRI0 = MockURI.URI("Go5qp");
      Response response0 = new Response(1, "Go5qp", (Map<String, String>) null, (String) null);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, "Go5qp", uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
      assertNotNull(string0);
}
