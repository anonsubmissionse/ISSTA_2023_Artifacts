 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(0, "N)DxNjHJbdy,gVA_y", (Map<String, String>) null, pipedInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.model.Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response(0, "", hashMap0, (InputStream) null, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)45);
      Response response0 = new Response((-1000), "", map0, byteArrayInputStream0, (Closeable[]) null);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2257);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(2257, "qG8js{;~Go|!)u{i{", map0, pipedInputStream0, closeableArray0);
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response((-1149), "no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", map0, "h5Ba^\"F(");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // h5Ba^\"F(
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract((Response) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.extractors.DeviceAuthorizationJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1680), (byte)27);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response(171, (String) null, hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Closeable[] closeableArray0 = new Closeable[0];
      Response response0 = new Response(1710, "", map0, pipedInputStream0, closeableArray0);
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-1277), "0GF>o", hashMap0, "0GF>o");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // 0GF>o
         //
         verifyException("com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, "", map0, "{Tgo@[WvQY47)holvVt");
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unexpected character ('T' (code 84)): was expecting double-quote to start field name
         //  at [Source: (String)\"{Tgo@[WvQY47)holvVt\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, "com.fasterxml.jackson.databind.deser.impl.ValueInjector", hashMap0, "");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: ''
         //
         verifyException("com.github.scribejava.core.extractors.AbstractJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, "", map0, "");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'device_code' from this: ''
         //
         verifyException("com.github.scribejava.core.extractors.AbstractJsonExtractor", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Closeable[] closeableArray0 = new Closeable[2];
      Response response0 = new Response(0, "", (Map<String, String>) null, (InputStream) null, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      String string0 = deviceAuthorizationJsonExtractor0.getVerificationUriParamName();
      assertNotNull(string0);
}
