 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      OAuthAsyncRequestCallback<Integer> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Integer>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Integer> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Integer>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      Future<Integer> future0 = jDKHttpClient0.executeAsync("QH{EZzz)eb_Cs0", (Map<String, String>) hashMap0, verb0, "", "QH{EZzz)eb_Cs0", oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[0];
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<String> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<String>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuthRequest_ResponseConverter0).convert(any(com.github.scribejava.core.model.Response.class));
      Future<String> future0 = jDKHttpClient0.executeAsync("http://", (Map<String, String>) hashMap0, verb0, "http://", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https:/B/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "}lmW2CHG/ .kzII?peJ");
      byte[] byteArray0 = new byte[8];
      Response response0 = jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, "https:/B/", byteArray0);
      assertNotNull(response0.getMessage());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      byte[] byteArray0 = new byte[8];
      Response response0 = jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, "https:/B/", byteArray0);
      assertEquals(0, response0.getCode());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https:/B/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",rmesa*e='");
      MultipartPayload multipartPayload0 = new MultipartPayload("https:/B/");
      Response response0 = jDKHttpClient0.execute("https:/B/", (Map<String, String>) hashMap0, verb0, "https:/B/", multipartPayload0);
      assertNotNull(response0.getMessage());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      byte[] byteArray0 = new byte[8];
      try { 
        jDKHttpClient0.execute("]C2+C,=8,=Gjk'", (Map<String, String>) hashMap0, verb0, "https://", byteArray0);
        fail("Expecting exception: ProtocolException");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.TRACE;
      byte[] byteArray0 = new byte[2];
      try { 
        jDKHttpClient0.execute("6V5'ESm7sA%", (Map<String, String>) hashMap0, verb0, "com.github.scribejava.core.httpclient.jdk.JDKHttpClient$BodyType", byteArray0);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no protocol: com.github.scribejava.core.httpclient.jdk.JDKHttpClient$BodyType
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("http://", (Map<String, String>) hashMap0, verb0, "http://", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[8];
      Integer integer0 = new Integer((-1241));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, "https:/B/", byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.withProxy(proxy0);
      byte[] byteArray0 = new byte[8];
      Verb verb0 = Verb.GET;
      try { 
        jDKHttpClient0.execute("https://", (Map<String, String>) hashMap0, verb0, "https://", byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "https://", ", message='");
        fail("Expecting exception: UnknownServiceException");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PATCH;
      try { 
        jDKHttpClient0.execute("https://", (Map<String, String>) hashMap0, verb0, "https://", "]C2+C,=8,=Gjk'");
        fail("Expecting exception: ProtocolException");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "Dj EDVeI'*rV,w", "Dj EDVeI'*rV,w");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no protocol: Dj EDVeI'*rV,w
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "https://", ", message='");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Integer integer0 = new Integer((-589));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("https://", (Map<String, String>) hashMap0, verb0, "https://", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      MultipartPayload multipartPayload0 = new MultipartPayload("com.github.scribejava.core.model.Verb");
      try { 
        jDKHttpClient0.execute("https:/B/", (Map<String, String>) hashMap0, verb0, "https:/B/", multipartPayload0);
        fail("Expecting exception: UnknownServiceException");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultipartPayload multipartPayload0 = new MultipartPayload("com.github.scribejava.core.model.Verb");
      Verb verb0 = Verb.PATCH;
      try { 
        jDKHttpClient0.execute("~kc6zZ> 9[xI#BkmR_", (Map<String, String>) hashMap0, verb0, "https:/B/", multipartPayload0);
        fail("Expecting exception: ProtocolException");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      MultipartPayload multipartPayload0 = new MultipartPayload(hashMap0);
      try { 
        jDKHttpClient0.execute("Zum=AVA ", (Map<String, String>) hashMap0, verb0, "Zum=AVA ", multipartPayload0);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no protocol: Zum=AVA 
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute(", `ssagX", (Map<String, String>) hashMap0, verb0, "https://", (MultipartPayload) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      MultipartPayload multipartPayload0 = new MultipartPayload("https:/X'", "https:/X'");
      Map<String, String> map0 = multipartPayload0.getHeaders();
      byte[] byteArray0 = new byte[9];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, 400, (byte)8, "https:/X'");
      multipartPayload0.addBodyPart((BodyPartPayload) byteArrayBodyPartPayload0);
      Verb verb0 = Verb.PUT;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute((String) null, map0, verb0, "https:/X'", multipartPayload0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      Integer integer0 = new Integer((-1475));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      MultipartPayload multipartPayload0 = new MultipartPayload("com.github.scribejava.core.model.Verb");
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "https://", multipartPayload0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getByName("https://");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 5);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      jDKHttpClientConfig0.setProxy(proxy0);
      MultipartPayload multipartPayload0 = new MultipartPayload("com.github.scribejava.core.model.Verb");
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "https://", multipartPayload0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload("com.github.scribejava.core.model.Verb");
      Map<String, String> map0 = multipartPayload0.getHeaders();
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<String> future0 = jDKHttpClient0.executeAsync("https://", map0, verb0, "https://", multipartPayload0, oAuthAsyncRequestCallback0, (OAuthRequest.ResponseConverter<String>) null);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https:");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ", message='");
      Response response0 = jDKHttpClient0.execute("https://", (Map<String, String>) hashMap0, verb0, "https://", "");
      assertNotNull(response0.getMessage());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      Integer integer0 = new Integer(3);
      jDKHttpClientConfig0.withReadTimeout(integer0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      byte[] byteArray0 = new byte[8];
      OAuthAsyncRequestCallback<Integer> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Integer>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Integer> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Integer>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      Future<Integer> future0 = jDKHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "https://", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.withProxy(proxy0);
      try { 
        jDKHttpClient0.execute("", (Map<String, String>) hashMap0, verb0, "https://", ", message='");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Future<LinkedList<LinkedList>> future0 = jDKHttpClient0.executeAsync("Nz\u0000=E8uw`tbj", (Map<String, String>) hashMap0, verb0, "", (byte[]) null, (OAuthAsyncRequestCallback<LinkedList<LinkedList>>) null, (OAuthRequest.ResponseConverter<LinkedList<LinkedList>>) null);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload("", "https://");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OAuthRequest.ResponseConverter<LinkedList<Integer>> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<LinkedList<Integer>>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(oAuthRequest_ResponseConverter0).convert(any(com.github.scribejava.core.model.Response.class));
      Future<LinkedList<Integer>> future0 = jDKHttpClient0.executeAsync("https://", (Map<String, String>) hashMap0, verb0, "https://", multipartPayload0, (OAuthAsyncRequestCallback<LinkedList<Integer>>) null, oAuthRequest_ResponseConverter0);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      MockFile mockFile0 = new MockFile("O*$gTw26-^a:``C.5");
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("application/x-www-form-urlencoded", (Map<String, String>) hashMap0, verb0, "application/x-www-form-urlencoded", (File) mockFile0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.HEAD;
      MockFile mockFile0 = new MockFile("Dt~XtCZ.8#NJY^hf", "Dt~XtCZ.8#NJY^hf");
      OAuthAsyncRequestCallback<AbstractMap.SimpleImmutableEntry<String, String>> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<AbstractMap.SimpleImmutableEntry<String, String>>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<AbstractMap.SimpleImmutableEntry<String, String>> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<AbstractMap.SimpleImmutableEntry<String, String>>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jDKHttpClient0.executeAsync("Dt~XtCZ.8#NJY^hf", (Map<String, String>) null, verb0, "Dt~XtCZ.8#NJY^hf", (File) mockFile0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException("com.github.scribejava.core.httpclient.jdk.JDKHttpClient", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<String> future0 = jDKHttpClient0.executeAsync("", (Map<String, String>) hashMap0, verb0, "", ", message='", oAuthAsyncRequestCallback0, (OAuthRequest.ResponseConverter<String>) null);
      assertNotNull(future0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      jDKHttpClient0.close();
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Response response0 = jDKHttpClient0.execute("https://", (Map<String, String>) hashMap0, verb0, "https://", "");
      assertTrue(response0.isSuccessful());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload("https:/B/");
      Response response0 = jDKHttpClient0.execute("https:/B/", (Map<String, String>) hashMap0, verb0, "https:/B/", multipartPayload0);
      assertTrue(response0.isSuccessful());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[7];
      try { 
        jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, "https:/B/", byteArray0);
        fail("Expecting exception: UnknownServiceException");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
