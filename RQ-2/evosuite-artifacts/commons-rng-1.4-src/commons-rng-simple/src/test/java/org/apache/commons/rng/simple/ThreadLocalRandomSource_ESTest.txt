 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        ThreadLocalRandomSource.current(randomSource0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadLocalRandomSource.current((RandomSource) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Random source is null
         //
         verifyException("org.apache.commons.rng.simple.ThreadLocalRandomSource", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES;
      TwoCmres twoCmres0 = (TwoCmres)ThreadLocalRandomSource.current(randomSource0);
      assertEquals(0, twoCmres0.numberOfSubcycleGenerators());
}
