/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:44:01 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateContinuousSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InverseTransformParetoSampler_ESTest extends InverseTransformParetoSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong();
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 1435.90338914078, 1435.90338914078);
      double double0 = inverseTransformParetoSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = InverseTransformParetoSampler.of(jDKRandomWrapper0, 768.6171016417, 768.6171016417);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1.0, 1.0);
      // Undeclared exception!
      try { 
        inverseTransformParetoSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1075.9367933543, 1075.9367933543);
      // Undeclared exception!
      try { 
        inverseTransformParetoSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = null;
      try {
        inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = null;
      try {
        inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1047.47051, (-1715.9689407315568));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: -1715.9689407315568
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        InverseTransformParetoSampler.of(jDKRandomWrapper0, (-1554.861), 134.4509303063411);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: -1554.861
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 134.4509303063411, 134.4509303063411);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = inverseTransformParetoSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 134.4509303063411, 134.4509303063411);
      String string0 = inverseTransformParetoSampler0.toString();
      assertNotNull(string0);
}
}
