 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1042.94129003714;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 9);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9007199254740992L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9007199254740992L;
      doubleArray0[1] = (double) 9007199254740992L;
      doubleArray0[2] = (double) 9007199254740992L;
      doubleArray0[3] = (double) 9007199254740992L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 11);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 878.0153;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler1 = (AliasMethodDiscreteSampler)aliasMethodDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-2934));
      Random.setNextRandom((-2934));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      jDKRandomWrapper0.nextFloat();
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-2934));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[14];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler1 = (AliasMethodDiscreteSampler)aliasMethodDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper1);
      assertNotNull(aliasMethodDiscreteSampler1);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      jDKRandomWrapper0.nextDouble();
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      jDKRandomWrapper0.nextDouble();
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1042.94129003714;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, (-3566));
      // Undeclared exception!
      try { 
        aliasMethodDiscreteSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      // Undeclared exception!
      try { 
        ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.JDKRandomWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 15;
      // Undeclared exception!
      AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 15);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 2351);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InternalUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[30];
      doubleArray0[0] = (double) 19L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InternalUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[30];
      doubleArray0[0] = (double) 19L;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      String string0 = aliasMethodDiscreteSampler0.toString();
      ;
}
