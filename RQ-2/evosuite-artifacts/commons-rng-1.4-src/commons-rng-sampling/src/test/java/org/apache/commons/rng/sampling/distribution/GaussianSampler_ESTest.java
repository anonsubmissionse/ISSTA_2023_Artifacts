/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:42:44 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.BoxMullerNormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.GaussianSampler;
import org.apache.commons.rng.sampling.distribution.MarsagliaNormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.NormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateContinuousSampler;
import org.apache.commons.rng.sampling.distribution.ZigguratNormalizedGaussianSampler;
import org.apache.commons.rng.sampling.distribution.ZigguratSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSampler_ESTest extends GaussianSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, 0L, 1044.425165566899);
      gaussianSampler0.sample();
      double double0 = gaussianSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratNormalizedGaussianSampler0, 445.3931759021, 445.3931759021);
      double double0 = gaussianSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = GaussianSampler.of((NormalizedGaussianSampler) null, 2932.51460527, 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GaussianSampler gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, 2932.51460527, 2932.51460527);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        gaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // The underlying sampler cannot share state
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InternalUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GaussianSampler gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, 1.807254403727107E-20, 1.807254403727107E-20);
      // Undeclared exception!
      try { 
        gaussianSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(marsagliaNormalizedGaussianSampler0, 0.0, 2491.057630573);
      // Undeclared exception!
      try { 
        gaussianSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.JDKRandomWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, Double.POSITIVE_INFINITY, 7.192701758763107E-20);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // mean is not finite: Infinity
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GaussianSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler(marsagliaNormalizedGaussianSampler0, 666.05, (-1687.3809709124291));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // standard deviation is not strictly positive and finite: -1687.3809709124291
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GaussianSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4088L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        GaussianSampler.of(boxMullerNormalizedGaussianSampler0, Double.POSITIVE_INFINITY, 2.0463090951473895E-20);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // mean is not finite: Infinity
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GaussianSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // standard deviation is not strictly positive and finite: Infinity
         //
         verifyException("org.apache.commons.rng.sampling.distribution.GaussianSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      String string0 = gaussianSampler0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = gaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      double double0 = gaussianSampler0.sample();
      ;
}
}
