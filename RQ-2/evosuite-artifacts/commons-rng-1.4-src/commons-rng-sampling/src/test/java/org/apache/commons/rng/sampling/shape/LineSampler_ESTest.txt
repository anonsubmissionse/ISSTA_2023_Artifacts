 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2095L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(587L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[9];
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 9,7
         //
         verifyException("org.apache.commons.rng.sampling.shape.LineSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967295L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4294967295L;
      mockRandom0.nextInt();
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1253.17;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      mockRandom0.nextLong();
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      mockRandom0.nextLong();
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      jDKRandomWrapper0.nextInt();
      doubleArray0[0] = (-2395.11568160212);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1521L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-1521L);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1521L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1521L);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 979.81817416795;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LineSampler lineSampler0 = LineSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        lineSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.LineSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.shape.LineSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        LineSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unsupported dimension: 0
         //
         verifyException("org.apache.commons.rng.sampling.shape.LineSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[10];
      double[] doubleArray2 = lineSampler0.sample();
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 3,10
         //
         verifyException("org.apache.commons.rng.sampling.shape.LineSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
