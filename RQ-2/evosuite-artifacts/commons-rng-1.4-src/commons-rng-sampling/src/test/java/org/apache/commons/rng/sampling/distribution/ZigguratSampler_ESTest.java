/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:45:29 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.ZigguratSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZigguratSampler_ESTest extends ZigguratSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ZigguratSampler.interpolate(doubleArray0, 2, 0L);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4893586984900802560L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) (-4893586984900802560L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: -4.8935869849008026E18
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ZigguratSampler$Exponential", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-2147483647));
      zigguratSampler_Exponential0.sample();
      zigguratSampler_Exponential0.sample();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.toString("=rc_ET");
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextInt();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.randomInt63();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.nextLong();
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1682.45501191;
      ZigguratSampler.interpolate(doubleArray0, 1, 1);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-584.9);
      ZigguratSampler.interpolate(doubleArray0, 1, 1);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) null, 1.8005941154528286E-20);
      // Undeclared exception!
      try { 
        zigguratSampler_Exponential0.toString(" but was ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        zigguratSampler_NormalizedGaussian0.randomInt63();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.JDKRandomWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        zigguratSampler_NormalizedGaussian0.nextLong();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ZigguratSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ZigguratSampler.interpolate(doubleArray0, (-2062), (-2062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-4602));
      zigguratSampler_Exponential0.nextLong();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      byte[] byteArray0 = new byte[7];
      jDKRandomWrapper0.nextBytes(byteArray0);
      zigguratSampler_NormalizedGaussian0.nextLong();
      zigguratSampler_NormalizedGaussian0.sample();
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ZigguratSampler$Exponential", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-4602));
      zigguratSampler_Exponential0.nextLong();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      zigguratSampler_NormalizedGaussian0.nextLong();
      double double0 = zigguratSampler_NormalizedGaussian0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1);
      Random.setNextRandom((-4602));
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      jDKRandomWrapper0.nextFloat();
      double double0 = zigguratSampler_Exponential0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      long long0 = zigguratSampler_NormalizedGaussian0.randomInt63();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZigguratSampler.interpolate((double[]) null, 245, 1L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L);
      zigguratSampler_Exponential0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0);
      ZigguratSampler.Exponential zigguratSampler_Exponential1 = zigguratSampler_Exponential0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L);
      zigguratSampler_Exponential0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      String string0 = zigguratSampler_NormalizedGaussian0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian1 = zigguratSampler_NormalizedGaussian0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
}
