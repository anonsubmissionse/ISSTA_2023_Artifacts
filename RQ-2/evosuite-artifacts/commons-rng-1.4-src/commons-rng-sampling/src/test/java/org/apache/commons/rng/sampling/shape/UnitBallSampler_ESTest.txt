 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        UnitBallSampler.of(jDKRandomWrapper0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException("org.apache.commons.rng.sampling.shape.UnitBallSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2370L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 3);
      UnitBallSampler unitBallSampler1 = UnitBallSampler.of(jDKRandomWrapper0, 1609);
      unitBallSampler1.sample();
      UnitBallSampler unitBallSampler2 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      unitBallSampler2.sample();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 2);
      Random.setNextRandom((-1954));
      unitBallSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 4855);
      unitBallSampler0.sample();
      unitBallSampler0.sample();
      // Undeclared exception!
      unitBallSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 3);
      // Undeclared exception!
      try { 
        unitBallSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        UnitBallSampler.of(jDKRandomWrapper0, (-2169));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException("org.apache.commons.rng.sampling.shape.UnitBallSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 2);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 29);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 1);
      double[] doubleArray0 = unitBallSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 1);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
