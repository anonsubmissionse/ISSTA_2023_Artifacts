 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      int int1 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      int int1 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 889, 889);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 889, 889);
      int int0 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1, 1);
      int int0 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 1582, 620L);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 981, 981);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 682, 73.6655104);
      int int0 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      int int0 = rejectionInversionZipfSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, (-24.206209717834803));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // exponent is not strictly positive: -24.206209717834803
         //
         verifyException("org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, 0.9999999995);
      int int0 = ((RejectionInversionZipfSampler) sharedStateDiscreteSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      String string0 = rejectionInversionZipfSampler0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = rejectionInversionZipfSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
