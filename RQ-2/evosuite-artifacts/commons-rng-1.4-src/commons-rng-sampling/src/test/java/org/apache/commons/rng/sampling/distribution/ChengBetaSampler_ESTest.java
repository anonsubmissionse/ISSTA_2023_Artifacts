/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:39:41 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.ChengBetaSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChengBetaSampler_ESTest extends ChengBetaSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.7976931348623157E308, 593.308172212851);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = null;
      try {
        chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // beta is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ChengBetaSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ChengBetaSampler.of(jDKRandomWrapper0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ChengBetaSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      chengBetaSampler0.withUniformRandomProvider(jDKRandomWrapper1);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 321.9616321517238, 1043.17743872);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      chengBetaSampler0.withUniformRandomProvider(jDKRandomWrapper1);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.2827650848312727E-19, 2.6795015188771505E-19);
      jDKRandomWrapper0.nextFloat();
      chengBetaSampler0.sample();
      chengBetaSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextDouble();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.0842021724855044E-19, 2311.7325576);
      chengBetaSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(217);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 261.8172233000825, 1.7976931348623157E308);
      chengBetaSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler((UniformRandomProvider) null, 1.7976931348623157E308, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        chengBetaSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ChengBetaSampler$ChengBBBetaSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-695L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = null;
      try {
        chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, (-695L), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: -695.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ChengBetaSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 1941.7, 1941.7);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 4324.298479049, 1L);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 0.3333333333333333, 983.1);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ChengBetaSampler.of(jDKRandomWrapper0, (byte)29, (-1.3783261914707137));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // beta is not strictly positive: -1.3783261914707137
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ChengBetaSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.2827650848312727E-19, 2.6795015188771505E-19);
      // Undeclared exception!
      chengBetaSampler0.sample();
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      jDKRandomWrapper0.nextLong();
      double double0 = chengBetaSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      jDKRandomWrapper0.nextLong();
      double double0 = chengBetaSampler0.sample();
      byte[] byteArray0 = new byte[3];
      jDKRandomWrapper0.nextBytes(byteArray0);
      double double1 = chengBetaSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 4L, 4L);
      jDKRandomWrapper0.nextLong();
      chengBetaSampler0.sample();
      byte[] byteArray0 = new byte[3];
      jDKRandomWrapper0.nextBytes(byteArray0);
      chengBetaSampler0.sample();
      double double0 = chengBetaSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 4L, 4L);
      double double0 = chengBetaSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      String string0 = chengBetaSampler0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 3794.945007038072, 0.2);
      double double0 = chengBetaSampler0.sample();
      ;
}
}
