/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:39:27 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.StableSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StableSampler_ESTest extends StableSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, 1.743934249004316E-16, 1.743934249004316E-16, 1.7976931348623157E308, (double) 2L);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 0.0, (double) (byte)0, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (-711.0821230066488), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: -711.0821230066488
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.02, 0.0588760887562371);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.5155544070948754, 1.1163735233742434E-17, (double) 480L, 1.5155544070948754);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 8.417560957458018E-4, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (-7.109486060623279E-21), 0.02, 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2((-0.006614626439127607));
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2(0.5);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3097L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 3097L);
      double double0 = stableSampler_Beta0CMSStableSampler0.createSample(3097L, 3097L);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0L);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, Double.POSITIVE_INFINITY);
      double double0 = stableSampler_Alpha1CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      Random.setNextRandom((-2146880251));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.7853981633974483);
      double double0 = stableSampler_Alpha1CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      Random.setNextRandom(2147483646);
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.7853981633974483, 1.1163735233742434E-17, (double) 480L, 0.7853981633974483);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler((UniformRandomProvider) null, (-0.2601572725547915), 1);
      double double0 = stableSampler_CMSStableSampler0.createSample(2.3638730730218806E-22, 194.22);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, Double.POSITIVE_INFINITY, 1.0);
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextDouble();
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 1.0, (double) (byte)3, 0.5);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L, 0.0, (double) 1L, (double) 1L);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 2L, (double) 0.1F, (double) 0.1F, (double) 0.1F);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 683.115494854595);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double double0 = stableSampler1.sample();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, (-2147483647));
      jDKRandomWrapper0.nextDouble();
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom(1590);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 1590);
      double double0 = stableSampler_Beta0WeronStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-7.273940551075394E9), 0.0);
      double double0 = stableSampler_CMSStableSampler0.createSample(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.tan2(4.9468559775425065E8);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = StableSampler.CMSStableSampler.getTau((-2396.5768102610937), Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.0, (-2396.5768102610937));
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler1 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 2.1254973418582485E9);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = stableSampler_Beta0CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-231.974783));
      double double0 = stableSampler_Beta0WeronStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1379L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-1379L));
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler1 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, stableSampler_Beta0WeronStableSampler0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0L);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler1 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, stableSampler_Beta0CMSStableSampler0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.5);
      double double0 = stableSampler_Beta0WeronStableSampler0.getOmega();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.02);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler1 = stableSampler_Alpha1CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.02);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler1 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, stableSampler_Alpha1CMSStableSampler0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1153.735274, (-1610.3097655303743));
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.0);
      long long0 = stableSampler_Beta0WeronStableSampler0.nextLong();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-231.974783));
      long long0 = stableSampler_Beta0WeronStableSampler0.nextLong();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 692.9659841025517);
      // Undeclared exception!
      try { 
        stableSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, 1.0, 1.0);
      // Undeclared exception!
      try { 
        stableSampler_WeronStableSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.simple.JDKRandomWrapper", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 683.115494854595);
      // Undeclared exception!
      try { 
        stableSampler0.nextLong();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.743934249004316E-16, (double) 0L, 1.743934249004316E-16, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // delta is not finite: NaN
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, 1.0, Double.POSITIVE_INFINITY, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: Infinity
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 9.219991677885158E-16, 0.2529241064028508, (double) (-791L), 0.5);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: -791.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.6366197723675814, (double) (byte)94);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // beta is not in the interval [-1, 1]: 94.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0015526828175885465, (-644.046542328), Double.POSITIVE_INFINITY, (double) (-5377));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // beta is not in the interval [-1, 1]: -644.046542328
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)3, (double) (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: 3.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 0.1, (double) (byte)3, 0.5);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2(0.1F);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 1L);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0.0);
      double double0 = stableSampler_Beta0CMSStableSampler0.createSample((-9L), (-9L));
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Random.setNextRandom((-5377));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0.02);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom((-5377));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      double double0 = stableSampler_CMSStableSampler0.sample();
      double double1 = stableSampler_WeronStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0015526828175885465, (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1.3348791997621723E229, 1.3348791997621723E229);
      double double0 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1.3348791997621723E229, 1.3348791997621723E229);
      double double0 = stableSampler_CMSStableSampler0.sample();
      double double1 = stableSampler_CMSStableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 2L, (double) 0.1F, (double) 0.1F, (double) 0.1F);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 2.0, (double) 1);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (double) 0L);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (double) 0L);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, (double) 1L);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.919615751480737, 0.0, (double) 1L, 1.919615751480737);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L, (double) 1L, (double) 1L, (double) 0.0F);
      String string0 = stableSampler0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler1 = stableSampler_WeronStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.02, 0.0);
      double double0 = stableSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.5);
      StableSampler stableSampler0 = stableSampler_Beta0WeronStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      String string0 = stableSampler_CMSStableSampler0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.StableSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, -0.0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler1 = stableSampler_Beta0CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.0, 0.0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler1 = stableSampler_CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
}
