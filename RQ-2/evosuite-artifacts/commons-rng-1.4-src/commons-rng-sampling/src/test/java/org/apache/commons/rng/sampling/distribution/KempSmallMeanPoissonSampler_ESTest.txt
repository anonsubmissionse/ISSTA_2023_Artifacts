 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, (-306.23));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: -306.23
         //
         verifyException("org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler1 = (KempSmallMeanPoissonSampler)kempSmallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      String string0 = kempSmallMeanPoissonSampler1.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 2.768053873679476);
      // Undeclared exception!
      try { 
        ((KempSmallMeanPoissonSampler) sharedStateDiscreteSampler0).sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 1889.7667067);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No probability for mean: 1889.7667067
         //
         verifyException("org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: 0.0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      // Undeclared exception!
      try { 
        kempSmallMeanPoissonSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler1 = (KempSmallMeanPoissonSampler)kempSmallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      kempSmallMeanPoissonSampler1.sample();
      int int0 = kempSmallMeanPoissonSampler1.sample();
      ;
}
