 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(continuousInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      double double0 = inverseTransformContinuousSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2689.2), (-2689.2), 66.0).when(continuousInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      double double0 = inverseTransformContinuousSampler0.sample();
      inverseTransformContinuousSampler0.sample();
      double double1 = inverseTransformContinuousSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, (ContinuousInverseCumulativeProbabilityFunction) null);
      // Undeclared exception!
      try { 
        inverseTransformContinuousSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformContinuousSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      String string0 = inverseTransformContinuousSampler0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      SharedStateContinuousSampler sharedStateContinuousSampler0 = InverseTransformContinuousSampler.of(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = inverseTransformContinuousSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler((UniformRandomProvider) null, continuousInverseCumulativeProbabilityFunction0);
      // Undeclared exception!
      try { 
        inverseTransformContinuousSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
