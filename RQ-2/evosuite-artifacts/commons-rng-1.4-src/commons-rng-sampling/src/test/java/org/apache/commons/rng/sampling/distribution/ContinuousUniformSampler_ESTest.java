/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:37:59 GMT 2022
 */

package org.apache.commons.rng.sampling.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler;
import org.apache.commons.rng.sampling.distribution.SharedStateContinuousSampler;
import org.apache.commons.rng.simple.JDKRandomWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContinuousUniformSampler_ESTest extends ContinuousUniformSampler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, 0.0, true);
      assertNotNull(sharedStateContinuousSampler0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) null, (-255.0), 1444.68006847362);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      assertNotNull(sharedStateContinuousSampler0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
      double double0 = continuousUniformSampler0.getLo();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 4294967296L, 0.0);
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 4294967296L, 0.0);
      double double0 = continuousUniformSampler0.getLo();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, (-255L), (-255L));
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, (-255L), (-255L));
      double double0 = continuousUniformSampler0.getLo();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      double double0 = continuousUniformSampler0.getHi();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 1.0, 1.0);
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 1.0, 1.0);
      double double0 = continuousUniformSampler0.getHi();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 535.99298214164, (-2066.19));
      assertNotNull(continuousUniformSampler0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 535.99298214164, (-2066.19));
      double double0 = continuousUniformSampler0.getHi();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte) (-20), (double) (byte)50, true);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
      // Undeclared exception!
      try { 
        continuousUniformSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 49.1, 49.1, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid open interval (49.1,49.1)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) null, 0.0, 3129.5, false);
      // Undeclared exception!
      try { 
        continuousUniformSampler0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)50, (double) (byte)49, true);
      ContinuousUniformSampler continuousUniformSampler1 = (ContinuousUniformSampler)continuousUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      assertNotNull(continuousUniformSampler1);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)21, (double) (byte) (-128), true);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) null, (-1.0), (-1.0));
      ContinuousUniformSampler continuousUniformSampler1 = (ContinuousUniformSampler)continuousUniformSampler0.withUniformRandomProvider((UniformRandomProvider) null);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)21, (double) (byte) (-128), true);
      String string0 = continuousUniformSampler0.toString();
      assertNotNull(string0);
}
}
