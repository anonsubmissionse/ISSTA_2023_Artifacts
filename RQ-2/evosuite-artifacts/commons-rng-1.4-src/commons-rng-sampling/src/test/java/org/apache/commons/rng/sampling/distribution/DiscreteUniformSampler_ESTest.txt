 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom(1717986918);
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1373), 2048);
      int int0 = discreteUniformSampler0.sample();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1444), 0);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 0, 255);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1), 0);
      jDKRandomWrapper0.nextInt();
      int int0 = discreteUniformSampler0.sample();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 0, 0);
      int int0 = discreteUniformSampler0.sample();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 1, 275);
      // Undeclared exception!
      try { 
        discreteUniformSampler0.sample();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler$SmallRangeDiscreteUniformSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = null;
      try {
        discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 19, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 19 > 0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 16, 17);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, (-1058), 0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 0, 62);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        DiscreteUniformSampler.of(jDKRandomWrapper0, 50, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 50 > 0
         //
         verifyException("org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 2, 6);
      int int0 = discreteUniformSampler0.sample();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 2, 6);
      String string0 = discreteUniformSampler0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 50, 50);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      ;
}
