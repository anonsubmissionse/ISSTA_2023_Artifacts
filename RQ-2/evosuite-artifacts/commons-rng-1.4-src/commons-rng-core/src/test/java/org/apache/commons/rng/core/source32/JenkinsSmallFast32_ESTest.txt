 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      jenkinsSmallFast32_0.nextDouble();
      int int0 = jenkinsSmallFast32_0.next();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.setStateInternal((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.core.BaseProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1372);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.setStateInternal(byteArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 7
         //
         verifyException("org.apache.commons.rng.core.BaseProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JenkinsSmallFast32 jenkinsSmallFast32_0 = null;
      try {
        jenkinsSmallFast32_0 = new JenkinsSmallFast32((Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.core.source32.JenkinsSmallFast32", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      int int0 = jenkinsSmallFast32_0.next();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-236298515));
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = jenkinsSmallFast32_0.getStateInternal();
      jenkinsSmallFast32_0.setStateInternal(byteArray0);
      ;
}
