/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:09:19 GMT 2022
 */

package org.apache.commons.rng.core.source64;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.rng.core.source64.TwoCmres;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TwoCmres_ESTest extends TwoCmres_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-1851L), (-2548), (-2548));
      linkedList0.add(twoCmres_Cmres0);
      TwoCmres.Cmres.Factory.checkUnique(linkedList0, 0L);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TwoCmres.Cmres.Factory twoCmres_Cmres_Factory0 = new TwoCmres.Cmres.Factory();
      // Undeclared exception!
      try { 
        twoCmres_Cmres_Factory0.get(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-1311035227701529639L), 1954, 1954);
      twoCmres_Cmres0.transform((-8823573168932131537L));
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-2009L), 56, (-1));
      twoCmres_Cmres0.toString();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(3692L, Integer.MAX_VALUE, Integer.MAX_VALUE);
      twoCmres_Cmres0.getMultiply();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(56);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      byte[] byteArray0 = twoCmres0.getStateInternal();
      twoCmres0.setStateInternal(byteArray0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(56);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      twoCmres0.nextFloat();
      twoCmres0.next();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(1);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        twoCmres0.setStateInternal(byteArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 5
         //
         verifyException("org.apache.commons.rng.core.BaseProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres((Integer) null, 244, 244);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(106120225);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres((Integer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(2040L, 1, 1);
      int int0 = twoCmres_Cmres0.getStart();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(2040L, 1, 1);
      int int0 = twoCmres_Cmres0.getStart();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(878);
      TwoCmres twoCmres0 = new TwoCmres(integer0, 0, 8);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(3925L, Integer.MAX_VALUE, Integer.MAX_VALUE);
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      linkedList0.add(twoCmres_Cmres0);
      // Undeclared exception!
      try { 
        TwoCmres.Cmres.Factory.checkUnique(linkedList0, 3925L);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Internal error: Please file a bug report
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(7);
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres(integer0, 7, 79);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(7);
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres(integer0, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Subcycle generators must be different
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(6);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      // Undeclared exception!
      try { 
        twoCmres0.setStateInternal((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.core.BaseProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(156);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      long long0 = twoCmres0.next();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(156);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      String string0 = twoCmres0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(386L, (-855), (-855));
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      linkedList0.add(twoCmres_Cmres0);
      TwoCmres.Cmres.Factory.checkUnique(linkedList0, (-151293619798402135L));
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TwoCmres.Cmres.Factory twoCmres_Cmres_Factory0 = new TwoCmres.Cmres.Factory();
      // Undeclared exception!
      try { 
        twoCmres_Cmres_Factory0.get((-1287));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException("org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = TwoCmres.numberOfSubcycleGenerators();
      ;
}
}
