/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:36:50 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.Format;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.CalendarValidator;
import org.apache.commons.validator.routines.DateValidator;
import org.apache.commons.validator.routines.TimeValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractCalendarValidator_ESTest extends AbstractCalendarValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(2035);
      dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, timeZone0);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      TimeValidator timeValidator0 = new TimeValidator();
      timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1), (-1));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1));
      timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      Locale locale0 = Locale.JAPANESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.setTimeInMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(0, 5, 0, 1282, 12, (-1101));
      mockGregorianCalendar1.set(12, 0, (-2241));
      mockGregorianCalendar0.set(0, 0, (-1179));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-2241));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4, 4);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 4);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(12, 0, (-2241));
      calendar0.set(0, 0, (-1185));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 2640);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, 6, 6, 6, 6);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(6, 6, 6, 6, 6);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 6);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 610);
      MockDate mockDate0 = new MockDate(0, (-1), 5);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("nH0-X6kP6a[{", parsePosition0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.validator.routines.TimeValidator");
      int int0 = dateValidator0.compareMonths(mockDate0, date0, timeZone0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) calendarValidator0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "R'H*+r8b5ka#tQ8ju");
      Calendar calendar0 = calendarValidator0.validate("6b@A'>/t", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      boolean boolean0 = timeValidator0.isValid("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "R'H*+r8b5ka#tQ8ju");
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      Object object0 = timeValidator0.parse("iDwv:vh;?Y j", (String) null, locale0, simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone("2/14/14");
      Object object0 = calendarValidator0.parse("2/14/14", "2/14/14", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone("2/14/14");
      Object object0 = calendarValidator0.parse("2/14/14", "2/14/14", locale0, timeZone0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeValidator0.getFormat("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeValidator0.getFormat("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2901));
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = calendarValidator0.format((Object) null, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      String string0 = calendarValidator0.format((Object) calendar0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Object object0 = timeValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
      String string0 = timeValidator0.format(object0, (Format) mockSimpleDateFormat0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = calendarValidator0.format((Object) null, "", timeZone0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate(5, 1641, 1641, (-296), 2634);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      String string0 = dateValidator0.format((Object) mockDate0, (String) null, timeZone0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateValidator0.format((Object) null, "", locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = calendarValidator0.format((Object) mockGregorianCalendar0, "^]M", (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      TimeValidator timeValidator0 = new TimeValidator(false, (-1));
      int int0 = timeValidator0.compareTime(calendar0, calendar0, 14);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 59, 59, 59, 59, 59);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(59, 59, 59, 59, 59);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0, 1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 11, (-3914), (-3914), (-3914));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, mockGregorianCalendar0, 0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, calendar0, 704);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, calendar0, 704);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      // Undeclared exception!
      try { 
        dateValidator0.parse("/#XnG.", "X*m]{?_t^ZM44n}_(J", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        calendarValidator0.isValid("org.apache.commons.validator.routines.TimeValidator", "org.apache.commons.validator.routines.TimeValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 54);
      Locale locale0 = new Locale("Z<", "Z<", "Z<");
      // Undeclared exception!
      try { 
        timeValidator0.getFormat(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 54
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        calendarValidator0.getFormat("X*m]{?_t^ZM44n}_(J", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        timeValidator0.format(object0, (Format) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      DateValidator dateValidator0 = DateValidator.getInstance();
      MessageFormat messageFormat0 = new MessageFormat("");
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) calendar0, (Format) messageFormat0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to [Ljava.lang.Object;
         //
         verifyException("java.text.MessageFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("8=eFpLb!&g");
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) mockDateFormat0, (String) null, locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareTime((Calendar) null, (Calendar) null, 8);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 152);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        calendarValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0, 152);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid field: 152
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 1283);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(422, (-946), (-946));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters(mockGregorianCalendar0, (Calendar) null, (-946));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.compare((Calendar) null, (Calendar) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, 486);
      // Undeclared exception!
      try { 
        timeValidator0.compare(calendar0, calendar0, 2640);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(1, 0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        calendarValidator0.format((Object) dateFormat0, (Format) numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getInstance();
      String string0 = calendarValidator0.format((Object) calendar0, (Format) dateFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("");
      CalendarValidator calendarValidator0 = new CalendarValidator();
      String string0 = calendarValidator0.format((Object) null, (Format) messageFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      String string0 = timeValidator0.format((Object) null, "", locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, "2/14/14", locale0, (TimeZone) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, "2/14/14", locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      boolean boolean0 = calendarValidator0.isValid(";?", ";?", locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(12, 0, (-2254));
      int int0 = timeValidator0.compareQuarters(calendar0, mockGregorianCalendar0, 311);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1050), (-1050), (-1050), (-1050), (-1050), (-1050));
      // Undeclared exception!
      try { 
        timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, (-1050));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid field: -1050
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = timeValidator0.compareSeconds(calendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(54, 54, 54, 54, 54, 54);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(54, 54, 54, 54, 54);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 54);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      int int0 = timeValidator0.compareMinutes(calendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-11), (-11), (-11), (-11), (-11), (-11));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-11), (-11), (-11), (-11), (-11));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-11));
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, (-1597));
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, (-1597));
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidatoh");
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-216), (-1), (-216), (-1), (-1), (-1));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar1, 1237);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      int int0 = calendarValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 8);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 7);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeValidator timeValidator0 = new TimeValidator();
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 10);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2257), 0);
      mockGregorianCalendar0.set(3, 0, (-2257));
      calendar0.set(0, 0, (-1182));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(12, 12, 0, (-2234), 12, 12);
      mockGregorianCalendar1.set(12, 0, (-2234));
      mockGregorianCalendar0.set(0, 0, (-1179));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-2234));
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 2640);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractCalendarValidator");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.validator.routines.AbstractCalendarValidator");
      Calendar calendar0 = timeValidator0.validate((String) null, locale0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.JAPAN;
      String string0 = timeValidator0.format((Object) null, locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) timeValidator0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = calendarValidator0.isValid("", "", locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractFormatValidator", "X3V{2^+'h8|*wxUfa?");
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) locale0, locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, (-25));
      Locale locale0 = Locale.CANADA_FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(";?", locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone(";?");
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) mockSimpleDateFormat0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        calendarValidator0.format((Object) "V7/'(Di{TsQn", "V7/'(Di{TsQn", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) "_O'9Y", "-MF[V%Tfs13=HtM", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
