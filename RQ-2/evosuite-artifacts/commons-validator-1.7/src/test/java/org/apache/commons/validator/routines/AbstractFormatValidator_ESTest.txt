 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ShortValidator shortValidator0 = new ShortValidator();
      DateFormat dateFormat0 = DateFormat.getDateInstance((int) (short)0, locale0);
      shortValidator0.parse("", dateFormat0);
      assertFalse(shortValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2493));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = shortValidator0.parse("1+W-kCWQ?^:f$", decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2493));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = shortValidator0.parse("1+W-kCWQ?^:f$", decimalFormat0);
      assertFalse(shortValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2481));
      Locale locale0 = Locale.GERMAN;
      boolean boolean0 = shortValidator0.isValid("9%_p+6MvGF*Dz]P-DV", locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, (-199));
      Locale locale0 = Locale.FRENCH;
      longValidator0.isValid("", ",@iNZ5,T)c=iV|e-", locale0);
      assertFalse(longValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.isValid("L0f_O6-+hQ8>", "L0f_O6-+hQ8>");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2481));
      boolean boolean0 = shortValidator0.isValid("6IKpXjdWn:d NC>jLP");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, (-2272));
      boolean boolean0 = doubleValidator0.isStrict();
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.GERMANY;
      calendarValidator0.format((Object) null, locale0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.US;
      String string0 = integerValidator0.format((Object) integerValidator0.PERCENT_FORMAT, locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string0 = timeValidator0.format((Object) null, (Format) mockSimpleDateFormat0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      String string0 = timeValidator0.format((Object) null, "", locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator(true);
      percentValidator0.format((Object) percentValidator0.STANDARD_FORMAT, (String) null, (Locale) null);
      assertTrue(percentValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      calendarValidator0.format((Object) null, (String) null);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      Long long0 = new Long(0L);
      String string0 = bigDecimalValidator0.format((Object) long0, "L0f_O6-+hQ8>");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      String string0 = calendarValidator0.format((Object) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Float float0 = new Float((-1.0));
      String string0 = floatValidator0.format((Object) float0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.CHINA;
      Format format0 = calendarValidator0.getFormat(locale0);
      // Undeclared exception!
      try { 
        longValidator0.parse((String) null, format0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 12);
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        timeValidator0.isValid("|", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        dateValidator0.isValid("fDk<7:nX=Cy8^", "v", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'v'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      // Undeclared exception!
      try { 
        shortValidator0.isValid("org.apache.commons.validator.routines.PercentValidator", "org.apache.commons.validator.routines.PercentValidator");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.PercentValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      // Undeclared exception!
      try { 
        integerValidator0.format((Object) "zh-TW", (Format) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractFormatValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.format((Object) integerValidator0, (Format) dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      MessageFormat messageFormat0 = new MessageFormat("2");
      // Undeclared exception!
      try { 
        byteValidator0.format((Object) "2", (Format) messageFormat0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Ljava.lang.Object;
         //
         verifyException("java.text.MessageFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.TEN;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      String string0 = bigIntegerValidator0.format((Object) bigInteger0, (Format) dateFormat0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      CalendarValidator calendarValidator0 = new CalendarValidator();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Object object0 = calendarValidator0.processParsedValue(floatValidator0, dateFormat0);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        floatValidator0.format(object0, "hF7u>LHE-%Y$,DZ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"hF7u>LHE-%Y$,DZ\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      boolean boolean0 = bigIntegerValidator0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      percentValidator0.parse("", format0);
      assertTrue(percentValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ShortValidator shortValidator0 = new ShortValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      // Undeclared exception!
      try { 
        shortValidator0.parse("", mockSimpleDateFormat0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        byteValidator0.format((Object) "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("b");
      // Undeclared exception!
      try { 
        shortValidator0.format((Object) locale_LanguageRange0, "b");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      boolean boolean0 = calendarValidator0.isValid((String) null, locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALIAN;
      boolean boolean0 = byteValidator0.isValid("67^KM1+&Y", "", locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      // Undeclared exception!
      try { 
        currencyValidator0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      currencyValidator0.isValid("L0f_O6-hQ8V");
      assertTrue(currencyValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      integerValidator0.isValid("", "JwQ675|En?KNX)+76");
      assertTrue(integerValidator0.isStrict());
}
