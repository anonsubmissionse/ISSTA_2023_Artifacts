/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:53:48 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.CalendarValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalendarValidator_ESTest extends CalendarValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      calendarValidator0.validate("English", (String) null);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = new Locale("IN'R?KDqs.nmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      calendarValidator0.validate("Thursday, January 1, 1970", locale0, timeZone0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      calendarValidator0.validate("3", "3", timeZone0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.GERMANY;
      calendarValidator0.validate(":", ":", locale0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-1110));
      calendarValidator0.validate("?&.", "?&.");
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2024));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      calendarValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1731, 2517, 1731);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar1.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals(calendarValidator0, timeZone0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals(calendarValidator0, calendar0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertEquals(calendarValidator0, localDateTime0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertTrue(gregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      assertEquals(calendarValidator0, gregorianCalendar0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertTrue(gregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertEquals(calendarValidator0, calendar0);
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone("e@Phh%`ikRc");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(mockSimpleDateFormat0.toPattern());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(mockSimpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertFalse(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertNotNull(mockSimpleDateFormat0.toPattern());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertNotNull(mockSimpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertTrue(mockSimpleDateFormat0.isLenient());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      assertEquals(calendarValidator0, mockGregorianCalendar0);
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ;
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertEquals(calendarValidator0, zoneId0);
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals(calendarValidator0, timeZone0);
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      assertEquals(calendarValidator0, locale0);
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      assertEquals(calendarValidator0, mockGregorianCalendar1);
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("kvN}T$OA~", "org.apache.commons.validator.routines.CalendarValidator", "org.apache.commons.validator.routines.CalendarValidator");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      assertFalse(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      assertNotNull(simpleTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      assertEquals(0, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      assertFalse(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, "\"EHi=FWV");
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
      assertEquals(calendarValidator0, locale0);
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      assertTrue(simpleTimeZone0.useDaylightTime());
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      assertEquals(1, simpleTimeZone0.getRawOffset());
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "YjS:[ES0W4[ Afs(fE/");
      assertEquals(calendarValidator0, simpleTimeZone0);
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      ;
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(mockSimpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(mockSimpleDateFormat0.toPattern());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale("IN'R?KDqnmk$c");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("3", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 5);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 5);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(calendarValidator0, mockGregorianCalendar0);
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      assertFalse(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals(calendarValidator0, timeZone0);
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertTrue(calendarValidator0.isStrict());
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate("[", "[", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      assertNotNull(calendarValidator0);
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(mockSimpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertNotNull(mockSimpleDateFormat0.toPattern());
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertTrue(mockSimpleDateFormat0.isLenient());
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertTrue(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals(calendarValidator0, calendar0);
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertNotNull(mockSimpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertNotNull(mockSimpleDateFormat0.toPattern());
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertTrue(mockSimpleDateFormat0.isLenient());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertFalse(calendar0.isLenient());
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      ;
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
      assertEquals(0, calendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getMaximumFractionDigits());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertFalse(decimalFormat0.isParseBigDecimal());
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getMinimumFractionDigits());
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getGroupingSize());
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertTrue(decimalFormat0.isParseIntegerOnly());
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(calendarValidator0, decimalFormat0);
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "[h`3b251JpW{`wsrrNP");
      CalendarValidator.adjustToTimeZone(calendar0, simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      int int0 = calendarValidator0.compareWeeks(calendar0, calendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate("");
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "[h`3b251JpW{`wsrrNP");
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate("Gx'TS3d*bMu{", (String) null, (TimeZone) simpleTimeZone0);
      assertNotNull(calendar0);
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      // Undeclared exception!
      try { 
        calendarValidator0.compareYears((Calendar) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2983), (-3262), 619);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareMonths(calendar0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = calendarValidator0.validate("", "org.apache.commons.validator.routines.CalendarValidator", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("", locale0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Calendar calendar0 = calendarValidator0.validate("", (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("", "GMT+00:00", locale0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = calendarValidator0.validate("", locale0);
      ;
}
}
