/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:50:13 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalQuery;
import java.util.Locale;
import org.apache.commons.validator.routines.IntegerValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntegerValidator_ESTest extends IntegerValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 2392);
      Long long0 = new Long((-2147483648L));
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_TIME;
      TemporalQuery<Long> temporalQuery0 = (TemporalQuery<Long>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      Object object0 = integerValidator0.processParsedValue(long0, format0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.maxValue(0, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange((Integer) integerValidator0.STANDARD_FORMAT, (-1), (-1));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = new Integer(0);
      boolean boolean0 = integerValidator0.isInRange(integer0, 0, 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.ITALIAN;
      Integer integer0 = integerValidator0.validate("0", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.PRC;
      Integer integer0 = integerValidator0.validate("7", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.PRC;
      Integer integer0 = integerValidator0.validate("7", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-2575));
      Locale locale0 = Locale.FRANCE;
      Integer integer0 = integerValidator0.validate("-2\u00A0575", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-2575));
      Locale locale0 = Locale.FRANCE;
      Integer integer0 = integerValidator0.validate("-2\u00A0575", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate("P5l", "P5l", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = integerValidator0.validate("1,606", "1,606", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = integerValidator0.validate("1,606", "1,606", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Integer integer0 = integerValidator0.validate("0", (String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate("4,294,964,720", "4,294,964,720", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate("4,294,964,720", "4,294,964,720", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Integer integer0 = integerValidator0.validate("1005", "", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Integer integer0 = integerValidator0.validate("1005", "", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", "1005");
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("{EkycE0&WGtr<", "{EkycE0&WGtr<");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 663);
      Integer integer0 = integerValidator0.validate("7/?aozAc_p'<=qYh ", (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 663);
      Integer integer0 = integerValidator0.validate("7/?aozAc_p'<=qYh ", (String) null);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate("-2,105,376,124");
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate("-2,105,376,124");
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("0");
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("-2,013,265,919");
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("-2,013,265,919");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long(2147483647L);
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Object object0 = integerValidator0.processParsedValue(long0, numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long(2147483647L);
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Object object0 = integerValidator0.processParsedValue(long0, numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange((Integer) integerValidator0.PERCENT_FORMAT, 0, 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.minValue((Integer) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IntegerValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.maxValue((Integer) null, 131);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IntegerValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2313));
      // Undeclared exception!
      try { 
        integerValidator0.isInRange((Integer) null, 0, 1248);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.IntegerValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      boolean boolean0 = integerValidator0.maxValue(2112, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.maxValue((-1), 1528);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue(1223, 1223);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2048));
      boolean boolean0 = integerValidator0.minValue((-2048), (-93));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange(2, 1005, 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("1005");
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate("1005");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long((-2147483653L));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = integerValidator0.processParsedValue(long0, decimalFormat0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = integerValidator0.processParsedValue(integerValidator0, mockSimpleDateFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2575));
      Integer integer0 = new Integer((-2575));
      boolean boolean0 = integerValidator0.maxValue(integer0, (-1269));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue((Integer) 2, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      boolean boolean0 = integerValidator0.isInRange(2, (-2563), 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange(2, 1, 1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate("4294964733");
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2575));
      boolean boolean0 = integerValidator0.maxValue((Integer) integerValidator0.CURRENCY_FORMAT, (-1269));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue((Integer) 0, 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.validate("}A,1)pzSB`@HV", "}A,1)pzSB`@HV");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"}A,1)pzSB`@HV\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.forLanguageTag("org.apac{e.commons.validator.routines.AbstractForWatValiJator");
      Integer integer0 = integerValidator0.validate("org.apac{e.commons.validator.routines.AbstractForWatValiJator", locale0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.forLanguageTag("org.apac{e.commons.validator.routines.AbstractForWatValiJator");
      // Undeclared exception!
      try { 
        integerValidator0.validate("org.apac{e.commons.validator.routines.AbstractForWatValiJator", "org.apac{e.commons.validator.routines.AbstractForWatValiJator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apac{e.commons.validator.routines.AbstractForWatValiJator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
}
