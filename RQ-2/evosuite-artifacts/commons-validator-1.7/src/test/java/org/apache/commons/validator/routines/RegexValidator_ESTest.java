/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:43:13 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.validator.routines.RegexValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegexValidator_ESTest extends RegexValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y>>@+'=]";
      stringArray0[1] = "`#X";
      stringArray0[2] = "Regular expressions are missing";
      stringArray0[3] = "Regular expressions are missing";
      stringArray0[4] = "E6_=x\" O";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.validate("E6_=x\" O");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T";
      stringArray0[1] = "uJb\"B>T=P?;ky@aOyo-";
      stringArray0[2] = "\n@oW^i8";
      stringArray0[3] = "DyT;7Uo.]";
      stringArray0[4] = "|bN6";
      stringArray0[5] = "@";
      stringArray0[6] = "%y#8q]k1@i&r;r";
      stringArray0[7] = "] is missing";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String[] stringArray1 = regexValidator0.match("%y#8q]k1@i&r;r");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T";
      stringArray0[1] = "uJb\"B>T=P?;ky@aOyo-";
      stringArray0[2] = "\n@oW^i8";
      stringArray0[3] = "DyT;7Uo.]";
      stringArray0[4] = "|bN6";
      stringArray0[5] = "@";
      stringArray0[6] = "%y#8q]k1@i&r;r";
      stringArray0[7] = "] is missing";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String[] stringArray1 = regexValidator0.match("%y#8q]k1@i&r;r");
      assertNotNull(stringArray1);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IbnIfE*Q}(&jR";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // IbnIfE*Q}(&jR
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RegexValidator{";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 13
         // RegexValidator{
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(",4'(44P@5@S!*hf");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // ,4'(44P@5@S!*hf
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(";% Ih#Il", false);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y>>@+'=]";
      stringArray0[1] = "`#X";
      stringArray0[2] = "Regular expressions are missing";
      stringArray0[3] = "Regular expressions are missing";
      stringArray0[4] = "E6_=x\" O";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("iiB\"=h.PD");
      String string0 = regexValidator0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("9\"kI");
      String string0 = regexValidator0.validate("2");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("9\"kI");
      String string0 = regexValidator0.validate((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("9\"kI");
      String[] stringArray0 = regexValidator0.match("2");
      assertNotNull(stringArray0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("9\"kI");
      String[] stringArray0 = regexValidator0.match((String) null);
      assertNotNull(stringArray0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "] is missing";
      stringArray0[1] = "uJb\"B>T=P?;ky@aOyGo-";
      stringArray0[2] = "uJb\"B>T=P?;ky@aOyGo-";
      stringArray0[3] = "uJb\"B>T=P?;ky@aOyGo-";
      stringArray0[4] = "uJb\"B>T=P?;ky@aOyGo-";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      boolean boolean0 = regexValidator0.isValid("uJb\"B>T=P?;ky@aOyGo-");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("9\"kI");
      boolean boolean0 = regexValidator0.isValid((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException("org.apache.commons.validator.routines.RegexValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("0Qnl/Kqp");
      boolean boolean0 = regexValidator0.isValid("0Qnl/Kqp");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("-?>T{$?5c-{-1{", true);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // -?>T{$?5c-{-1{
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
}
