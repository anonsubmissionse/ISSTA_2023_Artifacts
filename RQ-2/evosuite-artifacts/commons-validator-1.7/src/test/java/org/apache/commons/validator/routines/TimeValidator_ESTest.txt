 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = timeValidator0.validate("12:00 AM", (Locale) null, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = timeValidator0.validate("", "", timeZone0);
      assertNotNull(calendar0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = timeValidator0.validate((String) null, "CkD", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 1);
      Calendar calendar0 = timeValidator0.validate("", "");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Format format0 = timeValidator0.getFormat(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setCalendar((Calendar) null);
      Object object0 = timeValidator0.processParsedValue(format0, mockSimpleDateFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 899);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = timeValidator0.validate("%#", "%#", timeZone0);
      int int0 = timeValidator0.compareTime(calendar0, calendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, calendar0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, calendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      Calendar calendar1 = MockCalendar.getInstance(locale0);
      int int0 = timeValidator0.compareTime(calendar0, calendar1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      Calendar calendar1 = MockCalendar.getInstance(locale0);
      int int0 = timeValidator0.compareTime(calendar0, calendar1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(258, 258, 258, 258, 258, 258);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.US;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(959, 959, 959, 959, 959);
      int int0 = timeValidator0.compareSeconds(calendar0, mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.US;
      Calendar calendar0 = timeValidator0.validate(">", ">", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(959, 959, 959, 959, 959);
      int int0 = timeValidator0.compareSeconds(calendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(258, 258, 258, 258, 258, 258);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 1840);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4163, 4163, 1840, 0, 1217);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar1);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      Locale locale0 = Locale.forLanguageTag("mt9{\"mEczW%5Vn^-?w");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)timeValidator0.processParsedValue(locale0, dateFormat0);
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2721), (-2721), 1, 0, 1);
      int int0 = timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, (-1), 0, 0, (-1), 0);
      int int0 = timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 258);
      TimeZone timeZone0 = TimeZone.getTimeZone("`ssA#X\t");
      // Undeclared exception!
      try { 
        timeValidator0.validate("`ssA#X\t", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 258
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 899);
      Locale locale0 = Locale.GERMAN;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        timeValidator0.validate("%#", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 899
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 4);
      Locale locale0 = new Locale("org.apache.commons.validator.routines.AbstractFormatValidator", "org.apache.commons.validator.routines.AbstractFormatValidator");
      // Undeclared exception!
      try { 
        timeValidator0.validate("D?9&o>YNwpKAIwj}", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 6);
      // Undeclared exception!
      try { 
        timeValidator0.validate("Rm]*", "org.apache.commons.validator.routines.AbstractFormatValidator", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = new Locale("m/kvN!R R6$-v|:");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1993), "AYy\"ho*T%Y3");
      // Undeclared exception!
      try { 
        timeValidator0.validate(":|KjaLy", "AYy\"ho*T%Y3", locale0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        timeValidator0.validate("ONK*J0", "Ix/MSkAN^KH<9%Pd-]^", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      // Undeclared exception!
      try { 
        timeValidator0.validate("J2gh", "Invalid field: ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 12);
      // Undeclared exception!
      try { 
        timeValidator0.validate("'J#2J sORkuN=w+;");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1481, (-941), (-941), (-941));
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue(mockGregorianCalendar0, (Format) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.TimeValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_TIME;
      TemporalQuery<Calendar> temporalQuery0 = (TemporalQuery<Calendar>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue((Object) null, format0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.time.format.DateTimeFormatter$ClassicFormat cannot be cast to java.text.DateFormat
         //
         verifyException("org.apache.commons.validator.routines.TimeValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 11, 0, 2580, 2580, 2580, 0, 11, 11, 11);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.set(0, 2580);
      // Undeclared exception!
      try { 
        timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      // Undeclared exception!
      try { 
        timeValidator0.compareSeconds((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.set(0, (-1591));
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate("3");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = timeValidator0.validate("3", timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      // Undeclared exception!
      try { 
        timeValidator0.compareTime((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = timeValidator0.validate("org.apache.comos.valieato.routines.TimeValdator", (Locale) null);
      assertNotNull(calendar0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate("3", "3");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Calendar calendar0 = timeValidator0.validate("", locale0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeValidator0.compareHours((Calendar) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Calendar calendar0 = timeValidator0.validate("", "", locale0, (TimeZone) simpleTimeZone0);
      ;
}
