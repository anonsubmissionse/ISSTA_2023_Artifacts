 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      assertTrue(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat((Locale) null);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat((Locale) null);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = byteValidator0.maxValue(bigInteger0, bigDecimal0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
      assertTrue(bigIntegerValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
      assertEquals(0, bigIntegerValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.isInRange(bigInteger0, bigInteger0, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.UK;
      currencyValidator0.parse("", "(,~,?C[+.", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.UK;
      currencyValidator0.parse("", "(,~,?C[+.", locale0);
      assertFalse(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isAllowFractions();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isAllowFractions();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      int int0 = bigDecimalValidator0.getFormatType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-3702));
      int int0 = integerValidator0.getFormatType();
      assertTrue(integerValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-3702));
      int int0 = integerValidator0.getFormatType();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)bigIntegerValidator0.getFormat((String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)bigIntegerValidator0.getFormat((String) null, locale0);
      assertEquals(1, decimalFormat0.getMaximumFractionDigits());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.maxValue((Number) null, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 0);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        integerValidator0.isValid("org.apache.commons.validator.routines.AbstractNumberValidator", "org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      // Undeclared exception!
      try { 
        currencyValidator0.isInRange((Number) null, (Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        shortValidator0.getFormat("org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      // Undeclared exception!
      try { 
        doubleValidator0.determineScale((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
      assertTrue(floatValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
      assertEquals(1, floatValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigDecimalValidator0.minValue(bigInteger0, bigInteger0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      boolean boolean0 = bigDecimalValidator0.minValue(0, 2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.minValue(bigInteger0, (Number) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractNumberValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("", "", (Locale) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("", "", (Locale) null);
      assertTrue(bigDecimalValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("", "", (Locale) null);
      assertEquals(0, bigDecimalValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      boolean boolean0 = bigDecimalValidator0.isAllowFractions();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      boolean boolean0 = bigDecimalValidator0.isAllowFractions();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = (DecimalFormat)percentValidator0.getFormat(locale0);
      assertTrue(percentValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = (DecimalFormat)percentValidator0.getFormat(locale0);
      assertEquals(1, decimalFormat0.getMaximumFractionDigits());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.GERMAN;
      currencyValidator0.validate("'V$@(bEJPh[", "", locale0);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.GERMAN;
      currencyValidator0.validate("'V$@(bEJPh[", "", locale0);
      assertFalse(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2);
      byteValidator0.validate("Q0.01");
      assertTrue(byteValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2);
      byteValidator0.validate("Q0.01");
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1000);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1000);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      int int0 = currencyValidator0.determineScale(numberFormat0);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      int int0 = currencyValidator0.determineScale(numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse("7)`1m6<_dHF~0<{[vl", "7)`1m6<_dHF~0<{[vl", locale0);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse("7)`1m6<_dHF~0<{[vl", "7)`1m6<_dHF~0<{[vl", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse("7)`1m6<_dHF~0<{[vl", "7)`1m6<_dHF~0<{[vl", locale0);
      assertTrue(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = shortValidator0.determineScale(numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = shortValidator0.determineScale(numberFormat0);
      assertEquals(1, shortValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        longValidator0.parse("org.apache.commons.validator.routines.AbstractNumberValidator", "org.apache.commons.validator.routines.AbstractNumberValidator", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.validator.routines.AbstractNumberValidator\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid("1", "", (Locale) null);
      assertEquals(1, floatValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid("1", "", (Locale) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid("1", "", (Locale) null);
      assertTrue(floatValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Object object0 = shortValidator0.parse("FmC_y\"fV2r0I3", "FmC_y\"fV2r0I3", (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.isValid((String) null, "cf?H7K1!`I%h}");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = integerValidator0.maxValue(bigInteger0, (byte)57);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
      assertEquals(0, bigIntegerValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
      assertTrue(bigIntegerValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
      assertTrue(shortValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
      assertEquals(1, shortValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertEquals(0, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertEquals(1, bigDecimalValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertEquals(1, currencyValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(currencyValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid("68LBe,?lrK{H%u4", locale0);
      assertEquals(1, bigDecimalValidator0.getFormatType());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid("68LBe,?lrK{H%u4", locale0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid("68LBe,?lrK{H%u4", locale0);
      assertTrue(bigDecimalValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
      assertTrue(floatValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 100);
      int int0 = byteValidator0.getFormatType();
      assertTrue(byteValidator0.isAllowFractions());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 100);
      int int0 = byteValidator0.getFormatType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
      ;
}
