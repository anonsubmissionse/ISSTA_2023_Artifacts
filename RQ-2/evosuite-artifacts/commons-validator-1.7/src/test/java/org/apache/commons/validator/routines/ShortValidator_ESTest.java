/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:50:53 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.util.Locale;
import org.apache.commons.validator.routines.ShortValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShortValidator_ESTest extends ShortValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32767L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("EWW$#F#");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32767L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("EWW$#F#");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-1647), (short) (-1647), (short)2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 806);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = shortValidator0.validate("0", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate("100", locale0);
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate("100", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate("-10", (Locale) null);
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate("-10", (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = shortValidator0.validate("100", "100", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Short short0 = shortValidator0.validate("1", (String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Short short0 = shortValidator0.validate("1", (String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate("-1,348", "", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate("-1,348", "", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("@@N0@~&", "@@N0@~&");
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Short short0 = shortValidator0.validate("1:", "");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Short short0 = shortValidator0.validate("1:", "");
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate("-10", "");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate("-10", "");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 2147419687);
      Short short0 = shortValidator0.validate("0yJ2)MS9_?c");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("57");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("57");
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("-56");
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("-56");
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)1);
      boolean boolean0 = shortValidator0.minValue(short0, (short)1836);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)494);
      boolean boolean0 = shortValidator0.maxValue(short0, (short) (-1558));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)340);
      boolean boolean0 = shortValidator0.isInRange(short0, (short) (-1558), (short)340);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        shortValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", "i,hqhJ!", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"i,hqhJ!\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.validate("b&W%!74kx+P15=(p9", "V?K!,f3#,N8E]x'BU*");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"V?K!,f3#,N8E]x'BU*\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance((int) (short)1, (int) (short)1, locale0);
      // Undeclared exception!
      try { 
        shortValidator0.processParsedValue((Object) null, dateFormat0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.PRC;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      // Undeclared exception!
      try { 
        shortValidator0.processParsedValue(locale0, dateFormat0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      // Undeclared exception!
      try { 
        shortValidator0.maxValue((Short) null, (short)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.isInRange((Short) null, (short)1400, (short) (-1920));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.maxValue((short)1277, (short)1277);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.minValue((short) (-269), (short) (-269));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-269), (short)0, (short)100);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-1), (short) (-2634), (short) (-2634));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-442));
      Long long0 = Long.getLong("", (-32768L));
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      shortValidator0.processParsedValue(long0, decimalFormat0);
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32773L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("EWW$#F#");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Integer integer0 = new Integer((-2147418108));
      Locale locale0 = Locale.GERMANY;
      Format format0 = shortValidator0.getFormat(locale0);
      Object object0 = shortValidator0.processParsedValue(integer0, format0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.maxValue((short)2476, (short)2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)2);
      boolean boolean0 = shortValidator0.minValue(short0, (short)1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.minValue((short)0, (short)2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)1812);
      boolean boolean0 = shortValidator0.isInRange(short0, (short)1812, (short) (-1475));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Short short0 = shortValidator0.validate("", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.KOREA;
      Short short0 = shortValidator0.validate("T!sWax2^[YMi[hSm", "T!sWax2^[YMi[hSm", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
      assertNotNull(short0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
      boolean boolean0 = shortValidator0.maxValue(short0, (short)1812);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Short short0 = shortValidator0.validate("EWW$#F#", "EWW$#F#");
      // Undeclared exception!
      try { 
        shortValidator0.minValue(short0, (short)0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.ShortValidator", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("");
      assertNotNull(short0);
}
}
