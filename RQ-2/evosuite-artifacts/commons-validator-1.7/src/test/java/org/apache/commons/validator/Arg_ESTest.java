/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:54:16 GMT 2022
 */

package org.apache.commons.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.validator.Arg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Arg_ESTest extends Arg_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = "fRP2";
      String string0 = arg0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.name = "E.6[& `:!sk)&foPP`";
      String string0 = arg0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Arg arg0 = new Arg();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.position = 0;
      int int0 = arg0.getPosition();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Arg arg0 = new Arg();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setPosition(1);
      int int0 = arg0.getPosition();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("");
      String string0 = arg0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("");
      String string0 = arg0.getName();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("");
      String string0 = arg0.getName();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = "fRP2";
      String string0 = arg0.getKey();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = "fRP2";
      String string0 = arg0.getKey();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = "fRP2";
      String string0 = arg0.getKey();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("");
      String string0 = arg0.getKey();
      assertFalse(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("");
      String string0 = arg0.getKey();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("");
      String string0 = arg0.getKey();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("Arg: name=null  key=null  position=-1  bundle=null  resource=true\n");
      String string0 = arg0.getBundle();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("Arg: name=null  key=null  position=-1  bundle=null  resource=true\n");
      String string0 = arg0.getBundle();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("Arg: name=null  key=null  position=-1  bundle=null  resource=true\n");
      String string0 = arg0.getBundle();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("");
      String string0 = arg0.getBundle();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("");
      String string0 = arg0.getBundle();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("");
      String string0 = arg0.getBundle();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Arg arg0 = new Arg();
      int int0 = arg0.getPosition();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Arg arg0 = new Arg();
      int int0 = arg0.getPosition();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("qN|pu*");
      String string0 = arg0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("qN|pu*");
      String string0 = arg0.getName();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("qN|pu*");
      String string0 = arg0.getName();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getBundle();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getBundle();
      assertEquals(1, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getName();
      assertFalse(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Arg arg0 = new Arg();
      Arg arg1 = (Arg)arg0.clone();
      assertFalse(arg1.isResource());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Arg arg0 = new Arg();
      Arg arg1 = (Arg)arg0.clone();
      assertEquals(0, arg1.getPosition());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Arg arg0 = new Arg();
      boolean boolean0 = arg0.isResource();
      assertEquals(0, arg0.getPosition());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Arg arg0 = new Arg();
      boolean boolean0 = arg0.isResource();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getKey();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getKey();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Arg arg0 = new Arg();
      assertTrue(arg0.isResource());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setResource(false);
      boolean boolean0 = arg0.isResource();
      assertFalse(boolean0);
}
}
