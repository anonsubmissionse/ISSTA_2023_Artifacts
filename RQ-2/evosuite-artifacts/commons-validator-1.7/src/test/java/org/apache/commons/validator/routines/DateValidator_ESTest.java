/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 15:53:52 GMT 2022
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.DateValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateValidator_ESTest extends DateValidator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CANADA;
      Date date0 = dateValidator0.validate("", (String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("1");
      Date date0 = dateValidator0.validate("1", "1", timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ITALIAN;
      Date date0 = dateValidator0.validate("05/08/50", "05/08/50", locale0, (TimeZone) simpleTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Date date0 = dateValidator0.validate("3/9025", "3/9025", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate("=(", "=(");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale1 = (Locale)dateValidator0.processParsedValue(locale0, dateFormat0);
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(1477, (-1712), 0, 0, (-1712));
      int int0 = dateValidator0.compareYears(mockDate1, mockDate0, timeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(0, 0, 7, 2873, 2243, 0);
      int int0 = dateValidator0.compareYears(mockDate0, mockDate1, timeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, 7, 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("kW%Z./|%1", parsePosition0);
      int int0 = dateValidator0.compareWeeks(date0, mockDate0, timeZone0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), (-21), (-21), (-21));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(7, (-1374), 0, 7, 0);
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate1, timeZone0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      Locale locale0 = Locale.ROOT;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("oG8", parsePosition0);
      int int0 = dateValidator0.compareQuarters(date0, (Date) mockDate0, (TimeZone) null, (-35));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), (-1374), (-1374), (-1374));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(7, (-1374), 0, 7, 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, timeZone0, 11);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1379), 0, 0, 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, (TimeZone) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, 7, 0, 0, 0);
      MockDate mockDate1 = new MockDate(0, (-1701), 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, (TimeZone) null);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(2812, 2812, 2812, 2812, 1739);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, (TimeZone) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      MockDate mockDate0 = new MockDate(11, 5, 1073, 5, 261);
      int int0 = dateValidator0.compareMonths(date0, mockDate0, (TimeZone) null);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(0, 0, 0, 5, (-106), 5);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      int int0 = dateValidator0.compareMonths(mockDate0, date0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(623, "");
      int int0 = dateValidator0.compareDates(mockDate0, mockDate1, simpleTimeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone(",KZKebOyLT(}6|;Z");
      MockDate mockDate0 = new MockDate((-1L));
      MockDate mockDate1 = new MockDate();
      int int0 = dateValidator0.compareDates(mockDate0, mockDate1, timeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.validate("oG8", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 14);
      Locale locale0 = Locale.FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(14);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        dateValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", locale0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 14
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 632);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        dateValidator0.validate("k)#L$> kE,52vUM", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 632
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T5-kj6twQ.m", 0, 0, (-1), 7, (-3481), 0, 0, 1, (-1106), (-1106), 2157);
      // Undeclared exception!
      try { 
        dateValidator0.validate("1r", "1r", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        dateValidator0.validate("org.apache.commons.validator.routines.AbstractCalendarValidator", "org.apache.commons.validator.routines.AbstractCalendarValidator", locale0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateValidator0.validate("Invalid field: ", "Invalid field: ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      // Undeclared exception!
      try { 
        dateValidator0.validate("ykO|k#", "org.apache.commons.validator.routines.AbstractCalendarValidator");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 642);
      // Undeclared exception!
      try { 
        dateValidator0.validate("z");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 642
         //
         verifyException("java.text.DateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        dateValidator0.compareYears(date0, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 3, 0, 1453, 7, 0, 0, 5);
      // Undeclared exception!
      try { 
        dateValidator0.compareWeeks((Date) null, (Date) null, simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) null, (Date) null, timeZone0, (-4111));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1));
      // Undeclared exception!
      try { 
        dateValidator0.compareMonths((Date) null, mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        dateValidator0.compareDates((Date) null, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1379), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, timeZone0, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate0, timeZone0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate("", "org.apache.commons.validator.routines.DateValidator", timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate("org.apache.commons.validator.routines.AbstractFormatValidator", locale0, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate(">");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      int int0 = dateValidator0.compareMonths(mockDate0, mockDate0, (TimeZone) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      Locale locale0 = Locale.ROOT;
      Date date0 = dateValidator0.validate("", "GZv%rX*AW25n\"", locale0, (TimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareDates(mockDate0, mockDate0, timeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate((String) null, timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(303, 0, 0, 303, 0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      int int0 = dateValidator0.compareYears(mockDate0, mockDate0, timeZone0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate("", "");
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      Object object0 = dateValidator0.processParsedValue((Object) null, numberFormat0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.UK;
      Date date0 = dateValidator0.validate((String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(303, 0, 0, 303, 0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) mockDate0, (Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
}
