 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter((Object) null);
      Class<?> class0 = sqlTimestampConverter0.getDefaultType();
      assertTrue(class0.isAnnotation());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimestampConverter0.getFormat((Locale) null, (TimeZone) null);
      assertNotNull(simpleDateFormat0.toLocalizedPattern());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      SqlTimestampConverter sqlTimestampConverter0 = null;
      try {
        sqlTimestampConverter0 = new SqlTimestampConverter(object0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] to create a java.sql.Timestamp
         //
         verifyException("org.apache.commons.beanutils.converters.DateTimeConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimestampConverter0.getFormat(locale0, timeZone0);
      assertNotNull(simpleDateFormat0.toLocalizedPattern());
}
