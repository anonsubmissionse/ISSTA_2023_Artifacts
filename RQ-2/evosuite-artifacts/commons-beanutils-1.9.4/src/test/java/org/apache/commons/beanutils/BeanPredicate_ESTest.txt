 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPropertyName("f/PP1.");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Property not found.
         //
         verifyException("org.apache.commons.beanutils.BeanPredicate", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPropertyName("f/PP1.");
      String string0 = beanPredicate0.getPropertyName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Predicate predicate0 = NullPredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate("", predicate0);
      String string0 = beanPredicate0.getPropertyName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BeanPredicate beanPredicate0 = new BeanPredicate(";IhPc7T m", (Predicate) null);
      Predicate predicate0 = beanPredicate0.getPredicate();
      assertNotNull(predicate0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer transformer0 = SwitchTransformer.getInstance((Map) hashMap0);
      Predicate predicate0 = TransformerPredicate.getInstance(transformer0);
      BeanPredicate beanPredicate0 = new BeanPredicate("", predicate0);
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate(hashMap0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections.functors.TransformerPredicate", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      String string0 = beanPredicate0.getPropertyName();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      Predicate predicate1 = beanPredicate0.getPredicate();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPredicate(predicate0);
      assertNotNull(beanPredicate0.getPropertyName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Predicate[] predicateArray0 = new Predicate[0];
      Predicate predicate0 = AllPredicate.getInstance(predicateArray0);
      BeanPredicate beanPredicate0 = new BeanPredicate("rVZGiq", predicate0);
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
