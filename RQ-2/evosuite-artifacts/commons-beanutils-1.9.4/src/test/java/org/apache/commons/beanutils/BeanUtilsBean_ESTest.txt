 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      boolean boolean0 = beanUtilsBean0.initCause(mockThrowable0, mockThrowable1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = beanUtilsBean0.getPropertyUtils();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      String string0 = beanUtilsBean0.getProperty(convertUtilsBean0, "defaultByte");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      try { 
        beanUtilsBean0.getSimpleProperty(integer0, "|Z/T?ItB<W,)!bS:l%");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '|Z/T?ItB<W,)!bS:l%' on class 'class java.lang.Integer'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      try { 
        beanUtilsBean0.getSimpleProperty("    Target name = ", "");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        beanUtilsBean0.getNestedProperty((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getMappedProperty((Object) "u*TL[PE?Z6]eSp91p6", (String) null, "get(");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, Integer> map0 = BeanUtils.createCache();
      String string0 = "Throwable does not have initCause() method in JDK 1.3";
      try { 
        beanUtilsBean0.getMappedProperty((Object) map0, string0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Throwable does not have initCause'+ on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, (PropertyUtilsBean) null);
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) integer0, "S:&fm3Nr", (-1120));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      try { 
        beanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, "", (-1754));
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class org.apache.commons.beanutils.ConvertUtilsBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.ConvertUtilsBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        beanUtilsBean0.getArrayProperty(hashMap0, "?@,.4D^Z");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '?@,.4D^Z' on bean class 'class java.util.HashMap'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      try { 
        beanUtilsBean0.getArrayProperty(beanUtilsBean0, "");
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.BeanUtilsBean'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      BeanUtils beanUtils0 = new BeanUtils();
      try { 
        beanUtilsBean0.copyProperty(beanUtilsBean0, "convertUtils", beanUtils0);
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
         //
         // Cannot set convertUtils
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperty(basicDynaBean0, "G`m;pOEpUmWZ,", basicDynaBean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      try { 
        beanUtilsBean0.copyProperties(rowSetMetaDataImpl0, rowSetMetaDataImpl0);
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = beanUtilsBean0.getConvertUtils();
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      ConvertUtilsBean convertUtilsBean1 = (ConvertUtilsBean)beanUtilsBean0.convert(convertUtilsBean0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      try { 
        beanUtilsBean0.cloneBean(mockThrowable0);
        fail("Expecting exception: InvocationTargetException");
      } catch(InvocationTargetException e) {
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Class<MappedPropertyDescriptor> class0 = MappedPropertyDescriptor.class;
      try { 
        beanUtilsBean0.cloneBean(class0);
        fail("Expecting exception: IllegalAccessException");
      } catch(IllegalAccessException e) {
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      boolean boolean0 = beanUtilsBean0.initCause((Throwable) null, (Throwable) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(beanUtilsBean0);
      beanUtilsBean0.describe(convertingWrapDynaBean0);
      String string0 = "cc<u ";
      try { 
        beanUtilsBean0.getProperty(convertingWrapDynaBean0, string0);
        fail("Expecting exception: NoSuchMethodException");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'cc<u ' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@7'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      BeanUtilsBean.setInstance(beanUtilsBean0);
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) null, "sQlL,:zhL6");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getProperty(convertUtilsBean0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getMappedProperty((Object) "&Qa6;", "propertyUtils");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'propertyUtils' on bean class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = beanUtilsBean0.getConvertUtils();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperty(convertUtilsBean0, "defaultLong", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot invoke org.apache.commons.beanutils.ConvertUtilsBean.setDefaultLong on bean class 'class org.apache.commons.beanutils.ConvertUtilsBean' - null - had objects of type \"<null>\" but expected signature \"long\"
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        beanUtilsBean0.setProperty(map0, "B@,x4M1Z", map0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      beanUtilsBean0.setProperty(convertUtilsBean0, "defaultInteger", "defaultInteger");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        beanUtilsBean0.setProperty((Object) null, " does not implement DynaBean", integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        beanUtilsBean0.populate(map0, map0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      beanUtilsBean0.setProperty(hashMap0, "?@,.4D^Z", hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      beanUtilsBean0.populate(hashMap0, hashMap0);
      assertEquals(1, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      beanUtilsBean0.populate(convertUtilsBean0, map0);
      assertTrue(convertUtilsBean0.getDefaultBoolean());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      HashMap<String, IndexedPropertyDescriptor> hashMap0 = new HashMap<String, IndexedPropertyDescriptor>();
      beanUtilsBean0.populate((Object) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      String[] stringArray0 = beanUtilsBean0.getArrayProperty(convertUtilsBean0, "defaultFloat");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      String[] stringArray0 = beanUtilsBean0.getArrayProperty(convertUtilsBean0, "defaultFloat");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      MockThrowable mockThrowable0 = new MockThrowable();
      Map<String, String> map0 = beanUtilsBean0.describe(mockThrowable0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.populate(mockThrowable0, map0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot invoke org.evosuite.runtime.mock.java.lang.MockThrowable.setStackTrace on bean class 'class org.evosuite.runtime.mock.java.lang.MockThrowable' - java.lang.ClassCastException@3e571519 - had objects of type \"java.lang.String\" but expected signature \"[Ljava.lang.StackTraceElement;\"
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      beanUtilsBean0.describe(resultSet0);
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, propertyUtilsBean0);
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      beanUtilsBean0.copyProperty(class0, "' has no mapped getter method on bean class '", "!XZ|uwT");
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      beanUtilsBean0.copyProperty(resultSetIterator0, "", "L~.tQSoBIS?LMdq");
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      MockThrowable mockThrowable0 = new MockThrowable("defaultInteger");
      beanUtilsBean0.copyProperties(convertUtilsBean0, mockThrowable0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      beanUtilsBean0.copyProperties(convertUtilsBean0, map0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperties(class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      beanUtilsBean0.copyProperties(convertUtilsBean0, convertUtilsBean0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      Object object0 = beanUtilsBean0.cloneBean(convertUtilsBean0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      beanUtilsBean0.getConvertUtils();
      Map<String, Integer> map0 = null;
      propertyUtilsBean0.getPropertyType(convertUtilsBean0, "");
      beanUtilsBean0.populate(convertUtilsBean0, (Map<String, ?>) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) null, "", (-1587));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = beanUtilsBean0.describe(convertUtilsBean0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperties((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      beanUtilsBean0.copyProperty("+*PZ}z.A", "+*PZ}z.A", "+*PZ}z.A");
  }
