/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:24:24 GMT 2022
 */

package org.apache.commons.beanutils.locale;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.ResolverStyle;
import java.util.Collection;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.beanutils.locale.LocaleConvertUtils;
import org.apache.commons.beanutils.locale.LocaleConvertUtilsBean;
import org.apache.commons.beanutils.locale.LocaleConverter;
import org.apache.commons.beanutils.locale.converters.BigDecimalLocaleConverter;
import org.apache.commons.beanutils.locale.converters.BigIntegerLocaleConverter;
import org.apache.commons.beanutils.locale.converters.ByteLocaleConverter;
import org.apache.commons.beanutils.locale.converters.DateLocaleConverter;
import org.apache.commons.beanutils.locale.converters.DoubleLocaleConverter;
import org.apache.commons.beanutils.locale.converters.IntegerLocaleConverter;
import org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter;
import org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter;
import org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter;
import org.apache.commons.collections.FastHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleConvertUtilsBean_ESTest extends LocaleConvertUtilsBean_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      localeConvertUtilsBean0.convert("", class0, locale0, "oB^Gd_");
      localeConvertUtilsBean0.setDefaultLocale((Locale) null);
      localeConvertUtilsBean0.setApplyLocalized(false);
      localeConvertUtilsBean0.setApplyLocalized(false);
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(localeConvertUtilsBean0, false);
      localeConvertUtilsBean0.lookup((Locale) null);
      Class<Locale> class1 = Locale.class;
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.convert(class1, (Object) class1, (String) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class java.util.Locale
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.ENGLISH;
      localeConvertUtilsBean0.lookup(class0, locale0);
      assertTrue(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      Object object0 = localeConvertUtilsBean0.convert(stringArray0, class0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Locale locale0 = localeConvertUtilsBean0.getDefaultLocale();
      Object object0 = localeConvertUtilsBean0.convert((String) null, class0, locale0, " to class ");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      Object object0 = localeConvertUtilsBean0.convert((String) null, class0, ")'I.(!");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<LocaleConvertUtils> class0 = LocaleConvertUtils.class;
      localeConvertUtilsBean0.convert((String) null, class0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Locale locale0 = Locale.UK;
      localeConvertUtilsBean0.convert((Object) null, locale0, "SPVWA5\"v'?");
      assertFalse(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0);
      String string0 = localeConvertUtilsBean0.convert((Object) doubleLocaleConverter0, locale0, (String) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      String string0 = localeConvertUtilsBean0.convert((Object) locale0, "yyyy-MM-dd HH:mm:ss.S");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Timestamp timestamp0 = new Timestamp(720L);
      localeConvertUtilsBean0.convert((Object) timestamp0, "");
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String string0 = localeConvertUtilsBean0.convert((Object) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Byte byte0 = new Byte((byte) (-47));
      String string0 = localeConvertUtilsBean0.convert((Object) byte0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter((Locale) null);
      Class<BigDecimal> class0 = BigDecimal.class;
      localeConvertUtilsBean0.register(dateLocaleConverter0, class0, (Locale) null);
      assertTrue(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<SqlDateLocaleConverter> class0 = SqlDateLocaleConverter.class;
      LocaleConverter localeConverter0 = localeConvertUtilsBean0.lookup(class0, (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      localeConvertUtilsBean0.deregister(class0, (Locale) null);
      assertFalse(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String string0 = localeConvertUtilsBean0.convert((Object) null, "SPVWA5\"v'?");
      Locale locale0 = Locale.UK;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "English";
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, locale0, string0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'English' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0, locale0, "~[K%&8h(v");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.locale.LocaleConvertUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Class<SqlTimeLocaleConverter> class0 = SqlTimeLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, locale0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6og70=}z&0{Gg6m?ii";
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, "'+ on bean class '");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \"6og70=}z&0{Gg6m?ii\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<ByteLocaleConverter> class0 = ByteLocaleConverter.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.locale.LocaleConvertUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"w=";
      Class<BigIntegerLocaleConverter> class0 = BigIntegerLocaleConverter.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.locale.LocaleConvertUtilsBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GLUBrKZfnO5os$_";
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert("", class0, "org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert("  setProperty(", class0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date '  setProperty(' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Double double0 = new Double(1.0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) double0, locale0, "Illegal pattern character '");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Malformed pattern \"Illegal pattern character '\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Long long0 = new Long((-342L));
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) long0, "P*<F|~k+0x' WB");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Malformed pattern \"P*<F|~k+0x' WB\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      String string0 = "*0PR)Q0[R1RpCR~";
      Locale locale0 = new Locale("*0PR)Q0[R1RpCR~");
      Locale locale1 = Locale.CANADA_FRENCH;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      locale0.getDisplayLanguage(locale1);
      FastHashMap fastHashMap1 = localeConvertUtilsBean0.lookup(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[8];
      Class<SqlTimeLocaleConverter> class0 = SqlTimeLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      Object object0 = localeConvertUtilsBean0.convert(stringArray0, class0, locale0, (String) null);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = localeConvertUtilsBean0.convert((Object) timestamp0, locale0, "");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = localeConvertUtilsBean0.getDefaultLocale();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert("{G", class0, locale0, "[] using ");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \"{G\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      localeConvertUtilsBean0.deregister();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMANY;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ChronoLocalDate chronoLocalDate0 = chronology0.resolveDate(fastHashMap0, resolverStyle0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMAN;
      localeConvertUtilsBean0.setDefaultLocale(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Collection collection0 = fastHashMap0.values();
      assertNotNull(collection0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      fastHashMap0.putAll(fastHashMap0);
      assertTrue(fastHashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Object object0 = fastHashMap0.put(locale0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Object object0 = fastHashMap0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.create(locale0);
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter((Object) null);
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(integerLocaleConverter0, locale0);
      boolean boolean0 = fastHashMap0.equals(sqlDateLocaleConverter0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Set set0 = fastHashMap0.keySet();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Object object0 = localeConvertUtilsBean0.convert("{j[d<`", class0);
      assertTrue(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Object object0 = localeConvertUtilsBean0.convert("{j[d<`", class0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      boolean boolean0 = localeConvertUtilsBean0.getApplyLocalized();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Period period0 = Period.ofYears(1416);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Date date0 = Date.valueOf(localDate0);
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) date0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \"AD\"
         //
         verifyException("org.apache.commons.beanutils.locale.BaseLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<ByteLocaleConverter> class0 = ByteLocaleConverter.class;
      localeConvertUtilsBean0.convert("", class0, "sHZIF{'");
      assertTrue(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String[] stringArray0 = new String[0];
      Class<SqlTimestampLocaleConverter> class0 = SqlTimestampLocaleConverter.class;
      localeConvertUtilsBean0.convert(stringArray0, class0, "initCause");
      assertTrue(localeConvertUtilsBean0.getApplyLocalized());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Locale locale0 = Locale.JAPANESE;
      localeConvertUtilsBean0.deregister(locale0);
      ;
}
}
