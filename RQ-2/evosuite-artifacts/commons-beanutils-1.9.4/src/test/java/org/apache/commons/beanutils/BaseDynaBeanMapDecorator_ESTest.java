/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:22:19 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyDescriptor;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.beanutils.BasicDynaBean;
import org.apache.commons.beanutils.ConvertingWrapDynaBean;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaBeanPropertyMapDecorator;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.beanutils.LazyDynaMap;
import org.apache.commons.beanutils.PropertyUtilsBean;
import org.apache.commons.beanutils.ResultSetDynaClass;
import org.apache.commons.beanutils.ResultSetIterator;
import org.apache.commons.beanutils.WrapDynaBean;
import org.apache.commons.beanutils.WrapDynaClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDynaBeanMapDecorator_ESTest extends BaseDynaBeanMapDecorator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      int int0 = dynaBeanPropertyMapDecorator0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      int int0 = dynaBeanPropertyMapDecorator0.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Object object0 = dynaBeanPropertyMapDecorator0.put("DynaClass is currently restricted. No properties can be removed.", lazyDynaMap0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(class0, wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isReadOnly();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      Class<DynaProperty> class0 = DynaProperty.class;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Object object0 = dynaBeanPropertyMapDecorator0.get(class0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("", (DynaProperty[]) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, true);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      wrapDynaBean0.dynaClass = wrapDynaClass0;
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.values();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'dynaProperties', exception - java.lang.NoSuchMethodException: Unknown property 'dynaProperties' on class 'class java.lang.String'
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Map is read only
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("", object0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.keySet();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(integer0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.get(integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'java.lang.Integer@0000000006', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: Nested property names are not allowed: Property 'java.lang.Integer@0000000006' on bean class 'class java.lang.Integer'
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.entrySet();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'bytes', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: No bean specified
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsValue(resultSetIterator0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsValue((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'bytes', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: No bean specified
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      DynaBean dynaBean1 = dynaBeanPropertyMapDecorator0.getDynaBean();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isReadOnly();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(basicDynaBean0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)dynaBeanPropertyMapDecorator0.entrySet();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("H:o");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsKey((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No property name specified
         //
         verifyException("org.apache.commons.beanutils.WrapDynaClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
      lazyDynaBean0.get("", "");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaBean0);
      Collection<Object> collection0 = dynaBeanPropertyMapDecorator0.values();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Unknown property '", "Unknown property '");
      dynaBeanPropertyMapDecorator0.putAll(hashMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.putAll(dynaBeanPropertyMapDecorator0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Map is read only
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'java.lang.String@0000000007', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: Nested property names are not allowed: Property 'java.lang.String@0000000007' on bean class 'class java.lang.Object'
         //
         verifyException("org.apache.commons.beanutils.WrapDynaBean", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      assertTrue(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
      assertFalse(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
      assertFalse(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
      assertFalse(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue((Object) null);
      assertFalse(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("H:o");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("H:o");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue(object0);
      assertTrue(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("H:o");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey("H:o");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("H:o");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey("H:o");
      assertFalse(dynaBeanPropertyMapDecorator0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = null;
      try {
        dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator((DynaBean) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("HG+2Fo");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("HG+2Fo").when(biFunction0).apply(any() , any());
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.replaceAll(biFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator$MapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(basicDynaBean0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(object0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.remove((Object) wrapDynaClass0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BaseDynaBeanMapDecorator", e);
      }
  }
}
