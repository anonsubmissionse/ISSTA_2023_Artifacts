/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 18:19:31 GMT 2022
 */

package org.apache.commons.beanutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.IntrospectionException;
import java.lang.reflect.Method;
import org.apache.commons.beanutils.MappedPropertyDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MappedPropertyDescriptor_ESTest extends MappedPropertyDescriptor_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("%q32n6p1bV)J", class0, (String) null, "getBytes");
        fail("Expecting exception: IntrospectionException");
      } catch(Throwable e) {
         //
         // No method \"getBytes\" with 2 parameter(s)
         //
         verifyException("org.apache.commons.beanutils.MappedPropertyDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("org.apache.commons.beanutils.MappedPropertyDescriptor", class0, (String) null, (String) null);
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
      assertNotNull(method0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
      assertNotNull(mappedPropertyDescriptor0.getDisplayName());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      mappedPropertyDescriptor0.getMappedReadMethod();
      assertNotNull(mappedPropertyDescriptor0.getName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("org.apache.commons.beanutils.MappedPropertyDescriptor", class0, (String) null, (String) null);
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("replaceAll", class0, (String) null, "replaceAll");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("replaceAll", class0, (String) null, "replaceAll");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("", (Method) null, (Method) null);
        fail("Expecting exception: IntrospectionException");
      } catch(Throwable e) {
         //
         // bad property name
         //
         verifyException("java.beans.PropertyDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("F@0{ih9^", (Class<?>) null, (String) null, "getClass");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("mc", (Class<?>) null, "mc", "mc");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("Y*%^:gFN`]K's*Xiz\"", (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("Matching name=", class0);
        fail("Expecting exception: IntrospectionException");
      } catch(Throwable e) {
         //
         // No method \"setMatching name=\" with 2 parameter(s)
         //
         verifyException("org.apache.commons.beanutils.MappedPropertyDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("replaceAll", class0, (String) null, "replaceAll");
      Method method0 = mappedPropertyDescriptor0.getMappedReadMethod();
      assertNotNull(method0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("codePointCount", class0, (String) null, "codePointCount");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
      try { 
        mappedPropertyDescriptor0.setMappedReadMethod(method0);
        fail("Expecting exception: IntrospectionException");
      } catch(IntrospectionException e) {
         //
         // bad mapped read method arg count
         //
         verifyException("org.apache.commons.beanutils.MappedPropertyDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
      assertNotNull(mappedPropertyDescriptor0.getDisplayName());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
      assertNotNull(class1.toString());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("e", (Method) null, (Method) null);
      mappedPropertyDescriptor0.setMappedWriteMethod((Method) null);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(" accessible version of ", class0, "lastIndexOf", "lastIndexOf");
      mappedPropertyDescriptor0.setMappedReadMethod((Method) null);
      assertNotNull(mappedPropertyDescriptor0.getDisplayName());
}
}
