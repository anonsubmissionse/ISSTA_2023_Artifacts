 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData((PropertyDescriptor[]) null, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray0 = beanIntrospectionData0.getDescriptors();
      assertNotNull(propertyDescriptorArray0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray1 = beanIntrospectionData0.getDescriptors();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setPreferred(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor("F]@AF|Xk+lJzpk");
      assertFalse(propertyDescriptor1.isConstrained());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setHidden(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor("F]@AF|Xk+lJzpk");
      assertFalse(propertyDescriptor1.isExpert());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setExpert(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor("tDf1^:MbOuY>!b ");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setExpert(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor("tDf1^:MbOuY>!b ");
      assertNotNull(propertyDescriptor2.getDisplayName());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setConstrained(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor("tDf1^:MbOuY>!b ");
      assertEquals(propertyDescriptorArray0, propertyDescriptor2);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setConstrained(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor("tDf1^:MbOuY>!b ");
      assertNotNull(propertyDescriptor2.getDisplayName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("F]@AF|Xk+lJzpk", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setBound(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor("F]@AF|Xk+lJzpk");
      assertNotNull(propertyDescriptor1.getDisplayName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getWriteMethod(class0, (PropertyDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanIntrospectionData", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("tDf1^:MbOuY>!b ", "tDf1^:MbOuY>!b ");
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getWriteMethod((Class<?>) null, propertyDescriptor0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException("org.apache.commons.beanutils.MethodUtils$MethodDescriptor", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[4];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getDescriptor(" is not assignable from ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanIntrospectionData", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray1 = beanIntrospectionData0.getDescriptors();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[1];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("tDf1^:MbOuY>!b ", "tDf1^:MbOuY>!b ");
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      Class<Annotation> class0 = Annotation.class;
      Method method0 = beanIntrospectionData0.getWriteMethod(class0, propertyDescriptor0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("xi%Z<AsF(]_nl", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      Class<String> class0 = String.class;
      Method method0 = beanIntrospectionData0.getWriteMethod(class0, propertyDescriptor0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[1];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("tDf1^:MbOuY>!b ", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor("tDf1^:MbOuY?!b ");
      assertEquals(propertyDescriptorArray0, propertyDescriptor1);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      BeanIntrospectionData beanIntrospectionData0 = null;
      try {
        beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.BeanIntrospectionData", e);
      }
  }
