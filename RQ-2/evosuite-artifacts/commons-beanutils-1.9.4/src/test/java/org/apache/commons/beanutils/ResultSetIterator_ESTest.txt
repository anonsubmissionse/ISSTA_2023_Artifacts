 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      resultSetIterator0.advance();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      boolean boolean0 = resultSetIterator0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaClass dynaClass0 = resultSetIterator0.getDynaClass();
      assertNotNull(dynaClass0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set("0Z", (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.get((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.advance();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(resultSet1).next();
      resultSetDynaClass0.resultSet = resultSet1;
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      resultSetIterator0.forEachRemaining(consumer0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      resultSetIterator0.forEachRemaining(consumer0);
      boolean boolean0 = resultSetIterator0.hasNext();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.set("i ?AU>q", (Object) "i ?AU>q");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // i ?AU>q
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get("4");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // remove()
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      String string0 = null;
      // Undeclared exception!
      try { 
        resultSetIterator0.contains(string0, string0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set("", "", (Object) "");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      DynaClass dynaClass0 = resultSetIterator0.getDynaClass();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get("", 0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - indexed properties not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get("", "");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set((String) null, (-9), (Object) basicDynaBean0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - indexed properties not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.remove("'JwI!dpiZZp_,T6<|ms", "'JwI!dpiZZp_,T6<|ms");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped operations not currently supported
         //
         verifyException("org.apache.commons.beanutils.ResultSetIterator", e);
      }
  }
