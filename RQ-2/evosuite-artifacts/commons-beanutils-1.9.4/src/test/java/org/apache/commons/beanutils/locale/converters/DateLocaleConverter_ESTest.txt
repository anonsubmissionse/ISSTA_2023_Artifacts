 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter("D;L");
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse((Object) null, "D;L");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse((Object) null, "mVa,");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, locale0, true);
      assertTrue(dateLocaleConverter0.isLenient());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(object0, false);
      assertTrue(dateLocaleConverter0.isLenient());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, " m\"~zl^F.Ng#fEb-", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse(" m\"~zl^F.Ng#fEb-", " m\"~zl^F.Ng#fEb-");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date ' m\"~zl^F.Ng#fEb-' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse(locale0, "' a~J plsit'1Con=");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'de_DE' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, "D'D[1p=dcOcr", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse("D'D[1p=dcOcr", "D'D[1p=dcOcr");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'D'D[1p=dcOcr' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, "GanjkHmsSEDFwWxhKzZ", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.convert((Object) dateLocaleConverter0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'org.apache.commons.beanutils.locale.converters.DateLocaleConverter@1' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse("^M'1cVt", (String) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Error parsing date '^M'1cVt' at position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse("", "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Date '' contains unparsed characters from position=0
         //
         verifyException("org.apache.commons.beanutils.locale.converters.DateLocaleConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0, "[AjV", true);
      DateLocaleConverter dateLocaleConverter2 = (DateLocaleConverter)dateLocaleConverter1.convert((Object) "[AjV");
      assertFalse(dateLocaleConverter2.isLenient());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      dateLocaleConverter0.parse(mockGregorianCalendar0, "");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      assertTrue(dateLocaleConverter0.isLenient());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      dateLocaleConverter0.setLenient(true);
      boolean boolean0 = dateLocaleConverter0.isLenient();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(object0, (Locale) null, "GanjkHmsSEDFwWxhKzZ");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter("D;L");
      Class<Object> class0 = Object.class;
      Instant instant0 = MockInstant.ofEpochSecond(2664L);
      Date date0 = Date.from(instant0);
      dateLocaleConverter0.convert(class0, (Object) date0, "D;L");
      assertTrue(dateLocaleConverter0.isLenient());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      Locale locale0 = Locale.US;
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      Locale locale0 = Locale.US;
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, "P Sfgr ");
      assertTrue(dateLocaleConverter0.isLenient());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      boolean boolean0 = dateLocaleConverter0.isLenient();
      assertTrue(boolean0);
}
