/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:24:18 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableIntConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableIntConsumer_ESTest extends FailableIntConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      failableIntConsumer0.accept(1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      // Undeclared exception!
      try { 
        failableIntConsumer0.andThen((FailableIntConsumer<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      FailableIntConsumer<Throwable> failableIntConsumer1 = failableIntConsumer0.andThen(failableIntConsumer0);
      FailableIntConsumer<Throwable> failableIntConsumer2 = failableIntConsumer0.andThen(failableIntConsumer1);
      assertNotSame(failableIntConsumer2, failableIntConsumer1);
  }
}
