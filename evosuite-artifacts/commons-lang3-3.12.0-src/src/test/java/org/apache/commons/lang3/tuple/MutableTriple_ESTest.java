/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:25:41 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableTriple_ESTest extends MutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>();
      mutableTriple0.setMiddle("dA`woYX'");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-3698));
      MutableTriple<String, Integer, String> mutableTriple0 = MutableTriple.of(",", integer0, ",");
      assertNotNull(mutableTriple0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableTriple<Integer, Object, Object> mutableTriple0 = new MutableTriple<Integer, Object, Object>();
      Object object0 = mutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      Object object0 = mutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableTriple<Object, Object, Object> mutableTriple0 = new MutableTriple<Object, Object, Object>();
      Object object0 = mutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1720));
      MutableTriple<Integer, Object, String> mutableTriple0 = new MutableTriple<Integer, Object, String>(integer0, integer0, "");
      Object object0 = mutableTriple0.getLeft();
      assertEquals((-1720), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      Integer integer0 = new Integer((-3569));
      MutableTriple<Object, String, Integer> mutableTriple1 = new MutableTriple<Object, String, Integer>(mutableTriple0, (String) null, integer0);
      Object object0 = mutableTriple1.getLeft();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableTriple<Integer, String, Object> mutableTriple0 = new MutableTriple<Integer, String, Object>();
      Integer integer0 = new Integer(2775);
      MutableTriple<MutableTriple<Integer, String, Object>, String, Integer> mutableTriple1 = new MutableTriple<MutableTriple<Integer, String, Object>, String, Integer>(mutableTriple0, (String) null, integer0);
      Integer integer1 = mutableTriple1.getRight();
      assertEquals(2775, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableTriple<Object, Object, Integer> mutableTriple0 = new MutableTriple<Object, Object, Integer>();
      MutableTriple<Object, String, MutableTriple<Object, Object, Integer>> mutableTriple1 = new MutableTriple<Object, String, MutableTriple<Object, Object, Integer>>((Object) null, "", mutableTriple0);
      String string0 = mutableTriple1.getMiddle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(35);
      MutableTriple<Integer, String, MutableTriple<Integer, String, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<Integer, String, Object>>();
      MutableTriple<Integer, String, Object> mutableTriple1 = new MutableTriple<Integer, String, Object>(integer0, "/", integer0);
      mutableTriple0.setRight(mutableTriple1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableTriple<Integer, Object, Integer>[] mutableTripleArray0 = MutableTriple.emptyArray();
      assertEquals(0, mutableTripleArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableTriple<String, Integer, Integer> mutableTriple0 = new MutableTriple<String, Integer, Integer>();
      mutableTriple0.setLeft("/");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(35);
      MutableTriple<String, Integer, Object> mutableTriple0 = MutableTriple.of("/", integer0, (Object) integer0);
      mutableTriple0.setMiddle(integer0);
  }
}
