/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:12:10 GMT 2022
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastTimeZone_ESTest extends FastTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastTimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastTimeZone.getTimeZone("");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastTimeZone.getGmtTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getGmtTimeZone(" hours out of range");
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getGmtTimeZone("Z");
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastTimeZone.getGmtTimeZone("");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getGmtTimeZone("UTC");
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getTimeZone("Y");
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getTimeZone("Z");
      assertEquals("GMT+00:00", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeZone timeZone0 = FastTimeZone.getGmtTimeZone();
      assertEquals("GMT+00:00", timeZone0.getID());
  }
}
