/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:15:26 GMT 2022
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoField;
import org.apache.commons.lang3.time.GmtTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GmtTimeZone_ESTest extends GmtTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, (-1), (-1));
      gmtTimeZone0.useDaylightTime();
      assertEquals("GMT-0/:0/", gmtTimeZone0.getID());
      assertEquals(3660000, gmtTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, (-1), (-1));
      MockDate mockDate0 = new MockDate();
      gmtTimeZone0.inDaylightTime(mockDate0);
      assertEquals("GMT-0/:0/", gmtTimeZone0.getID());
      assertEquals(3660000, gmtTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, (-2083), (-2083));
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals("GMT+\uFF60-:\uFF60-", gmtTimeZone0.getID());
      assertEquals(966154592, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 0, 0);
      int int0 = gmtTimeZone0.getOffset(0, 0, 60000, 0, 367, 0);
      assertEquals(0, int0);
      assertEquals("GMT-00:00", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, (-1), (-1));
      int int0 = gmtTimeZone0.getOffset(45, 957, 0, 0, 0, (-538));
      assertEquals("GMT-0/:0/", gmtTimeZone0.getID());
      assertEquals(3660000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 1, 0);
      String string0 = gmtTimeZone0.getID();
      assertEquals((-3600000), gmtTimeZone0.getRawOffset());
      assertEquals("GMT-01:00", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 1, 1);
      GmtTimeZone gmtTimeZone1 = new GmtTimeZone(true, 1, (-3660000));
      gmtTimeZone0.equals(gmtTimeZone1);
      assertEquals("GMT-01:\u6A800", gmtTimeZone1.getID());
      assertEquals(553067904, gmtTimeZone1.getRawOffset());
      assertEquals("GMT-01:01", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, 3, 3);
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      boolean boolean0 = gmtTimeZone0.equals(chronoField0);
      assertFalse(boolean0);
      assertEquals("GMT+03:03", gmtTimeZone0.getID());
      assertEquals(10980000, gmtTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 1, 0);
      boolean boolean0 = gmtTimeZone0.equals(gmtTimeZone0);
      assertEquals((-3600000), gmtTimeZone0.getRawOffset());
      assertTrue(boolean0);
      assertEquals("GMT-01:00", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = null;
      try {
        gmtTimeZone0 = new GmtTimeZone(true, 10, 1104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1104 minutes out of range
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = null;
      try {
        gmtTimeZone0 = new GmtTimeZone(true, 1938, 1938);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1938 hours out of range
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 1, 0);
      int int0 = gmtTimeZone0.getOffset(1, 0, 1, 1, 2087, 0);
      assertEquals((-3600000), int0);
      assertEquals("GMT-01:00", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, 1, 0);
      int int0 = gmtTimeZone0.getRawOffset();
      assertEquals("GMT-01:00", gmtTimeZone0.getID());
      assertEquals((-3600000), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, 3, 3);
      gmtTimeZone0.hashCode();
      assertEquals(10980000, gmtTimeZone0.getRawOffset());
      assertEquals("GMT+03:03", gmtTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(true, (-1), (-1472));
      String string0 = gmtTimeZone0.toString();
      assertEquals("[GmtTimeZone id=\"GMT-0/:\uFF9D.\",offset=91920000]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GmtTimeZone gmtTimeZone0 = new GmtTimeZone(false, 3, 3);
      // Undeclared exception!
      try { 
        gmtTimeZone0.setRawOffset(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.GmtTimeZone", e);
      }
  }
}
