/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:21:37 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutablePair_ESTest extends MutablePair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      Pair<Integer, Object> pair0 = ImmutablePair.left(integer0);
      MutablePair<Integer, Object> mutablePair0 = MutablePair.of((Map.Entry<Integer, Object>) pair0);
      assertNotNull(mutablePair0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Object> mutablePair0 = MutablePair.of("o>.2Mm}jjzw", (Object) integer0);
      Object object0 = mutablePair0.setValue("");
      assertEquals((-1598), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutablePair<Object, Integer> mutablePair0 = new MutablePair<Object, Integer>();
      Object object0 = mutablePair0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1598));
      MutablePair<String, Integer> mutablePair0 = new MutablePair<String, Integer>("", integer0);
      Object object0 = mutablePair0.getLeft();
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(405);
      MutablePair<Integer, Object> mutablePair0 = MutablePair.of(integer0, (Object) "?-}`J");
      Object object0 = mutablePair0.getRight();
      assertEquals("?-}`J", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      MutablePair<Object, Object> mutablePair1 = MutablePair.of((Object) mutablePair0, (Object) mutablePair0);
      mutablePair0.setRight(mutablePair1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutablePair<MutablePair<Object, String>, String>[] mutablePairArray0 = MutablePair.emptyArray();
      assertEquals(0, mutablePairArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Map.Entry<Object, Object>) null);
      Object object0 = mutablePair0.setValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>();
      mutablePair0.setLeft("org.apache.commons.lang3.tuple.MutablePair");
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutablePair<Integer, String> mutablePair0 = new MutablePair<Integer, String>();
      String string0 = mutablePair0.getRight();
      assertNull(string0);
  }
}
