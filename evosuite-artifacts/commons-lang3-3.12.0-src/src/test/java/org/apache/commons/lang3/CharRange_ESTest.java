/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:06:20 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('M', 'L');
      CharRange charRange1 = CharRange.isIn('Y', '?');
      charRange0.contains(charRange1);
      charRange0.isNegated();
      CharRange charRange2 = CharRange.is('L');
      charRange0.contains(charRange2);
      CharRange.is('=');
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.is('?');
      CharRange charRange1 = CharRange.isNotIn('q', 'I');
      charRange1.contains(charRange0);
      charRange0.iterator();
      charRange0.hashCode();
      charRange0.isNegated();
      CharRange.isNotIn('3', 'q');
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('n');
      charRange0.toString();
      CharRange charRange1 = CharRange.isNotIn('n', 'X');
      CharRange.isIn('n', 'o');
      charRange0.contains(charRange1);
      charRange1.getEnd();
      charRange0.getStart();
      CharRange.is('l');
      charRange0.isNegated();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('b', 'b');
      CharRange charRange1 = CharRange.isIn('b', 'D');
      CharRange.isNot('!');
      charRange1.toString();
      CharRange charRange2 = CharRange.isIn('D', 'b');
      charRange1.spliterator();
      charRange0.contains(charRange1);
      charRange0.isNegated();
      charRange0.getEnd();
      charRange2.isNegated();
      charRange0.isNegated();
      CharRange charRange3 = CharRange.isIn('H', 'b');
      charRange1.equals(charRange3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('s', 's');
      CharRange.isNot('!');
      char char0 = '5';
      CharRange charRange1 = CharRange.isNotIn('0', '5');
      charRange1.spliterator();
      CharRange charRange2 = CharRange.isNot('s');
      charRange2.iterator();
      charRange0.equals(charRange2);
      CharRange.isIn('1', '!');
      char char1 = 'n';
      // Undeclared exception!
      try { 
        charRange0.contains((CharRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('5', '5');
      charRange0.spliterator();
      charRange0.getStart();
      charRange0.hashCode();
      CharRange charRange1 = CharRange.isIn('5', '-');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange1.forEach(consumer0);
      CharRange charRange2 = CharRange.isNotIn('5', 'z');
      charRange1.getEnd();
      charRange2.getEnd();
      charRange2.iterator();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('R', 'o');
      CharRange.isNot('x');
      CharRange.isNotIn('R', '^');
      CharRange.isNot(']');
      CharRange.isIn('x', 'R');
      charRange0.toString();
      CharRange.isIn('&', 'l');
      charRange0.contains('R');
      charRange0.equals("");
      charRange0.iterator();
      CharRange charRange1 = CharRange.isNotIn('x', 'x');
      charRange1.iterator();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('', '^');
      CharRange charRange1 = CharRange.isNotIn('r', '0');
      charRange0.hashCode();
      charRange1.contains('r');
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('b', 'b');
      charRange0.getEnd();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('&');
      CharRange.isNotIn('7', 'k');
      CharRange.is('1');
      CharRange charRange1 = CharRange.isNotIn('&', '1');
      charRange0.hashCode();
      charRange0.contains(charRange1);
      Character character0 = new Character('&');
      charRange0.equals(character0);
      charRange1.toString();
      CharRange charRange2 = CharRange.isIn('R', '&');
      Object object0 = new Object();
      charRange2.equals(object0);
      charRange1.toString();
      charRange2.contains(charRange1);
      CharRange.is('R');
      CharRange.is('-');
      charRange2.contains(charRange0);
      charRange0.getStart();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('j', 'j');
      CharRange.isIn('$', '}');
      CharRange charRange1 = CharRange.isNot('j');
      charRange0.contains(charRange1);
      charRange1.iterator();
      CharRange.isNot('j');
      CharRange.isIn('j', 'j');
      CharRange.isNot('1');
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\'', 'w');
      CharRange charRange1 = CharRange.isNot('\'');
      charRange1.iterator();
      charRange0.contains(charRange1);
      charRange0.spliterator();
      CharRange charRange2 = CharRange.isNot('w');
      charRange0.toString();
      charRange1.hashCode();
      charRange2.equals(charRange1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('*', '*');
      charRange0.getEnd();
      CharRange charRange1 = CharRange.isNot('*');
      charRange0.equals(charRange1);
      CharRange.is('V');
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn(']', 'Y');
      CharRange charRange1 = CharRange.isNot(']');
      charRange0.contains(charRange1);
      CharRange charRange2 = CharRange.isNotIn('@', '>');
      charRange2.iterator();
      CharRange charRange3 = CharRange.is('Y');
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange3.forEach(consumer0);
      charRange3.spliterator();
      charRange0.equals(charRange2);
      charRange0.isNegated();
      charRange0.contains('&');
      Object object0 = new Object();
      charRange2.equals(object0);
      charRange2.contains(charRange1);
      charRange1.contains('q');
      charRange1.getEnd();
      CharRange charRange4 = CharRange.isNotIn('d', '&');
      charRange4.toString();
      charRange0.contains(charRange1);
      charRange0.spliterator();
      charRange4.iterator();
      charRange2.isNegated();
      charRange0.getEnd();
      CharRange.isNot(',');
      charRange2.iterator();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.is('$');
      CharRange charRange1 = CharRange.isIn('$', 'p');
      charRange1.toString();
      CharRange charRange2 = CharRange.isNot('\\');
      charRange2.iterator();
      CharRange.is('$');
      charRange0.getEnd();
      charRange0.contains(charRange2);
      CharRange.isIn('t', '_');
      charRange1.hashCode();
      charRange1.equals(charRange0);
      charRange1.getStart();
      charRange1.isNegated();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('|', '\"');
      charRange0.toString();
      CharRange.isNotIn('|', 'W');
      CharRange charRange1 = CharRange.isNot('W');
      charRange0.isNegated();
      charRange0.iterator();
      charRange1.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.is('+');
      CharRange.is('3');
      charRange0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      CharRange charRange1 = CharRange.isIn('X', 'X');
      charRange1.contains(charRange0);
      charRange1.isNegated();
      CharRange.is('+');
      CharRange charRange2 = CharRange.is('Z');
      charRange2.spliterator();
      CharRange.isIn('=', '=');
      CharRange charRange3 = CharRange.isIn('K', 'X');
      charRange0.contains(charRange2);
      CharRange charRange4 = CharRange.isNot('\'');
      charRange0.contains(charRange1);
      charRange1.hashCode();
      charRange4.spliterator();
      charRange0.equals(charRange4);
      charRange1.toString();
      charRange1.toString();
      charRange3.contains(charRange1);
      charRange4.contains(charRange1);
      charRange3.getStart();
      charRange3.hashCode();
      CharRange.isNotIn('=', '=');
      CharRange.isNot('~');
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char char0 = ':';
      CharRange charRange0 = CharRange.isNot(':');
      char char1 = 'Y';
      CharRange charRange1 = CharRange.isNot('Y');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.spliterator();
      // Undeclared exception!
      charRange1.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.is('U');
      CharRange charRange1 = CharRange.isNotIn('U', 'U');
      CharRange.isNot('U');
      CharRange charRange2 = CharRange.isNot('U');
      charRange2.spliterator();
      boolean boolean0 = charRange1.contains(charRange0);
      CharRange charRange3 = CharRange.isNotIn('U', 'U');
      charRange3.spliterator();
      boolean boolean1 = charRange0.contains(charRange1);
      assertTrue(charRange1.equals((Object)charRange2));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = charRange0.contains('U');
      Iterator<Character> iterator0 = charRange0.iterator();
      charRange0.hashCode();
      CharRange charRange4 = CharRange.isIn('U', '*');
      CharRange charRange5 = CharRange.isIn('*', '*');
      CharRange.is('*');
      charRange5.hashCode();
      boolean boolean3 = charRange5.equals(iterator0);
      assertFalse(boolean3 == boolean2);
      
      CharRange charRange6 = CharRange.is('*');
      charRange4.iterator();
      CharRange.isIn('*', 'R');
      CharRange charRange7 = CharRange.isIn('*', 'R');
      assertEquals('*', charRange7.getStart());
      
      charRange4.getStart();
      CharRange charRange8 = CharRange.isIn(':', '*');
      charRange8.toString();
      String string0 = charRange8.toString();
      assertEquals("*-:", string0);
      
      charRange4.getStart();
      String string1 = charRange5.toString();
      assertNotNull(string1);
      assertTrue(charRange5.equals((Object)charRange6));
      
      CharRange charRange9 = CharRange.isNot('*');
      assertFalse(charRange9.equals((Object)charRange5));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('+', 'l');
      CharRange charRange1 = CharRange.isIn('q', '+');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('l', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('+', charRange1.getStart());
      assertEquals('q', charRange1.getEnd());
  }
}
