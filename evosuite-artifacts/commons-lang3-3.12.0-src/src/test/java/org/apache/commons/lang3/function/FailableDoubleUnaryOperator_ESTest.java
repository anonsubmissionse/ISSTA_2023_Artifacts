/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:27:44 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableDoubleUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableDoubleUnaryOperator_ESTest extends FailableDoubleUnaryOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator1 = FailableDoubleUnaryOperator.nop();
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator2 = failableDoubleUnaryOperator1.andThen(failableDoubleUnaryOperator0);
      assertFalse(failableDoubleUnaryOperator2.equals((Object)failableDoubleUnaryOperator0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      double double0 = failableDoubleUnaryOperator0.applyAsDouble(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      double double0 = failableDoubleUnaryOperator0.applyAsDouble(1483.17117652);
      assertEquals(1483.17117652, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      double double0 = failableDoubleUnaryOperator0.applyAsDouble((-2309.9));
      assertEquals((-2309.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      // Undeclared exception!
      try { 
        failableDoubleUnaryOperator0.compose((FailableDoubleUnaryOperator<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      // Undeclared exception!
      try { 
        failableDoubleUnaryOperator0.andThen((FailableDoubleUnaryOperator<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator0 = FailableDoubleUnaryOperator.identity();
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator1 = failableDoubleUnaryOperator0.andThen(failableDoubleUnaryOperator0);
      FailableDoubleUnaryOperator<Throwable> failableDoubleUnaryOperator2 = failableDoubleUnaryOperator0.compose(failableDoubleUnaryOperator1);
      assertFalse(failableDoubleUnaryOperator2.equals((Object)failableDoubleUnaryOperator0));
  }
}
