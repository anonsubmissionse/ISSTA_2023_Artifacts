/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:21:50 GMT 2022
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2326));
      fastDateFormat1.getLocale();
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Object object0 = new Object();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat3.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat2.format(date0, stringBuffer1);
      FieldPosition fieldPosition0 = new FieldPosition(3);
      // Undeclared exception!
      try { 
        fastDateFormat3.format(object0, stringBuffer2, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      ParsePosition parsePosition0 = new ParsePosition((-1278));
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("i>Dx3aF+%nWvt}+", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREA;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      timeZone0.getOffset((long) 2);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = 'P';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      fastDateFormat0.format(1889L, charArrayWriter1);
      fastDateFormat0.format(date0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      fastDateFormat0.format(calendar0, (PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2326));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat2.format((-2278L), (StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      fastDateFormat0.format(1889L, charArrayWriter1);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(date0, stringBuffer1);
      fastDateFormat0.format(1889L, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      fastDateFormat0.toString();
      int int0 = 124;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$ISO8601TimeZoneStrategy", ", ");
      locale0.stripExtensions();
      locale0.getUnicodeLocaleAttributes();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDateFormat1.format((-1L), stringBuffer0);
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.before(stringBuffer0);
      fastDateFormat1.format(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat2.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.parallelStream();
      Locale locale1 = Locale.GERMANY;
      linkedHashSet0.add(locale0);
      Locale.lookup(linkedList0, linkedHashSet0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1);
      fastDateFormat0.getMaxLengthEstimate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(14, 1, 14);
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        fastDateFormat1.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[3] = '^';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      fastDateFormat0.format(date0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      FastDateFormat.getTimeInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat0.clone();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      assertTrue(fastDateFormat2.equals((Object)fastDateFormat0));
      assertTrue(fastDateFormat2.equals((Object)fastDateFormat1));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat2);
      assertNotSame(fastDateFormat2, fastDateFormat0);
      assertNotSame(fastDateFormat2, fastDateFormat1);
      assertNotNull(fastDateFormat2);
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat2);
      assertTrue(boolean0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat2));
      assertTrue(fastDateFormat2.equals((Object)fastDateFormat0));
      assertTrue(fastDateFormat2.equals((Object)fastDateFormat1));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat2);
      assertNotSame(fastDateFormat2, fastDateFormat0);
      assertNotSame(fastDateFormat2, fastDateFormat1);
      
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertTrue(fastDateFormat3.equals((Object)fastDateFormat1));
      assertTrue(fastDateFormat3.equals((Object)fastDateFormat2));
      assertNotSame(fastDateFormat3, fastDateFormat1);
      assertNotSame(fastDateFormat3, fastDateFormat2);
      assertSame(fastDateFormat3, fastDateFormat0);
      assertNotNull(fastDateFormat3);
      
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
      assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
      assertNotSame(fastDateFormat4, fastDateFormat3);
      assertNotSame(fastDateFormat4, fastDateFormat0);
      assertNotSame(fastDateFormat4, fastDateFormat1);
      assertNotSame(fastDateFormat4, fastDateFormat2);
      assertNotNull(fastDateFormat4);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat3.format((long) 3, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat2.parse("org.apache.commons.lang3.time.FastDateFormat", parsePosition0, (Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      fastDateFormat1.format((long) 3);
      fastDateFormat2.getTimeZone();
      FastDateFormat.getInstance("*@;w");
      fastDateFormat3.format((-2473L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("1/1/70 12:00 AM", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals("1/1/70 12:00 AM", stringBuffer1.toString());
      assertEquals(15, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("1/1/70 12:00 AM2/14/14 8:21 PM", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertEquals(30, stringBuffer1.length());
      assertEquals("1/1/70 12:00 AM2/14/14 8:21 PM", stringBuffer1.toString());
      assertEquals("1/1/70 12:00 AM2/14/14 8:21 PM", stringBuffer2.toString());
      assertEquals(30, stringBuffer2.length());
      assertNotNull(stringBuffer2);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(fastDateFormat1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      stringBuffer0.chars();
      fastDateFormat0.format(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      ParsePosition parsePosition0 = new ParsePosition((-305));
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("", parsePosition0, (Calendar) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, (-2303));
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.format((long) 3);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, (-885), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -885
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      locale0.getDisplayScript();
      StringBuffer stringBuffer0 = new StringBuffer();
      Object object0 = null;
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = new Locale("pattern");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(2);
      fastDateFormat0.equals(stringWriter0);
      stringWriter0.append((CharSequence) "pattern", 1, 2);
      fastDateFormat0.getLocale();
      fastDateFormat0.getMaxLengthEstimate();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("");
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      System.setCurrentTimeMillis(0);
      Locale locale1 = Locale.forLanguageTag("");
      locale0.getDisplayCountry(locale1);
      ParsePosition parsePosition0 = new ParsePosition((-348));
      parsePosition0.setErrorIndex(1);
      fastDateFormat0.parseObject("fr-CA", parsePosition0);
      fastDateFormat0.parse("fr-CA", parsePosition0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("fr-CA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat.getInstance();
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.parse(".D5", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.equals(locale0);
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[3] = '^';
      charArray0[4] = 'I';
      charArray0[5] = '#';
      charArray0[6] = ':';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 3);
      fastDateFormat0.format(date0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate(316, 3, 1, 2737, 0);
      fastDateFormat0.format((Date) mockDate0, (OutputStreamWriter) null);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat.getInstance("");
      fastDateFormat0.toString();
      fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDateFormat0.format((-1L), stringBuffer0);
      MockFile mockFile0 = new MockFile("", "sR8i3F3&\"#}=ln>mZwG");
      String string0 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Q$Ww&<");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fastDateFormat0.format(calendar0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":y[OE`!k");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 1);
      fastDateFormat1.format((-665L), bufferedWriter0);
      fastDateFormat0.format((-704L));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 11;
      int int1 = 13;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1679, 11, 11, 0, 1679);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(11, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0, mockDate0);
      fastDateFormat0.getTimeZone();
      Calendar calendar0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2385);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDateFormat$1");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1304);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) charArrayWriter0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.io.CharArrayWriter
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      locale0.clone();
      Locale locale1 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      try { 
        fastDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      int int0 = 12;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = null;
      ParsePosition parsePosition0 = new ParsePosition(1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2665, 1132, 3);
      mockGregorianCalendar0.isWeekDateSupported();
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null, parsePosition0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      fastDateFormat0.equals((Object) null);
      fastDateFormat0.equals((Object) null);
      FastDateFormat.getDateInstance(0, locale0);
      char[] charArray0 = new char[6];
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      fastDateFormat1.hashCode();
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = 'N';
      charArray0[3] = 'V';
      charArray0[4] = 'Q';
      charArray0[5] = 'c';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, (-354));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("]");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      locale0.getDisplayName();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = new Locale("qVz");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, bufferedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1356;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1356, "");
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      fastDateFormat0.parse("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1570), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1570
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      MockDate mockDate0 = new MockDate(0, (-1310), 41, (-1211), 0, (-1310));
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0, mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G.hvWG?L[TP%!tY5");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getGregorianChange();
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("9@4;{%2: er8%Z6<a]D");
      FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      int int1 = 3;
      int int2 = (-3325);
      int int3 = 48;
      // Undeclared exception!
      try { 
        timeZone0.getOffset(0, 1, 98, 0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", (Locale) null);
      MockCalendar.getInstance();
      fastDateFormat0.clone();
      MockDate mockDate0 = new MockDate(3, 2, 291);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1903;
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1903, (TimeZone) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1903
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "RLm5V> <-;<'$&;N");
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      simpleTimeZone0.setStartYear((-1615));
      Locale locale1 = new Locale("e.", "e.", "RLm5V> <-;<'$&;N");
      Locale.setDefault(locale0);
      locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale1);
      fastDateFormat1.hashCode();
      ParsePosition parsePosition0 = new ParsePosition(826);
      parsePosition0.setErrorIndex((-649));
      fastDateFormat0.parseObject("RLm5V> <-;<'$&;N", parsePosition0);
      // Undeclared exception!
      FastDateFormat.getTimeInstance(0, locale1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(1, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h#d");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat.getInstance("6 Fm5", timeZone0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-167), "-[ G<3U|uv(Y=~ ");
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("-[ G<3U|uv(Y=~ ", simpleTimeZone0, (Locale) null, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-Z CgLvf*mRrmLd34s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "s>";
      Locale locale0 = new Locale("`EH:i+K", "`EH:i+K");
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("s>", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 3, 2, 2, 0);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 789;
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "=#cHC3lS6";
      Locale locale0 = Locale.forLanguageTag("=#cHC3lS6");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(789, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 789
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "1q~Am";
      TimeZone timeZone0 = TimeZone.getTimeZone("1q~Am");
      timeZone0.getOffset((long) (-1));
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      fastDateFormat1.getTimeZone();
      Locale locale0 = new Locale("", ", ");
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(124, 2, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 124
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "`M";
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("`M", locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateFormat0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3421, "`M");
      assertEquals("`M", simpleTimeZone0.getID());
      assertEquals(3421, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale1 = Locale.forLanguageTag("`M");
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.toString());
      assertNotNull(locale1);
      
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("`M", simpleTimeZone0.getID());
      assertEquals(3421, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=741,ZONE_OFFSET=3421,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "`M");
      assertEquals(2, stringBuffer0.length());
      assertEquals("`M", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("`M", simpleTimeZone0.getID());
      assertEquals(3421, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=741,ZONE_OFFSET=3421,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(4, stringBuffer0.length());
      assertEquals("`M`2", stringBuffer0.toString());
      assertEquals("`M`2", stringBuffer1.toString());
      assertEquals(4, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("`M", simpleTimeZone0.getID());
      assertEquals(3421, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=`M,offset=3421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=24,MILLISECOND=741,ZONE_OFFSET=3421,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("`M`2`2", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals("`M`2`2", stringBuffer1.toString());
      assertEquals(6, stringBuffer1.length());
      assertEquals("`M`2`2", stringBuffer2.toString());
      assertEquals(6, stringBuffer2.length());
      assertNotNull(stringBuffer2);
      
      StringBuffer stringBuffer3 = stringBuffer0.append((double) 3421);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer1);
      assertEquals("`M`2`23421.0", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
      assertEquals("`M`2`23421.0", stringBuffer3.toString());
      assertEquals(12, stringBuffer3.length());
      assertNotNull(stringBuffer3);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-153), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -153
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = new Locale("v9#BPxU", "v9#BPxU", "v9#BPxU");
      assertEquals("v9#BPxU", locale0.getVariant());
      assertEquals("V9#BPXU", locale0.getCountry());
      assertEquals("v9#bpxu_V9#BPXU_v9#BPxU", locale0.toString());
      assertEquals("v9#bpxu", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("v9#BPxU", locale0.getVariant());
      assertEquals("V9#BPXU", locale0.getCountry());
      assertEquals("v9#bpxu_V9#BPXU_v9#BPxU", locale0.toString());
      assertEquals("v9#bpxu", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("v9#BPxU", locale0.getVariant());
      assertEquals("V9#BPXU", locale0.getCountry());
      assertEquals("v9#bpxu_V9#BPXU_v9#BPxU", locale0.toString());
      assertEquals("v9#bpxu", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("v9#BPxU", locale0.getVariant());
      assertEquals("V9#BPXU", locale0.getCountry());
      assertEquals("v9#bpxu_V9#BPXU_v9#BPxU", locale0.toString());
      assertEquals("v9#bpxu", locale0.getLanguage());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("8:21:21 PM GMT", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertEquals(14, stringBuffer1.length());
      assertEquals("8:21:21 PM GMT", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4403, 3, 3, 0, 3, 3);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = 1722L;
      CharBuffer charBuffer0 = CharBuffer.allocate(178);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(178, charBuffer0.remaining());
      assertEquals(178, charBuffer0.capacity());
      assertEquals(178, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(178, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(178, charBuffer0.remaining());
      assertEquals(178, charBuffer0.capacity());
      assertEquals(178, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(178, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(178, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      int int0 = 89;
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(178, charBuffer0.remaining());
      assertEquals(178, charBuffer0.capacity());
      assertEquals(178, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(178, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(181, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003.0", stringBuffer0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003.0", stringBuffer1.toString());
      assertEquals(181, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      int int1 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        stringBuffer0.appendCodePoint((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertNotNull(locale1);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(fastDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(7);
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(7, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Date date0 = fastDateFormat0.parse("' not supported", parsePosition0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(7, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=7,errorIndex=7]", parsePosition0.toString());
      assertEquals(7, parsePosition0.getErrorIndex());
      assertNull(date0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      String string0 = locale1.toLanguageTag();
      assertEquals("zh-CN", string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertNotNull(string0);
      
      boolean boolean0 = fastDateFormat0.parse("' not supported", parsePosition0, calendar0);
      assertFalse(boolean0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(7, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=7,errorIndex=7]", parsePosition0.toString());
      assertEquals(7, parsePosition0.getErrorIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(10, 1, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      String string0 = fastDateFormat0.getPattern();
      assertEquals("M/d/yy h:mm a", string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(string0);
      
      ParsePosition parsePosition0 = new ParsePosition(2);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = fastDateFormat0.parse(".D5", parsePosition0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=3]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals(3, parsePosition0.getErrorIndex());
      assertNull(date0);
      
      Locale locale0 = fastDateFormat0.getLocale();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(21, int0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      
      String string1 = fastDateFormat0.format(0L);
      assertEquals("1/1/70 12:00 AM", string1);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3266
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(909);
      assertEquals(909, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=909,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      ParsePosition parsePosition1 = new ParsePosition(12);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertEquals("java.text.ParsePosition[index=12,errorIndex=-1]", parsePosition1.toString());
      assertEquals(12, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertNotNull(parsePosition1);
      
      Object object0 = fastDateFormat0.parseObject("Qj$upVE", parsePosition1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotSame(parsePosition1, parsePosition0);
      assertEquals(12, parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=12,errorIndex=12]", parsePosition1.toString());
      assertEquals(12, parsePosition1.getIndex());
      assertNull(object0);
      
      parsePosition0.setErrorIndex(2);
      assertFalse(parsePosition0.equals((Object)parsePosition1));
      assertNotSame(parsePosition0, parsePosition1);
      assertEquals("java.text.ParsePosition[index=909,errorIndex=2]", parsePosition0.toString());
      assertEquals(909, parsePosition0.getIndex());
      assertEquals(2, parsePosition0.getErrorIndex());
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) mockPrintWriter0;
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      
      int int0 = 0;
      int int1 = fastDateFormat0.hashCode();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(int1 == int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1049), (-1744));
      assertEquals("*@;w", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=*@;w,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=1,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=-1049,endTime=-1744,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2067), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2067
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      
      fastDateFormat0.hashCode();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "org.apache.commons.lang3.time.FastDateFormat", 1, 3, 4, (-480), 0, 4, 4, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -480
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(470, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=470,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(470, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 470
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "P8FV7");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("P8FV7", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=P8FV7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      simpleTimeZone0.setID("P8FV7");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("P8FV7", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=P8FV7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("P8FV7", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=P8FV7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[yyyy'\u5E74'M'\u6708'd'\u65E5',ja_JP,P8FV7]", string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("P8FV7", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=P8FV7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(string0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("P8FV7", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=P8FV7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(fastDateFormat1);
      
      int int0 = 10;
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone(0, "P8FV7", 3, 3539, 3, 791, 63, 1, 2, 1, 10, 2, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week in month 3539
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2643), (TimeZone) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2643
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeZone.setDefault(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("AitE71E)G]3doLI{%", "AitE71E)G]3doLI{%", "");
      assertEquals("aite71e)g]3doli{%_AITE71E)G]3DOLI{%", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("aite71e)g]3doli{%", locale0.getLanguage());
      assertEquals("AITE71E)G]3DOLI{%", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      fastDateFormat0.toString();
      Locale locale1 = fastDateFormat0.getLocale();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale1);
      timeZone0.toZoneId();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale1);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      
      Locale locale0 = fastDateFormat0.getLocale();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-1L), (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(>goLs@_");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate(0, 2811, 0);
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("]", string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("Wed Mar 31 00:00:00 GMT 2134", mockDate0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 90;
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(90, 90, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 90
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "org.apache.commons.lang3.time.FastDateFormat");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("org.apache.commons.lang3.time.FastDateFormat", simpleTimeZone0.getID());
      assertEquals((-3), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat,offset=-3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Locale locale0 = Locale.lookup(linkedList0, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(locale0);
      
      boolean boolean0 = linkedHashSet0.add((Locale) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("org.apache.commons.lang3.time.FastDateFormat", simpleTimeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 41;
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(string0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(41, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 41
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertNotNull(locale1);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale1);
      Date date0 = null;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) timeZone0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: sun.util.calendar.ZoneInfo
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<Ftb~tba?m&Xx~", (TimeZone) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("m.nAv903zp", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(13, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-596), (-596));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -596
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", patterns=", 0, 0, 0, 0, 94, 0, 0, (-2699));
      assertEquals(", patterns=", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=, patterns=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=94,endDay=0,endDayOfWeek=0,endTime=-2699,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(", patterns=", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=, patterns=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=94,endDay=0,endDayOfWeek=0,endTime=-2699,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(fastDateFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(", patterns=", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=, patterns=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=94,endDay=0,endDayOfWeek=0,endTime=-2699,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(21, stringBuffer0.length());
      assertEquals("12:00:00 AM GMT+00:00", stringBuffer0.toString());
      assertEquals(21, stringBuffer1.length());
      assertEquals("12:00:00 AM GMT+00:00", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(773, 773, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 773
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      FastDateFormat.getTimeInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateFormat0);
      
      String string0 = "r}d3GkLc\"T?f%";
      int int1 = 4213;
      String string1 = locale0.toLanguageTag();
      assertEquals("en", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      int int2 = 42;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 42, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 42
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-900), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -900
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = new Locale("Format '", ", startYear=");
      assertEquals("format '_, STARTYEAR=", locale0.toString());
      assertEquals(", STARTYEAR=", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("format '", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat.getDateTimeInstance(0, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[,en,GMT]", string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = new Locale("", "]>%");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_]>%", locale0.toString());
      assertEquals("]>%", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_]>%", locale0.toString());
      assertEquals("]>%", locale0.getCountry());
      assertNotNull(fastDateFormat0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 90;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 90
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-2213);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2213
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(5, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("a?m{6vq/qi{?", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 87;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(87);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 87
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateFormat0);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 2, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = new Locale(", locale=", ", locale=");
      assertEquals(", locale=_, LOCALE=", locale0.toString());
      assertEquals(", locale=", locale0.getLanguage());
      assertEquals(", LOCALE=", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8Ybc4", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3522
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("iZu1cmnV[KM]a4.X>>");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1019, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1019
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("m'IDc($mP7rM0&uv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat", "org.apache.commons.lang3.time.FastDateFormat");
      assertEquals("org.apache.commons.lang3.time.fastdateformat_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT", locale0.toString());
      assertEquals("ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEFORMAT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang3.time.fastdateformat", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(fastDateFormat1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertNotNull(mockGregorianCalendar1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.2014", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.2014", stringWriter1.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.2014", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.2014", stringBuffer1.toString());
      assertEquals(20, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format(2L, stringBuffer1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.20141/1/70 12:00 AM", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.20141/1/70 12:00 AM", stringWriter1.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.20141/1/70 12:00 AM", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.20141/1/70 12:00 AM", stringBuffer1.toString());
      assertEquals(35, stringBuffer1.length());
      assertEquals(35, stringBuffer2.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000014.02.20141/1/70 12:00 AM", stringBuffer2.toString());
      assertNotNull(stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2/14/14 8:21 PM", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals(15, stringBuffer1.length());
      assertEquals("2/14/14 8:21 PM", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(fastDateFormat1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2);
      assertNotNull(mockGregorianCalendar0);
      
      IntStream intStream0 = stringBuffer0.chars();
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("2/14/14 8:21 PM", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(intStream0);
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("4/2/01 12:00 AM", string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62127907200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=92,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(string0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar1, stringBuffer0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertEquals("2/14/14 8:21 PM2/14/14 8:21 PM", stringBuffer0.toString());
      assertEquals(30, stringBuffer0.length());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("2/14/14 8:21 PM2/14/14 8:21 PM", stringBuffer2.toString());
      assertEquals(30, stringBuffer2.length());
      assertNotNull(stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(fastDateFormat0);
      
      Date date0 = fastDateFormat0.parse("org.apache.commons.lang3.time.FastDateFormat");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[4] = '\"';
      charArray0[5] = '#';
      charArray0[6] = '4';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = fastDateFormat0.format(date0, charBuffer0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(3, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(3, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("j", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("j", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = fastDateFormat0.format(1889L, charArrayWriter1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("j", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("j", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter2.size());
      assertEquals("j", charArrayWriter2.toString());
      assertNotNull(charArrayWriter2);
      
      String string0 = fastDateFormat0.format(date0);
      assertEquals("", string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h#d");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("6 Fm5", timeZone0, locale0);
      FastDateFormat.getDateTimeInstance(3, 3);
      MockFile mockFile0 = new MockFile("]");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 90, 3);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[MMM d, yyyy,en,GMT]", string0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
      fastDateFormat1.getTimeZone();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat.getDateTimeInstance(2, 2, locale0);
      String string1 = fastDateFormat1.toString();
      assertEquals("FastDateFormat[MMM d, yyyy h:mm:ss a z,en,GMT]", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$ISO8601TimeZoneStrategy", ", ");
      locale0.stripExtensions();
      locale0.getUnicodeLocaleAttributes();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDateFormat0.format((-1L), stringBuffer0);
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.clear();
      calendar0.before(stringBuffer0);
      fastDateFormat0.format(calendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat1.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = new Locale("pattern");
      locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(2);
      fastDateFormat1.equals(stringWriter0);
      fastDateFormat1.getLocale();
      fastDateFormat1.getMaxLengthEstimate();
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat1.parse("ef", parsePosition0, (Calendar) null);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer1, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@;w", 0, 0, 0, 1, 0, 0, (-1059), (-1744));
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getPattern();
      FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 0);
      File file0 = MockFile.createTempFile("pattern", "CXzZ@OlJAJC9.6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0);
      fastDateFormat1.format((Calendar) mockGregorianCalendar0, bufferedWriter0);
      FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      fastDateFormat1.getMaxLengthEstimate();
      String string0 = fastDateFormat1.format((long) 3);
      assertEquals("Thursday, January 1, 1970", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateFormat0.parse("", parsePosition0);
      Locale locale0 = Locale.CANADA;
      fastDateFormat0.getMaxLengthEstimate();
      fastDateFormat0.format(0L);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3266
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat.getTimeInstance(1);
      fastDateFormat0.getMaxLengthEstimate();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(3, 1, 3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 2255, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2255
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
