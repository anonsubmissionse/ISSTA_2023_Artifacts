/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:23:24 GMT 2022
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableBiFunction;
import org.apache.commons.lang3.function.FailableFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FailableBiFunction_ESTest extends FailableBiFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableBiFunction<Integer, Object, String, Throwable> failableBiFunction0 = FailableBiFunction.nop();
      Integer integer0 = new Integer((-1));
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = failableBiFunction0.apply(integer0, mockThrowable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableBiFunction<Throwable, Object, Throwable, Throwable> failableBiFunction0 = FailableBiFunction.nop();
      // Undeclared exception!
      try { 
        failableBiFunction0.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableBiFunction<Object, Object, Object, Throwable> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<Object, Integer, Throwable> failableFunction0 = FailableFunction.nop();
      FailableBiFunction<Object, Object, Object, Throwable> failableBiFunction1 = failableBiFunction0.andThen((FailableFunction<? super Object, ?, Throwable>) failableFunction0);
      assertFalse(failableBiFunction1.equals((Object)failableBiFunction0));
  }
}
