/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:16:19 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableObject_ESTest extends MutableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableObject<Integer> mutableObject0 = new MutableObject<Integer>();
      Object object0 = mutableObject0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      MutableObject<Object> mutableObject1 = new MutableObject<Object>(mutableObject0);
      mutableObject0.setValue(mutableObject1);
      Object object0 = mutableObject0.getValue();
      // Undeclared exception!
      try { 
        mutableObject0.equals(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      MutableObject<String> mutableObject1 = new MutableObject<String>("");
      // Undeclared exception!
      try { 
        mutableObject0.equals(mutableObject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableObject<MutableObject<String>> mutableObject0 = new MutableObject<MutableObject<String>>();
      boolean boolean0 = mutableObject0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      String string0 = mutableObject0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>();
      MutableObject<MutableObject<String>> mutableObject1 = new MutableObject<MutableObject<String>>(mutableObject0);
      String string0 = mutableObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      mutableObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      MutableObject<MutableObject<Object>> mutableObject1 = new MutableObject<MutableObject<Object>>(mutableObject0);
      mutableObject1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>();
      MutableObject<MutableObject<String>> mutableObject1 = new MutableObject<MutableObject<String>>(mutableObject0);
      MutableObject<Object> mutableObject2 = new MutableObject<Object>();
      boolean boolean0 = mutableObject1.equals(mutableObject2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableObject<String> mutableObject0 = new MutableObject<String>((String) null);
      boolean boolean0 = mutableObject0.equals(mutableObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableObject<Object> mutableObject0 = new MutableObject<Object>();
      Object object0 = new Object();
      boolean boolean0 = mutableObject0.equals(object0);
      assertFalse(boolean0);
  }
}
