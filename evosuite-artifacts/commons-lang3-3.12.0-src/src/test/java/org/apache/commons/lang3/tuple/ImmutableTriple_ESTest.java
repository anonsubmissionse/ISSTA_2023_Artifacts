/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:23:34 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImmutableTriple_ESTest extends ImmutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ImmutableTriple<Integer, String, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = immutableTriple0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ImmutableTriple<Object, ImmutableTriple<Object, Object, String>, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Object, Object, String> immutableTriple1 = immutableTriple0.getMiddle();
      assertNull(immutableTriple1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImmutableTriple<Object, String, Object> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = new Integer(0);
      ImmutableTriple<Object, Integer, String> immutableTriple1 = ImmutableTriple.of((Object) immutableTriple0, integer0, (String) null);
      Integer integer1 = immutableTriple1.getMiddle();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImmutableTriple<String, Integer, String> immutableTriple0 = ImmutableTriple.nullTriple();
      Object object0 = immutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(2589);
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.of(integer0, integer0, integer0);
      ImmutableTriple<Object, String, Integer> immutableTriple1 = ImmutableTriple.of((Object) immutableTriple0, "", integer0);
      Object object0 = immutableTriple1.getLeft();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Object, String, Object> immutableTriple0 = new ImmutableTriple<Object, String, Object>((Object) null, "Y:5M", integer0);
      Object object0 = immutableTriple0.getRight();
      assertNotNull(object0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImmutableTriple<ImmutableTriple<Integer, String, Integer>, Object, Integer>[] immutableTripleArray0 = ImmutableTriple.emptyArray();
      assertEquals(0, immutableTripleArray0.length);
  }
}
