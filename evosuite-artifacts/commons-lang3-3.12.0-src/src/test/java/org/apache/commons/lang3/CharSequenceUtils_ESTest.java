/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:53:52 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.lang3.CharSequenceUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharSequenceUtils_ESTest extends CharSequenceUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      assertNotNull(charSequenceUtils0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) stringBuilder0);
      char[] charArray0 = new char[18];
      charArray0[0] = ')';
      stringBuilder1.append(65536);
      stringBuilder0.append(charArray0);
      stringBuilder1.append((-3155.100355910177));
      CharSequenceUtils.indexOf(stringBuilder1, stringBuilder0, 1234);
      CharSequenceUtils.lastIndexOf(stringBuilder0, 65536, 36);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("a&2bArX`,g");
      CharSequenceUtils.regionMatches("", false, 1, "a&2bArX`,g", 0, 884);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("a&2bArX`,g");
      int int0 = (-1041);
      CharSequenceUtils.toCharArray("a&2bArX`,g");
      CharSequenceUtils.lastIndexOf("", "a&2bArX`,g", (-615));
      boolean boolean0 = false;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        stringBuilder0.replace(29, 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      StringBuilder stringBuilder0 = new StringBuilder("Arguments cannot both be null");
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      stringBuffer1.codePoints();
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 1);
      stringBuffer0.deleteCharAt(1);
      CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("h5+;3M6D O`|qo>ng.");
      int int0 = CharSequenceUtils.TO_STRING_LIMIT;
      int int1 = CharSequenceUtils.TO_STRING_LIMIT;
      CharSequenceUtils.regionMatches("h5+;3M6D O`|qo>ng.", true, 16, stringBuffer0, 643, 108);
      CharSequenceUtils.toCharArray("h5+;3M6D O`|qo>ng.");
      CharSequenceUtils.regionMatches(stringBuffer0, false, (-2048), stringBuffer0, 567, 888);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 65536, 108);
      CharSequenceUtils.subSequence(stringBuffer0, 16);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.regionMatches(stringBuffer0, true, 3753, stringBuffer0, (-1), Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-48), (-1));
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, Integer.MAX_VALUE);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
      CharSequenceUtils.indexOf(stringBuffer0, 12, (-48));
      // Undeclared exception!
      CharSequenceUtils.indexOf(stringBuffer0, (-2063), (-1929));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      StringBuilder stringBuilder3 = stringBuilder1.append((Object) stringBuilder0);
      stringBuilder2.append(715L);
      CharSequenceUtils.subSequence(stringBuilder2, 0);
      CharSequenceUtils.toCharArray(".0.0715");
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder1, 2053);
      CharSequenceUtils.lastIndexOf(".0.0715", stringBuilder0, 0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder3, (-1727));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1727
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      stringBuilder0.insert(3, true);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 1);
      CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      stringBuilder2.insert(1, 0.0);
      CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 1);
      CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      stringBuffer0.insert(3, (CharSequence) stringBuilder0);
      stringBuilder0.append("Arguments cannot both be null");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder0);
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      CharSequenceUtils.lastIndexOf(stringBuilder0, "Arguments cannot both be null", 1);
      CharSequenceUtils.indexOf(stringBuffer1, 0, 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
      CharSequenceUtils.indexOf(stringBuffer1, 3, 3718);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) "+ThT9ZC2dpbhvs");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2);
      stringBuilder1.append((long) 0);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder3 = stringBuilder1.reverse();
      CharSequenceUtils.lastIndexOf(stringBuilder3, 0, 3720);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-2391), "+ThT9ZC2dpbhvs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2391
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 1);
      CharSequenceUtils.indexOf(stringBuffer1, 0, 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      assertNotNull(stringBuffer0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Arguments cannot both be null", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, true);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuffer1, true, 3, stringBuffer0, 3, 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(boolean0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals((-1), int0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      
      int int1 = CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      int int2 = CharSequenceUtils.indexOf(stringBuilder1, 65536, (-489));
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(" in an array of ");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      stringBuffer1.codePoints();
      CharSequenceUtils.lastIndexOf(stringBuilder2, " in an array of ", 1);
      CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      CharSequenceUtils.lastIndexOf(stringBuilder1, (-1), 2091);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, Integer.MAX_VALUE, 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, 0);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), (-985));
      CharSequenceUtils.indexOf(stringBuffer0, (-605), 11);
      CharSequenceUtils.lastIndexOf(stringBuffer0, charBuffer0, (-1));
      CharSequenceUtils.indexOf(charBuffer0, (-1), 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 0, 819);
      CharSequenceUtils.indexOf(charBuffer0, 0, 0);
      CharSequenceUtils.lastIndexOf(charBuffer0, stringBuffer0, 6);
      CharSequenceUtils.toCharArray(charBuffer0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf((CharSequence) null, (-1963), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuffer stringBuffer0 = new StringBuffer("I7@.~");
      stringBuffer0.codePoints();
      stringBuffer0.appendCodePoint(3745);
      CharSequenceUtils.toCharArray(stringBuffer0);
      StringBuilder stringBuilder0 = new StringBuilder("ylb_h-<owi");
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer1.append(0);
      stringBuilder0.append(stringBuffer1);
      StringBuffer stringBuffer2 = new StringBuffer("Array and element cannot both be null");
      CharSequenceUtils.lastIndexOf(stringBuffer2, (-835), (-375));
      CharSequenceUtils.lastIndexOf("I7@.~", stringBuffer1, 1944);
      CharSequenceUtils.regionMatches("ylb_h-<owi", false, (-835), stringBuffer1, (-852), (-1));
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-2788), 1114111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2788
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) "+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder3 = stringBuilder2.insert(7, 0.0F);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      char[] charArray0 = new char[0];
      int int0 = (-2391);
      StringBuilder stringBuilder4 = stringBuilder3.append(3920.3806F);
      CharSequenceUtils.toCharArray(stringBuilder4);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder2, 3708);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3667
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      charBuffer0.clear();
      char[] charArray0 = new char[0];
      stringBuilder0.deleteCharAt(0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf(charBuffer0, stringBuilder1, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, 3753);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 0, 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-4645), 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, (-1));
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, Integer.MAX_VALUE, 0);
      int int0 = CharSequenceUtils.TO_STRING_LIMIT;
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, 16);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
      CharSequenceUtils.indexOf(stringBuffer0, (-605), 11);
      CharSequenceUtils.lastIndexOf(stringBuffer0, charBuffer0, (-1));
      CharSequenceUtils.indexOf(charBuffer0, (-1), 13);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 0, 819);
      CharSequenceUtils.indexOf(charBuffer0, 0, 16);
      CharSequenceUtils.lastIndexOf(charBuffer0, stringBuffer0, 6);
      CharSequenceUtils.toCharArray(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      CharSequenceUtils.lastIndexOf(stringBuilder1, 19, 3165);
      StringBuilder stringBuilder2 = new StringBuilder(0);
      stringBuilder2.append("");
      char[] charArray0 = new char[0];
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      stringBuffer0.append((Object) stringBuffer1);
      stringBuilder2.append(0L);
      CharSequenceUtils.lastIndexOf(stringBuffer0, stringBuilder0, 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-4645), Integer.MAX_VALUE);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, Integer.MAX_VALUE, 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuffer stringBuffer0 = new StringBuffer("I7@.~");
      CharSequenceUtils.toCharArray(stringBuffer0);
      StringBuilder stringBuilder0 = new StringBuilder("ylb_h-<owi");
      stringBuilder0.append(stringBuffer0);
      StringBuffer stringBuffer1 = new StringBuffer("Array and element cannot both be null");
      int int0 = (-835);
      CharSequenceUtils.lastIndexOf(stringBuffer1, (-835), (-375));
      CharSequenceUtils.lastIndexOf("I7@.~", stringBuffer0, 1944);
      CharSequenceUtils.regionMatches("ylb_h-<owi", false, (-835), stringBuffer0, (-852), (-1));
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-2816), 1114111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2816
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      String string0 = "org.apache.commons.lang3.CharSequenceUtils";
      char[] charArray0 = new char[1];
      boolean boolean0 = true;
      CharSequenceUtils.indexOf("org.apache.commons.lang3.CharSequenceUtils", stringBuilder0, 1591);
      int int0 = (-1726);
      int int1 = 76;
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", 5544, 5544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 5544, end 5544, s.length() 42
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(115);
      CharBuffer charBuffer0 = CharBuffer.allocate(115);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 115);
      char[] charArray0 = new char[0];
      CharSequenceUtils.indexOf(charBuffer0, stringBuilder1, 11);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      stringBuilder0.append((double) 0);
      StringBuilder stringBuilder3 = stringBuilder1.appendCodePoint(19);
      StringBuilder stringBuilder4 = stringBuilder2.insert(0, (CharSequence) stringBuilder1);
      StringBuilder stringBuilder5 = stringBuilder4.append((-1L));
      char[] charArray0 = new char[4];
      stringBuilder3.chars();
      charArray0[0] = '!';
      charArray0[1] = '*';
      charArray0[2] = '~';
      charArray0[3] = 'w';
      StringBuilder stringBuilder6 = stringBuilder2.insert(0, charArray0);
      CharSequenceUtils.lastIndexOf(stringBuilder5, 3011, (-1794));
      stringBuilder5.insert(0, 1114111);
      CharSequenceUtils.regionMatches(stringBuilder4, false, 0, stringBuilder5, 1114111, 0);
      CharSequenceUtils.indexOf(stringBuilder5, (-1), 32);
      CharSequenceUtils.lastIndexOf(stringBuilder6, stringBuilder3, (-1));
      CharSequenceUtils.lastIndexOf(stringBuilder5, stringBuilder3, 0);
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharSequenceUtils.lastIndexOf(stringBuilder6, charBuffer0, 13);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append(101.76501F);
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      StringBuilder stringBuilder3 = stringBuilder1.insert(0, 101.76501F);
      StringBuilder stringBuilder4 = stringBuilder2.append((Object) stringBuilder3);
      StringBuilder stringBuilder5 = stringBuilder4.insert(0, (float) 0);
      CharSequenceUtils.lastIndexOf(stringBuilder5, stringBuilder2, 0);
      stringBuilder1.append('9');
      CharSequenceUtils.lastIndexOf(stringBuilder1, "", 2417);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append(')');
      StringBuilder stringBuilder2 = stringBuilder1.replace(0, 0, "org.apache.commons.lang3.CharSequenceUtils");
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);
      CharSequenceUtils.regionMatches(stringBuilder4, true, 2, "org.apache.commons.lang3.CharSequenceUtils", ')', ')');
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) "+ThT9ZC2dpbhvs");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2);
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '!';
      CharSequenceUtils.lastIndexOf(stringBuilder2, (-2212), (-2212));
      CharSequenceUtils.indexOf(stringBuilder0, 0, 1);
      charArray0[2] = '{';
      charArray0[3] = ';';
      charArray0[4] = 'r';
      charArray0[5] = 'A';
      charArray0[6] = 'I';
      charArray0[7] = '~';
      charBuffer0.get(charArray0);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray1, (-2391), (-605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, Integer.MAX_VALUE, 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-4645), Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, (-1));
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuilder stringBuilder0 = new StringBuilder("ylb_h-<owi");
      int int0 = 1114111;
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      CharSequenceUtils.lastIndexOf(stringBuilder0, 1114111, 1418);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder1);
      CharSequenceUtils.toCharArray(charBuffer0);
      stringBuilder0.appendCodePoint(3745);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(charBuffer0, (-1095));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      stringBuilder2.append(0);
      StringBuilder stringBuilder3 = stringBuilder0.replace(0, 0, "");
      stringBuilder2.append((Object) stringBuilder3);
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0);
      CharSequenceUtils.lastIndexOf(stringBuilder4, stringBuilder2, 0);
      StringBuilder stringBuilder5 = stringBuilder2.insert(0, 0);
      CharSequenceUtils.lastIndexOf(stringBuilder5, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = '\'';
      CharSequenceUtils.indexOf(", '", 1114111, 3728);
      CharSequenceUtils.lastIndexOf(", '", 1114111, 128);
      CharSequenceUtils.regionMatches(", '", false, 3728, ", '", (-1), 128);
      CharSequenceUtils.toCharArray(", '");
      CharSequenceUtils.indexOf(", '", ", '", 28);
      CharSequenceUtils.indexOf(", '", 1886, 16);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1484);
      CharSequenceUtils.lastIndexOf("Array element ", stringBuffer0, 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'O';
      charArray0[2] = 'f';
      charArray0[3] = '4';
      stringBuffer0.append(charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-48), 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-4645), Integer.MAX_VALUE);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1), 0);
      CharSequenceUtils.indexOf(charBuffer0, stringBuffer0, 7);
      CharSequenceUtils.lastIndexOf(charBuffer0, 0, 2887);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) stringBuilder0);
      stringBuilder0.codePoints();
      CharSequenceUtils.subSequence(stringBuilder0, 0);
      CharSequenceUtils.toCharArray("");
      CharSequenceUtils.subSequence(stringBuilder1, 0);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder0, 2053);
      CharSequenceUtils.regionMatches(stringBuilder0, false, 0, stringBuilder0, 0, 0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder1, (-1727));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1727
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      int int1 = 0;
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder3.append((-1L));
      CharSequenceUtils.lastIndexOf(stringBuilder4, 3011, 0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        stringBuilder4.insert(2551, (CharSequence) stringBuilder3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 2551
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append(101.76501F);
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (float) 0);
      CharSequenceUtils.lastIndexOf(stringBuilder4, stringBuilder2, 0);
      CharSequenceUtils.regionMatches("-", false, 37, stringBuilder3, 0, 37);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder1);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      char[] charArray0 = new char[0];
      charBuffer0.get(charArray0);
      CharSequenceUtils.regionMatches(stringBuilder1, false, 2463, charBuffer0, (-228), (-535));
      CharSequenceUtils.toCharArray(charBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, (-2391), (-605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-48), 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, (-1));
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      CharSequenceUtils.toCharArray(stringBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      // Undeclared exception!
      CharSequenceUtils.toCharArray(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'I';
      charArray0[2] = 'T';
      charArray0[3] = '?';
      charArray0[4] = 'k';
      charArray0[5] = 'b';
      charArray0[6] = '%';
      charArray0[7] = 'e';
      charArray0[8] = 'A';
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, charArray0);
      CharSequenceUtils.toCharArray(stringBuilder2);
      int int0 = Integer.MAX_VALUE;
      CharSequenceUtils.lastIndexOf(stringBuilder2, stringBuilder0, Integer.MAX_VALUE);
      CharSequenceUtils.toCharArray(stringBuilder1);
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, Integer.MAX_VALUE, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      StringBuilder stringBuilder3 = stringBuilder1.append((Object) stringBuilder0);
      stringBuilder1.codePoints();
      CharSequenceUtils.subSequence(stringBuilder2, 0);
      CharSequenceUtils.toCharArray(".0.0");
      CharSequenceUtils.subSequence(stringBuilder3, 0);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder1, 2053);
      CharSequenceUtils.regionMatches(stringBuilder0, false, 0, stringBuilder1, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharSequenceUtils.indexOf(stringBuilder1, stringBuffer0, 160);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append(101.76501F);
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      StringBuilder stringBuilder3 = stringBuilder0.replace(0, 0, "");
      StringBuilder stringBuilder4 = stringBuilder2.append((Object) stringBuilder3);
      StringBuilder stringBuilder5 = stringBuilder4.insert(0, (float) 0);
      CharSequenceUtils.lastIndexOf(stringBuilder5, stringBuilder2, 0);
      CharSequenceUtils.regionMatches(stringBuilder0, false, 0, "", 0, 0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = CharSequenceUtils.lastIndexOf((CharSequence) null, stringBuilder0, 322);
      assertEquals((-1), int0);
      assertEquals("", stringBuilder0.toString());
      
      int int1 = CharSequenceUtils.lastIndexOf((CharSequence) null, stringBuilder0, 2916);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf((CharSequence) null, 2916, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      CharSequenceUtils.lastIndexOf("{\"{_Ue{b", 1088, (-148));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharSequenceUtils.lastIndexOf("0oa`>96J?B%+<_N\":", "0oa`>96J?B%+<_N\":", 2993);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '\"';
      charArray0[2] = '>';
      charArray0[3] = '0';
      charArray0[4] = '%';
      charArray0[5] = 'r';
      charArray0[6] = 'z';
      charArray0[7] = 'J';
      charArray0[8] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 1035);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-48), 0);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-4645), Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, (-1));
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceUtils.toCharArray(charBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.toCharArray(stringBuffer0);
      CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      stringBuilder0.insert(0, 0);
      CharSequenceUtils.indexOf(stringBuilder0, 1951, 0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.append((CharSequence) null, 0, 0);
      CharSequenceUtils.indexOf(stringBuffer0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      stringBuilder0.insert(0, 0.0F);
      int int1 = 1114111;
      CharSequenceUtils.indexOf(stringBuilder0, 1114111, 1114111);
      CharSequenceUtils.indexOf(stringBuilder0, 1114111, (-2296));
      int int2 = 0;
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2296), 'z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      stringBuilder1.insert(0, (Object) charSequenceUtils0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder0, 0, 0);
      StringBuilder stringBuilder4 = stringBuilder3.replace(0, 0, "");
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      stringBuilder0.chars();
      StringBuilder stringBuilder5 = stringBuilder4.insert(0, charArray0, 1, 0);
      CharSequenceUtils.indexOf(stringBuilder4, 0, (-514));
      CharSequenceUtils.regionMatches(stringBuilder5, true, 0, stringBuilder5, 0, 0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder4, (-514));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -514
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = (-376);
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, (-376), (-376));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      int int0 = Integer.MAX_VALUE;
      CharSequenceUtils.indexOf(charBuffer0, charBuffer0, Integer.MAX_VALUE);
      boolean boolean0 = false;
      int int1 = (-1169);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.put(charBuffer1);
      int int2 = (-1118);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      CharSequenceUtils.lastIndexOf(stringBuffer0, stringBuffer0, 2600);
      stringBuffer0.append((CharSequence) null);
      CharSequenceUtils.subSequence(stringBuffer0, 0);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      CharSequenceUtils.subSequence(stringBuffer0, 0);
      CharSequenceUtils.toCharArray("null");
      CharSequenceUtils.toCharArray(stringBuffer0);
      stringBuffer0.append((float) 2600);
      CharSequenceUtils.indexOf(stringBuffer0, "null", 16);
      int int0 = (-1458);
      CharSequenceUtils.lastIndexOf("null", (-1458), 16);
      CharSequenceUtils.toCharArray((CharSequence) null);
      stringBuffer1.ensureCapacity((-1298));
      int int1 = 0;
      CharSequenceUtils.indexOf("null", 0, (-1458));
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuffer0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1187);
      CharSequenceUtils.toCharArray(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      stringBuilder0.append((double) 0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder3.append((-1L));
      CharSequenceUtils.lastIndexOf(stringBuilder4, 3011, (-1794));
      stringBuilder4.insert(0, 1114111);
      CharSequenceUtils.regionMatches(stringBuilder3, false, 0, stringBuilder4, 1114111, 0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.commons.lang3.CharSequenceUtils");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) "org.apache.commons.lang3.CharSequenceUtils");
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      CharSequenceUtils.lastIndexOf(stringBuilder3, stringBuilder3, 0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      CharSequenceUtils.regionMatches(stringBuilder0, true, 0, "", 64, 0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      CharSequenceUtils.indexOf(stringBuilder0, 0, 1);
      CharSequenceUtils.lastIndexOf(stringBuilder0, (-783), (-1407));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, false);
      CharSequenceUtils.lastIndexOf(stringBuilder1, stringBuilder0, 0);
      stringBuilder1.insert(0, (CharSequence) stringBuilder0, 0, 0);
      int int1 = (-1562);
      CharSequenceUtils.regionMatches(stringBuilder0, false, 2167, stringBuilder1, Integer.MAX_VALUE, (-1562));
      int int2 = 0;
      stringBuilder1.append('f');
      // Undeclared exception!
      try { 
        stringBuilder1.insert(Integer.MAX_VALUE, "Array and element cannot both be null");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2147483647
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharSequenceUtils.regionMatches((CharSequence) null, true, 0, (CharSequence) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharSequenceUtils.toCharArray((CharSequence) null);
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, (CharSequence) null, 2716);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'D';
      charArray0[2] = '/';
      charArray0[3] = '&';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      CharSequenceUtils.indexOf(stringBuilder1, stringBuilder0, 0);
      CharSequenceUtils.regionMatches(stringBuilder0, false, (-674), stringBuilder0, 199, 0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      StringBuilder stringBuilder3 = stringBuilder1.append((Object) stringBuilder0);
      stringBuilder1.codePoints();
      CharSequenceUtils.subSequence(stringBuilder2, 0);
      CharSequenceUtils.toCharArray(".0.0");
      CharSequenceUtils.subSequence(stringBuilder3, 0);
      CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder1, 2053);
      CharSequenceUtils.regionMatches(stringBuilder0, false, 0, stringBuilder1, 0, 0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder3, (-1727));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1727
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) "+ThT9ZC2dpbhvs");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2);
      CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequenceUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1114111);
      CharSequenceUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-1));
      int int0 = 2178;
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf((CharSequence) null, (-1), 2178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 1114111;
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf((CharSequence) null, 1114111, 1114111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(charBuffer1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("vb._KXO\"#/");
      StringBuilder stringBuilder1 = stringBuilder0.delete(1, 1);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(1);
      StringBuilder stringBuilder3 = stringBuilder2.append('l');
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, false);
      CharSequenceUtils.lastIndexOf(stringBuilder4, 1, 1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      StringBuilder stringBuilder0 = new StringBuilder("");
      CharSequenceUtils.lastIndexOf(stringBuilder0, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharSequenceUtils.subSequence((CharSequence) null, 0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      assertNotNull(charSequenceUtils0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(')');
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(")", stringBuilder0.toString());
      assertEquals(")", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.replace(0, 0, "org.apache.commons.lang3.CharSequenceUtils");
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils)", stringBuilder0.toString());
      assertEquals("org.apache.commons.lang3.CharSequenceUtils)", stringBuilder1.toString());
      assertEquals("org.apache.commons.lang3.CharSequenceUtils)", stringBuilder2.toString());
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(stringBuilder3);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils))", stringBuilder0.toString());
      assertEquals("org.apache.commons.lang3.CharSequenceUtils))", stringBuilder1.toString());
      assertEquals("org.apache.commons.lang3.CharSequenceUtils))", stringBuilder2.toString());
      assertEquals("org.apache.commons.lang3.CharSequenceUtils))", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(stringBuilder4);
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder0.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder1.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder2.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder3.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder4.toString());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder4, true, 2, "org.apache.commons.lang3.CharSequenceUtils", 5544, 5544);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder0.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder1.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder2.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder3.toString());
      assertEquals("or)g.apache.commons.lang3.CharSequenceUtils))", stringBuilder4.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 5519);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("5519", stringBuilder0.toString());
      assertEquals("5519", stringBuilder1.toString());
      
      int int0 = CharSequenceUtils.indexOf(stringBuilder1, stringBuilder1, (-556));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, int0);
      assertEquals("5519", stringBuilder0.toString());
      assertEquals("5519", stringBuilder1.toString());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder1, true, 16, stringBuilder0, 16, 0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(boolean0);
      assertEquals("5519", stringBuilder0.toString());
      assertEquals("5519", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequenceUtils.regionMatches((CharSequence) null, true, 544, (CharSequence) null, 544, 544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      assertNotNull(charSequenceUtils0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 19);
      assertEquals(0, int0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, stringBuffer0, (-3001));
      assertEquals((-1), int0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharSequence charSequence0 = null;
      char[] charArray0 = CharSequenceUtils.toCharArray((CharSequence) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int int0 = CharSequenceUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 108);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, 108, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("h5+;3M6D O`|qo>ng.");
      assertNotNull(stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("h5+;3M6D O`|qo>ng.", stringBuffer0.toString());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, (-484), (-484));
      assertEquals((-1), int0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("h5+;3M6D O`|qo>ng.", stringBuffer0.toString());
      
      int int1 = CharSequenceUtils.lastIndexOf(stringBuffer0, "h5+;3M6D O`|qo>ng.", 2217);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(18, stringBuffer0.length());
      assertEquals("h5+;3M6D O`|qo>ng.", stringBuffer0.toString());
      
      boolean boolean0 = CharSequenceUtils.regionMatches("h5+;3M6D O`|qo>ng.", true, 0, stringBuffer0, 642, 108);
      assertFalse(boolean0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("h5+;3M6D O`|qo>ng.", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      assertNotNull(stringBuilder0);
      assertEquals("+ThT9ZC2dpbhvs", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(115);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("+ThT9ZC2dpbhvss", stringBuilder0.toString());
      assertEquals("+ThT9ZC2dpbhvss", stringBuilder1.toString());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(115);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(115, charBuffer0.length());
      assertEquals(115, charBuffer0.remaining());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(115, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 115);
      assertEquals((-1), int0);
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(115, charBuffer0.length());
      assertEquals(115, charBuffer0.remaining());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(115, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      int int1 = CharSequenceUtils.indexOf(charBuffer0, stringBuilder1, 11);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("+ThT9ZC2dpbhvss", stringBuilder0.toString());
      assertEquals("+ThT9ZC2dpbhvss", stringBuilder1.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(115, charBuffer0.length());
      assertEquals(115, charBuffer0.remaining());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(115, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(101.76501F);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("101.76501", stringBuilder0.toString());
      assertEquals("101.76501", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("101.765010", stringBuilder0.toString());
      assertEquals("101.765010", stringBuilder1.toString());
      assertEquals("101.765010", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder0.replace(0, 0, "");
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      assertEquals("101.765010", stringBuilder0.toString());
      assertEquals("101.765010", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder2.append((Object) stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertNotNull(stringBuilder4);
      assertEquals("101.765010101.765010", stringBuilder0.toString());
      assertEquals("101.765010101.765010", stringBuilder1.toString());
      assertEquals("101.765010101.765010", stringBuilder2.toString());
      assertEquals("101.765010101.765010", stringBuilder3.toString());
      assertEquals("101.765010101.765010", stringBuilder4.toString());
      
      StringBuilder stringBuilder5 = stringBuilder4.appendCodePoint(0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder2);
      assertNotNull(stringBuilder5);
      assertEquals("101.765010101.765010\u0000", stringBuilder0.toString());
      assertEquals("101.765010101.765010\u0000", stringBuilder1.toString());
      assertEquals("101.765010101.765010\u0000", stringBuilder2.toString());
      assertEquals("101.765010101.765010\u0000", stringBuilder3.toString());
      assertEquals("101.765010101.765010\u0000", stringBuilder4.toString());
      assertEquals("101.765010101.765010\u0000", stringBuilder5.toString());
      
      StringBuilder stringBuilder6 = stringBuilder4.insert(0, (float) 0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder6);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder6);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder1);
      assertSame(stringBuilder6, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder0);
      assertSame(stringBuilder6, stringBuilder5);
      assertSame(stringBuilder6, stringBuilder2);
      assertSame(stringBuilder6, stringBuilder4);
      assertNotNull(stringBuilder6);
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder0.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder1.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder2.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder3.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder4.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder6.toString());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder6, stringBuilder2, 0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder6);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder6);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder1);
      assertSame(stringBuilder6, stringBuilder3);
      assertSame(stringBuilder6, stringBuilder0);
      assertSame(stringBuilder6, stringBuilder5);
      assertSame(stringBuilder6, stringBuilder2);
      assertSame(stringBuilder6, stringBuilder4);
      assertEquals(0, int0);
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder0.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder1.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder2.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder3.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder4.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder6.toString());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, false, 0, "", 0, 0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder6);
      assertTrue(boolean0);
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder0.toString());
      
      int int1 = CharSequenceUtils.indexOf(stringBuilder5, 0, 0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder6);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder6);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      assertSame(stringBuilder5, stringBuilder6);
      assertSame(stringBuilder5, stringBuilder2);
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder0.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder1.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder2.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder3.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder4.toString());
      assertEquals("0.0101.765010101.765010\u0000", stringBuilder5.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      assertNotNull(stringBuffer0);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder2.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(37, stringBuffer1.length());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuffer1, false, 3, stringBuffer0, 3, 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(boolean0);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(37, stringBuffer1.length());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals((-1), int0);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder2.toString());
      
      int int1 = CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(37, stringBuffer1.length());
      
      int int2 = CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals("Argfalseuments cannot both be null3.0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Argfmens 6annot both be null");
      assertNotNull(stringBuffer0);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      assertEquals("Argfmens 6annot both be null", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, false);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      assertEquals("Argfalsefmens 6annot both be null", stringBuilder0.toString());
      assertEquals("Argfalsefmens 6annot both be null", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder2.toString());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuffer0, false, 3, stringBuffer0, 3, 3);
      assertTrue(boolean0);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder2, "Argfmens 6annot both be null", 1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals((-1), int0);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder0.toString());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder1.toString());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder2.toString());
      
      int int1 = CharSequenceUtils.indexOf(stringBuffer0, (-1), 2091);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      
      int int2 = CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuffer0, 3718);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals("Argfmens 6annot both be null", stringBuffer0.toString());
      assertEquals(28, stringBuffer0.length());
      assertEquals("Argfalsefmens 6annot both be null3.0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Arguments cannot both be null");
      assertNotNull(stringBuffer0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Arguments cannot both be null", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(3, true);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer(stringBuilder2);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuffer1, true, 3, stringBuffer0, 3, 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(boolean0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder2, "Arguments cannot both be null", 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals((-1), int0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      
      int int1 = CharSequenceUtils.indexOf(stringBuffer1, (-1), 2091);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder2.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuffer1.toString());
      assertEquals(36, stringBuffer1.length());
      
      CharSequence charSequence0 = CharSequenceUtils.subSequence((CharSequence) null, 2091);
      assertNull(charSequence0);
      
      int int2 = CharSequenceUtils.indexOf(stringBuilder1, 65536, 2091);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
      
      int int3 = CharSequenceUtils.indexOf(stringBuilder1, 1, 3);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(29, stringBuffer0.length());
      assertEquals("Arguments cannot both be null", stringBuffer0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder0.toString());
      assertEquals("Argtrueuments cannot both be null3.0", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("+ThT9ZC2dpbhvs");
      assertNotNull(stringBuilder0);
      assertEquals("+ThT9ZC2dpbhvs", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder0.toString());
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder1.toString());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotNull(charBuffer0);
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder0.toString());
      assertEquals(15, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(15, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("+ThT9ZC2dpbhvs\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.capacity());
      
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, "+ThT9ZC2dpbhvs", 0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(0, int0);
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder0.toString());
      assertEquals(15, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(15, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("+ThT9ZC2dpbhvs\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.capacity());
      
      char[] charArray0 = new char[0];
      int int1 = CharSequenceUtils.indexOf(charBuffer0, stringBuilder1, 4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder0.toString());
      assertEquals("+ThT9ZC2dpbhvs\u0000", stringBuilder1.toString());
      assertEquals(15, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(15, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("+ThT9ZC2dpbhvs\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[1];
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      assertNotNull(charSequenceUtils0);
      
      StringBuffer stringBuffer0 = new StringBuffer("I7@.~");
      assertNotNull(stringBuffer0);
      assertEquals("I7@.~", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      char[] charArray0 = CharSequenceUtils.toCharArray(stringBuffer0);
      assertArrayEquals(new char[] {'I', '7', '@', '.', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertEquals("I7@.~", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder("ylb_h-<owi");
      assertNotNull(stringBuilder0);
      assertEquals("ylb_h-<owi", stringBuilder0.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer1);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuilder1);
      assertEquals("ylb_h-<owi", stringBuilder0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("ylb_h-<owi", stringBuilder1.toString());
      
      StringBuffer stringBuffer2 = new StringBuffer("Array and element cannot both be null");
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertNotNull(stringBuffer2);
      assertEquals("Array and element cannot both be null", stringBuffer2.toString());
      assertEquals(37, stringBuffer2.length());
      
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer2, (-835), (-375));
      assertNotSame(stringBuffer2, stringBuffer0);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertEquals((-1), int0);
      assertEquals("Array and element cannot both be null", stringBuffer2.toString());
      assertEquals(37, stringBuffer2.length());
      
      int int1 = CharSequenceUtils.lastIndexOf("I7@.~", stringBuffer1, 1944);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotSame(stringBuffer1, stringBuffer2);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer1.equals((Object)stringBuffer2));
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      boolean boolean0 = CharSequenceUtils.regionMatches("ylb_h-<owi", false, (-835), stringBuffer1, (-852), (-1));
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotSame(stringBuffer1, stringBuffer2);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer1.equals((Object)stringBuffer2));
      assertFalse(boolean0);
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-2788), 1114111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2788
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = CharSequenceUtils.lastIndexOf("", (-2), 108);
      assertEquals((-1), int0);
      
      int int1 = CharSequenceUtils.indexOf("", "", (-340));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = CharSequenceUtils.toCharArray("");
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = CharSequenceUtils.regionMatches("", true, 9, "", 1645, 1645);
      assertFalse(boolean0);
      
      int int2 = CharSequenceUtils.lastIndexOf("", 0, (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = CharSequenceUtils.lastIndexOf("", "", 528);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = CharSequenceUtils.indexOf("", (-2812), (-1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      stringBuffer0.setLength(3753);
      assertEquals(3753, stringBuffer0.length());
      
      int int0 = CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, (-4645));
      assertEquals(0, int0);
      assertEquals(3753, stringBuffer0.length());
      
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuffer0, true, (-4645), stringBuffer0, 0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(3753, stringBuffer0.length());
      
      int int1 = CharSequenceUtils.lastIndexOf(stringBuffer0, Integer.MAX_VALUE, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3753, stringBuffer0.length());
      
      int int2 = CharSequenceUtils.TO_STRING_LIMIT;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(16, int2);
      
      int int3 = CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, 16);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(3753, stringBuffer0.length());
      
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      assertNotNull(charSequenceUtils0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      char[] charArray1 = CharSequenceUtils.toCharArray(charBuffer0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      int int4 = CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      assertEquals(3753, stringBuffer0.length());
      
      char[] charArray2 = CharSequenceUtils.toCharArray(stringBuffer0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3753, charArray2.length);
      assertNotNull(charArray2);
      assertEquals(3753, stringBuffer0.length());
      
      char[] charArray3 = CharSequenceUtils.toCharArray(stringBuffer0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(3753, charArray3.length);
      assertNotNull(charArray3);
      assertEquals(3753, stringBuffer0.length());
      
      int int5 = CharSequenceUtils.indexOf(stringBuffer0, (-1445), 0);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals((-1), int5);
      assertEquals(3753, stringBuffer0.length());
      
      int int6 = CharSequenceUtils.indexOf(stringBuffer0, (-605), 11);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int5);
      assertEquals((-1), int6);
      assertEquals(3753, stringBuffer0.length());
      
      int int7 = CharSequenceUtils.lastIndexOf(stringBuffer0, charBuffer0, (-1));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int7);
      assertEquals(2, charArray0.length);
      assertEquals(3753, stringBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      int int8 = CharSequenceUtils.indexOf(charBuffer0, (-1), 13);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int8);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      int int9 = CharSequenceUtils.lastIndexOf(stringBuffer0, 0, 819);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertEquals(819, int9);
      assertEquals(3753, stringBuffer0.length());
      
      int int10 = CharSequenceUtils.indexOf(charBuffer0, 0, 16);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertTrue(int10 == int6);
      assertFalse(int10 == int0);
      assertTrue(int10 == int5);
      assertTrue(int10 == int4);
      assertTrue(int10 == int1);
      assertFalse(int10 == int9);
      assertTrue(int10 == int3);
      assertFalse(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int7);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int10);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      int int11 = CharSequenceUtils.lastIndexOf(charBuffer0, stringBuffer0, 6);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertTrue(int11 == int10);
      assertTrue(int11 == int6);
      assertFalse(int11 == int0);
      assertTrue(int11 == int8);
      assertFalse(int11 == int9);
      assertTrue(int11 == int3);
      assertTrue(int11 == int1);
      assertTrue(int11 == int5);
      assertTrue(int11 == int4);
      assertFalse(int11 == int2);
      assertTrue(int11 == int7);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int11);
      assertEquals(2, charArray0.length);
      assertEquals(3753, stringBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      int int12 = CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 380);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(int12 == int4);
      assertFalse(int12 == int5);
      assertFalse(int12 == int3);
      assertFalse(int12 == int6);
      assertTrue(int12 == int0);
      assertFalse(int12 == int1);
      assertFalse(int12 == int2);
      assertFalse(int12 == int8);
      assertFalse(int12 == int10);
      assertFalse(int12 == int7);
      assertFalse(int12 == int11);
      assertFalse(int12 == int9);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, int12);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean1 = CharSequenceUtils.regionMatches(stringBuffer0, true, 0, charBuffer0, 1114111, (-1));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertEquals(3753, stringBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3753);
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.regionMatches(stringBuffer0, true, 3753, stringBuffer0, (-1), Integer.MAX_VALUE);
      CharSequenceUtils.lastIndexOf(stringBuffer0, (-1), (-1));
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, 3753, Integer.MAX_VALUE);
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
      char[] charArray0 = new char[2];
      charArray0[1] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      char[] charArray1 = CharSequenceUtils.toCharArray(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '2'}, charArray1);
      
      CharSequenceUtils.indexOf(stringBuffer0, stringBuffer0, 3753);
      CharSequenceUtils.toCharArray(stringBuffer0);
      int int1 = CharSequenceUtils.indexOf(stringBuffer0, (-1445), (-1));
      assertTrue(int1 == int0);
      
      int int2 = CharSequenceUtils.indexOf(stringBuffer0, Integer.MAX_VALUE, (-1));
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) stringBuilder0);
      char[] charArray0 = new char[18];
      charArray0[0] = ')';
      stringBuilder0.append(charArray0);
      stringBuilder1.append((-3155.100355910177));
      int int0 = CharSequenceUtils.indexOf(stringBuilder1, stringBuilder0, 1234);
      assertEquals((-1), int0);
      
      int int1 = CharSequenceUtils.lastIndexOf(stringBuilder0, 65536, 0);
      assertTrue(int1 == int0);
  }
}
