/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:22:36 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImmutablePair_ESTest extends ImmutablePair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<Integer, Integer>) mutablePair0);
      Object object0 = immutablePair0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = MutablePair.of((String) null, (String) null);
      ImmutablePair<String, String> immutablePair0 = ImmutablePair.of((Map.Entry<String, String>) mutablePair0);
      String string0 = immutablePair0.getLeft();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutablePair<String, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<String, Integer>) null);
      assertNotNull(immutablePair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>((String) null, (Object) null);
      ImmutablePair<String, Object> immutablePair1 = ImmutablePair.of((Map.Entry<String, Object>) immutablePair0);
      assertNotSame(immutablePair1, immutablePair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutablePair<String, String> immutablePair0 = new ImmutablePair<String, String>(";:X", ";:X");
      String string0 = immutablePair0.getRight();
      assertEquals(";:X", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Object> immutablePair0 = ImmutablePair.of(integer0, (Object) "");
      Integer integer1 = immutablePair0.getLeft();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutablePair<Object, String>[] immutablePairArray0 = ImmutablePair.emptyArray();
      assertEquals(0, immutablePairArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImmutablePair<String, Object> immutablePair0 = ImmutablePair.nullPair();
      assertNotNull(immutablePair0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-571));
      Pair<Object, Comparable<Object>> pair0 = ImmutablePair.left((Object) integer0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImmutablePair<ImmutablePair<Object, String>, String> immutablePair0 = ImmutablePair.of((ImmutablePair<Object, String>) null, "");
      // Undeclared exception!
      try { 
        immutablePair0.setValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.ImmutablePair", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-44));
      Pair<Object, Integer> pair0 = ImmutablePair.right(integer0);
      Pair<Object, Integer> pair1 = Pair.of((Map.Entry<Object, Integer>) pair0);
      assertTrue(pair1.equals((Object)pair0));
  }
}
