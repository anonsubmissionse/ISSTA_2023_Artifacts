/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:21:30 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableShort_ESTest extends MutableShort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.getAndIncrement();
      MutableShort mutableShort1 = new MutableShort(mutableShort0);
      mutableShort1.subtract((Number) mutableShort0);
      boolean boolean0 = mutableShort1.equals(mutableShort0);
      assertEquals(1.0, mutableShort0.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float((-2911.391F));
      MutableShort mutableShort0 = new MutableShort(float0);
      Short short0 = mutableShort0.toShort();
      assertEquals((short) (-2911), (short)short0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.increment();
      mutableShort0.toShort();
      assertEquals((byte)1, mutableShort0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.add((short)659);
      short short0 = mutableShort0.shortValue();
      assertEquals((short)659, short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)1);
      mutableShort0.subtract((short)2);
      short short0 = mutableShort0.shortValue();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.increment();
      long long0 = mutableShort0.longValue();
      assertEquals((byte)1, mutableShort0.byteValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableShort mutableShort0 = new MutableShort((Number) byte0);
      mutableShort0.getAndDecrement();
      long long0 = mutableShort0.longValue();
      assertEquals((-1.0), mutableShort0.doubleValue(), 0.01);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)83);
      MutableShort mutableShort0 = new MutableShort((Number) byte0);
      int int0 = mutableShort0.intValue();
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-2347));
      int int0 = mutableShort0.intValue();
      assertEquals((-2347), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableShort mutableShort0 = new MutableShort((Number) byte0);
      mutableShort0.getAndDecrement();
      short short0 = mutableShort0.incrementAndGet();
      assertEquals((short)0, mutableShort0.shortValue());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float((-2911.391F));
      MutableShort mutableShort0 = new MutableShort(float0);
      short short0 = mutableShort0.incrementAndGet();
      assertEquals((short) (-2910), short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)1);
      mutableShort0.subtract((short)2);
      Short short0 = mutableShort0.getValue();
      assertEquals((short) (-1), (short)short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)1);
      mutableShort0.decrement();
      mutableShort0.getValue();
      assertEquals((byte)0, mutableShort0.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.setValue((short)1);
      short short0 = mutableShort0.getAndDecrement();
      assertEquals((short)0, (short)mutableShort0.getValue());
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableShort mutableShort0 = new MutableShort(float0);
      mutableShort0.getAndDecrement();
      short short0 = mutableShort0.getAndDecrement();
      assertEquals((-2.0), mutableShort0.doubleValue(), 0.01);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      short short0 = mutableShort0.getAndAdd((short)1);
      assertEquals((byte)1, mutableShort0.byteValue());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-1));
      short short0 = mutableShort0.getAndAdd((short) (-1));
      assertEquals((byte) (-2), mutableShort0.byteValue());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      Double double0 = new Double((short)1);
      short short0 = mutableShort0.getAndAdd((Number) double0);
      assertEquals((short)1, (short)mutableShort0.toShort());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.increment();
      float float0 = mutableShort0.floatValue();
      assertEquals((short)1, mutableShort0.shortValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.setValue((short) (-218));
      float float0 = mutableShort0.floatValue();
      assertEquals((-218.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableShort mutableShort0 = new MutableShort(integer0);
      double double0 = mutableShort0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)1107);
      double double0 = mutableShort0.doubleValue();
      assertEquals(1107.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.getAndIncrement();
      mutableShort0.decrementAndGet();
      mutableShort0.toShort();
      assertEquals(0.0, mutableShort0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.add((short)254);
      short short0 = mutableShort0.decrementAndGet();
      assertEquals("253", mutableShort0.toString());
      assertEquals((short)253, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.increment();
      MutableShort mutableShort1 = new MutableShort((short)1);
      mutableShort1.setValue((short)0);
      int int0 = mutableShort0.compareTo(mutableShort1);
      assertEquals(1, mutableShort0.intValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)2566);
      Double double0 = Double.valueOf((double) (short)2566);
      mutableShort0.subtract((Number) double0);
      MutableShort mutableShort1 = new MutableShort();
      mutableShort1.add((short)2566);
      int int0 = mutableShort0.compareTo(mutableShort1);
      assertEquals(0.0, mutableShort0.doubleValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.getAndDecrement();
      short short0 = mutableShort0.addAndGet((short)1);
      assertEquals(0L, mutableShort0.longValue());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      short short0 = mutableShort0.addAndGet((short)1);
      assertEquals((short)1, (short)mutableShort0.getValue());
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableShort mutableShort0 = new MutableShort((Number) byte0);
      short short0 = mutableShort0.addAndGet((Number) byte0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.increment();
      short short0 = mutableShort0.addAndGet((Number) mutableShort0);
      assertEquals((short)2, (short)mutableShort0.toShort());
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Float float0 = new Float((-2911.391F));
      MutableShort mutableShort0 = new MutableShort(float0);
      short short0 = mutableShort0.addAndGet((Number) float0);
      assertEquals((short) (-5822), short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short)433);
      MutableShort mutableShort0 = new MutableShort((Number) short0);
      // Undeclared exception!
      try { 
        mutableShort0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      // Undeclared exception!
      try { 
        mutableShort0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      // Undeclared exception!
      try { 
        mutableShort0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      // Undeclared exception!
      try { 
        mutableShort0.compareTo((MutableShort) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableShort mutableShort0 = new MutableShort(float0);
      // Undeclared exception!
      try { 
        mutableShort0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableShort mutableShort0 = null;
      try {
        mutableShort0 = new MutableShort("->fvDuGVED&:Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"->fvDuGVED&:Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableShort mutableShort0 = null;
      try {
        mutableShort0 = new MutableShort((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      short short0 = mutableShort0.shortValue();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      MutableShort mutableShort1 = new MutableShort(mutableShort0);
      mutableShort1.getAndDecrement();
      boolean boolean0 = mutableShort0.equals(mutableShort1);
      assertEquals((short) (-1), (short)mutableShort1.toShort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      boolean boolean0 = mutableShort0.equals(mutableShort0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      Long long0 = new Long(0);
      boolean boolean0 = mutableShort0.equals(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      // Undeclared exception!
      try { 
        mutableShort0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      float float0 = mutableShort0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.subtract((Number) mutableShort0);
      assertEquals((short)0, (short)mutableShort0.toShort());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-134));
      short short0 = mutableShort0.addAndGet((short) (-134));
      assertEquals((short) (-268), short0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      short short0 = mutableShort0.incrementAndGet();
      assertEquals((short)2271, short0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-134));
      double double0 = mutableShort0.doubleValue();
      assertEquals((-134.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.decrement();
      short short0 = mutableShort0.getAndIncrement();
      assertEquals(0, mutableShort0.intValue());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      short short0 = mutableShort0.decrementAndGet();
      assertEquals((-1), mutableShort0.intValue());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      int int0 = mutableShort0.compareTo(mutableShort0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short)0);
      mutableShort0.getAndDecrement();
      Byte byte0 = new Byte((byte)0);
      short short0 = mutableShort0.getAndAdd((Number) byte0);
      assertEquals((-1.0), mutableShort0.doubleValue(), 0.01);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort((short) (-134));
      Short short0 = new Short((short) (-134));
      mutableShort0.add((Number) short0);
      assertEquals((short) (-268), (short)mutableShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      int int0 = mutableShort0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      mutableShort0.setValue((Number) integer0);
      assertEquals(2270.0F, mutableShort0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      Short short0 = mutableShort0.getValue();
      assertEquals((short)2270, (short)short0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      long long0 = mutableShort0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      String string0 = mutableShort0.toString();
      assertEquals("2270", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort();
      mutableShort0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableShort mutableShort0 = new MutableShort("2270");
      assertEquals("2270", mutableShort0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      mutableShort0.setValue((short)76);
      Short short0 = mutableShort0.getValue();
      assertEquals((short)76, (short)short0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      short short0 = mutableShort0.getAndAdd((Number) integer0);
      assertEquals((byte) (-68), mutableShort0.byteValue());
      assertEquals((short)2270, short0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      short short0 = mutableShort0.getAndAdd((short)2785);
      assertEquals(5055.0, mutableShort0.doubleValue(), 0.01);
      assertEquals((short)2270, short0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(2270);
      MutableShort mutableShort0 = new MutableShort(integer0);
      short short0 = mutableShort0.getAndIncrement();
      assertEquals(2271, mutableShort0.intValue());
      assertEquals((short)2270, short0);
  }
}
