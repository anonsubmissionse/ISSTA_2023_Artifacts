/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:03:17 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('J');
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'J', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      
      String string0 = strTokenizer2.nextToken();
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer2.nextIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.previousIndex());
      assertEquals("b\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'J', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("p@%~b8^}/_8v'$");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('Q');
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      char[] charArray0 = new char[8];
      charArray0[2] = ' ';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', ' ', 'Q', 'Q', 'Q', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(boolean0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("p@%~b8^}/_8v'$");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('Q');
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer2);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', 'Q', 'Q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(boolean0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('J');
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 1, 209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("StrTokenizer", "StrTokenizer", (String) null, "StrTokenizer").when(strMatcher0).toString();
      doReturn(1, 1, (-195), 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("S_|lGdINd?N", strMatcher0, strMatcher0);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("xHrQ\":Tf7hp{ft", "pc&! %N").when(strMatcher0).toString();
      doReturn((-919), 27).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("xHrQ\":Tf7hp{ft", strMatcher0);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[1];
      List<String> list0 = strTokenizer0.tokenize(charArray0, (-1), (-1));
      assertEquals(1, charArray0.length);
      assertNotNull(list0);
      assertFalse(list0.contains("StrTokenizer"));
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '@', '#');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      String string0 = strTokenizer0.previousToken();
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("end < start", strMatcher0, strMatcher1);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, (String) null);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[8];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 1);
      assertEquals(8, charArray0.length);
      assertNotNull(list0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '@', '#');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      String string0 = strTokenizer0.previous();
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      String string1 = strTokenizer0.next();
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals("\u0000", string1);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('Y');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("remove() is unsupported");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals("remove() is unsupported", string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('o');
      assertNotNull(strTokenizer1);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setQuoteChar('e');
      assertNotNull(strTokenizer2);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("BL t");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("BL t");
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertEquals(2, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('?');
      assertNotNull(strTokenizer2);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertEquals(2, strTokenizer1.nextIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer2.nextIndex());
      assertEquals(1, strTokenizer2.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar(',');
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<sB:");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('=');
      assertNotNull(strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      assertEquals(4, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(2, strTokenizer1.nextIndex());
      assertEquals(1, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertNotNull(strTokenizer2);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer2.previousIndex());
      assertEquals(2, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<sB:");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertNotNull(strTokenizer2);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("X3?{V", '8', '\'');
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals("X3?{V", string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      
      String string0 = strTokenizer0.previous();
      assertNotNull(string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals("", string0);
      assertSame(strTokenizer0, strTokenizer1);
      
      String string1 = strTokenizer1.next();
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertEquals(2, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals("", string1);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterString("G+");
      assertNotNull(strTokenizer2);
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer2.previousIndex());
      assertEquals(2, strTokenizer2.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("G+");
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<sB:");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("startIndex must be valid");
      assertNotNull(strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '@', '@');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertEquals(2, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('`');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals(2, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer1.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '@', '@');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('`');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterChar('<');
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer2);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("p@%~b8^}/_8v'$");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("p@%~b8^}/_8v'$");
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.reset("StrTokenizer");
      assertNotNull(strTokenizer2);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\r");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      assertEquals(8, charArray0.length);
      assertNotNull(strTokenizer2);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      String string0 = strTokenizer1.next();
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      String string1 = strTokenizer1.previousToken();
      assertEquals(1, charArray0.length);
      assertNotNull(string1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(">Y1icGWsV',+*1or");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(">Y1icGWsV'", string0);
      
      int int0 = strTokenizer0.previousIndex();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '@', '#');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      String string0 = strTokenizer0.previous();
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      String string1 = strTokenizer0.next();
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals("\u0000", string1);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      
      int int0 = strTokenizer0.previousIndex();
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      String string0 = strTokenizer1.nextToken();
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      String string1 = strTokenizer0.previous();
      assertNotNull(string1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals("", string1);
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<sB:");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals("<sB:", string0);
      
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      boolean boolean0 = strTokenizer1.isEmptyTokenAsNull();
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(boolean0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("remove() is unsupported");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      List<String> list0 = strTokenizer0.getTokenList();
      assertNotNull(list0);
      assertTrue(list0.contains("remove() is unsupported"));
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'k');
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 0, 1147);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8Q");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'e');
      assertEquals(1, charArray0.length);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("'SDi^50]m#|_X`5t2");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('C');
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.toString();
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals("StrTokenizer[not tokenized yet]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "d0");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals("StrTokenizer", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('J');
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[8] = 'J';
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'J', 'J', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      String string0 = strTokenizer2.nextToken();
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer2.nextIndex());
      assertEquals(0, strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals("J\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'J', 'J', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("remove() is unsupported");
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      String string0 = strTokenizer0.previousToken();
      assertNull(string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '%';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (String) null);
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '%', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('%');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '%', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      boolean boolean0 = strTokenizer1.hasNext();
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '%', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "d0");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('J');
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      charArray0[0] = 'J';
      charArray0[2] = 'J';
      charArray0[8] = 'J';
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'J', '\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      String string0 = strTokenizer2.nextToken();
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer2.nextIndex());
      assertEquals(0, strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'J', '\u0000', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '?';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '?', '#');
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '?', '\u0000'}, charArray0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      assertEquals(3, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '?', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(2, strTokenizer1.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '?', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('J');
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setQuoteChar('J');
      assertNotNull(strTokenizer2);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      
      charArray0[0] = 'J';
      StrTokenizer strTokenizer3 = strTokenizer0.reset(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(strTokenizer3);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer3.isIgnoreEmptyTokens());
      assertFalse(strTokenizer3.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer3.nextIndex());
      assertEquals((-1), strTokenizer3.previousIndex());
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer3);
      assertSame(strTokenizer3, strTokenizer0);
      assertSame(strTokenizer3, strTokenizer1);
      assertSame(strTokenizer3, strTokenizer2);
      
      String string0 = strTokenizer3.nextToken();
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer3.isIgnoreEmptyTokens());
      assertFalse(strTokenizer3.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer3.nextIndex());
      assertEquals(0, strTokenizer3.previousIndex());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer3);
      assertSame(strTokenizer3, strTokenizer0);
      assertSame(strTokenizer3, strTokenizer1);
      assertSame(strTokenizer3, strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar(',');
      assertEquals(4, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(boolean0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("StrTokenizer");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.reset(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertNull(string0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance((String) null);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "add() is unsupported");
      assertEquals(3, charArray0.length);
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(3, charArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      int int0 = strTokenizer0.size();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String string0 = strTokenizer0.nextToken();
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[9];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("remove() is unsupported").when(strMatcher0).toString();
      doReturn((-1639)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("remove() is unsupported").when(strMatcher1).toString();
      doReturn((int)'%').when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher1);
      List<String> list0 = strTokenizer0.getTokenList();
      assertEquals(0, list0.size());
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[]", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '?', '#');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[9];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      strTokenizer0.setIgnoreEmptyTokens(false);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "add() is unsupported");
      int int0 = strTokenizer0.nextIndex();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("<ZBt:");
      // Undeclared exception!
      try { 
        strTokenizer0.add("<ZBt:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, (StrMatcher) null, (StrMatcher) null);
      // Undeclared exception!
      try { 
        strTokenizer0.set("YYiMD");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer", "StrTokenizer");
      int int0 = strTokenizer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
  }
}
