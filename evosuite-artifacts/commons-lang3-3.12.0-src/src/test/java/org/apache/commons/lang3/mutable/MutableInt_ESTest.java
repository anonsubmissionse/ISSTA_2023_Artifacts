/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:20:04 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableInt_ESTest extends MutableInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt("-1784");
      assertEquals((-1784.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(11, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.decrementAndGet();
      mutableInt0.toInteger();
      assertEquals((-1), mutableInt0.intValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      long long0 = mutableInt0.longValue();
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-108));
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      long long0 = mutableInt0.longValue();
      assertEquals((-108L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract((-41));
      int int0 = mutableInt0.intValue();
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      mutableInt0.getAndDecrement();
      mutableInt0.decrement();
      int int0 = mutableInt0.intValue();
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      mutableInt0.getAndAdd((-1));
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-108));
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-107), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      Byte byte0 = new Byte((byte)81);
      mutableInt0.add((Number) byte0);
      mutableInt0.getValue();
      assertEquals(81, mutableInt0.intValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      mutableInt0.subtract((Number) 1L);
      mutableInt0.getValue();
      assertEquals((byte)0, mutableInt0.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(1L);
      MutableInt mutableInt0 = new MutableInt(long0);
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-37));
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-36), mutableInt0.intValue());
      assertEquals((-37), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      mutableInt0.getAndDecrement();
      mutableInt0.decrement();
      mutableInt0.getValue();
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Long long0 = new Long(0);
      int int0 = mutableInt0.getAndAdd((Number) long0);
      assertEquals(0, int0);
      assertEquals((short)0, mutableInt0.shortValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      mutableInt0.getAndAdd((Number) byte0);
      MutableInt mutableInt1 = new MutableInt((Number) byte0);
      boolean boolean0 = mutableInt0.equals(mutableInt1);
      assertEquals((byte)22, mutableInt0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(164);
      int int0 = mutableInt0.getAndAdd(1439);
      assertEquals(1603, (int)mutableInt0.getValue());
      assertEquals(164, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      mutableInt0.getAndAdd((-1));
      int int0 = mutableInt0.getAndAdd(780);
      assertEquals(779, mutableInt0.intValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.increment();
      mutableInt0.subtract((Number) 1L);
      float float0 = mutableInt0.floatValue();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      Float float0 = new Float((-2685.849F));
      mutableInt0.subtract((Number) float0);
      double double0 = mutableInt0.doubleValue();
      assertEquals(2685, mutableInt0.intValue());
      assertEquals(2685.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2024));
      double double0 = mutableInt0.doubleValue();
      assertEquals((-2024.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      int int0 = mutableInt0.decrementAndGet();
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(2497);
      int int0 = mutableInt0.decrementAndGet();
      assertEquals(2496, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract((-41));
      MutableInt mutableInt1 = new MutableInt(39);
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals("41", mutableInt0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt1.getAndAdd(780);
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Float float0 = new Float(0.0);
      int int0 = mutableInt0.addAndGet((Number) float0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      mutableInt0.getAndAdd(780);
      int int0 = mutableInt0.addAndGet((Number) mutableInt0);
      assertEquals(1560, (int)mutableInt0.getValue());
      assertEquals(1560, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      int int0 = mutableInt0.addAndGet(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.addAndGet(2713);
      assertEquals((short)2713, mutableInt0.shortValue());
      assertEquals(2713, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1));
      // Undeclared exception!
      try { 
        mutableInt0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      // Undeclared exception!
      try { 
        mutableInt0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      // Undeclared exception!
      try { 
        mutableInt0.compareTo((MutableInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      int int0 = mutableInt0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      boolean boolean0 = mutableInt0.equals(mutableInt0);
      assertTrue(boolean0);
      assertEquals((short) (-1434), mutableInt0.shortValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      String string0 = mutableInt0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt1.increment();
      boolean boolean0 = mutableInt0.equals(mutableInt1);
      assertEquals("-1433", mutableInt1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(1, mutableInt0.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.add((int) (byte) (-104));
      assertEquals((-104), (int)mutableInt0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      mutableInt0.hashCode();
      assertEquals((-1434.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      long long0 = mutableInt0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.incrementAndGet();
      float float0 = mutableInt0.floatValue();
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      int int0 = mutableInt0.compareTo(mutableInt0);
      assertEquals(0, int0);
      assertEquals((byte)102, mutableInt0.byteValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      int int0 = mutableInt0.getAndAdd((Number) mutableInt0);
      assertEquals((byte) (-52), mutableInt0.byteValue());
      assertEquals((-1434), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1));
      float float0 = mutableInt0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt("#C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = mutableInt0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      double double0 = mutableInt0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1));
      Long long0 = new Long((-1));
      int int0 = mutableInt0.addAndGet((Number) long0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((-1435L), mutableInt0.longValue());
      assertEquals((-1434), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      mutableInt0.setValue((Number) mutableInt0);
      assertEquals((byte)102, mutableInt0.byteValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      mutableInt0.setValue((-2));
      assertEquals("-2", mutableInt0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1434));
      int int0 = mutableInt0.addAndGet(0);
      assertEquals((-1434), int0);
  }
}
