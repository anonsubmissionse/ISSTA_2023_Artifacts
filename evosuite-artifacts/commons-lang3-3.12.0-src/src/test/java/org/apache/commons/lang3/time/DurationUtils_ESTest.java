/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:10:40 GMT 2022
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.function.FailableBiConsumer;
import org.apache.commons.lang3.time.DurationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DurationUtils_ESTest extends DurationUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      Duration duration0 = Duration.of(0L, chronoUnit0);
      int int0 = DurationUtils.toMillisInt(duration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ofMillis((-1L));
      Duration duration1 = duration0.plusHours(1821L);
      int int0 = DurationUtils.toMillisInt(duration1);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = DurationUtils.toDuration(4119L, timeUnit0);
      int int0 = DurationUtils.getNanosOfMiili(duration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1L), (-1L));
      int int0 = DurationUtils.getNanosOfMiili(duration0);
      assertEquals(999999, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toMillisInt((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // duration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toDuration(1698L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        DurationUtils.toDuration(355881600000000000L, timeUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.toChronoUnit((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.isPositive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      assertEquals(ChronoUnit.SECONDS, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      assertEquals(ChronoUnit.MILLIS, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationUtils durationUtils0 = new DurationUtils();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Duration duration0 = DurationUtils.toDuration((long) durationUtils0.LONG_INT_MAX_VALUE, timeUnit0);
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ChronoUnit chronoUnit0 = DurationUtils.toChronoUnit(timeUnit0);
      assertEquals(ChronoUnit.NANOS, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FailableBiConsumer<Long, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      DurationUtils.accept(failableBiConsumer0, (Duration) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FailableBiConsumer<Long, Integer, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      Duration duration0 = Duration.ZERO;
      DurationUtils.accept(failableBiConsumer0, duration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      DurationUtils.accept((FailableBiConsumer<Long, Integer, Throwable>) null, duration0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = DurationUtils.toDuration(4119L, timeUnit0);
      Duration duration1 = DurationUtils.zeroIfNull(duration0);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-1959L), (-1959L));
      int int0 = DurationUtils.toMillisInt(duration0);
      assertEquals((-1959001), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationUtils.getNanosOfMiili((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.DurationUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationUtils durationUtils0 = new DurationUtils();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Duration duration0 = DurationUtils.toDuration((long) durationUtils0.LONG_INT_MAX_VALUE, timeUnit0);
      boolean boolean0 = DurationUtils.isPositive(duration0);
      assertTrue(boolean0);
  }
}
