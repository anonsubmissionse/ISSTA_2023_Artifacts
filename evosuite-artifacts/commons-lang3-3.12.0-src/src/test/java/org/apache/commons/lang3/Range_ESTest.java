/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:02:31 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(701);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-2150));
      boolean boolean0 = range0.isStartedBy(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range<String> range0 = Range.between("gr<3'9o]4f \\8bi3iM", "gr<3'9o]4f \\8bi3iM");
      boolean boolean0 = range0.isEndedBy("K&h*U8*_w7jW `Av");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1588));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Range<Integer> range1 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isBeforeRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between(",&jBC~bfNp*K$\"|;`x", ",&jBC~bfNp*K$\"|;`x", comparator0);
      boolean boolean0 = range0.isBefore(",&jBC~bfNp*K$\"|;`x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1780));
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) integer0, (Object) integer0, comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.is((Object) comparator0, comparator2);
      boolean boolean0 = range2.isAfterRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range<String> range0 = Range.is("{!");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("S#E`m3;", "", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range<String> range0 = Range.between("..", "..");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.between("$VALUES", "..", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1164, 0, (-54), 37, 0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      Comparator<Range<String>> comparator1 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1919)).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range2 = Range.is(range0, comparator1);
      boolean boolean0 = range1.containsRange(range2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range<String> range0 = Range.between("org.apache.commons.lang3.Range$ComparableComparator", ">");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      // Undeclared exception!
      try { 
        range1.intersectionWith(range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [>..org.apache.commons.lang3.Range$ComparableComparator]
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "element", (Object) "element", comparator0);
      String string0 = range0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 2).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      boolean boolean0 = range1.containsRange(range1);
      boolean boolean1 = range1.isBeforeRange(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range<String> range0 = Range.is("!%", (Comparator<String>) null);
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      // Undeclared exception!
      try { 
        range1.toString("!%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<String> range0 = Range.is("vQ|U_?Ka)%A^ tYO7", (Comparator<String>) null);
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      // Undeclared exception!
      try { 
        range1.toString("vQ|U_?Ka)%A^ tYO7");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != org.apache.commons.lang3.Range
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between(object0, object0, comparator0);
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.isEndedBy(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Range<Integer>> comparator0 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Range<Integer>) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      // Undeclared exception!
      try { 
        Range.is(range0, (Comparator<Range<String>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-2321));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2321)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) "QU}qT)l?W2,S,5]4X3", comparator1);
      Range<Object> range2 = Range.is((Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.intersectionWith(range2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.fit((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "?", (Object) "[", (Comparator<Object>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.fit(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range<String> range0 = Range.between("Tut", "Tut");
      // Undeclared exception!
      try { 
        range0.elementCompareTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.between((Object) null, (Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-438));
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        Range.between(range0, range0, (Comparator<Range<Integer>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range<String> range0 = Range.is("");
      String string0 = range0.toString();
      assertEquals("[..]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-2262));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2262), 2033, (-78)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-3106), (-3106)).when(comparator1).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer0, comparator1);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(903);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(903, (-7), 0, 4058).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2262), 2812, 0, (-7), 0).when(comparator1).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer0, comparator1);
      Range<Integer> range2 = range1.intersectionWith(range0);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertSame(range1, range2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("qq3J", "element", comparator0);
      boolean boolean0 = range1.isOverlappedBy(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1919)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isOverlappedBy((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.isBefore("1o{ndR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range<String> range0 = Range.is("UX]{U]{");
      boolean boolean0 = range0.isAfter(",LpN]%7UvjTE(y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "sEEsWoJt*iaQoXWO\"}", comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.between(range0, range0, comparator1);
      boolean boolean0 = range1.isAfter(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-2535));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) integer0, (Object) range0, comparator1);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) "", comparator0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is("", comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.between((Object) range1, (Object) comparator0, comparator1);
      Object object0 = range2.getMinimum();
      boolean boolean0 = range0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-1749));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Integer integer1 = new Integer((-1565));
      boolean boolean0 = range0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("^)Wx/fv_gBV!%ytsM", "^)Wx/fv_gBV!%ytsM", comparator0);
      boolean boolean0 = range1.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-1749));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range<String> range0 = Range.is("]");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("?", "?", comparator0);
      String string0 = range1.fit("Elements in a range must not be null: element1=");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(4836);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      Object object0 = range0.fit(integer0);
      assertEquals(4836, object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Integer integer0 = new Integer(3634);
      Range<Integer> range1 = Range.between(integer0, integer0);
      Range range2 = (Range)range0.fit(range1);
      assertTrue(range2.isNaturalOrdering());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.isStartedBy("llQ]$}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between(object0, object0, comparator0);
      boolean boolean0 = range0.isStartedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range<String> range0 = Range.is("8`Vt4N}F1Y[8o^ -", (Comparator<String>) null);
      boolean boolean0 = range0.isStartedBy("8`Vt4N}F1Y[8o^ -");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-293));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("Y{)z,BnJPcy_i", comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-1749));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Integer integer1 = new Integer((-1));
      boolean boolean0 = range0.isEndedBy(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isEndedBy((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer((-1749));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isEndedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      boolean boolean0 = range0.isBeforeRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isBefore((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isAfterRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(903);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(903, (-7)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isAfterRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(2002);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2002).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) range0, comparator1);
      boolean boolean0 = range1.isAfter((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range<String> range0 = Range.is("");
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("C_v,>K#T", "", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      Comparator<Range<String>> comparator1 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1342, 0, 0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<String>> range2 = Range.is(range0, comparator1);
      Range<Range<String>> range3 = range1.intersectionWith(range2);
      assertSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.between(range0, range0, comparator1);
      boolean boolean0 = range1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1012));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "", (Object) integer0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.is(range0, comparator1);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      int int0 = range0.elementCompareTo(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("e*Faoj").when(comparator0).toString();
      doReturn(2746, (-1919), 2746, (-1919)).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("e*Faoj", "e*Faoj", comparator0);
      boolean boolean0 = range0.containsRange(range0);
      assertFalse(boolean0);
      
      Comparator<String> comparator1 = range0.getComparator();
      Range<String> range1 = Range.is("", comparator1);
      int int0 = range1.elementCompareTo("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range<String> range0 = Range.is("");
      int int0 = range0.elementCompareTo("Elements in a range must not be null: element1=");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(4836);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      boolean boolean0 = range0.containsRange((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "?", (Object) "[", (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "[", (Comparator<Object>) null);
      Range<Object> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      boolean boolean0 = range0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between("1952", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=1952, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range<String> range0 = Range.is("jVo,tsQWS^E##s");
      String string0 = range0.toString("The validated object is nul");
      assertEquals("The validated object is nul", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(3634);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Object object0 = range0.getMaximum();
      assertEquals(3634, object0);
  }
}
