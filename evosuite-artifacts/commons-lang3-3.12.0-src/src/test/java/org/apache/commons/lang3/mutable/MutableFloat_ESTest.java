/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 18:20:32 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableFloat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableFloat_ESTest extends MutableFloat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      MutableFloat mutableFloat1 = new MutableFloat((-1.0F));
      boolean boolean0 = mutableFloat0.equals(mutableFloat1);
      assertFalse(boolean0);
      assertFalse(mutableFloat1.equals((Object)mutableFloat0));
      assertEquals((-1.0), mutableFloat1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(1.0F);
      mutableFloat0.subtract((Number) mutableFloat0);
      assertEquals(0.0, mutableFloat0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-1529.8F));
      mutableFloat0.subtract((-1529.8F));
      assertEquals((short)0, mutableFloat0.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      Double double0 = new Double((-2392.72F));
      mutableFloat0.add((Number) double0);
      assertEquals((byte) (-88), mutableFloat0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.0);
      MutableFloat mutableFloat0 = new MutableFloat(double0);
      mutableFloat0.getAndIncrement();
      mutableFloat0.toFloat();
      assertEquals("1.0", mutableFloat0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(0.0F);
      mutableFloat0.decrementAndGet();
      mutableFloat0.toFloat();
      assertEquals((short) (-1), mutableFloat0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(0.0F);
      mutableFloat0.longValue();
      assertEquals(0.0, mutableFloat0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      Float float0 = new Float(862.6177555);
      mutableFloat0.getAndAdd((Number) float0);
      int int0 = mutableFloat0.intValue();
      assertEquals(862, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.decrement();
      int int0 = mutableFloat0.intValue();
      assertEquals((-1L), mutableFloat0.longValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.decrement();
      float float0 = mutableFloat0.incrementAndGet();
      assertEquals(0.0F, mutableFloat0.toFloat(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.increment();
      mutableFloat0.getValue();
      assertEquals(1, mutableFloat0.intValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(1.0F);
      mutableFloat0.setValue((-2571.158F));
      mutableFloat0.getValue();
      assertEquals((-2571.158F), mutableFloat0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) integer0);
      mutableFloat0.increment();
      float float0 = mutableFloat0.getAndIncrement();
      assertEquals(2.0F, mutableFloat0.toFloat(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-1529.8F));
      float float0 = mutableFloat0.getAndIncrement();
      assertEquals((byte)8, mutableFloat0.byteValue());
      assertEquals((-1529.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) byte0);
      mutableFloat0.getAndDecrement();
      long long0 = mutableFloat0.longValue();
      assertEquals((short) (-1), mutableFloat0.shortValue());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-2110.0F));
      float float0 = mutableFloat0.getAndDecrement();
      assertEquals((-2111.0F), mutableFloat0.floatValue(), 0.01F);
      assertEquals((-2110.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-2110.0F));
      Long long0 = Long.getLong("-2110.0", (-2260L));
      mutableFloat0.getAndAdd((Number) long0);
      mutableFloat0.addAndGet((Number) long0);
      mutableFloat0.getValue();
      assertEquals((-6630L), mutableFloat0.longValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.increment();
      float float0 = mutableFloat0.getAndAdd(0.0F);
      assertEquals("1.0", mutableFloat0.toString());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-1529.8F));
      float float0 = mutableFloat0.getAndAdd((float) (byte) (-1));
      assertEquals((-1530.8F), mutableFloat0.toFloat(), 0.01F);
      assertEquals((-1529.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) integer0);
      mutableFloat0.increment();
      float float0 = mutableFloat0.floatValue();
      assertEquals(1.0F, mutableFloat0.toFloat(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.add((-2394.72F));
      float float0 = mutableFloat0.floatValue();
      assertEquals((short) (-2394), mutableFloat0.shortValue());
      assertEquals((-2394.72F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) float0);
      mutableFloat0.increment();
      double double0 = mutableFloat0.doubleValue();
      assertEquals(1.0F, mutableFloat0.getValue(), 0.01F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-2110.0F));
      double double0 = mutableFloat0.doubleValue();
      assertEquals((-2110.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      Short short0 = new Short((short)1);
      mutableFloat0.addAndGet((Number) short0);
      float float0 = mutableFloat0.decrementAndGet();
      assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.increment();
      mutableFloat0.increment();
      float float0 = mutableFloat0.decrementAndGet();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      MutableFloat mutableFloat1 = new MutableFloat((-1.0F));
      int int0 = mutableFloat0.compareTo(mutableFloat1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-1529.8F));
      MutableFloat mutableFloat1 = new MutableFloat(mutableFloat0);
      mutableFloat0.decrementAndGet();
      int int0 = mutableFloat0.compareTo(mutableFloat1);
      assertEquals((-1530.8F), mutableFloat0.getValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(1984.7771F);
      mutableFloat0.setValue(0.0F);
      float float0 = mutableFloat0.addAndGet(0.0F);
      assertEquals("0.0", mutableFloat0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat((-1066.0231F));
      float float0 = mutableFloat0.addAndGet((-474.4584F));
      assertEquals((-1540.4814F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Short short0 = new Short((short)4246);
      MutableFloat mutableFloat0 = new MutableFloat((Number) short0);
      // Undeclared exception!
      try { 
        mutableFloat0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(0.0F);
      // Undeclared exception!
      try { 
        mutableFloat0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(0.0F);
      // Undeclared exception!
      try { 
        mutableFloat0.getAndAdd((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Float float0 = new Float((-1.0));
      MutableFloat mutableFloat0 = new MutableFloat((Number) float0);
      // Undeclared exception!
      try { 
        mutableFloat0.compareTo((MutableFloat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      // Undeclared exception!
      try { 
        mutableFloat0.addAndGet((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4756.74F);
      // Undeclared exception!
      try { 
        mutableFloat0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableFloat mutableFloat0 = null;
      try {
        mutableFloat0 = new MutableFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableFloat mutableFloat0 = null;
      try {
        mutableFloat0 = new MutableFloat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableFloat mutableFloat0 = null;
      try {
        mutableFloat0 = new MutableFloat((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      float float0 = mutableFloat0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.increment();
      MutableFloat mutableFloat1 = new MutableFloat(0.0F);
      boolean boolean0 = mutableFloat1.equals(mutableFloat0);
      assertEquals(1.0F, mutableFloat0.toFloat(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      boolean boolean0 = mutableFloat0.equals(mutableFloat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      String string0 = mutableFloat0.toString();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      float float0 = mutableFloat0.getAndAdd((Number) mutableFloat0);
      assertEquals(8381L, mutableFloat0.longValue());
      assertEquals(4190.9355F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      double double0 = mutableFloat0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      float float0 = mutableFloat0.addAndGet(4190.9355F);
      assertEquals(8381.871F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.decrement();
      mutableFloat0.getAndDecrement();
      float float0 = mutableFloat0.incrementAndGet();
      assertEquals((-1.0F), mutableFloat0.floatValue(), 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      Float float0 = mutableFloat0.getValue();
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = mutableFloat0.equals(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      float float0 = mutableFloat0.getAndAdd(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, mutableFloat0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      float float0 = mutableFloat0.addAndGet((Number) mutableFloat0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      float float0 = mutableFloat0.getAndDecrement();
      assertEquals(4189.935546875, mutableFloat0.doubleValue(), 0.01);
      assertEquals(4190.9355F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      boolean boolean0 = mutableFloat0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      mutableFloat0.isNaN();
      assertEquals(4190.9355F, mutableFloat0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      mutableFloat0.hashCode();
      assertEquals(4190.9355F, mutableFloat0.getValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) short0);
      mutableFloat0.subtract((Number) short0);
      assertEquals(0.0F, mutableFloat0.toFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      mutableFloat0.subtract(0.0F);
      assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      int int0 = mutableFloat0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) short0);
      Float float0 = mutableFloat0.toFloat();
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) short0);
      float float0 = mutableFloat0.incrementAndGet();
      assertEquals(1.0F, mutableFloat0.getValue(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat("0");
      assertEquals("0.0", mutableFloat0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Short short0 = new Short((short)0);
      MutableFloat mutableFloat0 = new MutableFloat((Number) short0);
      mutableFloat0.setValue((Number) short0);
      assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat(4190.9355F);
      long long0 = mutableFloat0.longValue();
      assertEquals(4190L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutableFloat mutableFloat0 = new MutableFloat();
      int int0 = mutableFloat0.compareTo(mutableFloat0);
      assertEquals(0, int0);
  }
}
