/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 17:57:31 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("&", "&").when(strMatcher0).toString();
      doReturn(1, (-1446), 1, (-2387)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '5');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "wadKJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      StrSubstitutor.replace(object0, properties0);
      properties0.put(object0, object0);
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strLookup0).toString();
      doReturn("").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "", "", "").when(strMatcher0).toString();
      doReturn(23, 23, 0, 23, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@0000000004");
      strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      
      strSubstitutor0.replace("java.lang.Object@0000000004");
      assertEquals('_', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrSubstitutor@0000000002");
      String string0 = strSubstitutor0.replace(stringBuffer0, (int) (byte)39, (int) (byte)0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      String string0 = strSubstitutor0.replace("Infinite loop in property interpolation of ", 0, 36);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("Infinite loop in property interpolat", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '2');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("Pl3?.<");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '/');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('K');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('m');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix(".");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Object varargs must not be null", "Object varargs must not be null", ' ', "Object varargs must not be null");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix('m');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '2');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('0');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, ".~\"b", "=<M++FWD|pf", 'z');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter("\n");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '2');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter((String) null);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, ".~\"b", "=<M++FWD|pf", 'z');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '2');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "J$s~R,@k#v6", "Ak4Y(F JaQ", 'v', "${");
      char[] charArray0 = new char[7];
      String string0 = strSubstitutor0.replace(charArray0, 1, 1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      assertEquals('v', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "J$s~R,@k#v6", "Ak4Y(F JaQ", 'v', "${");
      char[] charArray0 = new char[7];
      String string0 = strSubstitutor0.replace(charArray0, 0, 0);
      assertEquals('v', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "K|lItggK,K", "K|lItggK,K", 'f', "K|lItggK,K");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "K|lItggK,K");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0, 2, 2);
      assertEquals("lI", string0);
      assertEquals('f', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) "", properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "", "/lfB.])Xc>5N\"RQ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, String>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace(object0, (Map<String, String>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "NXr:", "NXr:", '@');
      String string0 = strSubstitutor0.replace((Object) "");
      assertNotNull(string0);
      assertEquals('@', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      String string0 = strSubstitutor0.replace((CharSequence) "ly%jc'1", 0, 4);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("ly%j", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "}", "}", 'Z');
      String string0 = strSubstitutor0.replace((CharSequence) "}", 0, 0);
      assertNotNull(string0);
      assertEquals('Z', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'g');
      strSubstitutor0.replace((CharSequence) "");
      assertEquals('g', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, ".~\"b", "=<M++FWD|pf", 'z');
      strSubstitutor0.setPreserveEscapes(true);
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, " n", "7]Q", '4');
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "cjOOh", "Minimum abbreviation width with offset is %d", 't');
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('t', char0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replaceSystemProperties(object0);
      properties0.put(object0, object0);
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strLookup0).toString();
      doReturn("", "B2e*j'`#WjdNy~").when(strLookup0).lookup(anyString());
      int int0 = 2524;
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000003", "", "", (String) null).when(strMatcher0).toString();
      doReturn(2, 2, 16, (-1), 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@0000000003");
      strSubstitutor0.replaceIn(stringBuffer0);
      char char0 = '~';
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter(char0);
      StrLookup<Integer> strLookup1 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.replace(string0);
      StringBuffer stringBuffer1 = new StringBuffer();
      int int1 = (-1519);
      // Undeclared exception!
      try { 
        strSubstitutor1.replace(stringBuffer1, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.").when(strLookup0).toString();
      doReturn("Variable prefix matcher must not be null.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "0Z5&W)R*Hpn,L:_|{K<", "", (String) null).when(strMatcher0).toString();
      doReturn(23, 23, 23, (-1)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.Object@0000000004");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.lang.Object@0000000004: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable suffix matcher must not be null.", "Infinite loop in property interpolation of ").when(strMatcher0).toString();
      doReturn((-469), 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '[');
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[2] = '[';
      charArray0[6] = '$';
      charArray0[7] = '$';
      String string0 = strSubstitutor0.replace(charArray0, 1, 1);
      assertEquals("$", string0);
      assertEquals('[', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "J$s~R,@k#v6", "Ak4Y(F JaQ", 'v', "${");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("J$s~R,@k#v6", 1, 754);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strLookup0).toString();
      doReturn("java.lang.Object@0000000004").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "java.lang.Object@0000000004", "java.lang.Object@0000000004", (String) null).when(strMatcher0).toString();
      doReturn(2, 2, (-1), 97).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("", "}").when(strLookup0).toString();
      doReturn("", ".").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "", "", "}").when(strMatcher0).toString();
      doReturn(23, 23, 23, (-2604)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@0000000004");
      strSubstitutor0.replaceIn(stringBuffer0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(1286);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) integer0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("$").when(strLookup0).toString();
      doReturn("~sL}UXtN.Y)1_.Q2/#").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("&", "&").when(strMatcher0).toString();
      doReturn(1, (-1446)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '5');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "wadKJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace(object0, properties0);
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strLookup0).toString();
      doReturn("java.lang.Object@0000000004").when(strLookup0).lookup(anyString());
      int int0 = 23;
      int int1 = 2524;
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", (String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(23, 23, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter('~');
      Object object1 = new Object();
      strSubstitutor1.replace(object1);
      StrLookup<Integer> strLookup1 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.replace(string0);
      int int2 = 2215;
      // Undeclared exception!
      try { 
        strSubstitutor1.replace(string0, int2, int2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, "->", (String) null, 'O', "org.apache.commons.lang3.text.StrMatcher$StringMatcher");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'i');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, (String) null, (String) null, 'W', "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "", (String) null, '&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "zZ/w(", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix("Variable suffix must not be null.");
      assertEquals('$', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "A:[y47*Ev");
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, "Infinite loop in property interpolation of ");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder1, 9, 16);
      assertFalse(boolean0);
      assertEquals('m', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "A:[y47*Ev");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, 9, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "", "java.lang.Object@0000000003", '2', "_-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertFalse(boolean0);
      assertEquals('2', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 256, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "}", "}", 'Z');
      String string0 = strSubstitutor0.replace((Object) null);
      assertEquals('Z', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.setEscapeChar('+');
      assertEquals('+', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, String>) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '/');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix("");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "zZ/w(", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) "93N!s$3YMq_w?*[O!:", (Map<String, Object>) hashMap0, "TRmyyn0coHfFC", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "MfR|T;5b{yOC}", "MfR|T;5b{yOC}", '6', "");
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.util.Properties@0000000003", (String) null).when(strMatcher0).toString();
      doReturn(23, 23).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, '_', strMatcher0);
      strSubstitutor0.replace("java.util.Properties@0000000003");
      assertEquals('_', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('s');
      strSubstitutor1.setVariableSuffix('m');
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[3] = 's';
      charArray0[7] = 'm';
      strSubstitutor1.replace(charArray0);
      assertEquals('m', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "K|lItggK,K", "K|lItggK,K", 'f', "K|lItggK,K");
      strSubstitutor0.setVariableSuffix('f');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('\"');
      char[] charArray0 = new char[7];
      charArray0[2] = '\"';
      strSubstitutor0.setValueDelimiter((String) null);
      charArray0[3] = 'f';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals("\u0000\u0000\"f\u0000\u0000\u0000", string0);
      assertEquals('f', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('.');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      String string0 = strSubstitutor0.replace("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", 16, 16);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("ns.lang3.text.St", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('H');
      char[] charArray0 = new char[4];
      strSubstitutor0.setPreserveEscapes(true);
      charArray0[1] = '$';
      charArray0[2] = 'H';
      strSubstitutor0.replace(charArray0);
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('H');
      char[] charArray0 = new char[4];
      charArray0[1] = '$';
      charArray0[2] = 'H';
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals("\u0000H\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "\n", "org.apache.commons.lang3.text.St3Substi[utor", 'H', "org.apache.commons.lang3.text.St3Substi[utor");
      strSubstitutor0.setVariablePrefix('H');
      char[] charArray0 = new char[4];
      charArray0[2] = 'H';
      StringWriter stringWriter0 = new StringWriter('\u0000');
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertEquals('H', strSubstitutor0.getEscapeChar());
      assertEquals("\u0000\u0000H\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "K|lItggK,K", "K|lItggK,K", 'f', "K|lItggK,K");
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, (-1262), 47);
      assertEquals('f', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable suffix matcher must not be null.", "l}", 'c', "Variable suffix matcher must not be null.");
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertEquals('c', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "MfR|T;5b{yOC}", "MfR|T;5b{yOC}", '6', "");
      StringBuilder stringBuilder0 = new StringBuilder(33);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0);
      assertEquals('6', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrLookup$SystemPropertiesStrLookup");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "4efw5pwva.3nWK`+}q", "+VE\"h;]~RJ?y", 'A');
      String string0 = strSubstitutor0.replace((CharSequence) null, 12, (int) 'A');
      assertNull(string0);
      assertEquals('A', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.replace((CharSequence) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "\n", "org.apache.commons.lang3.text.St3Substi[utor", 'H', "org.apache.commons.lang3.text.St3Substi[utor");
      String string0 = strSubstitutor0.replace((CharSequence) "\n");
      assertNotNull(string0);
      assertEquals('H', strSubstitutor0.getEscapeChar());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      String string0 = strSubstitutor0.replace((StringBuffer) null, (-1763), (-1763));
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "rG~H[o!", "rG~H[o!", 'f', "rG~H[o!");
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('f', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "\n", "org.apache.commons.lang3.text.St3Substi[utor", 'H', "org.apache.commons.lang3.text.St3Substi[utor");
      StringWriter stringWriter0 = new StringWriter('\u0000');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertEquals('H', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "rG~H[o!", "rG~H[o!", 'f', "rG~H[o!");
      String string0 = strSubstitutor0.replace((char[]) null, 3510, 6);
      assertEquals('f', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "\n", "org.apache.commons.lang3.text.St3Substi[utor", 'H', "org.apache.commons.lang3.text.St3Substi[utor");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, (int) 'w', (-675));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -675
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "MfR|T;5b{yOC}", "MfR|T;5b{yOC}", '6', "");
      strSubstitutor0.replace((String) null, 33, 33);
      assertEquals('6', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, " n", "7]Q", '4');
      String string0 = strSubstitutor0.replace("...", 0, 0);
      assertEquals('4', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strLookup0).toString();
      doReturn("").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "", "", (String) null).when(strMatcher0).toString();
      doReturn(23, 23).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      String string0 = strSubstitutor0.replace("java.lang.Object@0000000004");
      assertEquals('_', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0);
      strSubstitutor0.replace((String) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Integer integer0 = new Integer((-20));
      Properties properties0 = new Properties();
      properties0.putIfAbsent("org.apache.commons.lang3.text.StrLookup$SystemPropertiesStrLookup", strSubstitutor0);
      String string0 = StrSubstitutor.replace((Object) integer0, properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.isPreserveEscapes();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "Variable suffix must not be null.", (Map<String, Object>) hashMap0, "F/&zFX25&{Y#7", ">W0Z'2mf:b");
      assertEquals("Variable suffix must not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "org.apache.commons.lang3.text.StrMatcher$CharMatcher", "", 'g');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "}", (-52), 1426);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ".", "Infinite loop in property interpolation of ", 'm', ".");
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('s');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariableSuffix('m');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[3] = 's';
      charArray0[7] = 'm';
      strSubstitutor2.replace(charArray0);
      assertTrue(strSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn(":o-2X").when(strLookup0).toString();
      doReturn("java.lang.Object@0000000004").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "java.lang.Object@0000000004", "java.lang.Object@0000000004", "", (String) null).when(strMatcher0).toString();
      doReturn(23, 23, 23, 2524).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.lang.Object@0000000004: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }
}
