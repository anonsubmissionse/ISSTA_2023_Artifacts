/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:03:44 GMT 2022
 */

package org.apache.commons.numbers.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.numbers.core.ArithmeticUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArithmeticUtils_ESTest extends ArithmeticUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((-820L), (-820L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned(0L, (-849L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((-3453L), 1652L);
      assertEquals(11166309971979145L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((long) (-2744), (long) 1);
      assertEquals((-2744L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-972), (-3337));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned(0, (-4253));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-1556), 4);
      assertEquals(1073741435, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned(0, 63);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned(0L, (-3570L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((-2747L), 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((long) (-972), (long) 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned(0L, 1154L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-1), (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned(0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-2421), 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 0L);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(1777L, 63);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(1369, 31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((long) (-1), (long) (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = ArithmeticUtils.pow(bigInteger0, bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertEquals((byte)101, bigInteger1.byteValue());
      assertEquals((short)101, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(1, byteArray0.length);
      
      BigInteger bigInteger2 = ArithmeticUtils.pow(bigInteger1, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)101, bigInteger1.byteValue());
      assertEquals((short)101, bigInteger1.shortValue());
      assertEquals((short)4537, bigInteger2.shortValue());
      assertEquals((byte) (-71), bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 397L);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger1.byteValue());
      assertEquals((short) (-29441), bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 2891);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = ArithmeticUtils.pow(bigInteger1, 63);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals((short) (-13149), bigInteger2.shortValue());
      assertEquals((byte) (-93), bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.remainderUnsigned((-1L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.remainderUnsigned(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((BigInteger) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(bigInteger0, 2139127680);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(816, 18);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.lcm((-678L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.lcm(1073741435, (-121));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.divideUnsigned(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.divideUnsigned(31, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd((long) (-18), (-437L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(1L, 2L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.gcd(0, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(0, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((-1L), (long) (-3662));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((long) 716, (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned(1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((-267L), 1L);
      assertEquals((-267L), long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = ArithmeticUtils.divideUnsigned((-3564L), (-548L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-221), (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-8), (-8));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-1), 1341);
      assertEquals(3202809, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned(Integer.MIN_VALUE, 2147480927);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned((-8), 1);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned(1, 605);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = ArithmeticUtils.divideUnsigned(605, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((-1242L), (-2484L));
      assertEquals(1242L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((long) 1, (-1603L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((-1L), (long) 1242);
      assertEquals(51L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((long) (-972), 74L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((long) 605, 4551L);
      assertEquals(605L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = ArithmeticUtils.remainderUnsigned((-1605L), (-8L));
      assertEquals((-1605L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned(Integer.MIN_VALUE, (-108));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned(1, (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-5700), 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-108), 2147483635);
      assertEquals(2147483553, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned(1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-972), 1369);
      assertEquals(1255, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = ArithmeticUtils.remainderUnsigned((-112), (-1987));
      assertEquals(1875, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(256L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo(2753355L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArithmeticUtils.isPowerOfTwo((-3580L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-7168), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative exponent ({-395136991232})
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 397L);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(bigInteger0, (-267L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative exponent ({-267})
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(bigInteger0, (-4973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative exponent ({-4973})
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      BigInteger bigInteger1 = ArithmeticUtils.pow(bigInteger0, 2139127680);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(18L, 31);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((-16L), 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((long) 2549, 2549);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((long) (-1), 3202809);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = ArithmeticUtils.pow((long) (-1), 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = ArithmeticUtils.pow(1L, 294);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = ArithmeticUtils.pow(0L, 187);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = ArithmeticUtils.pow(0L, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(0L, (-4830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative exponent ({-4830})
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(947, 2);
      assertEquals(896809, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow(963, 2889);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = ArithmeticUtils.pow((-1), 1039);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = ArithmeticUtils.pow((-8), 1);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(0, 482);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = ArithmeticUtils.pow((-1), 1288);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.pow((-544), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative exponent ({-1})
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = ArithmeticUtils.pow(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.lcm((-9223372036854775808L), 1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: lcm(-9,223,372,036,854,775,808, 1) is 2^63
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm(2L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm(0L, (-1948L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm((-1302), 4006);
      assertEquals(2607906, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm(Integer.MIN_VALUE, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = ArithmeticUtils.lcm(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.lcm((-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = ArithmeticUtils.lcm((long) 4006, (-1505L));
      assertEquals(6029030L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd((-3580L), (-3580L));
      assertEquals(3580L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.gcd((long) 0, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(0, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = ArithmeticUtils.gcd(0L, (-657L));
      assertEquals(657L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd(1767, 710);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = ArithmeticUtils.gcd((-2147483646), 0);
      assertEquals(2147483646, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArithmeticUtils.gcd((-9223372036854775808L), (long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, 0) is 2^63
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }
}
