/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:03:18 GMT 2022
 */

package org.apache.commons.numbers.core;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.numbers.core.ExtendedPrecision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedPrecision_ESTest extends ExtendedPrecision_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(2197153.950345831, 2197153.950345831);
      assertEquals(4.827483284366341E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-936.2371631875933), 6.696928794914171E299, (-936.2371631875933));
      assertEquals((-6.269913617019751E302), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(0.0, (-1.6184630754644558E303), (-1.6184630754644558E303));
      assertEquals(1.6184630754644558E303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-939.92993453), 651.19495644507, 6.696928794914171E299);
      assertEquals((-6.696928794914171E299), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(6.696928794914171E299, (-2416.72432995489), 1.0);
      assertEquals((-1.6184630754644558E303), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(46.67337040425585, 0.0, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow(0.0, (-2948.9439618974), 0.0);
      assertEquals((-2948.9439618974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(6.696928794914171E299, (-48.783572));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(3560.0989618974, (-1.0), (-611.155));
      assertEquals((-2948.9439618974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = ExtendedPrecision.isNotNormal(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = ExtendedPrecision.isNotNormal((-619.1901007));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled(193.00044);
      assertEquals(193.00043869018555, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled((-661.9200725));
      assertEquals((-661.9200744628906), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(6.696928794914171E299, 6.696928794914171E299, 6.696928794914171E299);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(1.073741824E9, 1.073741824E9, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-1481.78006812), (-1481.78006812), (-1481.78006812));
      assertEquals(2197153.950345831, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow((-1481.78006812), 4.827483284366341E12, 2197153.950345831);
      assertEquals(4.82748108573061E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(0.0, 938.395932709);
      assertEquals((-938.395932709), double0, 0.01);
  }
}
