/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:09:51 GMT 2022
 */

package org.apache.commons.numbers.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0, 640);
      fraction0.hashCode();
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      assertEquals((-3854), fraction4.getDenominator());
      assertEquals((-1237133), fraction5.getDenominator());
      assertEquals(1, fraction3.getDenominator());
      assertFalse(fraction3.equals((Object)fraction2));
      assertEquals(537, fraction0.getDenominator());
      assertEquals(321, fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.of(2500);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(0, fraction0.signum());
      assertEquals(1, fraction1.signum());
      assertEquals(2500.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.of(305, (-1059));
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((-0.28800755429650615), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      assertNotSame(fraction1, fraction0);
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-3), (-1));
      Fraction fraction1 = fraction0.divide(3360);
      assertEquals(8.928571428571428E-4, fraction1.doubleValue(), 0.01);
      assertEquals(3.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2727.41303446107);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(125461, fraction0.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      Fraction fraction2 = fraction1.divide(fraction1);
      assertEquals(1, fraction2.getNumerator());
      assertEquals((-2), fraction1.intValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      Fraction fraction1 = fraction0.add(127908);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals(127908.0, fraction2.doubleValue(), 0.01);
      assertEquals(130302.125F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-948.3535));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction1.signum());
      assertEquals((-948.3535F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.divide(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.subtract((-2));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      long long0 = fraction0.longValue();
      assertEquals(2394L, long0);
      assertEquals(300, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide((-1957));
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-1.0005109F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.ONE.subtract(fraction1);
      assertEquals(1108, fraction2.intValue());
      assertEquals((-1107.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(1);
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.signum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.signum();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals((-2.594706798131811E-4), fraction1.doubleValue(), 0.01);
      assertEquals((-321.67970204841714), fraction0.doubleValue(), 0.01);
      assertEquals((-3854), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-2));
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 2539);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE, (-794));
      Fraction fraction1 = fraction0.pow((-1));
      assertEquals(3.6973506212234497E-7, fraction1.doubleValue(), 0.01);
      assertEquals(2704639, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("-394");
      assertEquals((-394.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("1");
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("395");
      assertEquals(395, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1), 1);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.of(21, (-688));
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals((-0.030523255813953487), fraction2.doubleValue(), 0.01);
      assertEquals((-0.030523255F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.of((-1080));
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals((short) (-1080), fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.divide(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.multiply((-2));
      assertEquals(9.313225746154785E-10, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(1397);
      assertEquals(1397.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.from((double) 47);
      Fraction fraction1 = fraction0.multiply((-394));
      assertEquals(1, fraction0.signum());
      assertEquals((short) (-18518), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      long long0 = fraction1.longValue();
      assertEquals((-1107L), long0);
      assertEquals((-1107.0F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      int int0 = fraction1.intValue();
      assertEquals(1, fraction0.signum());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.getNumerator();
      assertEquals((-1), int0);
      assertEquals((-1), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1.0, 180.736542, 274353085);
      assertEquals((byte)1, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-313.075511928422));
      float float0 = fraction0.floatValue();
      assertEquals((-313.0755148741419), fraction0.doubleValue(), 0.01);
      assertEquals((-313.0755F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      double double0 = fraction0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      double double0 = fraction1.doubleValue();
      assertEquals((-1107.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-274.47696133));
      Fraction fraction1 = Fraction.from((-274.47696133), (-1887));
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(1.0000000122956698, fraction2.doubleValue(), 0.01);
      assertEquals((byte) (-18), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals((-1107.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1107.0), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 1207);
      Fraction fraction1 = fraction0.divide(1207);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-8.2850043E-4F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1718.7430557);
      Fraction fraction1 = fraction0.divide(888);
      assertEquals(1.9355214589589589, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide((-1));
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals(0.5846994535519126, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-948.3535));
      Fraction fraction1 = fraction0.ONE.add(fraction0);
      assertEquals((-947.3535031847134), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.of(305, (-1059));
      Fraction fraction1 = fraction0.add(1);
      assertEquals(0.71199244F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.add((-1957));
      assertEquals((-1956), fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(353802675);
      Fraction fraction2 = fraction1.abs();
      assertEquals(353802674, fraction2.getNumerator());
      assertEquals(1, fraction0.signum());
      assertEquals((-353802674), fraction1.intValue());
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      fraction0.abs();
      assertEquals(1, fraction0.signum());
      assertEquals(0.58469945F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.from(185.0, (-2303));
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.from(2319.5293862, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.of(523);
      // Undeclared exception!
      try { 
        fraction0.pow((-19));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.parse("kU#*`zqwohS2x}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kU#*`zqwohS2x}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.of((-484), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-299.348920080592), 3);
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1279.46));
      // Undeclared exception!
      try { 
        fraction0.multiply(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-2621), (-2621));
      // Undeclared exception!
      try { 
        fraction0.ONE.divide((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.00924511111134052, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE, 2202);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2051.828501);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1565.614616209469);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.of(68, 68);
      // Undeclared exception!
      try { 
        fraction0.ONE.add((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.from((double) 0.0F, 3274.7826359600886, 1);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0));
      int int0 = fraction0.signum();
      assertEquals((-1), int0);
      assertEquals((-1), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1270);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals(7.874016E-4F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.signum());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(boolean0);
      assertEquals(0, fraction1.signum());
      assertEquals(21, fraction0.intValue());
      assertEquals(1, fraction0.signum());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals((-1), fraction1.signum());
      assertEquals(20.0F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(21, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      boolean boolean0 = fraction0.equals("Unable to convert %s to fraction after %d iterations");
      assertFalse(boolean0);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      int int0 = fraction0.ONE.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(Integer.MIN_VALUE, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      int int0 = fraction0.ONE.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(21.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.of(47, (-611));
      String string0 = fraction0.toString();
      assertEquals("1 / -13", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      String string0 = fraction0.ZERO.toString();
      assertEquals("0", string0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1));
      Fraction fraction1 = fraction0.pow((-1));
      int int0 = fraction1.getDenominator();
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-1), fraction0.signum());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.pow(112);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(21, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.pow(21);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.ZERO.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.pow(0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      fraction0.ONE.pow(1);
      assertEquals(21, fraction0.intValue());
      assertEquals(21.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value to divide by must not be zero
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value to divide by must not be zero
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertSame(fraction2, fraction1);
      assertEquals(21475, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      Fraction fraction1 = fraction0.ONE.multiply(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.multiply(0);
      assertEquals(0L, fraction1.longValue());
      assertEquals(21, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertEquals(1, fraction0.signum());
      assertEquals((byte) (-20), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      assertSame(fraction1, fraction0);
      assertEquals((byte) (-29), fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(21, fraction0.getNumerator());
      assertEquals((-1), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.add((-1));
      Fraction fraction2 = fraction1.subtract(Integer.MIN_VALUE);
      assertEquals(2.147483648E9, fraction2.doubleValue(), 0.01);
      assertEquals(0, fraction1.signum());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.add(1642);
      assertEquals((short)1642, fraction2.shortValue());
      assertEquals(21475.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add(0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.negate();
      assertEquals(2.147483648E9, fraction1.doubleValue(), 0.01);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("1 / -13");
      assertEquals((-0.07692307692307693), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("0");
      assertEquals(0, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from(2566.469, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0, 894);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((double) 2500, (-4543.864), 552);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Epsilon must be positive: 552
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((double) (-1), (-2956.5), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max iterations must be strictly positive: -1
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from(1.5288142859049003E-4, 0.0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to convert 1.5288142859049003E-4 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2.6528496164246462E-6, Integer.MIN_VALUE);
      assertEquals(1, fraction0.signum());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((-1465.450088636), 5.186823193170653E-16, 47);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Overflow trying to convert -1465.450088636 to fraction (9962997249/6798592)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0, 0);
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.of(4205);
      int int0 = fraction0.getNumerator();
      assertEquals(4205, int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.of(4205);
      float float0 = fraction0.floatValue();
      assertEquals(4205.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(1, fraction0.signum());
      assertEquals(0, fraction1.signum());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.zero();
      assertEquals((byte)0, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.one();
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
  }
}
