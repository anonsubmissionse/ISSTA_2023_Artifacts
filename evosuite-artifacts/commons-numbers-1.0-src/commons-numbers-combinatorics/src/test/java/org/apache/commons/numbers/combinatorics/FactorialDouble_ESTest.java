/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:23:31 GMT 2022
 */

package org.apache.commons.numbers.combinatorics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.combinatorics.FactorialDouble;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FactorialDouble_ESTest extends FactorialDouble_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = FactorialDouble.create();
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = FactorialDouble.create();
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble2, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble1);
      
      int int0 = 4469;
      FactorialDouble factorialDouble3 = factorialDouble1.withCache(4469);
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      int int1 = 4150;
      FactorialDouble factorialDouble4 = FactorialDouble.create();
      assertNotNull(factorialDouble4);
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      
      double double0 = factorialDouble4.value(2222);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      
      FactorialDouble factorialDouble5 = factorialDouble0.withCache(4150);
      assertNotNull(factorialDouble5);
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble3);
      
      FactorialDouble factorialDouble6 = FactorialDouble.create();
      assertNotNull(factorialDouble6);
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble5);
      
      FactorialDouble factorialDouble7 = factorialDouble6.withCache(594);
      assertNotNull(factorialDouble7);
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble6));
      assertFalse(factorialDouble7.equals((Object)factorialDouble4));
      assertFalse(factorialDouble7.equals((Object)factorialDouble3));
      assertFalse(factorialDouble7.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble0));
      assertFalse(factorialDouble7.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble6, factorialDouble7);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble6);
      assertNotSame(factorialDouble7, factorialDouble4);
      assertNotSame(factorialDouble7, factorialDouble3);
      assertNotSame(factorialDouble7, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble0);
      assertNotSame(factorialDouble7, factorialDouble1);
      
      FactorialDouble factorialDouble8 = FactorialDouble.create();
      assertNotNull(factorialDouble8);
      assertFalse(factorialDouble8.equals((Object)factorialDouble5));
      assertFalse(factorialDouble8.equals((Object)factorialDouble4));
      assertFalse(factorialDouble8.equals((Object)factorialDouble2));
      assertFalse(factorialDouble8.equals((Object)factorialDouble6));
      assertFalse(factorialDouble8.equals((Object)factorialDouble3));
      assertFalse(factorialDouble8.equals((Object)factorialDouble7));
      assertFalse(factorialDouble8.equals((Object)factorialDouble0));
      assertFalse(factorialDouble8.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble8, factorialDouble5);
      assertNotSame(factorialDouble8, factorialDouble4);
      assertNotSame(factorialDouble8, factorialDouble2);
      assertNotSame(factorialDouble8, factorialDouble6);
      assertNotSame(factorialDouble8, factorialDouble3);
      assertNotSame(factorialDouble8, factorialDouble7);
      assertNotSame(factorialDouble8, factorialDouble0);
      assertNotSame(factorialDouble8, factorialDouble1);
      
      FactorialDouble factorialDouble9 = FactorialDouble.create();
      assertNotNull(factorialDouble9);
      assertFalse(factorialDouble9.equals((Object)factorialDouble1));
      assertFalse(factorialDouble9.equals((Object)factorialDouble3));
      assertFalse(factorialDouble9.equals((Object)factorialDouble7));
      assertFalse(factorialDouble9.equals((Object)factorialDouble0));
      assertFalse(factorialDouble9.equals((Object)factorialDouble5));
      assertFalse(factorialDouble9.equals((Object)factorialDouble8));
      assertFalse(factorialDouble9.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble2));
      assertFalse(factorialDouble9.equals((Object)factorialDouble6));
      assertNotSame(factorialDouble9, factorialDouble1);
      assertNotSame(factorialDouble9, factorialDouble3);
      assertNotSame(factorialDouble9, factorialDouble7);
      assertNotSame(factorialDouble9, factorialDouble0);
      assertNotSame(factorialDouble9, factorialDouble5);
      assertNotSame(factorialDouble9, factorialDouble8);
      assertNotSame(factorialDouble9, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble2);
      assertNotSame(factorialDouble9, factorialDouble6);
      
      FactorialDouble factorialDouble10 = factorialDouble5.withCache(1739);
      assertNotNull(factorialDouble10);
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble9));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble7));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble8));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble6));
      assertFalse(factorialDouble5.equals((Object)factorialDouble7));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble5.equals((Object)factorialDouble8));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble9));
      assertFalse(factorialDouble10.equals((Object)factorialDouble7));
      assertFalse(factorialDouble10.equals((Object)factorialDouble6));
      assertFalse(factorialDouble10.equals((Object)factorialDouble3));
      assertFalse(factorialDouble10.equals((Object)factorialDouble2));
      assertFalse(factorialDouble10.equals((Object)factorialDouble1));
      assertFalse(factorialDouble10.equals((Object)factorialDouble0));
      assertFalse(factorialDouble10.equals((Object)factorialDouble5));
      assertFalse(factorialDouble10.equals((Object)factorialDouble8));
      assertFalse(factorialDouble10.equals((Object)factorialDouble9));
      assertFalse(factorialDouble10.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble10);
      assertNotSame(factorialDouble0, factorialDouble9);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble8);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble10);
      assertNotSame(factorialDouble5, factorialDouble6);
      assertNotSame(factorialDouble5, factorialDouble7);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble5, factorialDouble8);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble9);
      assertNotSame(factorialDouble10, factorialDouble7);
      assertNotSame(factorialDouble10, factorialDouble6);
      assertNotSame(factorialDouble10, factorialDouble3);
      assertNotSame(factorialDouble10, factorialDouble2);
      assertNotSame(factorialDouble10, factorialDouble1);
      assertNotSame(factorialDouble10, factorialDouble0);
      assertNotSame(factorialDouble10, factorialDouble5);
      assertNotSame(factorialDouble10, factorialDouble8);
      assertNotSame(factorialDouble10, factorialDouble9);
      assertNotSame(factorialDouble10, factorialDouble4);
      
      FactorialDouble factorialDouble11 = FactorialDouble.create();
      assertNotNull(factorialDouble11);
      assertFalse(factorialDouble11.equals((Object)factorialDouble4));
      assertFalse(factorialDouble11.equals((Object)factorialDouble2));
      assertFalse(factorialDouble11.equals((Object)factorialDouble6));
      assertFalse(factorialDouble11.equals((Object)factorialDouble10));
      assertFalse(factorialDouble11.equals((Object)factorialDouble9));
      assertFalse(factorialDouble11.equals((Object)factorialDouble3));
      assertFalse(factorialDouble11.equals((Object)factorialDouble7));
      assertFalse(factorialDouble11.equals((Object)factorialDouble0));
      assertFalse(factorialDouble11.equals((Object)factorialDouble5));
      assertFalse(factorialDouble11.equals((Object)factorialDouble8));
      assertFalse(factorialDouble11.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble11, factorialDouble4);
      assertNotSame(factorialDouble11, factorialDouble2);
      assertNotSame(factorialDouble11, factorialDouble6);
      assertNotSame(factorialDouble11, factorialDouble10);
      assertNotSame(factorialDouble11, factorialDouble9);
      assertNotSame(factorialDouble11, factorialDouble3);
      assertNotSame(factorialDouble11, factorialDouble7);
      assertNotSame(factorialDouble11, factorialDouble0);
      assertNotSame(factorialDouble11, factorialDouble5);
      assertNotSame(factorialDouble11, factorialDouble8);
      assertNotSame(factorialDouble11, factorialDouble1);
      
      double double1 = factorialDouble11.value(4150);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(factorialDouble11.equals((Object)factorialDouble4));
      assertFalse(factorialDouble11.equals((Object)factorialDouble2));
      assertFalse(factorialDouble11.equals((Object)factorialDouble6));
      assertFalse(factorialDouble11.equals((Object)factorialDouble10));
      assertFalse(factorialDouble11.equals((Object)factorialDouble9));
      assertFalse(factorialDouble11.equals((Object)factorialDouble3));
      assertFalse(factorialDouble11.equals((Object)factorialDouble7));
      assertFalse(factorialDouble11.equals((Object)factorialDouble0));
      assertFalse(factorialDouble11.equals((Object)factorialDouble5));
      assertFalse(factorialDouble11.equals((Object)factorialDouble8));
      assertFalse(factorialDouble11.equals((Object)factorialDouble1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble11, factorialDouble4);
      assertNotSame(factorialDouble11, factorialDouble2);
      assertNotSame(factorialDouble11, factorialDouble6);
      assertNotSame(factorialDouble11, factorialDouble10);
      assertNotSame(factorialDouble11, factorialDouble9);
      assertNotSame(factorialDouble11, factorialDouble3);
      assertNotSame(factorialDouble11, factorialDouble7);
      assertNotSame(factorialDouble11, factorialDouble0);
      assertNotSame(factorialDouble11, factorialDouble5);
      assertNotSame(factorialDouble11, factorialDouble8);
      assertNotSame(factorialDouble11, factorialDouble1);
      
      FactorialDouble factorialDouble12 = FactorialDouble.create();
      assertNotNull(factorialDouble12);
      assertFalse(factorialDouble12.equals((Object)factorialDouble2));
      assertFalse(factorialDouble12.equals((Object)factorialDouble4));
      assertFalse(factorialDouble12.equals((Object)factorialDouble11));
      assertFalse(factorialDouble12.equals((Object)factorialDouble10));
      assertFalse(factorialDouble12.equals((Object)factorialDouble6));
      assertFalse(factorialDouble12.equals((Object)factorialDouble7));
      assertFalse(factorialDouble12.equals((Object)factorialDouble0));
      assertFalse(factorialDouble12.equals((Object)factorialDouble5));
      assertFalse(factorialDouble12.equals((Object)factorialDouble8));
      assertFalse(factorialDouble12.equals((Object)factorialDouble1));
      assertFalse(factorialDouble12.equals((Object)factorialDouble3));
      assertFalse(factorialDouble12.equals((Object)factorialDouble9));
      assertNotSame(factorialDouble12, factorialDouble2);
      assertNotSame(factorialDouble12, factorialDouble4);
      assertNotSame(factorialDouble12, factorialDouble11);
      assertNotSame(factorialDouble12, factorialDouble10);
      assertNotSame(factorialDouble12, factorialDouble6);
      assertNotSame(factorialDouble12, factorialDouble7);
      assertNotSame(factorialDouble12, factorialDouble0);
      assertNotSame(factorialDouble12, factorialDouble5);
      assertNotSame(factorialDouble12, factorialDouble8);
      assertNotSame(factorialDouble12, factorialDouble1);
      assertNotSame(factorialDouble12, factorialDouble3);
      assertNotSame(factorialDouble12, factorialDouble9);
      
      FactorialDouble factorialDouble13 = FactorialDouble.create();
      assertNotNull(factorialDouble13);
      assertFalse(factorialDouble13.equals((Object)factorialDouble10));
      assertFalse(factorialDouble13.equals((Object)factorialDouble9));
      assertFalse(factorialDouble13.equals((Object)factorialDouble12));
      assertFalse(factorialDouble13.equals((Object)factorialDouble4));
      assertFalse(factorialDouble13.equals((Object)factorialDouble11));
      assertFalse(factorialDouble13.equals((Object)factorialDouble1));
      assertFalse(factorialDouble13.equals((Object)factorialDouble7));
      assertFalse(factorialDouble13.equals((Object)factorialDouble0));
      assertFalse(factorialDouble13.equals((Object)factorialDouble6));
      assertFalse(factorialDouble13.equals((Object)factorialDouble8));
      assertFalse(factorialDouble13.equals((Object)factorialDouble3));
      assertFalse(factorialDouble13.equals((Object)factorialDouble5));
      assertFalse(factorialDouble13.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble13, factorialDouble10);
      assertNotSame(factorialDouble13, factorialDouble9);
      assertNotSame(factorialDouble13, factorialDouble12);
      assertNotSame(factorialDouble13, factorialDouble4);
      assertNotSame(factorialDouble13, factorialDouble11);
      assertNotSame(factorialDouble13, factorialDouble1);
      assertNotSame(factorialDouble13, factorialDouble7);
      assertNotSame(factorialDouble13, factorialDouble0);
      assertNotSame(factorialDouble13, factorialDouble6);
      assertNotSame(factorialDouble13, factorialDouble8);
      assertNotSame(factorialDouble13, factorialDouble3);
      assertNotSame(factorialDouble13, factorialDouble5);
      assertNotSame(factorialDouble13, factorialDouble2);
      
      FactorialDouble factorialDouble14 = FactorialDouble.create();
      assertNotNull(factorialDouble14);
      assertFalse(factorialDouble14.equals((Object)factorialDouble12));
      assertFalse(factorialDouble14.equals((Object)factorialDouble4));
      assertFalse(factorialDouble14.equals((Object)factorialDouble7));
      assertFalse(factorialDouble14.equals((Object)factorialDouble0));
      assertFalse(factorialDouble14.equals((Object)factorialDouble8));
      assertFalse(factorialDouble14.equals((Object)factorialDouble2));
      assertFalse(factorialDouble14.equals((Object)factorialDouble5));
      assertFalse(factorialDouble14.equals((Object)factorialDouble1));
      assertFalse(factorialDouble14.equals((Object)factorialDouble11));
      assertFalse(factorialDouble14.equals((Object)factorialDouble13));
      assertFalse(factorialDouble14.equals((Object)factorialDouble6));
      assertFalse(factorialDouble14.equals((Object)factorialDouble9));
      assertFalse(factorialDouble14.equals((Object)factorialDouble10));
      assertFalse(factorialDouble14.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble14, factorialDouble12);
      assertNotSame(factorialDouble14, factorialDouble4);
      assertNotSame(factorialDouble14, factorialDouble7);
      assertNotSame(factorialDouble14, factorialDouble0);
      assertNotSame(factorialDouble14, factorialDouble8);
      assertNotSame(factorialDouble14, factorialDouble2);
      assertNotSame(factorialDouble14, factorialDouble5);
      assertNotSame(factorialDouble14, factorialDouble1);
      assertNotSame(factorialDouble14, factorialDouble11);
      assertNotSame(factorialDouble14, factorialDouble13);
      assertNotSame(factorialDouble14, factorialDouble6);
      assertNotSame(factorialDouble14, factorialDouble9);
      assertNotSame(factorialDouble14, factorialDouble10);
      assertNotSame(factorialDouble14, factorialDouble3);
      
      // Undeclared exception!
      factorialDouble13.withCache(4469);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      int int0 = 2;
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(2);
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = FactorialDouble.create();
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble2, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble1);
      
      double double0 = factorialDouble1.value(416);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      double double1 = factorialDouble0.value(515);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      
      FactorialDouble factorialDouble3 = FactorialDouble.create();
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      FactorialDouble factorialDouble4 = FactorialDouble.create();
      assertNotNull(factorialDouble4);
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble4, factorialDouble2);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      
      FactorialDouble factorialDouble5 = factorialDouble1.withCache(116);
      assertNotNull(factorialDouble5);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble4));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble5);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble4);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble4);
      
      FactorialDouble factorialDouble6 = factorialDouble1.withCache(2);
      assertNotNull(factorialDouble6);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble5));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble4));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble5);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble4);
      assertNotSame(factorialDouble1, factorialDouble6);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble6, factorialDouble3);
      
      int int1 = 12;
      double double2 = factorialDouble0.value(12);
      assertEquals(4.790016E8, double2, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble4);
      
      FactorialDouble factorialDouble7 = FactorialDouble.create();
      assertNotNull(factorialDouble7);
      assertFalse(factorialDouble7.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble1));
      assertFalse(factorialDouble7.equals((Object)factorialDouble4));
      assertFalse(factorialDouble7.equals((Object)factorialDouble3));
      assertFalse(factorialDouble7.equals((Object)factorialDouble6));
      assertFalse(factorialDouble7.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble7, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble1);
      assertNotSame(factorialDouble7, factorialDouble4);
      assertNotSame(factorialDouble7, factorialDouble3);
      assertNotSame(factorialDouble7, factorialDouble6);
      assertNotSame(factorialDouble7, factorialDouble0);
      
      // Undeclared exception!
      try { 
        factorialDouble3.withCache((-1040));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -1,040 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.FactorialDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = FactorialDouble.create();
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = FactorialDouble.create();
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble2, factorialDouble1);
      assertNotSame(factorialDouble2, factorialDouble0);
      
      int int0 = 4469;
      FactorialDouble factorialDouble3 = factorialDouble1.withCache(4469);
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble2);
      assertNotSame(factorialDouble3, factorialDouble0);
      
      int int1 = 4150;
      double double0 = factorialDouble1.value(4150);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble2);
      
      FactorialDouble factorialDouble4 = FactorialDouble.create();
      assertNotNull(factorialDouble4);
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      
      double double1 = factorialDouble4.value(2222);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      
      FactorialDouble factorialDouble5 = factorialDouble0.withCache(4150);
      assertNotNull(factorialDouble5);
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble0);
      
      FactorialDouble factorialDouble6 = FactorialDouble.create();
      assertNotNull(factorialDouble6);
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble2);
      
      FactorialDouble factorialDouble7 = factorialDouble6.withCache(594);
      assertNotNull(factorialDouble7);
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble0));
      assertFalse(factorialDouble7.equals((Object)factorialDouble3));
      assertFalse(factorialDouble7.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble6));
      assertFalse(factorialDouble7.equals((Object)factorialDouble1));
      assertFalse(factorialDouble7.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble7);
      assertNotSame(factorialDouble7, factorialDouble0);
      assertNotSame(factorialDouble7, factorialDouble3);
      assertNotSame(factorialDouble7, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble6);
      assertNotSame(factorialDouble7, factorialDouble1);
      assertNotSame(factorialDouble7, factorialDouble4);
      
      FactorialDouble factorialDouble8 = FactorialDouble.create();
      assertNotNull(factorialDouble8);
      assertFalse(factorialDouble8.equals((Object)factorialDouble1));
      assertFalse(factorialDouble8.equals((Object)factorialDouble4));
      assertFalse(factorialDouble8.equals((Object)factorialDouble2));
      assertFalse(factorialDouble8.equals((Object)factorialDouble5));
      assertFalse(factorialDouble8.equals((Object)factorialDouble7));
      assertFalse(factorialDouble8.equals((Object)factorialDouble6));
      assertFalse(factorialDouble8.equals((Object)factorialDouble0));
      assertFalse(factorialDouble8.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble8, factorialDouble1);
      assertNotSame(factorialDouble8, factorialDouble4);
      assertNotSame(factorialDouble8, factorialDouble2);
      assertNotSame(factorialDouble8, factorialDouble5);
      assertNotSame(factorialDouble8, factorialDouble7);
      assertNotSame(factorialDouble8, factorialDouble6);
      assertNotSame(factorialDouble8, factorialDouble0);
      assertNotSame(factorialDouble8, factorialDouble3);
      
      FactorialDouble factorialDouble9 = FactorialDouble.create();
      assertNotNull(factorialDouble9);
      assertFalse(factorialDouble9.equals((Object)factorialDouble8));
      assertFalse(factorialDouble9.equals((Object)factorialDouble6));
      assertFalse(factorialDouble9.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble1));
      assertFalse(factorialDouble9.equals((Object)factorialDouble2));
      assertFalse(factorialDouble9.equals((Object)factorialDouble5));
      assertFalse(factorialDouble9.equals((Object)factorialDouble7));
      assertFalse(factorialDouble9.equals((Object)factorialDouble3));
      assertFalse(factorialDouble9.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble9, factorialDouble8);
      assertNotSame(factorialDouble9, factorialDouble6);
      assertNotSame(factorialDouble9, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble1);
      assertNotSame(factorialDouble9, factorialDouble2);
      assertNotSame(factorialDouble9, factorialDouble5);
      assertNotSame(factorialDouble9, factorialDouble7);
      assertNotSame(factorialDouble9, factorialDouble3);
      assertNotSame(factorialDouble9, factorialDouble0);
      
      FactorialDouble factorialDouble10 = factorialDouble5.withCache(1739);
      assertNotNull(factorialDouble10);
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble9));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble7));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble8));
      assertFalse(factorialDouble5.equals((Object)factorialDouble8));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble6));
      assertFalse(factorialDouble5.equals((Object)factorialDouble9));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble7));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble10.equals((Object)factorialDouble0));
      assertFalse(factorialDouble10.equals((Object)factorialDouble1));
      assertFalse(factorialDouble10.equals((Object)factorialDouble4));
      assertFalse(factorialDouble10.equals((Object)factorialDouble2));
      assertFalse(factorialDouble10.equals((Object)factorialDouble8));
      assertFalse(factorialDouble10.equals((Object)factorialDouble5));
      assertFalse(factorialDouble10.equals((Object)factorialDouble7));
      assertFalse(factorialDouble10.equals((Object)factorialDouble6));
      assertFalse(factorialDouble10.equals((Object)factorialDouble9));
      assertFalse(factorialDouble10.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble10);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble9);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble8);
      assertNotSame(factorialDouble5, factorialDouble8);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble10);
      assertNotSame(factorialDouble5, factorialDouble6);
      assertNotSame(factorialDouble5, factorialDouble9);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble7);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble10, factorialDouble0);
      assertNotSame(factorialDouble10, factorialDouble1);
      assertNotSame(factorialDouble10, factorialDouble4);
      assertNotSame(factorialDouble10, factorialDouble2);
      assertNotSame(factorialDouble10, factorialDouble8);
      assertNotSame(factorialDouble10, factorialDouble5);
      assertNotSame(factorialDouble10, factorialDouble7);
      assertNotSame(factorialDouble10, factorialDouble6);
      assertNotSame(factorialDouble10, factorialDouble9);
      assertNotSame(factorialDouble10, factorialDouble3);
      
      FactorialDouble factorialDouble11 = FactorialDouble.create();
      assertNotNull(factorialDouble11);
      assertFalse(factorialDouble11.equals((Object)factorialDouble6));
      assertFalse(factorialDouble11.equals((Object)factorialDouble7));
      assertFalse(factorialDouble11.equals((Object)factorialDouble5));
      assertFalse(factorialDouble11.equals((Object)factorialDouble10));
      assertFalse(factorialDouble11.equals((Object)factorialDouble0));
      assertFalse(factorialDouble11.equals((Object)factorialDouble3));
      assertFalse(factorialDouble11.equals((Object)factorialDouble9));
      assertFalse(factorialDouble11.equals((Object)factorialDouble4));
      assertFalse(factorialDouble11.equals((Object)factorialDouble1));
      assertFalse(factorialDouble11.equals((Object)factorialDouble2));
      assertFalse(factorialDouble11.equals((Object)factorialDouble8));
      assertNotSame(factorialDouble11, factorialDouble6);
      assertNotSame(factorialDouble11, factorialDouble7);
      assertNotSame(factorialDouble11, factorialDouble5);
      assertNotSame(factorialDouble11, factorialDouble10);
      assertNotSame(factorialDouble11, factorialDouble0);
      assertNotSame(factorialDouble11, factorialDouble3);
      assertNotSame(factorialDouble11, factorialDouble9);
      assertNotSame(factorialDouble11, factorialDouble4);
      assertNotSame(factorialDouble11, factorialDouble1);
      assertNotSame(factorialDouble11, factorialDouble2);
      assertNotSame(factorialDouble11, factorialDouble8);
      
      // Undeclared exception!
      factorialDouble11.value(4150);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(2137);
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = FactorialDouble.create();
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble2, factorialDouble1);
      assertNotSame(factorialDouble2, factorialDouble0);
      
      FactorialDouble factorialDouble3 = factorialDouble0.withCache(21);
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      double double0 = factorialDouble3.value(2493);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      FactorialDouble factorialDouble4 = FactorialDouble.create();
      assertNotNull(factorialDouble4);
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      
      double double1 = factorialDouble3.value(21);
      assertEquals(5.109094217170944E19, double1, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble4));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble4);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      FactorialDouble factorialDouble5 = factorialDouble1.withCache(2493);
      assertNotNull(factorialDouble5);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble5);
      assertNotSame(factorialDouble1, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble1);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble4);
      
      double double2 = factorialDouble1.value(21);
      assertEquals(5.109094217170944E19, double2, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble5));
      assertFalse(factorialDouble1.equals((Object)factorialDouble4));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble5);
      assertNotSame(factorialDouble1, factorialDouble4);
      
      FactorialDouble factorialDouble6 = FactorialDouble.create();
      assertNotNull(factorialDouble6);
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble5);
      
      FactorialDouble factorialDouble7 = factorialDouble6.withCache(0);
      assertNotNull(factorialDouble7);
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble0));
      assertFalse(factorialDouble7.equals((Object)factorialDouble6));
      assertFalse(factorialDouble7.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble1));
      assertFalse(factorialDouble7.equals((Object)factorialDouble4));
      assertFalse(factorialDouble7.equals((Object)factorialDouble3));
      assertNotSame(factorialDouble6, factorialDouble7);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble0);
      assertNotSame(factorialDouble7, factorialDouble6);
      assertNotSame(factorialDouble7, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble1);
      assertNotSame(factorialDouble7, factorialDouble4);
      assertNotSame(factorialDouble7, factorialDouble3);
      
      FactorialDouble factorialDouble8 = FactorialDouble.create();
      assertNotNull(factorialDouble8);
      assertFalse(factorialDouble8.equals((Object)factorialDouble3));
      assertFalse(factorialDouble8.equals((Object)factorialDouble5));
      assertFalse(factorialDouble8.equals((Object)factorialDouble2));
      assertFalse(factorialDouble8.equals((Object)factorialDouble0));
      assertFalse(factorialDouble8.equals((Object)factorialDouble6));
      assertFalse(factorialDouble8.equals((Object)factorialDouble1));
      assertFalse(factorialDouble8.equals((Object)factorialDouble4));
      assertFalse(factorialDouble8.equals((Object)factorialDouble7));
      assertNotSame(factorialDouble8, factorialDouble3);
      assertNotSame(factorialDouble8, factorialDouble5);
      assertNotSame(factorialDouble8, factorialDouble2);
      assertNotSame(factorialDouble8, factorialDouble0);
      assertNotSame(factorialDouble8, factorialDouble6);
      assertNotSame(factorialDouble8, factorialDouble1);
      assertNotSame(factorialDouble8, factorialDouble4);
      assertNotSame(factorialDouble8, factorialDouble7);
      
      FactorialDouble factorialDouble9 = factorialDouble1.withCache(0);
      assertNotNull(factorialDouble9);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble7));
      assertFalse(factorialDouble0.equals((Object)factorialDouble8));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble6));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble1.equals((Object)factorialDouble2));
      assertFalse(factorialDouble1.equals((Object)factorialDouble7));
      assertFalse(factorialDouble1.equals((Object)factorialDouble8));
      assertFalse(factorialDouble1.equals((Object)factorialDouble3));
      assertFalse(factorialDouble1.equals((Object)factorialDouble5));
      assertFalse(factorialDouble1.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble2));
      assertFalse(factorialDouble9.equals((Object)factorialDouble5));
      assertFalse(factorialDouble9.equals((Object)factorialDouble6));
      assertFalse(factorialDouble9.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble0));
      assertFalse(factorialDouble9.equals((Object)factorialDouble7));
      assertFalse(factorialDouble9.equals((Object)factorialDouble8));
      assertFalse(factorialDouble9.equals((Object)factorialDouble3));
      assertFalse(factorialDouble9.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble8);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble9);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble9);
      assertNotSame(factorialDouble1, factorialDouble6);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble7);
      assertNotSame(factorialDouble1, factorialDouble8);
      assertNotSame(factorialDouble1, factorialDouble3);
      assertNotSame(factorialDouble1, factorialDouble5);
      assertNotSame(factorialDouble1, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble2);
      assertNotSame(factorialDouble9, factorialDouble5);
      assertNotSame(factorialDouble9, factorialDouble6);
      assertNotSame(factorialDouble9, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble0);
      assertNotSame(factorialDouble9, factorialDouble7);
      assertNotSame(factorialDouble9, factorialDouble8);
      assertNotSame(factorialDouble9, factorialDouble3);
      assertNotSame(factorialDouble9, factorialDouble1);
      
      double double3 = factorialDouble0.value(2493);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble7));
      assertFalse(factorialDouble0.equals((Object)factorialDouble8));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble9));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble8);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble9);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(1);
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      int int0 = 136;
      double double0 = factorialDouble0.value(136);
      assertEquals(3.659042881952547E232, double0, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble0, factorialDouble1);
      
      // Undeclared exception!
      try { 
        factorialDouble0.withCache((-760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -760 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.FactorialDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      // Undeclared exception!
      try { 
        factorialDouble0.withCache((-192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -192 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.FactorialDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = FactorialDouble.create();
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = FactorialDouble.create();
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble2, factorialDouble1);
      assertNotSame(factorialDouble2, factorialDouble0);
      
      int int0 = 136;
      double double0 = factorialDouble2.value(136);
      assertEquals(3.659042881952547E232, double0, 0.01);
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble2, factorialDouble1);
      assertNotSame(factorialDouble2, factorialDouble0);
      
      FactorialDouble factorialDouble3 = FactorialDouble.create();
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble2);
      
      FactorialDouble factorialDouble4 = factorialDouble0.withCache(136);
      assertNotNull(factorialDouble4);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble2);
      
      FactorialDouble factorialDouble5 = FactorialDouble.create();
      assertNotNull(factorialDouble5);
      assertFalse(factorialDouble5.equals((Object)factorialDouble2));
      assertFalse(factorialDouble5.equals((Object)factorialDouble3));
      assertFalse(factorialDouble5.equals((Object)factorialDouble0));
      assertFalse(factorialDouble5.equals((Object)factorialDouble4));
      assertFalse(factorialDouble5.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble5, factorialDouble2);
      assertNotSame(factorialDouble5, factorialDouble3);
      assertNotSame(factorialDouble5, factorialDouble0);
      assertNotSame(factorialDouble5, factorialDouble4);
      assertNotSame(factorialDouble5, factorialDouble1);
      
      FactorialDouble factorialDouble6 = factorialDouble4.withCache(136);
      assertNotNull(factorialDouble6);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble6);
      assertNotSame(factorialDouble4, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble2);
      
      FactorialDouble factorialDouble7 = factorialDouble6.withCache(136);
      assertNotNull(factorialDouble7);
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble6));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertFalse(factorialDouble6.equals((Object)factorialDouble0));
      assertFalse(factorialDouble6.equals((Object)factorialDouble5));
      assertFalse(factorialDouble6.equals((Object)factorialDouble4));
      assertFalse(factorialDouble6.equals((Object)factorialDouble1));
      assertFalse(factorialDouble6.equals((Object)factorialDouble3));
      assertFalse(factorialDouble6.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble6));
      assertFalse(factorialDouble7.equals((Object)factorialDouble2));
      assertFalse(factorialDouble7.equals((Object)factorialDouble3));
      assertFalse(factorialDouble7.equals((Object)factorialDouble0));
      assertFalse(factorialDouble7.equals((Object)factorialDouble5));
      assertFalse(factorialDouble7.equals((Object)factorialDouble1));
      assertFalse(factorialDouble7.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble7);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble6);
      assertNotSame(factorialDouble4, factorialDouble2);
      assertNotSame(factorialDouble6, factorialDouble0);
      assertNotSame(factorialDouble6, factorialDouble7);
      assertNotSame(factorialDouble6, factorialDouble5);
      assertNotSame(factorialDouble6, factorialDouble4);
      assertNotSame(factorialDouble6, factorialDouble1);
      assertNotSame(factorialDouble6, factorialDouble3);
      assertNotSame(factorialDouble6, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble6);
      assertNotSame(factorialDouble7, factorialDouble2);
      assertNotSame(factorialDouble7, factorialDouble3);
      assertNotSame(factorialDouble7, factorialDouble0);
      assertNotSame(factorialDouble7, factorialDouble5);
      assertNotSame(factorialDouble7, factorialDouble1);
      assertNotSame(factorialDouble7, factorialDouble4);
      
      double double1 = factorialDouble4.value(1665);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble7));
      assertFalse(factorialDouble0.equals((Object)factorialDouble3));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble0.equals((Object)factorialDouble6));
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble4));
      assertFalse(factorialDouble0.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble3));
      assertFalse(factorialDouble4.equals((Object)factorialDouble1));
      assertFalse(factorialDouble4.equals((Object)factorialDouble5));
      assertFalse(factorialDouble4.equals((Object)factorialDouble7));
      assertFalse(factorialDouble4.equals((Object)factorialDouble0));
      assertFalse(factorialDouble4.equals((Object)factorialDouble6));
      assertFalse(factorialDouble4.equals((Object)factorialDouble2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble0, factorialDouble7);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble6);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble4);
      assertNotSame(factorialDouble0, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble3);
      assertNotSame(factorialDouble4, factorialDouble1);
      assertNotSame(factorialDouble4, factorialDouble5);
      assertNotSame(factorialDouble4, factorialDouble7);
      assertNotSame(factorialDouble4, factorialDouble0);
      assertNotSame(factorialDouble4, factorialDouble6);
      assertNotSame(factorialDouble4, factorialDouble2);
      
      FactorialDouble factorialDouble8 = FactorialDouble.create();
      assertNotNull(factorialDouble8);
      assertFalse(factorialDouble8.equals((Object)factorialDouble7));
      assertFalse(factorialDouble8.equals((Object)factorialDouble5));
      assertFalse(factorialDouble8.equals((Object)factorialDouble0));
      assertFalse(factorialDouble8.equals((Object)factorialDouble3));
      assertFalse(factorialDouble8.equals((Object)factorialDouble6));
      assertFalse(factorialDouble8.equals((Object)factorialDouble2));
      assertFalse(factorialDouble8.equals((Object)factorialDouble1));
      assertFalse(factorialDouble8.equals((Object)factorialDouble4));
      assertNotSame(factorialDouble8, factorialDouble7);
      assertNotSame(factorialDouble8, factorialDouble5);
      assertNotSame(factorialDouble8, factorialDouble0);
      assertNotSame(factorialDouble8, factorialDouble3);
      assertNotSame(factorialDouble8, factorialDouble6);
      assertNotSame(factorialDouble8, factorialDouble2);
      assertNotSame(factorialDouble8, factorialDouble1);
      assertNotSame(factorialDouble8, factorialDouble4);
      
      int int1 = 572;
      FactorialDouble factorialDouble9 = factorialDouble3.withCache(572);
      assertNotNull(factorialDouble9);
      assertFalse(factorialDouble3.equals((Object)factorialDouble5));
      assertFalse(factorialDouble3.equals((Object)factorialDouble7));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble6));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble8));
      assertFalse(factorialDouble3.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble3));
      assertFalse(factorialDouble9.equals((Object)factorialDouble2));
      assertFalse(factorialDouble9.equals((Object)factorialDouble6));
      assertFalse(factorialDouble9.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble8));
      assertFalse(factorialDouble9.equals((Object)factorialDouble5));
      assertFalse(factorialDouble9.equals((Object)factorialDouble0));
      assertFalse(factorialDouble9.equals((Object)factorialDouble1));
      assertFalse(factorialDouble9.equals((Object)factorialDouble7));
      assertNotSame(factorialDouble3, factorialDouble5);
      assertNotSame(factorialDouble3, factorialDouble7);
      assertNotSame(factorialDouble3, factorialDouble9);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble6);
      assertNotSame(factorialDouble3, factorialDouble2);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble8);
      assertNotSame(factorialDouble3, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble3);
      assertNotSame(factorialDouble9, factorialDouble2);
      assertNotSame(factorialDouble9, factorialDouble6);
      assertNotSame(factorialDouble9, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble8);
      assertNotSame(factorialDouble9, factorialDouble5);
      assertNotSame(factorialDouble9, factorialDouble0);
      assertNotSame(factorialDouble9, factorialDouble1);
      assertNotSame(factorialDouble9, factorialDouble7);
      
      FactorialDouble factorialDouble10 = factorialDouble9.withCache(0);
      assertNotNull(factorialDouble10);
      assertFalse(factorialDouble3.equals((Object)factorialDouble5));
      assertFalse(factorialDouble3.equals((Object)factorialDouble7));
      assertFalse(factorialDouble3.equals((Object)factorialDouble9));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble6));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble8));
      assertFalse(factorialDouble3.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble3));
      assertFalse(factorialDouble9.equals((Object)factorialDouble2));
      assertFalse(factorialDouble9.equals((Object)factorialDouble6));
      assertFalse(factorialDouble9.equals((Object)factorialDouble4));
      assertFalse(factorialDouble9.equals((Object)factorialDouble8));
      assertFalse(factorialDouble9.equals((Object)factorialDouble5));
      assertFalse(factorialDouble9.equals((Object)factorialDouble0));
      assertFalse(factorialDouble9.equals((Object)factorialDouble1));
      assertFalse(factorialDouble9.equals((Object)factorialDouble7));
      assertFalse(factorialDouble10.equals((Object)factorialDouble4));
      assertFalse(factorialDouble10.equals((Object)factorialDouble8));
      assertFalse(factorialDouble10.equals((Object)factorialDouble1));
      assertFalse(factorialDouble10.equals((Object)factorialDouble9));
      assertFalse(factorialDouble10.equals((Object)factorialDouble7));
      assertFalse(factorialDouble10.equals((Object)factorialDouble5));
      assertFalse(factorialDouble10.equals((Object)factorialDouble3));
      assertFalse(factorialDouble10.equals((Object)factorialDouble6));
      assertFalse(factorialDouble10.equals((Object)factorialDouble2));
      assertFalse(factorialDouble10.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble3, factorialDouble5);
      assertNotSame(factorialDouble3, factorialDouble7);
      assertNotSame(factorialDouble3, factorialDouble9);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble6);
      assertNotSame(factorialDouble3, factorialDouble10);
      assertNotSame(factorialDouble3, factorialDouble2);
      assertNotSame(factorialDouble3, factorialDouble1);
      assertNotSame(factorialDouble3, factorialDouble8);
      assertNotSame(factorialDouble3, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble3);
      assertNotSame(factorialDouble9, factorialDouble2);
      assertNotSame(factorialDouble9, factorialDouble6);
      assertNotSame(factorialDouble9, factorialDouble10);
      assertNotSame(factorialDouble9, factorialDouble4);
      assertNotSame(factorialDouble9, factorialDouble8);
      assertNotSame(factorialDouble9, factorialDouble5);
      assertNotSame(factorialDouble9, factorialDouble0);
      assertNotSame(factorialDouble9, factorialDouble1);
      assertNotSame(factorialDouble9, factorialDouble7);
      assertNotSame(factorialDouble10, factorialDouble4);
      assertNotSame(factorialDouble10, factorialDouble8);
      assertNotSame(factorialDouble10, factorialDouble1);
      assertNotSame(factorialDouble10, factorialDouble9);
      assertNotSame(factorialDouble10, factorialDouble7);
      assertNotSame(factorialDouble10, factorialDouble5);
      assertNotSame(factorialDouble10, factorialDouble3);
      assertNotSame(factorialDouble10, factorialDouble6);
      assertNotSame(factorialDouble10, factorialDouble2);
      assertNotSame(factorialDouble10, factorialDouble0);
      
      // Undeclared exception!
      try { 
        factorialDouble0.value((-2611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -2,611 is out of range [0, 20]
         //
         verifyException("org.apache.commons.numbers.combinatorics.Factorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(380);
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      double double0 = factorialDouble1.value(380);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      double double1 = factorialDouble1.value(0);
      assertEquals(1.0, double1, 0.01);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = factorialDouble0.withCache(380);
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble2, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble1);
      
      FactorialDouble factorialDouble3 = factorialDouble2.withCache(1619);
      assertNotNull(factorialDouble3);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble0.equals((Object)factorialDouble2));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertFalse(factorialDouble3.equals((Object)factorialDouble0));
      assertFalse(factorialDouble3.equals((Object)factorialDouble2));
      assertFalse(factorialDouble3.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble3);
      assertNotSame(factorialDouble2, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble1);
      assertNotSame(factorialDouble2, factorialDouble3);
      assertNotSame(factorialDouble3, factorialDouble0);
      assertNotSame(factorialDouble3, factorialDouble2);
      assertNotSame(factorialDouble3, factorialDouble1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      assertNotNull(factorialDouble0);
      
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(20);
      assertNotNull(factorialDouble1);
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble0);
      
      FactorialDouble factorialDouble2 = factorialDouble1.withCache(0);
      assertNotNull(factorialDouble2);
      assertFalse(factorialDouble0.equals((Object)factorialDouble1));
      assertFalse(factorialDouble1.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble0));
      assertFalse(factorialDouble2.equals((Object)factorialDouble1));
      assertNotSame(factorialDouble0, factorialDouble2);
      assertNotSame(factorialDouble0, factorialDouble1);
      assertNotSame(factorialDouble1, factorialDouble2);
      assertNotSame(factorialDouble1, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble0);
      assertNotSame(factorialDouble2, factorialDouble1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(3904);
      FactorialDouble factorialDouble2 = factorialDouble1.withCache(3904);
      assertNotSame(factorialDouble0, factorialDouble2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      double double0 = factorialDouble0.value(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      double double0 = factorialDouble0.value(2791);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      // Undeclared exception!
      try { 
        factorialDouble0.withCache((-540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -540 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.FactorialDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      FactorialDouble factorialDouble1 = factorialDouble0.withCache(2119);
      factorialDouble1.value(2493);
      factorialDouble1.withCache(2493);
      double double0 = factorialDouble1.value(21);
      assertEquals(5.109094217170944E19, double0, 0.01);
      
      factorialDouble1.withCache(21);
      factorialDouble1.withCache(2119);
      double double1 = factorialDouble0.value(2493);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FactorialDouble factorialDouble0 = FactorialDouble.create();
      double double0 = factorialDouble0.value(13);
      assertEquals(6.2270208E9, double0, 0.01);
  }
}
