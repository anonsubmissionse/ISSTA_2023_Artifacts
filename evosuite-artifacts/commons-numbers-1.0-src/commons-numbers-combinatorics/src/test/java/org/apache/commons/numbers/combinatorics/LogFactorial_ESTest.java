/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:23:21 GMT 2022
 */

package org.apache.commons.numbers.combinatorics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.combinatorics.LogFactorial;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LogFactorial_ESTest extends LogFactorial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      assertNotNull(logFactorial0);
      
      logFactorial0.value(3897);
      LogFactorial logFactorial1 = logFactorial0.withCache(741);
      int int0 = 5;
      LogFactorial logFactorial2 = logFactorial1.withCache(5);
      int int1 = 4446;
      logFactorial2.withCache(4446);
      logFactorial2.withCache(3897);
      LogFactorial.create();
      logFactorial1.value(0);
      LogFactorial logFactorial3 = LogFactorial.create();
      // Undeclared exception!
      logFactorial3.withCache(4446);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(21);
      logFactorial0.value(21);
      logFactorial1.withCache(0);
      LogFactorial logFactorial2 = logFactorial0.withCache(620);
      assertNotSame(logFactorial0, logFactorial2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(226);
      LogFactorial logFactorial2 = logFactorial1.withCache(0);
      assertNotSame(logFactorial0, logFactorial2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(1338);
      assertEquals(8298.688466476337, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      logFactorial0.withCache(0);
      double double0 = logFactorial0.value(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -1 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      int int0 = 3;
      logFactorial0.withCache(3);
      int int1 = (-2132);
      // Undeclared exception!
      try { 
        logFactorial0.value((-2132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -2,132 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(2596);
      assertEquals(17817.893328203838, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -560 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(5001);
      double double0 = logFactorial1.value(593);
      assertEquals(3197.5319548667308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(9);
      LogFactorial logFactorial2 = logFactorial1.withCache(9);
      assertNotSame(logFactorial2, logFactorial1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.value((-1990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -1,990 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(251);
      assertNotSame(logFactorial1, logFactorial0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.value((-1211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -1,211 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -2,172 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(48);
      logFactorial0.value(48);
      LogFactorial logFactorial2 = logFactorial1.withCache(0);
      assertNotSame(logFactorial1, logFactorial2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(13);
      assertEquals(22.552163853123425, double0, 0.01);
      
      LogFactorial logFactorial1 = logFactorial0.withCache(13);
      LogFactorial logFactorial2 = logFactorial1.withCache(1493);
      double double1 = logFactorial2.value(13);
      assertEquals(22.552163853123425, double1, 0.01);
  }
}
