/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:07:44 GMT 2022
 */

package org.apache.commons.numbers.quaternion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.quaternion.Quaternion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("d|5=/H[<qkh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start string: [
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      assertEquals(Double.NaN, quaternion1.getY(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, quaternion1.getX(), 0.01);
      assertEquals(Double.NaN, quaternion1.getScalarPart(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Quaternion.of((-3361.573832614), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size of array must be 3
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals((-119.4363348), quaternion2.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals((-118.4363348), quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
      assertEquals((-118.4363348), quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      assertEquals(Double.NaN, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
      assertEquals(1.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals((-1354.11), quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(1354.11, quaternion1.getY(), 0.01);
      assertEquals(1.0, quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      assertEquals(1.0, quaternion2.getScalarPart(), 0.01);
      assertEquals((-1.0), quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(1.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals((-1.0), quaternion2.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      assertEquals((-1.48644365380068), quaternion2.getZ(), 0.01);
      assertEquals(1.48644365380068, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(1.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(1.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertFalse(quaternion2.equals((Object)quaternion1));
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion3.getY(), 0.01);
      assertEquals(0.0, quaternion3.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion3.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getZ(), 0.01);
      assertEquals((-1099.04260545259), quaternion3.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      assertEquals(-0.0, quaternion2.getX(), 0.01);
      assertEquals((-1.0), quaternion2.getY(), 0.01);
      assertEquals(-0.0, quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[0.0 0.0 1.0 0.0]");
      assertEquals(1.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[-4315.30240731 -4315.30240731 -2253.5926053393355 -2253.5926053393355]");
      assertEquals((-2253.5926053393355), quaternion0.getY(), 0.01);
      assertEquals((-2253.5926053393355), quaternion0.getZ(), 0.01);
      assertEquals((-4315.30240731), quaternion0.getX(), 0.01);
      assertEquals((-4315.30240731), quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals((-1004.3305498944), quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
      assertEquals((-3566.234), quaternion0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(3637.49, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(Double.NaN, quaternion0.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5043610.688722, quaternion0.getScalarPart(), 0.01);
      assertEquals((-1004.3305498944), quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(1.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(5043610.688722, quaternion0.getScalarPart(), 0.01);
      assertEquals((-3566.234), quaternion0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      assertEquals(3637.49, quaternion0.getX(), 0.01);
      assertEquals(5043610.688722, quaternion0.getW(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2976.30989157503);
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      assertEquals((-2976.30989157503), quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of(-0.0, doubleArray0);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(-0.0, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of((-1.0), doubleArray0);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals((-1.0), quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.ONE.normalize();
      assertEquals(0.0, quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(1.0, quaternion0.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.getX(), 0.01);
      assertEquals(Double.NaN, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.negate();
      assertEquals(-0.0, quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getX(), 0.01);
      assertEquals((-1.0), quaternion1.getW(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion2 = quaternion1.inverse();
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion0);
      assertEquals(1.9827065602745595E-7, quaternion2.getX(), 0.01);
      assertTrue(quaternion3.equals((Object)quaternion2));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals((-2039.0), quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.I;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals((-1.0), quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      assertEquals(Double.NaN, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion0.getW(), 0.01);
      assertEquals(0.0, quaternion0.getX(), 0.01);
      assertEquals(Double.NaN, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = Quaternion.of((-144.672349), 1.0, (-2424.0), (-144.672349));
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      assertEquals(2767584.744194678, quaternion2.getX(), 0.01);
      assertEquals((-3268079.0163920005), quaternion2.getZ(), 0.01);
      assertEquals((-351890.27397599997), quaternion2.getScalarPart(), 0.01);
      assertEquals((-2723315.567064322), quaternion2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      assertEquals(2901640.5, quaternion1.getX(), 0.01);
      assertEquals(2901640.5, quaternion1.getZ(), 0.01);
      assertEquals((-1471750.3385651777), quaternion1.getScalarPart(), 0.01);
      assertEquals((-348515.6887409999), quaternion1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      assertEquals(Double.NaN, quaternion2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      assertEquals(1.0, quaternion2.getW(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.multiply((-1.0));
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals((-1.0), quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals((-1.0), quaternion1.getX(), 0.01);
      assertEquals(1.0, quaternion0.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getW(), 0.01);
      assertEquals(1274.3769715917, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2223.3221, 1.0, 1.0, 2223.3221);
      Quaternion quaternion1 = quaternion0.multiply(1.0);
      assertEquals(1.0, quaternion1.getX(), 0.01);
      assertTrue(quaternion1.equals((Object)quaternion0));
      assertEquals(1.0, quaternion1.getY(), 0.01);
      assertEquals(2223.3221, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.ZERO.isUnit((-3255.6511124785));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals(3.7496234815580996E-4, quaternion1.getZ(), 0.01);
      assertEquals(3.7496234815580996E-4, quaternion1.getX(), 0.01);
      assertEquals((-666.73361), quaternion0.getW(), 0.01);
      assertEquals(3.7496234815580996E-4, quaternion1.getY(), 0.01);
      assertEquals((-666.73361), quaternion0.getY(), 0.01);
      assertEquals((-3.7496234815580996E-4), quaternion1.getW(), 0.01);
      assertEquals((-666.73361), quaternion0.getX(), 0.01);
      assertEquals((-666.73361), quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = quaternion0.getZ();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, (-1.0), 0.0, (-1.0));
      double double0 = quaternion0.getZ();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-2352.92551877), (-2352.92551877), (-2352.92551877), (-2352.92551877));
      double double0 = quaternion0.getY();
      assertEquals((-2352.92551877), quaternion0.getX(), 0.01);
      assertEquals((-2352.92551877), quaternion0.getZ(), 0.01);
      assertEquals((-2352.92551877), double0, 0.01);
      assertEquals((-2352.92551877), quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      assertEquals(1588.019, quaternion0.getY(), 0.01);
      assertEquals((-1.0), quaternion0.getX(), 0.01);
      assertEquals(1.9827065602745595E-7, double0, 0.01);
      assertEquals((-3.148575689140646E-4), quaternion1.getY(), 0.01);
      assertEquals((-3.148575689140646E-4), quaternion1.getZ(), 0.01);
      assertEquals((-1.0), quaternion0.getScalarPart(), 0.01);
      assertEquals((-1.9827065602745595E-7), quaternion1.getScalarPart(), 0.01);
      assertEquals(1588.019, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      double double0 = quaternion0.getX();
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
      assertEquals((-318.138773), double0, 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      double double0 = quaternion0.getW();
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertEquals(5456.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      double double0 = quaternion0.getW();
      assertEquals((-460.4283906271185), quaternion0.getX(), 0.01);
      assertEquals((-460.4283906271185), double0, 0.01);
      assertEquals((-460.4283906271185), quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.getScalarPart();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-133.12593), 1.0, 1.0, 1147.677629778);
      double double0 = quaternion0.getScalarPart();
      assertEquals(1.0, quaternion0.getY(), 0.01);
      assertEquals(1.0, quaternion0.getX(), 0.01);
      assertEquals((-133.12593), double0, 0.01);
      assertEquals(1147.677629778, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = Quaternion.dot(quaternion0, quaternion1);
      assertEquals(0.0, quaternion1.getW(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      double double0 = quaternion1.dot(quaternion0);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      assertEquals(1.0, quaternion1.getY(), 0.01);
      assertEquals((-1387.91411), quaternion0.getScalarPart(), 0.01);
      assertEquals(5279.96, quaternion0.getX(), 0.01);
      assertEquals(4671.9141656, quaternion1.getZ(), 0.01);
      assertEquals((-2.2024060686988328E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      assertEquals(Double.NaN, quaternion2.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(Double.NaN, quaternion2.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, quaternion2.getY(), 0.01);
      assertEquals((-1.0), quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(Double.NaN, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals((-214.02679623042062), quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals((-318.138773), quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.divide((-1.0));
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals((-1.0), quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      Quaternion quaternion2 = quaternion1.conjugate();
      assertEquals(Double.NaN, quaternion2.getW(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals((-1.0), quaternion1.getY(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion0));
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      assertEquals(1100.04260545259, quaternion0.getZ(), 0.01);
      assertEquals(1100.04260545259, quaternion0.getX(), 0.01);
      assertEquals(1100.04260545259, quaternion0.getY(), 0.01);
      assertEquals((-1100.04260545259), quaternion1.getX(), 0.01);
      assertEquals((-1100.04260545259), quaternion1.getZ(), 0.01);
      assertEquals(2437.46, quaternion0.getW(), 0.01);
      assertEquals(2437.46, quaternion1.getW(), 0.01);
      assertEquals((-1100.04260545259), quaternion1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals((-1.0), quaternion2.getW(), 0.01);
      assertEquals((-1.0), quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      assertEquals((-2039.0), quaternion2.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(1.0, quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals((-2039.0), quaternion1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(2.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      assertEquals(1.0, quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals((-1.0), quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getW(), 0.01);
      assertEquals((-1.0), quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals(2.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(1.0, quaternion2.getZ(), 0.01);
      assertEquals((-1.0), quaternion2.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      assertEquals(1040.4707027508, quaternion2.getY(), 0.01);
      assertEquals((-1587.21524), quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals((-1587.21524), quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      assertEquals((-1018.669156), quaternion1.getY(), 0.01);
      assertEquals(Double.NaN, quaternion2.getZ(), 0.01);
      assertEquals((-1018.669156), quaternion1.getScalarPart(), 0.01);
      assertEquals((-1018.669156), quaternion2.getY(), 0.01);
      assertEquals((-1018.669156), quaternion2.getW(), 0.01);
      assertEquals(1.0, quaternion2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.I.add(quaternion0);
      Quaternion quaternion2 = quaternion0.K.subtract(quaternion1);
      Quaternion quaternion3 = quaternion0.K.add(quaternion2);
      assertEquals(2.0, quaternion3.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals((-1.0), quaternion3.getX(), 0.01);
      assertEquals(0.0, quaternion2.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(2.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.subtract((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.subtract((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.of((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        Quaternion.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size of array must be 3
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.of(1102.3785626691, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.multiply((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.I.multiply((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      // Undeclared exception!
      try { 
        quaternion0.equals((Quaternion) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.dot((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.dot((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.add((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      // Undeclared exception!
      try { 
        quaternion0.add((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals((-1.0), quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(1.0, quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.negate();
      quaternion1.negate();
      assertEquals((-1.0), quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion2.getW(), 0.01);
      assertEquals(-0.0, quaternion2.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
      assertEquals((-1.0), quaternion2.getZ(), 0.01);
      assertEquals((-5.054326739270985E-4), quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.normalize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = Quaternion.dot(quaternion0, quaternion0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = quaternion0.getW();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.J.norm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected end string: ]
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[5456.8 5456.8 0.0 5456.8]");
      assertEquals(5456.8, quaternion0.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        quaternion0.inverse();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      assertEquals(-0.0, quaternion2.getX(), 0.01);
      assertEquals((-1.0), quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion1.getW(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals((-2.0), quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(1.0, quaternion2.getX(), 0.01);
      assertEquals((-1.0), quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals((-6.108586228803206E-5), quaternion1.getX(), 0.01);
      assertEquals((-6.108586228803206E-5), quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(6.108586228803206E-5, quaternion1.getScalarPart(), 0.01);
      assertEquals(5456.8, quaternion0.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      assertEquals(0.0, quaternion2.getZ(), 0.01);
      assertEquals(0.0, quaternion2.getX(), 0.01);
      assertEquals(0.0, quaternion2.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getW(), 0.01);
      assertEquals((-1.0), quaternion2.getW(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      assertEquals((-460.4283906271185), quaternion0.getX(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getZ(), 0.01);
      assertEquals((-460.4283906271185), quaternion0.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getW(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      assertEquals(1.0, quaternion1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals((-1.0), quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getW(), 0.01);
      assertTrue(quaternion2.equals((Object)quaternion1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(1113.3168320847305);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(Double.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      assertEquals(3036.8025552, quaternion1.getZ(), 0.01);
      assertFalse(boolean0);
      assertEquals(2808.795978798271, quaternion1.getY(), 0.01);
      assertEquals(2808.795978798271, quaternion1.getX(), 0.01);
      assertEquals(2808.795978798271, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      assertEquals((-1.0), quaternion1.getZ(), 0.01);
      assertFalse(boolean0);
      assertEquals(-0.0, quaternion1.getW(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertEquals((-1.0), quaternion1.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(-0.0, quaternion1.getZ(), 0.01);
      assertEquals(-0.0, quaternion1.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertTrue(boolean0);
      assertEquals(5456.8, quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      boolean boolean0 = quaternion0.ZERO.equals(quaternion0, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.K;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertFalse(boolean0);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion1.getW(), 0.01);
      assertEquals(2.0, quaternion1.getY(), 0.01);
      assertEquals(0.0, quaternion1.getX(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      assertEquals(2905.607549151, quaternion0.getY(), 0.01);
      assertEquals(-0.0, quaternion1.getX(), 0.01);
      assertEquals(-0.0, quaternion1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(2905.607549151, quaternion0.getX(), 0.01);
      assertEquals((-4315.30240731), quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getZ(), 0.01);
      assertEquals(0.0, quaternion1.getScalarPart(), 0.01);
      assertEquals((-4315.30240731), quaternion0.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getScalarPart(), 0.01);
      assertFalse(boolean0);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.equals((Object) quaternion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getScalarPart(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      assertEquals(0.5, quaternion2.getX(), 0.01);
      assertEquals((-0.5), quaternion1.getY(), 0.01);
      assertEquals(0.5, quaternion2.getY(), 0.01);
      assertEquals((-666.73361), quaternion0.getY(), 0.01);
      assertEquals((-666.73361), quaternion0.getX(), 0.01);
      assertEquals((-0.5), quaternion1.getZ(), 0.01);
      assertEquals(0.5, quaternion2.getZ(), 0.01);
      assertEquals((-666.73361), quaternion0.getZ(), 0.01);
      assertEquals(0.5, quaternion2.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, (-1.0), (-1.0), (-1.0));
      // Undeclared exception!
      try { 
        quaternion0.normalize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.positivePolarForm();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.normalize();
      assertEquals(0.0, quaternion1.getW(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      Quaternion quaternion2 = quaternion1.normalize();
      assertEquals(-0.0, quaternion2.getX(), 0.01);
      assertEquals(-0.0, quaternion2.getY(), 0.01);
      assertEquals((-1.0), quaternion2.getZ(), 0.01);
      assertEquals(-0.0, quaternion2.getScalarPart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("')");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start string: [
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      assertEquals("[0.0 0.0 1.0 0.0]", string0);
      assertEquals(5456.8, quaternion0.getW(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getScalarPart();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      quaternion0.hashCode();
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(5456.8, quaternion0.getScalarPart(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double[] doubleArray0 = quaternion0.getVectorPart();
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      double double0 = quaternion0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.dot(quaternion0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      assertEquals(5456.8, quaternion0.getX(), 0.01);
      assertEquals(0.0, quaternion1.getY(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getW(), 0.01);
      assertEquals(0.0, quaternion0.getY(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getX(), 0.01);
      assertEquals(0.5773502691896257, quaternion1.getZ(), 0.01);
      assertEquals(5456.8, quaternion0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.normSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isUnit(1.0);
      assertTrue(boolean0);
  }
}
