/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:11:54 GMT 2022
 */

package org.apache.commons.numbers.angle;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.function.DoubleUnaryOperator;
import org.apache.commons.numbers.angle.Angle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Angle_ESTest extends Angle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleUnaryOperator doubleUnaryOperator0 = Angle.Turn.normalizer(1895.7699968871807);
      double double0 = doubleUnaryOperator0.applyAsDouble(1896.7699968871807);
      assertEquals(1895.7699968871807, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(1471.8);
      Angle.Rad angle_Rad0 = angle_Deg0.toRad();
      assertEquals(25.687755930852543, angle_Rad0.getAsDouble(), 0.01);
      assertEquals(1471.8, angle_Deg0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleUnaryOperator doubleUnaryOperator0 = Angle.Rad.normalizer(2184.99);
      assertNotNull(doubleUnaryOperator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of(0.0);
      Angle.Rad angle_Rad0 = Angle.Rad.of((-680.43544088));
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Angle.Rad angle_Rad1 = angle_Deg0.toRad();
      boolean boolean0 = angle_Rad1.equals(angle_Rad0);
      assertFalse(angle_Rad0.equals((Object)angle_Rad1));
      assertFalse(boolean0);
      assertEquals(0.0, angle_Rad1.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Angle.Turn angle_Turn1 = angle_Turn0.toTurn();
      assertEquals(1.0, angle_Turn1.getAsDouble(), 0.01);
      assertEquals(360.0, angle_Deg0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Angle.Rad angle_Rad0 = angle_Deg0.toRad();
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      assertEquals(0.0, angle_Turn0.getAsDouble(), 0.01);
      assertEquals(0.0, angle_Rad0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of((-1443.0014584944388));
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      assertEquals((-229.6608150082044), angle_Turn0.getAsDouble(), 0.01);
      assertEquals((-1443.0014584944388), angle_Rad0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Rad angle_Rad1 = angle_Rad0.toRad();
      assertEquals(1.5707963267948966, Angle.PI_OVER_TWO, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of((-3.141592653589793));
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      assertEquals((-3.141592653589793), angle_Turn0.getAsDouble(), 0.01);
      assertEquals((-19.739208802178716), angle_Rad0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      assertEquals(360.0, angle_Deg0.getAsDouble(), 0.01);
      assertEquals(1.0, angle_Turn0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of((-1694.988462919987));
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      assertEquals((-610195.8466511952), angle_Deg0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      double double0 = angle_Rad0.getAsDouble();
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of((-3.141592653589793));
      double double0 = angle_Turn0.getAsDouble();
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      double double0 = angle_Deg0.WITHIN_0_AND_360.applyAsDouble(6.283185307179586);
      assertEquals(6.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleUnaryOperator doubleUnaryOperator0 = Angle.Deg.normalizer((-809.953167421288));
      double double0 = doubleUnaryOperator0.applyAsDouble(6.283185307179586);
      assertEquals((-713.7168146928204), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of((-1694.988462919987));
      double double0 = angle_Turn0.WITHIN_0_AND_1.applyAsDouble((-197.28762177193));
      assertEquals(0.7123782280700084, double0, 0.01);
      assertEquals((-1694.988462919987), angle_Turn0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Angle.Turn angle_Turn1 = Angle.Turn.of(1.5707963267948966);
      boolean boolean0 = angle_Turn0.equals(angle_Turn1);
      assertEquals(1.5707963267948966, angle_Turn1.getAsDouble(), 0.01);
      assertFalse(angle_Turn1.equals((Object)angle_Turn0));
      assertFalse(boolean0);
      assertEquals(1.0, angle_Turn0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      boolean boolean0 = angle_Turn0.equals(angle_Turn0);
      assertEquals(6.283185307179586, angle_Rad0.getAsDouble(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, angle_Turn0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      boolean boolean0 = angle_Deg0.equals(angle_Rad0.WITHIN_0_AND_2PI);
      assertEquals(180.0, angle_Deg0.getAsDouble(), 0.01);
      assertFalse(boolean0);
      assertEquals(3.141592653589793, angle_Rad0.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      boolean boolean0 = angle_Rad0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Angle.Rad angle_Rad0 = angle_Deg0.toRad();
      double double0 = angle_Rad0.getAsDouble();
      assertEquals(0.0, angle_Deg0.getAsDouble(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Angle.Deg angle_Deg1 = angle_Deg0.toDeg();
      assertEquals(0.0, angle_Turn0.getAsDouble(), 0.01);
      assertEquals(0.0, angle_Deg1.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleUnaryOperator doubleUnaryOperator0 = Angle.Rad.normalizer(1.5707963267948966);
      double double0 = doubleUnaryOperator0.applyAsDouble(1.5707963267948966);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Rad angle_Rad1 = angle_Rad0.toRad();
      assertEquals(3.141592653589793, angle_Rad1.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Angle.Turn angle_Turn1 = angle_Deg0.toTurn();
      assertEquals(0.0, angle_Deg0.getAsDouble(), 0.01);
      assertEquals(0.0, angle_Turn1.getAsDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      angle_Turn0.hashCode();
      assertEquals(1.0, angle_Turn0.getAsDouble(), 0.01);
      assertEquals(6.283185307179586, angle_Rad0.getAsDouble(), 0.01);
  }
}
