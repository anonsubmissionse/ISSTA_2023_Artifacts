/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:27:16 GMT 2022
 */

package org.apache.commons.numbers.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.field.FP64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FP64_ESTest extends FP64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FP64 fP64_0 = FP64.of(72.4646499934488);
      FP64 fP64_1 = fP64_0.reciprocal();
      FP64 fP64_2 = fP64_0.subtract(fP64_1);
      assertEquals("72.45085016139151", fP64_2.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FP64 fP64_0 = FP64.of(653.0641922302804);
      FP64 fP64_1 = FP64.of(1553.02628248);
      FP64 fP64_2 = fP64_0.subtract(fP64_1);
      assertEquals((-899L), fP64_2.longValue());
      assertEquals(1553, fP64_1.intValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1663.639348899747);
      FP64 fP64_1 = fP64_0.reciprocal();
      FP64 fP64_2 = fP64_1.reciprocal();
      assertEquals("1663.6393488997467", fP64_2.toString());
      assertEquals(6.010918175633158E-4, fP64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-1.0));
      FP64 fP64_1 = fP64_0.reciprocal();
      assertEquals((-1.0), fP64_1.doubleValue(), 0.01);
      assertEquals("-1.0", fP64_0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-4407.56243));
      FP64 fP64_1 = fP64_0.pow(1);
      assertEquals((-4407.56243), fP64_1.doubleValue(), 0.01);
      assertEquals((-4407), fP64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FP64 fP64_0 = FP64.of(2835.164);
      FP64 fP64_1 = fP64_0.pow(5222);
      FP64 fP64_2 = fP64_1.reciprocal();
      assertEquals(0.0, fP64_2.doubleValue(), 0.01);
      assertEquals((byte)19, fP64_0.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      FP64 fP64_1 = fP64_0.negate();
      assertEquals(-0.0, fP64_1.doubleValue(), 0.01);
      assertEquals(0.0, fP64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-1853));
      FP64 fP64_1 = fP64_0.negate();
      assertFalse(fP64_1.equals((Object)fP64_0));
      assertEquals((byte)61, fP64_1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      FP64 fP64_1 = fP64_0.zero();
      FP64 fP64_2 = fP64_1.multiply(fP64_1);
      assertEquals("0.0", fP64_2.toString());
      assertEquals(3491, fP64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1644.1088012358);
      FP64 fP64_1 = fP64_0.multiply(fP64_0);
      assertEquals(1644.1088F, fP64_0.floatValue(), 0.01F);
      assertEquals(2703093.8F, fP64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1.0);
      FP64 fP64_1 = fP64_0.multiply(3531);
      assertEquals("3531.0", fP64_1.toString());
      assertEquals(1L, fP64_0.longValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-2519.01709));
      FP64 fP64_1 = fP64_0.multiply(1337);
      assertEquals((-3367925L), fP64_1.longValue());
      assertEquals((-2519), fP64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      fP64_0.longValue();
      assertEquals(0.0F, fP64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-2570.886701));
      long long0 = fP64_0.longValue();
      assertEquals((-2570L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      fP64_0.intValue();
      assertEquals("0.0", fP64_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-1.0));
      int int0 = fP64_0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      FP64 fP64_1 = fP64_0.zero();
      float float0 = fP64_1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-193.6));
      float float0 = fP64_0.floatValue();
      assertEquals((-193.6F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      double double0 = fP64_0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-2570.886701));
      double double0 = fP64_0.doubleValue();
      assertEquals((-2570.886701), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      FP64 fP64_1 = FP64.of(1.0);
      FP64 fP64_2 = fP64_0.subtract(fP64_1);
      FP64 fP64_3 = fP64_2.divide(fP64_1);
      FP64 fP64_4 = fP64_3.multiply(fP64_1);
      assertEquals(1, fP64_1.intValue());
      assertEquals((-1.0), fP64_4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FP64 fP64_0 = FP64.of(26.972329262064843);
      int int0 = fP64_0.compareTo(fP64_0);
      assertEquals(26, fP64_0.intValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FP64 fP64_0 = FP64.of(4088.205008);
      FP64 fP64_1 = fP64_0.multiply(0);
      int int0 = fP64_0.compareTo(fP64_1);
      assertEquals(1, int0);
      assertEquals("0.0", fP64_1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1663.639348899747);
      FP64 fP64_1 = fP64_0.reciprocal();
      int int0 = fP64_1.compareTo(fP64_0);
      assertEquals((-1), int0);
      assertEquals(6.0109183E-4F, fP64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-336.25071));
      byte byte0 = fP64_0.byteValue();
      assertEquals((byte) (-80), byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-2570.886701));
      FP64 fP64_1 = fP64_0.add(fP64_0);
      assertEquals((byte) (-21), fP64_1.byteValue());
      assertEquals((short) (-2570), fP64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      FP64 fP64_1 = fP64_0.add(fP64_0);
      assertEquals(0.0, fP64_0.doubleValue(), 0.01);
      assertEquals(0.0F, fP64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1786.657463175);
      FP64 fP64_1 = FP64.of(3966.308772361);
      FP64 fP64_2 = fP64_0.add(fP64_1);
      assertEquals(3966.308772361, fP64_1.doubleValue(), 0.01);
      assertEquals((byte)120, fP64_2.byteValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-2237.625));
      // Undeclared exception!
      try { 
        fP64_0.subtract((FP64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.field.FP64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FP64 fP64_0 = FP64.of(2882.72292386);
      // Undeclared exception!
      try { 
        fP64_0.multiply((FP64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.field.FP64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FP64 fP64_0 = FP64.of(1.0);
      // Undeclared exception!
      try { 
        fP64_0.divide((FP64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.field.FP64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      boolean boolean0 = fP64_0.equals(fP64_0);
      assertTrue(boolean0);
      assertEquals((short)3859, fP64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      boolean boolean0 = fP64_0.equals("~N");
      assertFalse(boolean0);
      assertEquals(3859.964252455, fP64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      FP64 fP64_1 = fP64_0.pow(0);
      assertEquals(0.0F, fP64_0.floatValue(), 0.01F);
      assertEquals(1L, fP64_1.longValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-1853));
      FP64 fP64_1 = fP64_0.pow((-1853));
      assertEquals("-0.0", fP64_1.toString());
      assertEquals((-1853), fP64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FP64 fP64_0 = FP64.of(72.4646499934488);
      fP64_0.one();
      assertEquals(72, fP64_0.intValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      byte byte0 = fP64_0.byteValue();
      assertEquals((byte)19, byte0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FP64 fP64_0 = FP64.of((-1853));
      String string0 = fP64_0.toString();
      assertEquals("-1853.0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      int int0 = fP64_0.intValue();
      assertEquals(3491, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      FP64 fP64_1 = fP64_0.divide(fP64_0);
      assertEquals(1, fP64_1.intValue());
      assertEquals((short)3859, fP64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FP64 fP64_0 = FP64.of(72.4646499934488);
      FP64 fP64_1 = fP64_0.reciprocal();
      byte byte0 = fP64_1.byteValue();
      assertEquals("0.013799832057291458", fP64_1.toString());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      long long0 = fP64_0.longValue();
      assertEquals(3859L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      FP64 fP64_1 = fP64_0.multiply(fP64_0);
      assertEquals("1.2191832083216839E7", fP64_1.toString());
      assertEquals((short)3491, fP64_0.shortValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FP64 fP64_0 = FP64.of(0.0);
      // Undeclared exception!
      try { 
        fP64_0.add((FP64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.field.FP64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      FP64 fP64_1 = fP64_0.zero();
      FP64 fP64_2 = fP64_1.divide(fP64_0);
      assertEquals("0.0", fP64_2.toString());
      assertEquals(3491L, fP64_0.longValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      double double0 = fP64_0.doubleValue();
      assertEquals(3859.964252455, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      fP64_0.hashCode();
      assertEquals(3859.9644F, fP64_0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      FP64 fP64_1 = fP64_0.negate();
      boolean boolean0 = fP64_1.equals(fP64_0);
      assertFalse(boolean0);
      assertEquals((-3859.9644F), fP64_1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3859.964252455);
      // Undeclared exception!
      try { 
        fP64_0.compareTo((FP64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.field.FP64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FP64 fP64_0 = FP64.of(72.4646499934488);
      FP64 fP64_1 = fP64_0.subtract(fP64_0);
      assertEquals(0.0, fP64_1.doubleValue(), 0.01);
      assertEquals(72L, fP64_0.longValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FP64 fP64_0 = FP64.of(3491.6804096619207);
      float float0 = fP64_0.floatValue();
      assertEquals(3491.6804F, float0, 0.01F);
  }
}
