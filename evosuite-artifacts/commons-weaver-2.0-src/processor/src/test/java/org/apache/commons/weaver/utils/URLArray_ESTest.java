/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 16:40:55 GMT 2022
 */

package org.apache.commons.weaver.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import org.apache.commons.weaver.utils.URLArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class URLArray_ESTest extends URLArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      URL[] uRLArray0 = URLArray.fromPaths(linkedHashSet0);
      assertEquals(1, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      URL[] uRLArray0 = URLArray.fromPaths(hashSet0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      MockFile mockFile0 = new MockFile(" g", " g");
      arrayList0.add((File) mockFile0);
      URL[] uRLArray0 = URLArray.fromFiles(arrayList0);
      assertEquals(1, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = stack0.subList(0, 0);
      stack0.add("*,.v@");
      // Undeclared exception!
      try { 
        URLArray.fromPaths(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      List<File> list0 = arrayList0.subList(0, 0);
      MockFile mockFile0 = new MockFile(" g", " g");
      arrayList0.add((File) mockFile0);
      // Undeclared exception!
      try { 
        URLArray.fromFiles(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLArray.fromFiles((Iterable<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.weaver.utils.URLArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLArray.fromPaths((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.weaver.utils.URLArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayList<File> arrayList0 = new ArrayList<File>();
      URL[] uRLArray0 = URLArray.fromFiles(arrayList0);
      assertEquals(0, uRLArray0.length);
  }
}
