/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:03:23 GMT 2022
 */

package org.apache.commons.weaver.privilizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.weaver.privilizer.AccessLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccessLevel_ESTest extends AccessLevel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AccessLevel[] accessLevelArray0 = AccessLevel.values();
      assertEquals(4, accessLevelArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.valueOf("PROTECTED");
      assertEquals(AccessLevel.PROTECTED, accessLevel0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.parse("PACKAGE");
      int int0 = accessLevel0.merge(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.defaultValue();
      int int0 = accessLevel0.merge(3);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.PRIVATE;
      String string0 = accessLevel0.toString();
      assertEquals("private", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.of(1232);
      assertEquals(AccessLevel.PACKAGE, accessLevel0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.of((-30));
      int int0 = accessLevel0.merge((-30));
      assertEquals((-30), int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessLevel.of((-3073));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3073 seems to declare multiple access modifiers: [public, protected, private]
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.parse("");
      assertEquals(AccessLevel.PRIVATE, accessLevel0.defaultValue());
  }
}
