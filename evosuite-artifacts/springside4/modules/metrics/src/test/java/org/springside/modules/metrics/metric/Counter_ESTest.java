/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:32:39 GMT 2022
 */

package org.springside.modules.metrics.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.springside.modules.metrics.metric.Counter;
import org.springside.modules.metrics.metric.CounterMetric;
import org.springside.modules.metrics.utils.Clock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Counter_ESTest extends Counter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals(0L, counterMetric0.latestCount);
      
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
      assertEquals(0L, counterMetric1.latestRate);
      assertEquals(0L, counterMetric1.avgRate);
      assertEquals(0L, counterMetric1.totalCount);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals((-907698359096L), counterMetric0.latestRate);
      assertEquals((-907698359096L), counterMetric0.avgRate);
      assertEquals((-1392409282854L), counterMetric0.totalCount);
      assertEquals((-1392409282854L), counterMetric0.latestCount);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
      assertEquals(0L, counterMetric0.latestCount);
      assertEquals(0L, counterMetric0.avgRate);
      assertEquals(0L, counterMetric0.totalCount);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec(1L);
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = counter0.clock;
      Clock.MockClock clock_MockClock0 = new Clock.MockClock();
      Counter.clock = (Clock) clock_MockClock0;
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Counter.clock = null;
      Counter counter0 = null;
      try {
        counter0 = new Counter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.reset();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Counter counter0 = new Counter();
      String string0 = counter0.toString();
      assertEquals("Counter [latestMetric=CounterMetric [totalCount=0, avgRate=0, latestCount=0, latestRate=0], counter=0, totalCount=0, startTime=1392409281320, lastReportTime=1392409281320]", string0);
  }
}
