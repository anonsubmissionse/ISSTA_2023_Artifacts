/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:47:48 GMT 2022
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.Answers;
import org.springside.modules.utils.collection.CollectionUtil;
import org.springside.modules.utils.collection.type.Pair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionUtil_ESTest extends CollectionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(281);
      arrayList0.add(integer0);
      arrayList0.add((Integer) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(281, 281).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) arrayList0, (Comparator<? super Integer>) comparator0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-4)).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) linkedList0, (Comparator<? super Integer>) comparator0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0, 0).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) linkedList0, (Comparator<? super Integer>) comparator0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-9), (-9)).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      priorityQueue0.add("aVfLRqK#B`qJKmqp");
      priorityQueue0.add("aVfLRqK#B`qJKmqp");
      priorityQueue0.add("org.springside.modules.utils.collection.CollectionUtil");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) priorityQueue0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-9), (-9)).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      priorityQueue0.add("aVfLRqK#B`qJKmqp");
      priorityQueue0.add("sL=k]&ia");
      priorityQueue0.add("org.springside.modules.utils.collection.CollectionUtil");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) priorityQueue0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = CollectionUtil.getLast((Collection<Integer>) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      arrayList0.add((Object) null);
      Object object0 = CollectionUtil.getLast((Collection<Object>) arrayList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add((String) null);
      Object object0 = CollectionUtil.min((Collection<?>) linkedHashSet0, (Comparator<? super Object>) comparator0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer1 = CollectionUtil.min((Collection<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = CollectionUtil.min((Collection<? extends Integer>) linkedList0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("=(<A`g~\u0001yMk0w}M");
      String string0 = CollectionUtil.min((Collection<? extends String>) priorityQueue0);
      assertEquals("=(<A`g~\u0001yMk0w}M", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = CollectionUtil.max((Collection<? extends String>) linkedHashSet0, (Comparator<? super String>) comparator0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      stack0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = CollectionUtil.max((Collection<? extends Locale.FilteringMode>) stack0, (Comparator<? super Locale.FilteringMode>) null);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      String string0 = CollectionUtil.max((Collection<? extends String>) linkedHashSet0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = CollectionUtil.max((Collection<? extends Locale.FilteringMode>) linkedList0);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      boolean boolean0 = CollectionUtil.elementsEqual(linkedList0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) null, 928, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) vector0, 1073741823, (Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) hashSet0, (-1), (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -1
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger((String) null);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) linkedList0, 3114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<String>) arrayDeque0, (-911));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -911
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TreeSet<String> treeSet0 = new TreeSet<String>(set0);
      List<String> list0 = CollectionUtil.topN((Iterable<String>) treeSet0, 1277);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) list0, (Comparator<? super String>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(0);
      priorityQueue0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtil.bottomN((Iterable<Integer>) priorityQueue0, 0, (Comparator<? super Integer>) comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends Integer>) list0, (Comparator<? super Integer>) comparator1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<?>) null, (Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.CollectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) hashSet0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>(8, 8);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      hashSet0.add(comparable0);
      List<Comparable<Object>> list0 = CollectionUtil.topN((Iterable<Comparable<Object>>) hashSet0, 0);
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends Comparable<Object>>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.CollectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.FilteringMode> list0 = CollectionUtil.topN((Iterable<Locale.FilteringMode>) enumSet0, 0, (Comparator<? super Locale.FilteringMode>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Locale.FilteringMode>) list0, (Comparator<? super Locale.FilteringMode>) comparator1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Integer>) null, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.FilteringMode> list0 = CollectionUtil.topN((Iterable<Locale.FilteringMode>) enumSet0, 0, (Comparator<? super Locale.FilteringMode>) comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Locale.FilteringMode>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends Locale.FilteringMode>) null, (Comparator<? super Locale.FilteringMode>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(2);
      arrayDeque0.add(",g");
      List<String> list0 = CollectionUtil.topN((Iterable<String>) arrayDeque0, 0);
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) list0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.elementsEqual((Iterable<?>) null, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Integer>) null, (-2006), (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_SMART_NULLS;
      EnumSet<Answers> enumSet0 = EnumSet.of(answers0, answers0);
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Answers>) enumSet0, 0, (Comparator<? super Answers>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) treeSet0, (-1759), (Comparator<? super String>) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -1759
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) null, (-3385));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Ordering", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Integer>) linkedList0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Collection<String> collection0 = hashMap0.values();
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) collection0, (-3406));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -3406
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      boolean boolean0 = CollectionUtil.isEmpty(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = CollectionUtil.isEmpty(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PriorityQueue<Comparable<Object>> priorityQueue0 = new PriorityQueue<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      priorityQueue0.add(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparable1).compareTo(any());
      priorityQueue0.add(comparable1);
      Pair<Comparable<Object>, Comparable<Object>> pair0 = CollectionUtil.minAndMax((Collection<? extends Comparable<Object>>) priorityQueue0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("hhGsSo)Kz3E.");
      Object object0 = CollectionUtil.getLast((Collection<Object>) arrayDeque0);
      assertEquals("hhGsSo)Kz3E.", object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) enumSet0);
      Object object0 = CollectionUtil.getFirst((Collection<Object>) vector0);
      assertTrue(vector0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("=(<A`g~\u0001yMk0w}M");
      boolean boolean0 = CollectionUtil.isNotEmpty(priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      boolean boolean0 = CollectionUtil.isNotEmpty(stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isNotEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-35));
      treeSet0.add(integer0);
      Integer integer1 = CollectionUtil.getFirst((Collection<Integer>) treeSet0);
      assertEquals((-35), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = CollectionUtil.getFirst((Collection<String>) linkedHashSet0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends String>) priorityQueue0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) linkedHashSet0, (Comparator<? super String>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CollectionUtil collectionUtil0 = new CollectionUtil();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      List<Integer> list0 = CollectionUtil.bottomN((Iterable<Integer>) priorityQueue0, 2);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(2);
      List<String> list1 = CollectionUtil.topN((Iterable<String>) arrayDeque0, 0);
      boolean boolean0 = CollectionUtil.elementsEqual(list1, list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<?>) linkedHashSet0, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) linkedHashSet0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }
}
