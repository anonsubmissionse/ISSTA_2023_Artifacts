/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:58:15 GMT 2022
 */

package org.springside.modules.utils.collection.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.SortedArrayList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortedArrayList_ESTest extends SortedArrayList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(""));
      
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(sortedArrayList0.contains(""));
      
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertEquals(4, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(""));
      assertTrue(sortedArrayList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      assertFalse(sortedArrayList0.contains(1021));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(1021));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(1021));
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(1021));
      
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(2, sortedArrayList0.size());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(sortedArrayList0.contains(0));
      assertFalse(sortedArrayList0.contains(1021));
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(1021));
      
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(boolean3);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(3, sortedArrayList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(sortedArrayList0.contains(""));
      assertFalse(sortedArrayList0.contains(1021));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      assertFalse(sortedArrayList0.contains(0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(177));
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(177));
      
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(2, sortedArrayList0.size());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(sortedArrayList0.contains(177));
      assertTrue(sortedArrayList0.contains(0));
      assertTrue(linkedList0.contains(0));
      assertFalse(linkedList0.contains(177));
      
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(boolean3);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(3, sortedArrayList0.size());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(sortedArrayList0.contains(177));
      assertTrue(sortedArrayList0.contains(0));
      
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(1, int0);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(3, sortedArrayList0.size());
      assertFalse(sortedArrayList0.contains(177));
      assertTrue(sortedArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      // Undeclared exception!
      try { 
        sortedArrayList0.findInsertionPoint("%", (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertTrue(sortedArrayList1.isEmpty());
      assertEquals(0, sortedArrayList1.size());
      assertNotNull(sortedArrayList1);
      
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      assertEquals((-886), int0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertTrue(sortedArrayList1.isEmpty());
      assertEquals(0, sortedArrayList1.size());
      assertFalse(sortedArrayList0.contains((-886)));
      assertFalse(sortedArrayList1.contains("org.springside.modules.utils.collection.type.SortedArrayList"));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      assertFalse(sortedArrayList0.contains((-2249)));
      
      boolean boolean0 = sortedArrayList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      assertTrue(sortedArrayList0.contains(""));
      assertFalse(sortedArrayList0.contains((-2249)));
      
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(1, int0);
      assertEquals(1, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      assertTrue(sortedArrayList0.contains(""));
      assertFalse(sortedArrayList0.contains((-2249)));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      assertFalse(sortedArrayList0.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = sortedArrayList0.compare(object0, object0);
      assertEquals(0, int0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertFalse(sortedArrayList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      int int0 = sortedArrayList0.compare("vC<-JU-}J4~DZeQ;B", "");
      assertEquals(17, int0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertFalse(sortedArrayList0.contains("vC<-JU-}J4~DZeQ;B"));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      int int0 = sortedArrayList0.compare("?wi%F|XwMw>>Xk(ko", "org.springside.modules.utils.collection.type.SortedArrayList");
      assertEquals((-48), int0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertFalse(sortedArrayList0.contains("org.springside.modules.utils.collection.type.SortedArrayList"));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.isEmpty());
      assertNotNull(sortedArrayList1);
      
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertFalse(boolean0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(1, sortedArrayList0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        sortedArrayList0.findInsertionPoint(integer0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      assertTrue(boolean0);
      assertEquals(1, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        sortedArrayList0.findInsertionPoint((Object) "0k).q\"WG", 0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        sortedArrayList0.findInsertionPoint((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      assertTrue(boolean0);
      assertEquals(1, sortedArrayList0.size());
      assertFalse(sortedArrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        sortedArrayList0.findInsertionPoint((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.isEmpty());
      assertTrue(sortedArrayList1.equals((Object)sortedArrayList0));
      assertNotNull(sortedArrayList1);
      
      // Undeclared exception!
      try { 
        sortedArrayList1.compare("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, linkedList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.isEmpty());
      assertNotNull(sortedArrayList1);
      
      // Undeclared exception!
      try { 
        sortedArrayList1.compare(function1, "org.springside.modules.utils.collection.type.SortedArrayList");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      // Undeclared exception!
      try { 
        sortedArrayList0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertTrue(sortedArrayList1.isEmpty());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.equals((Object)sortedArrayList0));
      assertNotNull(sortedArrayList1);
      
      boolean boolean0 = sortedArrayList1.add("");
      assertTrue(boolean0);
      assertEquals(0, sortedArrayList0.size());
      assertTrue(sortedArrayList0.isEmpty());
      assertFalse(sortedArrayList1.isEmpty());
      assertEquals(1, sortedArrayList1.size());
      assertFalse(sortedArrayList0.equals((Object)sortedArrayList1));
      assertFalse(sortedArrayList1.equals((Object)sortedArrayList0));
      assertNotSame(sortedArrayList0, sortedArrayList1);
      assertNotSame(sortedArrayList1, sortedArrayList0);
      assertFalse(sortedArrayList0.contains(""));
      assertTrue(sortedArrayList1.contains(""));
      
      // Undeclared exception!
      try { 
        sortedArrayList1.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertEquals(0, sortedArrayList1.size());
      assertTrue(sortedArrayList1.isEmpty());
      assertNotNull(sortedArrayList1);
      
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      assertTrue(boolean0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertEquals(1, sortedArrayList1.size());
      assertFalse(sortedArrayList1.isEmpty());
      
      // Undeclared exception!
      try { 
        sortedArrayList1.add((Object) sortedArrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Object> list0 = linkedList0.subList(0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      SortedArrayList<Object> sortedArrayList0 = null;
      try {
        sortedArrayList0 = new SortedArrayList<Object>(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = null;
      try {
        sortedArrayList0 = new SortedArrayList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
      assertEquals(0, sortedArrayList0.size());
      assertNotNull(sortedArrayList0);
      assertFalse(sortedArrayList0.contains((-2249)));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains((-2249)));
      
      Integer integer0 = new Integer((-2249));
      assertEquals((-2249), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean1);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(1, sortedArrayList0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(sortedArrayList0.contains((-2249)));
      assertTrue(linkedList0.contains(integer0));
      
      boolean boolean2 = sortedArrayList0.add((Object) "");
      assertTrue(boolean2);
      assertFalse(sortedArrayList0.isEmpty());
      assertEquals(2, sortedArrayList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(sortedArrayList0.contains((-2249)));
      
      SortedArrayList<Object> sortedArrayList1 = null;
      try {
        sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Stream<Object> stream0 = sortedArrayList0.stream();
      boolean boolean0 = sortedArrayList0.add((Object) "");
      assertTrue(boolean0);
      
      int int0 = sortedArrayList0.findInsertionPoint((Object) stream0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      assertTrue(sortedArrayList0.contains(""));
      
      int int0 = sortedArrayList0.findInsertionPoint(" o/crK", 0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(sortedArrayList0);
      linkedList0.addFirst(sortedArrayList0);
      // Undeclared exception!
      try { 
        sortedArrayList1.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.add((-1196), (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      Comparator<Object> comparator1 = sortedArrayList0.getComparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        sortedArrayList0.set(47, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      int int0 = sortedArrayList0.findInsertionPoint(sortedArrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.addAll((-1), (Collection<?>) sortedArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }
}
