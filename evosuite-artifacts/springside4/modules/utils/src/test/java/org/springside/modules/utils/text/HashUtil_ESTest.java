/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:00:45 GMT 2022
 */

package org.springside.modules.utils.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.text.HashUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashUtil_ESTest extends HashUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("");
      assertEquals((-1857666609), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      int int1 = HashUtil.murmur32AsInt(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);
      assertEquals(2054626833, int1);
      
      // Undeclared exception!
      try { 
        HashUtil.sha1((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.murmur32AsInt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      
      long long0 = HashUtil.crc32AsLong(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, long0);
      
      int int1 = HashUtil.murmur32AsInt("");
      assertFalse(int1 == int0);
      assertEquals((-1857666609), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1("com.google.common.io.PatternFilenameFilter", byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long long0 = HashUtil.crc32AsLong("com.google.common.io.PatternFilenameFilter");
      assertEquals(52104355L, long0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HashUtil.md5File((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = HashUtil.murmur128AsLong(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-7671570477724260045L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("fe%t,:B:OX[");
      assertEquals((-1177565927), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1("fe%t,:B:OX[", byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      try { 
        HashUtil.sha1File(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null, (-1526));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong("SHA-1");
      assertEquals(3885862902L, long0);
      
      long long1 = HashUtil.crc32AsLong("48= W");
      assertFalse(long1 == long0);
      assertEquals(3945049891L, long1);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-28), (byte)67, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long long2 = HashUtil.crc32AsLong("SHA-1");
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(3885862902L, long2);
      
      byte[] byteArray2 = HashUtil.sha1("SHA-1", byteArray0, 0);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-28), (byte)67, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      // Undeclared exception!
      try { 
        HashUtil.murmur32AsInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)101, (byte) (-73), (byte)124, (byte)0, (byte)0, (byte) (-116), (byte) (-36)}, byteArray0);
      assertEquals(1996318438L, long0);
      
      byte[] byteArray1 = HashUtil.sha1("", byteArray0, 8192);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-106), (byte)101, (byte) (-73), (byte)124, (byte)0, (byte)0, (byte) (-116), (byte) (-36)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-106), (byte)101, (byte) (-73), (byte)124, (byte)0, (byte)0, (byte) (-116), (byte) (-36)}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertEquals(20, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-106), (byte)101, (byte) (-73), (byte)124, (byte)0, (byte)0, (byte) (-116), (byte) (-36)}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("");
      assertEquals((-1857666609), int0);
      
      int int1 = HashUtil.crc32AsInt("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-841), 1);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-23), (byte)119, (byte)101, (byte)1, (byte)1, (byte)0, (byte)39}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        HashUtil.md5File(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      int int0 = HashUtil.murmur32AsInt("UTF-8");
      assertEquals(30273756, int0);
      
      long long0 = HashUtil.crc32AsLong(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1640391928L, long0);
      
      // Undeclared exception!
      HashUtil.sha1("bGsok", byteArray1, 1318007700);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("");
      assertEquals((-1857666609), int0);
      
      long long0 = HashUtil.murmur128AsLong("SHA-1");
      assertEquals((-2881193631798060433L), long0);
      
      byte[] byteArray0 = HashUtil.sha1("SHA-1");
      assertNotNull(byteArray0);
      assertEquals(20, byteArray0.length);
      
      int int1 = HashUtil.crc32AsInt(byteArray0);
      assertEquals(20, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1519465295, int1);
      
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int2 = HashUtil.crc32AsInt(byteArray0);
      assertEquals(20, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1519465295, int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      assertNotNull(byteArray0);
      assertEquals(61, byteArray0.length);
      
      long long0 = HashUtil.crc32AsLong("GxcXh9");
      assertEquals(3542122043L, long0);
      
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      assertNotNull(byteArray1);
      assertEquals(61, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = HashUtil.sha1("GxcXh9", byteArray0);
      assertNotNull(byteArray2);
      assertEquals(61, byteArray0.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int int0 = HashUtil.murmur32AsInt("GxcXh9");
      assertEquals(1417515252, int0);
      
      byte[] byteArray3 = HashUtil.sha1("GxcXh9", byteArray1);
      assertNotNull(byteArray3);
      assertEquals(61, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = HashUtil.crc32AsInt(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1348177711), int1);
      
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      long long0 = HashUtil.crc32AsLong(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2946789585L, long0);
      
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2314947834100387612L, long1);
      
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertEquals(20, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1("com.google.common.io.PatternFilenameFilter", byteArray0, (int) (byte)1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-38), (byte) (-80), (byte) (-112), (byte)1, (byte) (-49)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long long0 = HashUtil.crc32AsLong("com.google.common.io.PatternFilenameFilter");
      assertEquals(52104355L, long0);
      
      long long1 = HashUtil.crc32AsLong("k^6.a(L7my");
      assertFalse(long1 == long0);
      assertEquals(2538104310L, long1);
      
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-38), (byte) (-80), (byte) (-112), (byte)1, (byte) (-49)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1318924752, int0);
      
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-38), (byte) (-80), (byte) (-112), (byte)1, (byte) (-49)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(6, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-38), (byte) (-80), (byte) (-112), (byte)1, (byte) (-49)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(16, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-38), (byte) (-80), (byte) (-112), (byte)1, (byte) (-49)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        HashUtil.sha1((String) null, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong("CXr'jv#!jcV6N");
      assertEquals(5172716780556195978L, long0);
      
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = HashUtil.crc32AsInt(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1207737567), int0);
      
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur128AsLong((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      long long0 = HashUtil.crc32AsLong("");
      assertEquals(0L, long0);
      
      String string1 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        HashUtil.sha1((String) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = HashUtil.sha1("", (byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(20, byteArray0.length);
      
      // Undeclared exception!
      try { 
        HashUtil.crc32AsLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HashUtil.crc32AsLong((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("", byteArray0, (-1));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)1, (byte)81, (byte)1}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long long0 = HashUtil.crc32AsLong("");
      assertEquals(0L, long0);
      
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)1, (byte)81, (byte)1}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9020581274274613265L, long1);
      
      // Undeclared exception!
      try { 
        HashUtil.crc32AsInt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong("|)/y,");
      assertEquals((-1784004294984664032L), long0);
      
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1File((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte)62, (byte)36, (byte)40, (byte)70, (byte)0, (byte) (-1), (byte) (-5)}, byteArray0);
      assertEquals(2123, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte)62, (byte)36, (byte)40, (byte)70, (byte)0, (byte) (-1), (byte) (-5)}, byteArray0);
      assertEquals(2123, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        HashUtil.sha1File(bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.crc32AsInt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.generateSalt((-784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBytes argument must be a positive integer (1 or larger)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)17, (byte)14, (byte)42}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = HashUtil.crc32AsInt("US-ASCII");
      assertEquals(833038429, int0);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-88)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals((-1912428646), int1);
      
      long long0 = HashUtil.crc32AsLong("\"{yG");
      assertEquals(1704864148L, long0);
      
      // Undeclared exception!
      try { 
        HashUtil.murmur128AsLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong("");
      assertEquals((-6824462556276937778L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1File((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.generateSalt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBytes argument must be a positive integer (1 or larger)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur128AsLong((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur32AsInt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong("x+JPpFZc");
      assertEquals(3392801337L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("q8v^J8Yr}&L$veZ-&");
      assertEquals((-864170427), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        HashUtil.md5File(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      // Undeclared exception!
      try { 
        HashUtil.md5File((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.HashUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      assertNotNull(byteArray0);
      assertEquals(2122, byteArray0.length);
      
      long long0 = HashUtil.crc32AsLong("&TYn8%");
      assertEquals(91480125L, long0);
      
      HashUtil hashUtil0 = new HashUtil();
      assertEquals(1318007700, HashUtil.MURMUR_SEED);
      assertNotNull(hashUtil0);
      
      int int0 = HashUtil.crc32AsInt(byteArray0);
      assertEquals(2122, byteArray0.length);
      assertEquals(366384135, int0);
      
      long long1 = HashUtil.murmur128AsLong("( Do\"Bfk5b");
      assertFalse(long1 == long0);
      assertEquals(3456389703344733902L, long1);
      
      int int1 = HashUtil.crc32AsInt("( Do\"Bfk5b");
      assertFalse(int1 == int0);
      assertEquals(991610765, int1);
      
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2122, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = HashUtil.sha1("( Do\"Bfk5b");
      assertNotNull(byteArray2);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      assertEquals(2122, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-3040745677862272188L), long2);
      
      byte[] byteArray3 = HashUtil.sha1("", byteArray1);
      assertNotNull(byteArray3);
      assertEquals(2122, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      assertNotNull(byteArray4);
      assertEquals(2122, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertEquals(20, byteArray4.length);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
      assertNotNull(byteArray5);
      assertEquals(2122, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertEquals(20, byteArray5.length);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      assertNotNull(byteArrayInputStream0);
      assertEquals(25, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(25, byteArray0.length);
      assertEquals(25, byteArrayInputStream0.available());
      
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
      assertNotNull(byteArray1);
      assertEquals(25, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1857666609), int0);
      
      // Undeclared exception!
      try { 
        HashUtil.generateSalt((-1857666609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBytes argument must be a positive integer (1 or larger)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashUtil.murmur32AsInt(">)A]EIt+Tm\u0002BlMa2;>");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (-1477764841));
      byte[] byteArray2 = HashUtil.sha1("kaMX", byteArray1, (int) (byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      byteArrayInputStream0.read();
      byteArrayInputStream0.mark((-526));
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark(1318007700);
      byteArrayInputStream0.read(byteArray0);
      HashUtil.md5File(byteArrayInputStream0);
      HashUtil.murmur32AsInt("kaMX");
      HashUtil.sha1("=-z2`nn", byteArray1, 1);
      // Undeclared exception!
      HashUtil.sha1(byteArray2, byteArray2, 1318007700);
  }
}
