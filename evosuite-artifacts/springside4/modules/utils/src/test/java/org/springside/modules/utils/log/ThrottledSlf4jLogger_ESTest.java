/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:40:05 GMT 2022
 */

package org.springside.modules.utils.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.event.EventRecodingLogger;
import org.slf4j.event.SubstituteLoggingEvent;
import org.slf4j.helpers.NOPLogger;
import org.slf4j.helpers.SubstituteLogger;
import org.springside.modules.utils.log.ThrottledSlf4jLogger;
import org.springside.modules.utils.time.ClockUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThrottledSlf4jLogger_ESTest extends ThrottledSlf4jLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("0g5GQ", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 998L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("aapW.!={.m", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1575L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("iq&[R2", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 22L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 213L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("MTm?)JM|d", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1093L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ";gxy2_-", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("wQ");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, "");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "z", object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("wQ");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "D_", (Object) null, (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "", (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.log.ThrottledSlf4jLogger", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.log.ThrottledSlf4jLogger");
      eventRecodingLogger0.info((Marker) null, "org.springside.modules.utils.log.ThrottledSlf4jLogger", (Throwable) mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "org.springside.modules.utils.log.ThrottledSlf4jLogger", (Object) eventRecodingLogger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 276L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "org.springside.modules.utils.time.ClockUtil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-3121L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("T]'Wgl_");
      throttledSlf4jLogger0.error((String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("MTm?)JM|d", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-3121L), timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 266L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 15L, timeUnit0);
      throttledSlf4jLogger0.error("wQ");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-2317L), timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("org.springside.modules.utils.log.ThrottledSlf4jLogger", object0, (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("o#VaPq", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2122L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("&Th", (Object) timeUnit0, (Object) substituteLogger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("#Um", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      substituteLogger0.trace((Marker) null, ":+?M=Cp\u0002");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("1I]p~^K6i");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "1I]p~^K6i", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      substituteLogger0.info("b91$>Dy?[)}n");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-38L), timeUnit0);
      Integer integer0 = new Integer((-1590));
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", (Object) "", (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("wQ");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "org.springside.modules.utils.time.ClockUtil", (Object) substituteLoggingEvent0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-463L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "BhInOm/VPYLB|'!e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-820L), timeUnit0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace(".oUb >4ASe}hY", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3518L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn("}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 25L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.debug("Y", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((String) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("J", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, "J", (Object) null, (Object) substituteLoggingEvent0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("J", (Object) integer0, (Object) priorityQueue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("GH. Ew/(y9", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("org.springside.modules.utils.time.ClockUtil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("|a", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("@Vi f8K{");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-862L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 25L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-38L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1917L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isDebugEnabled((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isDebugEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "a*|^(", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("iukZFh;;*sD", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-2899L), timeUnit0);
      eventRecodingLogger0.error((Marker) null, "#_d.Tv=/-!<");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "O\"s@S2GD6)#0Xq<{'3V", (Object[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "org.springside.modules.utils.time.ClockUtil$DefaultClock", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("b8A", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.info(":X~)oP~NU =3");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 800L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "b8A", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1966L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "", (Object) timeUnit0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("aapW.!={.m", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1575L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "aapW.!={.m", object0, (Object) substituteLogger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "Wqwfck3K:_&NZFF,??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-5252L), timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("EC", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("3:Yx#8b9aJ|.<Y:-E", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.trace((Marker) null, "?[");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("3:Yx#8b9aJ|.<Y:-E", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("wQ");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("wQ", (Throwable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("r9 y(timt,", (Object) timeUnit0, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      Object[] objectArray0 = new Object[9];
      throttledSlf4jLogger0.error((String) null, objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((String) null, (Object) null, objectArray0[2]);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparator<SubstituteLoggingEvent> comparator0 = (Comparator<SubstituteLoggingEvent>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      eventRecodingLogger0.warn((String) null, (Object) comparator0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("", (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-900L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("iq&[R2", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 22L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      substituteLogger0.warn((Marker) null, "iq&[R2", objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, "wQ", (Object) null, (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "org.springside.modules.utils.time.ClockUtil", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      Object[] objectArray0 = new Object[9];
      throttledSlf4jLogger0.error((String) null, objectArray0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "com.google.common.io.PatternFilenameFilter", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "n+\"gAVuHSK/?", object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 783L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "]![Of@RN_~pd&]", (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.time.ClockUtil$DefaultClock", (Throwable) null);
      eventRecodingLogger0.info((Marker) null, (String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "org.springside.modules.utils.time.ClockUtil$DefaultClock");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-58L), timeUnit0);
      substituteLogger0.trace((Marker) null, "", (Object) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-704), timeUnit0);
      Object[] objectArray0 = new Object[11];
      eventRecodingLogger0.warn((String) null, objectArray0[2]);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-5809L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.log.ThrottledSlf4jLogger");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("B5r:@H5FCk", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("Imi_k: Xx<", priorityQueue0, false);
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1039L), timeUnit0);
      Object object0 = new Object();
      substituteLogger0.warn((Marker) null, "Imi_k: Xx<", object0, (Object) arrayDeque0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("", (Throwable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, object0, (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("", objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("N%_]9]u[N<$H[mG", (Object) null, (Object) substituteLoggingEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-2000L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>(277);
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(priorityQueue0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("G/&$gK%>_-@'U", arrayDeque0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug((Marker) null, "sW2@dUPqP[}K8nA");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("G/&$gK%>_-@'U", (Object) eventRecodingLogger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("I", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("RRtGzNVN>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, "}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0, object0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("WK*7=&S7");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn("}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("iq&[R2", priorityQueue0, false);
      Object object0 = new Object();
      substituteLogger0.error("org.springside.modules.utils.log.ThrottledSlf4jLogger", object0, object0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 57L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("iq&[R2");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "", (Throwable) mockThrowable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "n+\"gAVuHSK/?", object0, (Object) substituteLoggingEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.log.ThrottledSlf4jLogger", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4203L), timeUnit0);
      throttledSlf4jLogger0.debug("", (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "org.springside.modules.utils.log.ThrottledSlf4jLogger", (Object) priorityQueue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "n+\"gAVuHSK/?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.springside.modules.utils.log.ThrottledSlf4jLogger", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      MockThrowable mockThrowable0 = new MockThrowable("org.springside.modules.utils.log.ThrottledSlf4jLogger");
      eventRecodingLogger0.info((Marker) null, "org.springside.modules.utils.log.ThrottledSlf4jLogger", (Throwable) mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "org.springside.modules.utils.log.ThrottledSlf4jLogger");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-4181L), timeUnit0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=8R)?S{Y.<e)dyJE", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, "=8R)?S{Y.<e)dyJE", (Object) null, (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("=8R)?S{Y.<e)dyJE", objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(":m?#", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-923L), timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, ":m?#", (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug(":m?#", (Throwable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("*W`-3zglT<FoW", (Object) null, (Object) timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      Object[] objectArray0 = new Object[8];
      substituteLogger0.warn("", objectArray0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1250L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("", objectArray0[3], (Object) priorityQueue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("-&G&XRa[~A5N,EZ(<", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.debug("Y", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("Y", (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=4\"NCes", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.error((Marker) null, "=4\"NCes", (Object) "=4\"NCes", (Object) "");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThrottledSlf4jLogger throttledSlf4jLogger0 = null;
      try {
        throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-345L), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2695L, timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 3969L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, "j_RuE.UC(UNN", (Object) nOPLogger0, (Object) nOPLogger0);
      Object[] objectArray0 = new Object[8];
      throttledSlf4jLogger0.trace((Marker) null, "j_RuE.UC(UNN", objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, "HbewhxVChCLJ", (Throwable) mockThrowable0);
      Object object0 = new Object();
      throttledSlf4jLogger0.trace((Marker) null, "HbewhxVChCLJ", object0, object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, "-3n;8y", (Object) timeUnit0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace((Marker) null, "o}7Ov0~3/<UwaS", (Object) timeUnit0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", objectArray0);
      throttledSlf4jLogger0.trace((Marker) null, "u#)zA0Sr{LT+{g");
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.trace("", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.trace((String) null, (Throwable) mockThrowable0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3537L), timeUnit0);
      Object[] objectArray0 = new Object[7];
      throttledSlf4jLogger0.trace("}W8sR:g7Ar+f\"yJ+IRo", objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.trace((String) null, objectArray0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.trace("-3n;8y", (Object) "-3n;8y", (Object) "-3n;8y");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace("o}7Ov0~3/<UwaS", (Object) "o}7Ov0~3/<UwaS", (Object) "o}7Ov0~3/<UwaS");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      throttledSlf4jLogger0.trace("Y92\"_IGSYG_5|Ax9z7?", (Object) throttledSlf4jLogger0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2467L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.error("wDBZg53", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace("wDBZg53", (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      throttledSlf4jLogger0.trace((String) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.error((Marker) null, "o}7Ov0~3/<UwaS", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[18];
      throttledSlf4jLogger0.error((Marker) null, "Gon", objectArray0);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, "IN^`l lY", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[18];
      throttledSlf4jLogger0.error((Marker) null, "IN^`l lY", objectArray0);
      assertEquals(18, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, "N2Hj6", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.error((Marker) null, "N2Hj6", (Object) "N2Hj6", (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, "Y92\"_IGSYG_5|Ax9z7?", object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.error((Marker) null, "o}7Ov0~3/<UwaS", (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1266L), timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.error((Marker) null, (String) null);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.error("o}7Ov0~3/<UwaS", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error((String) null, objectArray0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.warn((Marker) null, "Y92\"_IGSYG_5|Ax9z7?", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((Marker) null, "u#)zA0Sr{LT+{g", (Object) "u#)zA0Sr{LT+{g", object0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      throttledSlf4jLogger0.warn((Marker) null, "", (Object) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((Marker) null, "u#)zA0Sr{LT+{g", object0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.warn("-3n;8y", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((String) null, (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.warn("", (Object) "", (Object) throttledSlf4jLogger0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((String) null, object0, (Object) eventRecodingLogger0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", objectArray0);
      throttledSlf4jLogger0.warn("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", (Object[]) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, "IN^`l lY", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.warn((Marker) null, "IN^`l lY");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 3969L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, "j_RuE.UC(UNN", (Object) nOPLogger0, (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, "j_RuE.UC(UNN", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.info((Marker) null, (String) null, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.info((Marker) null, (String) null, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.info((Marker) null, "-3n;8y", (Object) null, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2467L, timeUnit0);
      throttledSlf4jLogger0.error("wDBZg53", (Object) nOPLogger0);
      throttledSlf4jLogger0.info((Marker) null, "wDBZg53", (Object) "wDBZg53", (Object) throttledSlf4jLogger0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, "", (Object) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.info((Marker) null, "", (Object) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, "-3n;8y");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.info((Marker) null, "o}7Ov0~3/<UwaS");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.info("-3n;8y", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.info((String) null, objectArray0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 7L, timeUnit0);
      throttledSlf4jLogger0.error("", (Object) substituteLoggingEvent0, (Object) null);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.warn((Marker) null, "", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.error("", (Object) "", (Object) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=a", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, "HbewhxVChCLJ", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.error("HbewhxVChCLJ");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("}W8sR:g7Ar+f\"yJ+IRo", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn("}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, "}W8sR:g7Ar+f\"yJ+IRo", (Object) substituteLoggingEvent0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", object0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      throttledSlf4jLogger0.warn("");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 10, timeUnit0);
      throttledSlf4jLogger0.info((String) null, (Object) null, (Object) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.info((String) null, (Object) null, (Object) eventRecodingLogger0);
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Stream<SubstituteLoggingEvent> stream0 = arrayDeque0.parallelStream();
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.info("", (Object) stream0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.info("");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("u#)zA0Sr{LT+{g", objectArray0);
      throttledSlf4jLogger0.info("u#)zA0Sr{LT+{g");
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.debug((Marker) null, "o}7Ov0~3/<UwaS", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.debug((Marker) null, "-3n;8y", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", objectArray0);
      throttledSlf4jLogger0.debug((Marker) null, "org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", objectArray0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", objectArray0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.debug((Marker) null, "org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", (Object) substituteLoggingEvent0, (Object) "org.sprinQside.modules.utils.time.ClockUcil$DefaultClock");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.debug((Marker) null, (String) null, (Object) substituteLoggingEvent0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info("org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", objectArray0);
      throttledSlf4jLogger0.debug((Marker) null, "org.sprinQside.modules.utils.time.ClockUcil$DefaultClock", (Object) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, "HbewhxVChCLJ", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.debug((Marker) null, "HbewhxVChCLJ");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("N2Hj6");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, "N2Hj6", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.debug("N2Hj6", (Throwable) mockThrowable0);
      assertEquals("N2Hj6", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      Object[] objectArray0 = new Object[14];
      throttledSlf4jLogger0.debug("", objectArray0);
      assertEquals(14, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, "N2Hj6", (Object) substituteLoggingEvent0, object0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.debug("N2Hj6", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug("", (Object) throttledSlf4jLogger0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("rq&I(^2", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 39L, timeUnit0);
      throttledSlf4jLogger0.trace("rq&I(^2");
      throttledSlf4jLogger0.debug("rq&I(^2", (Object) "rq&I(^2", (Object) "rq&I(^2");
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.debug("-3n;8y", (Object) "-3n;8y");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info("o}7Ov0~3/<UwaS", (Object) nOPLogger0);
      throttledSlf4jLogger0.debug("o}7Ov0~3/<UwaS", (Object) "o}7Ov0~3/<UwaS");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      throttledSlf4jLogger0.debug("Y92\"_IGSYG_5|Ax9z7?");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("RRVA(CeQ_ohx)", arrayDeque0, true);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, "RRVA(CeQ_ohx)", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.debug("RRVA(CeQ_ohx)");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("RRVA(CeQ_ohx)", arrayDeque0, true);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, "RRVA(CeQ_ohx)", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.error("RRVA(CeQ_ohx)", (Object) "RRVA(CeQ_ohx)");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=a", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("RRVA(CeQ_ohx)", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("u#)zA0Sr{LT+{g", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("=a", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.log.ThrottledSlf4jLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-22L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
      assertEquals("NOP", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("RRVA(CeQ_ohx)", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }
}
