/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:40:20 GMT 2022
 */

package org.springside.modules.utils.collection.type.primitive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.primitive.LongObjectHashMap;
import org.springside.modules.utils.collection.type.primitive.LongObjectMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongObjectHashMap_ESTest extends LongObjectHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(1450);
      assertNotNull(long0);
      assertEquals(1450L, (long)long0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("com.google.common.math.IntMath", "+y{3u_N?EP");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleEntry2);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(object0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(comparable0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(comparable1);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Set<Long> set0 = longObjectHashMap1.keySet();
      assertFalse(set0.contains(1L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      // Undeclared exception!
      longObjectHashMap2.equals(longObjectHashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.springside.modules.utils.number.MathUtil").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, "-IwC1DV:xUb");
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      Long long2 = Long.getLong("%pKL0k?");
      assertNull(long2);
      
      long long3 = Long.sum(0L, 8);
      assertEquals(8L, long3);
      
      longObjectHashMap0.replaceAll(biFunction1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      String string2 = longObjectHashMap0.put(0L, "&{/}[@As:Z-rZ;");
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string2);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      
      String string3 = longObjectHashMap0.put((-1L), "L0D|I.!{IJY\"j9lc,f");
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string3);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(3, longObjectHashMap0.size());
      
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string4);
      assertTrue(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Long long4 = hashMap0.put(long1, long0);
      assertNull(long4);
      assertTrue(long0.equals((Object)long3));
      assertTrue(long0.equals((Object)long1));
      assertTrue(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      longObjectHashMap1.putAll(hashMap0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(boolean0);
      
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(iterable0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(iterable1);
      assertSame(iterable1, iterable0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(iterable2);
      assertSame(iterable2, iterable1);
      assertSame(iterable2, iterable0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(2, longObjectHashMap0.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Long long0 = new Long((-4245L));
      assertNotNull(long0);
      assertEquals((-4245L), (long)long0);
      
      int int0 = Long.compareUnsigned(0L, (-4245L));
      assertEquals((-1), int0);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, "l5QhK");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(abstractMap_SimpleEntry1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Collection<String> collection0 = longObjectHashMap0.values();
      assertFalse(collection0.contains("l5QhK"));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(collection0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(abstractMap_SimpleEntry2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer0);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      String string0 = longObjectHashMap0.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer1);
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      String string1 = longObjectHashMap1.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals("{328=8, 31=8}", string1);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertNotSame(longObjectHashMap2, longObjectHashMap1);
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertFalse(boolean0);
      
      longObjectHashMap1.forEach(biConsumer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Long long0 = new Long(31L);
      assertNotNull(long0);
      assertEquals(31L, (long)long0);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer3);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer4);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Integer integer5 = new Integer(8);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertEquals(8, (int)integer5);
      
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(boolean1 == boolean0);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertFalse(boolean1);
      
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap3);
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      
      String string2 = longObjectHashMap3.keyToString((-1055L));
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      assertEquals("-1055", string2);
      
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = null;
      try {
        longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.setValue(longObjectHashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      // Undeclared exception!
      longObjectHashMap0.putAll(longObjectHashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer0);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      String string0 = longObjectHashMap1.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      assertEquals("{8=8, 328=8}", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertNotSame(longObjectHashMap2, longObjectHashMap1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertFalse(boolean0);
      
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer2);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(3, longObjectHashMap1.size());
      
      longObjectHashMap1.forEach(biConsumer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(3, longObjectHashMap1.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer3 = new Integer(8);
      assertNotNull(integer3);
      assertEquals(8, (int)integer3);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer4);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer5);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      longObjectHashMap1.clear();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Integer integer6 = new Integer(8);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer3));
      assertEquals(8, (int)integer6);
      
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(boolean1 == boolean0);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean1);
      
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap3);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      Object object0 = longObjectHashMap3.remove(1319L);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(object0);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      String string1 = longObjectHashMap3.keyToString(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals("8", string1);
      
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap4);
      assertTrue(longObjectHashMap4.isEmpty());
      assertEquals(0, longObjectHashMap4.size());
      
      longObjectHashMap4.clear();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap4.isEmpty());
      assertEquals(0, longObjectHashMap4.size());
      
      // Undeclared exception!
      try { 
        longObjectHashMap4.putAll((Map<? extends Long, ? extends Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      String string0 = longObjectHashMap1.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      assertEquals("{8=8, 313=8}", string0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      assertTrue(boolean0);
      
      longObjectHashMap1.forEach(biConsumer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer3);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer4);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer5 = new Integer(8);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertEquals(8, (int)integer5);
      
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(boolean1);
      
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      // Undeclared exception!
      try { 
        longObjectHashMap2.putAll((Map<? extends Long, ? extends Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String string0 = longObjectHashMap0.remove((Object) long0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      String string0 = "";
      // Undeclared exception!
      longObjectHashMap0.containsValue("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap_MapEntry0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<Long> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<Long>(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      long long1 = Long.sum(2496, 390L);
      assertEquals(2886L, long1);
      
      Integer integer2 = new Integer(2496);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2496, (int)integer2);
      
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(integer3);
      assertFalse(long0.equals((Object)long1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(8, (int)integer3);
      
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      assertFalse(collection0.contains(longObjectHashMap0));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(collection0);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      Set<Long> set1 = longObjectHashMap2.keySet();
      assertFalse(set1.contains(0L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(set1);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap3);
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      
      // Undeclared exception!
      try { 
        longObjectHashMap3.remove((Object) integer3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      String string0 = longObjectHashMap1.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals("{-2316=8}", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap2, longObjectHashMap1);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      Long long0 = new Long((-2316L));
      assertNotNull(long0);
      assertEquals((-2316L), (long)long0);
      
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(integer2);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals(8, (int)integer2);
      
      Integer integer3 = longObjectHashMap1.get((-2316L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(integer3);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals(8, (int)integer3);
      
      String string1 = longObjectHashMap0.get((-1011L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string1);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean1);
      
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap3);
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      
      String string2 = longObjectHashMap3.keyToString((-1055L));
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      assertEquals("-1055", string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Long long0 = new Long((-4245L));
      assertNotNull(long0);
      assertEquals((-4245L), (long)long0);
      
      int int0 = Long.compareUnsigned(0L, (-4245L));
      assertEquals((-1), int0);
      
      long long1 = Long.min((-1748L), 8);
      assertEquals((-1748L), long1);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, "l5QhK");
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(long0.equals((Object)long1));
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleEntry1);
      assertFalse(long0.equals((Object)long1));
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Object object0 = longObjectHashMap1.get((long) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(object0);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(set0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Long long0 = new Long(989L);
      assertNotNull(long0);
      assertEquals(989L, (long)long0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(set1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleEntry0);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      Long long1 = new Long((-4245L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-4245L), (long)long1);
      
      String string0 = "l5QhK";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      assertEquals((-1), int0);
      
      long long2 = Long.min((-1748L), 8);
      assertEquals((-1748L), long2);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, "l5QhK");
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleEntry2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      String string1 = longObjectHashMap0.get((-678L));
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string1);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      Collection<String> collection0 = longObjectHashMap0.values();
      assertFalse(collection0.contains(string0));
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(collection0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertFalse(set0.contains(long1));
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(set0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(abstractMap_SimpleEntry3);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertEquals(3, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      Object object0 = longObjectHashMap2.get(2066L);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(object0);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      boolean boolean0 = longObjectHashMap2.isEmpty();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(boolean0);
      
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap3);
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, longObjectHashMap3.size());
      
      LongObjectHashMap<Comparable<String>> longObjectHashMap4 = null;
      try {
        longObjectHashMap4 = new LongObjectHashMap<Comparable<String>>(4448, (-2032.64F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long((-460L));
      assertNotNull(long0);
      assertEquals((-460L), (long)long0);
      
      Long long1 = new Long((-460L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-460L), (long)long1);
      
      Long long2 = Long.getLong("", long1);
      assertNotNull(long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-460L), (long)long2);
      
      long long3 = Long.sum((-460L), 8);
      assertEquals((-452L), long3);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string0);
      assertFalse(long0.equals((Object)long3));
      assertTrue(long0.equals((Object)long2));
      assertTrue(long0.equals((Object)long1));
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      String string1 = longObjectHashMap0.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string1);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string2);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      longObjectHashMap0.forEach(biConsumer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(boolean0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean1);
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      longObjectHashMap2.putAll(longObjectHashMap0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals(1, longObjectHashMap2.size());
      assertFalse(longObjectHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      String string0 = longObjectHashMap0.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(set0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      boolean boolean0 = longObjectHashMap1.equals(set0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean0);
      
      String string1 = longObjectHashMap1.keyToString(16L);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals("16", string1);
      
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      boolean boolean1 = longObjectHashMap2.isEmpty();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertTrue(boolean1);
      
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap3);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(longObjectHashMap4);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      Long long0 = new Long(1347L);
      assertNotNull(long0);
      assertEquals(1347L, (long)long0);
      
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap5);
      assertTrue(longObjectHashMap5.isEmpty());
      assertEquals(0, longObjectHashMap5.size());
      
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap6);
      assertSame(longObjectHashMap5, longObjectHashMap6);
      assertSame(longObjectHashMap6, longObjectHashMap5);
      assertFalse(longObjectHashMap3.isEmpty());
      assertEquals(1, longObjectHashMap3.size());
      assertTrue(longObjectHashMap5.isEmpty());
      assertEquals(0, longObjectHashMap5.size());
      assertTrue(longObjectHashMap6.isEmpty());
      assertEquals(0, longObjectHashMap6.size());
      
      longObjectHashMap3.hashCode();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap3.isEmpty());
      assertEquals(1, longObjectHashMap3.size());
      
      boolean boolean2 = longObjectHashMap3.isEmpty();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(longObjectHashMap3.isEmpty());
      assertEquals(1, longObjectHashMap3.size());
      assertFalse(boolean2);
      
      LongObjectHashMap<LongObjectHashMap<Integer>> longObjectHashMap7 = null;
      try {
        longObjectHashMap7 = new LongObjectHashMap<LongObjectHashMap<Integer>>(8, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      longObjectHashMap0.hashCode();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Collection<Long> collection0 = longObjectHashMap0.values();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(collection0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      int int0 = Long.compareUnsigned(1127L, 1127L);
      assertEquals(0, int0);
      
      int int1 = Long.compareUnsigned(2493L, 1127L);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long long1 = Long.sum((-2L), 1721L);
      assertEquals(1719L, long1);
      
      int int2 = Long.compareUnsigned(23L, (-852L));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = Long.compareUnsigned(8, 1721L);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(long2);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8L, (long)long2);
      
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(8L, (long)long3);
      
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      assertTrue(boolean0);
      
      int int4 = longObjectHashMap0.hashCode();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      String string0 = longObjectHashMap1.keyToString(0L);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string0);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals("0", string0);
      
      LongObjectHashMap<LongObjectHashMap<Integer>> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Integer>>(1656, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Long long1 = longObjectHashMap0.get((Object) long0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(long1);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long2 = longObjectHashMap0.put(1L, long0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(long2);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(longObjectHashMap3);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long((-460L));
      assertNotNull(long0);
      assertEquals((-460L), (long)long0);
      
      Long long1 = new Long((-460L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-460L), (long)long1);
      
      Long long2 = Long.getLong("", long1);
      assertNotNull(long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-460L), (long)long2);
      
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      assertEquals(0L, long3);
      
      long long4 = Long.sum((-460L), 8);
      assertFalse(long4 == long3);
      assertEquals((-452L), long4);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string0);
      assertFalse(long0.equals((Object)long4));
      assertTrue(long0.equals((Object)long1));
      assertTrue(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long3));
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      String string1 = longObjectHashMap0.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string1);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(string2);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      longObjectHashMap0.forEach(biConsumer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertTrue(boolean0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(long1.equals((Object)long4));
      assertFalse(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertFalse(boolean1);
      
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      longObjectHashMap2.putAll(longObjectHashMap0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(1, longObjectHashMap2.size());
      
      longObjectHashMap2.hashCode();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap2.isEmpty());
      assertEquals(1, longObjectHashMap2.size());
      
      String string3 = longObjectHashMap1.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string3);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      assertEquals("{}", string3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(1010);
      assertNotNull(long0);
      assertEquals(1010L, (long)long0);
      
      String string0 = longObjectHashMap0.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("{}", string0);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(8, (int)integer0);
      
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      int int1 = longObjectHashMap0.hashCode();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(int1 == int0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      String string1 = longObjectHashMap1.put((long) 8, "{}");
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      int int2 = Long.compare(1010, 3374L);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = longObjectHashMap1.put(long0, "next must be called before each remove.");
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(string2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      Long long1 = Long.valueOf(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long1, "");
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(long1.equals((Object)long0));
      
      // Undeclared exception!
      try { 
        longObjectHashMap2.put((Long) null, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Collection<Object> collection0 = longObjectHashMap0.values();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(collection0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      try { 
        Long.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      String string0 = longObjectHashMap0.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertEquals("{31=8}", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Long long0 = new Long(31L);
      assertNotNull(long0);
      assertEquals(31L, (long)long0);
      
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer1);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(31L, (long)long1);
      
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(integer2);
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertTrue(long1.equals((Object)long0));
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals(8, (int)integer2);
      
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap1.equals((Object)longObjectHashMap0));
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertNotSame(longObjectHashMap1, longObjectHashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertTrue(boolean0);
      
      longObjectHashMap0.forEach(biConsumer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap0.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap0, longObjectHashMap1);
      assertFalse(longObjectHashMap0.isEmpty());
      assertEquals(1, longObjectHashMap0.size());
      
      Long long2 = new Long(31L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(31L, (long)long2);
      
      long long3 = Long.min(88L, 31L);
      assertEquals(31L, long3);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) longObjectHashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      boolean boolean0 = longObjectHashMap0.isEmpty();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertEquals(0, longObjectHashMap0.size());
      assertTrue(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Long long1 = new Long(8);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(8L, (long)long1);
      
      Object object0 = longObjectHashMap1.get((Object) long1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(object0);
      assertTrue(long1.equals((Object)long0));
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals(8, object0);
      
      String string0 = longObjectHashMap1.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      assertEquals("{8=8}", string0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      String string0 = longObjectHashMap0.keyToString(0L);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals("0", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      String string1 = longObjectHashMap1.toString();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals("{}", string1);
      
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(iterable0);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      int int0 = Long.compareUnsigned(8, 1L);
      assertEquals(1, int0);
      
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean0);
      
      Long long1 = new Long(12L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(12L, (long)long1);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(8, (int)integer0);
      
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(1, longObjectHashMap0.size());
      assertFalse(longObjectHashMap0.isEmpty());
      
      Integer integer2 = longObjectHashMap0.remove(12L);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertEquals(8, (int)integer2);
      
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      longObjectHashMap1.putAll(longObjectHashMap2);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertTrue(longObjectHashMap2.isEmpty());
      
      LongObjectHashMap<Long> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Long>(8, 1149.871F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap1);
      assertEquals(0, longObjectHashMap1.size());
      assertTrue(longObjectHashMap1.isEmpty());
      
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer0);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap2);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertNotSame(longObjectHashMap2, longObjectHashMap1);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(2, longObjectHashMap1.size());
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      assertFalse(boolean0);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer3);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNull(integer4);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(1, longObjectHashMap1.size());
      
      Integer integer5 = new Integer(8);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertEquals(8, (int)integer5);
      
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap3);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      int int0 = longObjectHashMap3.size();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap0);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertTrue(longObjectHashMap0.isEmpty());
      assertEquals(0, longObjectHashMap0.size());
      assertFalse(boolean0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(longObjectHashMap1);
      assertTrue(longObjectHashMap1.isEmpty());
      assertEquals(0, longObjectHashMap1.size());
      
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNull(integer1);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      
      String string0 = longObjectHashMap1.toString();
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(string0);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals("{31=8}", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap2);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      Long long2 = new Long(1927L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1927L, (long)long2);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertNotNull(integer2);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertEquals(8, (int)integer2);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertFalse(longObjectHashMap1.equals((Object)longObjectHashMap2));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longObjectHashMap1, longObjectHashMap2);
      assertEquals(2, longObjectHashMap1.size());
      assertFalse(longObjectHashMap1.isEmpty());
      assertTrue(boolean1);
      
      longObjectHashMap2.forEach(biConsumer0);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertFalse(longObjectHashMap2.equals((Object)longObjectHashMap1));
      assertNotSame(longObjectHashMap2, longObjectHashMap1);
      assertTrue(longObjectHashMap2.isEmpty());
      assertEquals(0, longObjectHashMap2.size());
      
      Long long3 = new Long(31L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals(31L, (long)long3);
      
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap3);
      assertEquals(0, longObjectHashMap3.size());
      assertTrue(longObjectHashMap3.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
      assertEquals(8, LongObjectHashMap.DEFAULT_CAPACITY);
      assertEquals(0.5F, LongObjectHashMap.DEFAULT_LOAD_FACTOR, 0.01F);
      assertNotNull(longObjectHashMap4);
      assertTrue(longObjectHashMap4.equals((Object)longObjectHashMap2));
      assertFalse(longObjectHashMap4.equals((Object)longObjectHashMap1));
      assertTrue(longObjectHashMap4.isEmpty());
      assertEquals(0, longObjectHashMap4.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        longObjectHashMap4.get(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.keySet();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(40320);
      // Undeclared exception!
      longObjectHashMap1.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      longObjectHashMap0.containsKey(1L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(8);
      longObjectHashMap2.putIfAbsent(long0, (Integer) null);
      longObjectHashMap2.equals(longObjectHashMap1);
      Long long1 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap1.replace(long1, (Integer) 8);
      // Undeclared exception!
      try { 
        longObjectHashMap1.remove((Object) longObjectHashMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(4045);
      Long long0 = new Long(8);
      boolean boolean0 = longObjectHashMap0.equals(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      Integer integer1 = new Integer(8);
      longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey((Object) 8);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      Long.compareUnsigned(0L, (-4245L));
      Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, "l5QhK");
      longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      longObjectHashMap1.remove(1935L);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>();
      // Undeclared exception!
      try { 
        longObjectHashMap2.get((Object) longObjectHashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(841);
      Set<Long> set0 = longObjectHashMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      longObjectHashMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(8);
      BiFunction<Long, Integer, Integer> biFunction0 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3171);
      longObjectHashMap1.putIfAbsent(long0, integer0);
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long1 = new Long(8);
      Long.min(88L, 1L);
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) longObjectHashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      longObjectHashMap0.toString();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>(8, 1362.3615F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      
      Long long1 = new Long(31L);
      Long.min(31L, 31L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(242);
      longObjectHashMap2.entries();
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      assertEquals(0, longObjectHashMap3.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.clear();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.containsValue(longObjectHashMap1);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>(8, (-4003.7878F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      longObjectHashMap1.put(0L, integer0);
      longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Integer integer1 = new Integer(8);
      Long long1 = new Long(0L);
      longObjectHashMap1.replace(long1, (Integer) 8);
      // Undeclared exception!
      try { 
        longObjectHashMap1.remove((Object) longObjectHashMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, "/@`<:");
      longObjectHashMap0.putAll(longObjectHashMap1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(8);
      hashMap0.put(long0, (Integer) 8);
      longObjectHashMap0.putAll(hashMap0);
      assertEquals(1, longObjectHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      Long long0 = new Long(0L);
      boolean boolean0 = longObjectHashMap0.containsKey((Object) long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(1);
      longObjectHashMap1.clear();
      assertTrue(longObjectHashMap1.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.containsKey(1305L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(24);
      Long long0 = new Long(1945L);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      longObjectHashMap0.put(long0, longObjectHashMap1);
      Long long1 = new Long(1945L);
      longObjectHashMap0.containsKey((Object) long1);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>(2145616061, 0.5F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2145616061) not representable as an int
         //
         verifyException("com.google.common.math.IntMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      int int0 = 0;
      Long long0 = new Long(8);
      Long long1 = new Long(125);
      longObjectHashMap0.putIfAbsent(long0, long1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(0);
      longObjectHashMap_MapEntry0.getKey();
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, String>> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, String>>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = null;
      try {
        longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>((-736), (-736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.setValue((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put((long) 8, (Integer) 8);
      longObjectHashMap1.put(313L, (Integer) 8);
      longObjectHashMap1.toString();
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      longObjectHashMap1.replace(long0, (Integer) 8);
      boolean boolean0 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      assertEquals(1, longObjectHashMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      assertEquals("{}", string0);
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>(8);
      longObjectHashMap3.remove((long) 8);
      longObjectHashMap3.hashCode();
      assertTrue(longObjectHashMap3.isEmpty());
      
      boolean boolean0 = longObjectHashMap0.equals("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long((-224L));
      Integer integer0 = new Integer(8);
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(8);
      longObjectHashMap0.putAll(longObjectHashMap1);
      Integer integer1 = new Integer(8);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.computeIfPresent(long0, biFunction0);
      longObjectHashMap0.clear();
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      longObjectHashMap0.put(long1, "-IwC1DV:xUb");
      Long.getLong("%pKL0k?");
      Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      longObjectHashMap0.put((-1L), "L0D|I.!{IJY\"j9lc,f");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(anyLong() , any());
      longObjectHashMap0.compute(long1, biFunction2);
      longObjectHashMap0.size();
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(1);
      longObjectHashMap0.equals(longObjectHashMap1);
      longObjectHashMap0.entries();
      longObjectHashMap0.entries();
      longObjectHashMap0.entries();
      assertFalse(longObjectHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      Long.getLong("org.springside.modules.utils.number.MathUtil");
      longObjectHashMap0.put((-1L), "org.springside.modules.utils.number.MathUtil");
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      hashMap0.put(long0, long0);
      longObjectHashMap1.putAll(hashMap0);
      longObjectHashMap0.equals(longObjectHashMap1);
      longObjectHashMap0.entries();
      assertFalse(longObjectHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap1.put((long) 8, (Integer) null);
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      Integer integer1 = new Integer(8);
      longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>((-1702), 3649.625F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, (Integer) 8, biFunction0);
      assertEquals(1, longObjectHashMap1.size());
      
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(9964);
      assertTrue(longObjectHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      Long.compareUnsigned(0L, 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, "l5QhK");
      longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      longObjectHashMap0.values();
      longObjectHashMap0.keySet();
      longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
      LongObjectHashMap<Integer> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x (-1) must be > 0
         //
         verifyException("com.google.common.math.MathPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      longObjectHashMap0.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      longObjectHashMap0.put((-1748L), (AbstractMap.SimpleEntry<Long, String>) null);
      longObjectHashMap0.put(1759L, (AbstractMap.SimpleEntry<Long, String>) null);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      longObjectHashMap1.get(2061L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
      LongObjectHashMap<Comparable<String>> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Comparable<String>>(4448, (-2032.64F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      Long.getLong("", long0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      longObjectHashMap0.compute(long0, biFunction0);
      longObjectHashMap0.remove((long) long0);
      longObjectHashMap0.put((-2191L), (String) null);
      longObjectHashMap0.containsValue((Object) null);
      assertFalse(longObjectHashMap0.isEmpty());
      
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Integer integer0 = new Integer(8);
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap1.merge(long0, integer0, biFunction1);
      BiFunction<Long, Integer, Integer> biFunction2 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.containsValue(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put(31L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      Long long1 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      assertFalse(longObjectHashMap0.isEmpty());
      
      Long long1 = new Long(8);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      assertEquals(0, longObjectHashMap2.size());
  }
}
