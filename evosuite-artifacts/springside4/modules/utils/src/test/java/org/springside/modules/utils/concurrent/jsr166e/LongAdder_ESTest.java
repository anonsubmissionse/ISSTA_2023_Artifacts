/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:53:38 GMT 2022
 */

package org.springside.modules.utils.concurrent.jsr166e;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.concurrent.jsr166e.LongAdder;
import org.springside.modules.utils.concurrent.jsr166e.Striped64;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LongAdder_ESTest extends LongAdder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.sumThenReset();
      assertEquals(0L, longAdder0.sum());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[1];
      longAdder0.retryUpdate(1945L, intArray0, true);
      longAdder0.increment();
      int int0 = longAdder0.intValue();
      assertEquals(1946, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      assertEquals((-1.0), longAdder0.doubleValue(), 0.01);
      
      long long0 = longAdder0.sumThenReset();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 1L;
      long long0 = longAdder0.sum();
      assertEquals(1.0F, longAdder0.floatValue(), 0.01F);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add((-4161L));
      long long0 = longAdder0.longValue();
      assertEquals((-4161), longAdder0.intValue());
      assertEquals((-4161L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[1];
      longAdder0.retryUpdate(1945L, intArray0, true);
      int int0 = longAdder0.intValue();
      assertEquals("1945", longAdder0.toString());
      assertEquals(1945, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      int int0 = longAdder0.intValue();
      assertEquals((short) (-2527), longAdder0.shortValue());
      assertEquals((-2527), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(1674L, 1674L);
      assertEquals(3348L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn((-4), (-4));
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add(1L);
      float float0 = longAdder0.floatValue();
      assertEquals((byte)1, longAdder0.byteValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      float float0 = longAdder0.floatValue();
      assertEquals((short) (-2527), longAdder0.shortValue());
      assertEquals((-2527.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 3149L;
      double double0 = longAdder0.doubleValue();
      assertEquals((short)3149, longAdder0.shortValue());
      assertEquals(3149.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.casBusy();
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.increment();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.busy = (-466);
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.decrement();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[10];
      longAdder0.busy = 2919;
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.add(2919);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.sum();
      assertEquals((-2527L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.sum();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      assertEquals(1L, longAdder0.sum());
      
      long long0 = longAdder0.sumThenReset();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.longValue();
      assertEquals(1, longAdder0.intValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      longAdder0.add((-4));
      assertEquals((-3.0F), longAdder0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.add(0L);
      assertEquals((byte)0, longAdder0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      float float0 = longAdder0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int int0 = longAdder0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      String string0 = longAdder0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.reset();
      assertEquals("0", longAdder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      double double0 = longAdder0.doubleValue();
      assertEquals("-1", longAdder0.toString());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      double double0 = longAdder0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[9];
      longAdder0.busy = 2919;
      longAdder0.retryUpdate(2919, intArray0, false);
      assertEquals(2919.0F, longAdder0.floatValue(), 0.01F);
  }
}
