/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Oct 07 04:08:04 GMT 2022
 */

package org.springside.modules.utils.misc;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class IdGenerator_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.springside.modules.utils.misc.IdGenerator"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils"); 
    java.lang.System.setProperty("user.home", "/home/ISSTA_USER"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ISSTA_USER"); 
    java.lang.System.setProperty("user.timezone", "America/New_York"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IdGenerator_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.hash.HashCode$LongHashCode",
      "com.google.common.math.IntMath$1",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.base.CharMatcher$Whitespace",
      "com.google.common.base.CharMatcher$ForPredicate",
      "com.google.common.base.JdkPattern",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.math.IntMath",
      "com.google.common.base.CharMatcher$JavaDigit",
      "com.google.common.base.Optional",
      "com.google.common.base.Platform$JdkPatternCompiler",
      "com.google.common.base.Splitter$MapSplitter",
      "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
      "com.google.common.base.CharMatcher$IsNot",
      "com.google.common.base.CharMatcher$InRange",
      "com.google.common.base.CharMatcher$JavaLetter",
      "com.google.common.base.CharMatcher$JavaLetterOrDigit",
      "com.google.common.base.CharMatcher$NegatedFastMatcher",
      "com.google.common.base.CommonPattern",
      "com.google.common.io.ByteSink",
      "com.google.common.hash.Funnel",
      "com.google.common.base.Predicate",
      "com.google.common.base.CharMatcher$IsEither",
      "com.google.common.base.CharMatcher$Invisible",
      "com.google.common.base.CharMatcher$None",
      "com.google.common.base.Present",
      "com.google.common.io.ByteSink$AsCharSink",
      "com.google.common.io.CharSource$CharSequenceCharSource",
      "com.google.common.io.MultiReader",
      "com.google.common.base.CharMatcher$Any",
      "com.google.common.io.ByteProcessor",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.base.JdkPattern$JdkMatcher",
      "com.google.common.collect.RegularImmutableAsList",
      "com.google.common.io.CharSequenceReader",
      "com.google.common.base.PatternCompiler",
      "com.google.common.math.MathPreconditions",
      "com.google.common.base.Splitter$3$1",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.hash.PrimitiveSink",
      "com.google.common.io.ByteSource",
      "com.google.common.hash.Hasher",
      "com.google.common.io.ReaderInputStream",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.io.BaseEncoding",
      "com.google.common.hash.HashCode",
      "com.google.common.base.CharMatcher",
      "com.google.common.base.CharMatcher$And",
      "com.google.common.collect.ImmutableList$1",
      "com.google.common.io.ByteSource$EmptyByteSource",
      "com.google.common.base.CharMatcher$AnyOf",
      "com.google.common.base.Preconditions",
      "com.google.common.io.ByteSource$AsCharSource",
      "com.google.common.io.MultiInputStream",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.base.CharMatcher$1",
      "org.springside.modules.utils.number.RandomUtil",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.base.CharMatcher$JavaIsoControl",
      "com.google.common.io.BaseEncoding$StandardBaseEncoding$2",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.io.BaseEncoding$StandardBaseEncoding$1",
      "com.google.common.base.Platform",
      "com.google.common.io.BaseEncoding$5",
      "com.google.common.io.BaseEncoding$3",
      "org.springside.modules.utils.text.EncodeUtil",
      "com.google.common.base.CommonMatcher",
      "com.google.common.base.CharMatcher$BitSetMatcher",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.io.BaseEncoding$SeparatedBaseEncoding",
      "com.google.common.base.CharMatcher$RangesMatcher",
      "com.google.common.base.CharMatcher$JavaUpperCase",
      "com.google.common.base.Splitter",
      "com.google.common.collect.SingletonImmutableList",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.io.BaseEncoding$Base16Encoding",
      "com.google.common.base.Function",
      "com.google.common.base.CharMatcher$BreakingWhitespace",
      "com.google.common.io.ByteSource$SlicedByteSource",
      "com.google.common.io.BaseEncoding$DecodingException",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.io.BaseEncoding$1",
      "com.google.common.io.BaseEncoding$2",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "com.google.common.base.CharMatcher$Is",
      "com.google.common.base.CharMatcher$SingleWidth",
      "com.google.common.base.CharMatcher$JavaLowerCase",
      "com.google.common.hash.HashFunction",
      "com.google.common.base.Splitter$Strategy",
      "com.google.common.collect.ImmutableList$Builder",
      "com.google.common.io.BaseEncoding$Alphabet",
      "com.google.common.base.Supplier",
      "com.google.common.io.CharSource$EmptyCharSource",
      "com.google.common.io.CharSource$ConcatenatedCharSource",
      "com.google.common.io.CharSink",
      "com.google.common.io.BaseEncoding$Base64Encoding",
      "org.springside.modules.utils.misc.IdGenerator",
      "com.google.common.collect.ImmutableList",
      "com.google.common.io.CharSource$AsByteSource",
      "com.google.common.io.CharSource",
      "com.google.common.base.Splitter$3",
      "com.google.common.base.CharMatcher$Negated",
      "com.google.common.base.CharMatcher$Ascii",
      "com.google.common.hash.HashCode$IntHashCode",
      "com.google.common.hash.HashCode$BytesHashCode",
      "com.google.common.io.BaseEncoding$StandardBaseEncoding",
      "com.google.common.base.CharMatcher$Or",
      "com.google.common.io.LineProcessor",
      "com.google.common.io.ByteSource$ByteArrayByteSource",
      "com.google.common.base.Splitter$SplittingIterator",
      "com.google.common.io.ByteSource$ConcatenatedByteSource",
      "com.google.common.base.AbstractIterator",
      "com.google.common.base.CharMatcher$Digit"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IdGenerator_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springside.modules.utils.misc.IdGenerator",
      "com.google.common.io.BaseEncoding$StandardBaseEncoding",
      "com.google.common.io.BaseEncoding$Base64Encoding",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "com.google.common.base.Preconditions",
      "com.google.common.base.CharMatcher$Whitespace",
      "com.google.common.base.CharMatcher$BreakingWhitespace",
      "com.google.common.base.CharMatcher$Ascii",
      "com.google.common.base.CharMatcher$RangesMatcher",
      "com.google.common.base.CharMatcher$Digit",
      "com.google.common.base.CharMatcher$JavaDigit",
      "com.google.common.base.CharMatcher$JavaLetter",
      "com.google.common.base.CharMatcher$JavaLetterOrDigit",
      "com.google.common.base.CharMatcher$JavaUpperCase",
      "com.google.common.base.CharMatcher$JavaLowerCase",
      "com.google.common.base.CharMatcher$JavaIsoControl",
      "com.google.common.base.CharMatcher$Invisible",
      "com.google.common.base.CharMatcher$SingleWidth",
      "com.google.common.base.CharMatcher$Any",
      "com.google.common.base.CharMatcher$None",
      "com.google.common.base.CharMatcher",
      "com.google.common.io.BaseEncoding$Alphabet",
      "com.google.common.math.IntMath",
      "com.google.common.math.MathPreconditions",
      "com.google.common.math.IntMath$1",
      "com.google.common.io.BaseEncoding$Base16Encoding",
      "com.google.common.io.BaseEncoding",
      "org.springside.modules.utils.text.EncodeUtil",
      "org.springside.modules.utils.number.RandomUtil"
    );
  }
}
