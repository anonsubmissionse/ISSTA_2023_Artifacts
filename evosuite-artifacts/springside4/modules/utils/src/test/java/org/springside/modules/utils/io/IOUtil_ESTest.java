/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:57:07 GMT 2022
 */

package org.springside.modules.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.MalformedInputException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.IOUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtil_ESTest extends IOUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-674), (byte)15);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtil.copy((InputStream) sequenceInputStream0, (OutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, 1948);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      try { 
        IOUtil.toLines((Reader) inputStreamReader0);
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(0L);
      IOUtil.toLines((InputStream) pushbackInputStream0);
      byteArrayInputStream0.mark(0);
      MockFile mockFile0 = new MockFile("lZO@V%]");
      mockFile0.setExecutable(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFileOutputStream0.flush();
      IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      charArray0[3] = 'S';
      charArray0[4] = 'o';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      IOUtil iOUtil0 = new IOUtil();
      mockFileOutputStream0.flush();
      try { 
        IOUtil.write("", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtil.toBufferedReader(mockFileReader0);
      IOUtil.toBufferedReader(bufferedReader0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtil.toLines((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.closeQuietly((Closeable) null);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtil.write("K>t2&-F2gJ1I:'w", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.write((String) null, (Writer) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-800), (-800));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.toString((InputStream) byteArrayInputStream0);
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[3] = object0;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write((-3301));
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      // Undeclared exception!
      IOUtil.copy((Reader) bufferedReader0, (Writer) pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("UUpVElZbBRr`aDo", "A[G1s+tez");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      try { 
        IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile("Lr<3+ly5H|N", "A4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      long long0 = IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0);
      assertEquals(4L, file0.length());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte)17;
      byteArray0[1] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-83), (byte)17);
      // Undeclared exception!
      try { 
        IOUtil.toString((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '\"';
      charArray0[2] = '6';
      charArray0[3] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      IOUtil.closeQuietly(charArrayReader0);
      try { 
        IOUtil.toLines((Reader) charArrayReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      try { 
        IOUtil.toString((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "95@w{ZpGP";
      // Undeclared exception!
      try { 
        IOUtil.write("95@w{ZpGP", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.io.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("ISO-8859-1", "ISO-8859-1");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      IOUtil.toString((Reader) mockFileReader0);
      IOUtil iOUtil0 = new IOUtil();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1685);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      long long0 = IOUtil.copy((Reader) mockFileReader0, (Writer) mockPrintWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(2444L);
      stringReader0.ready();
      stringReader0.skip(1463L);
      stringReader0.reset();
      IOUtil.toLines((Reader) stringReader0);
      IOUtil.toString((Reader) stringReader0);
      IOUtil.closeQuietly(stringReader0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&?p'0$");
      IOUtil.toBufferedReader(stringReader0);
      IOUtil iOUtil0 = new IOUtil();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      long long0 = IOUtil.copy((Reader) stringReader0, (Writer) mockPrintWriter0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      String string0 = IOUtil.toString((Reader) charArrayReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = IOUtil.toLines((InputStream) byteArrayInputStream0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtil.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("[>h'FyGyW5wn}v6,fO", "nkRwj\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      IOUtil.write("[>h'FyGyW5wn}v6,fO", (Writer) mockPrintWriter0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      String string0 = IOUtil.toString((InputStream) mockFileInputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toBufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 869);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      try { 
        IOUtil.toString((Reader) bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.close();
      try { 
        IOUtil.copy((Reader) pipedReader0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'i';
      charArray0[2] = ']';
      charArray0[3] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        IOUtil.copy((Reader) charArrayReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L QpR6:':<LP5}89");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtil.copy((InputStream) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.io.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{=f");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      String string0 = IOUtil.toString((Reader) pushbackReader0);
      assertEquals("{=f", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "5S9aLqUQwD$Z";
      MockPrintStream mockPrintStream0 = new MockPrintStream("5S9aLqUQwD$Z");
      IOUtil.closeQuietly(mockPrintStream0);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-76);
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.close();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      IOUtil.toBufferedReader(inputStreamReader0);
      inputStreamReader0.getEncoding();
      IOUtil iOUtil0 = new IOUtil();
      try { 
        IOUtil.toString((Reader) inputStreamReader0);
        fail("Expecting exception: MalformedInputException");
      
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtil.toLines((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.text.Charsets");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      IOUtil.write("org.springside.modules.utils.text.Charsets", (Writer) mockFileWriter0);
      IOUtil.closeQuietly(mockFileWriter0);
      assertEquals(42L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        IOUtil.closeQuietly(mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4096);
      try { 
        IOUtil.toString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtil.closeQuietly((Closeable) null);
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.springside.modules.utils.io.IOUtil", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = IOUtil.toString((InputStream) byteArrayInputStream0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("UUpVElZbBRr`aDo", "UUpVElZbBRr`aDo");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      long long0 = IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '}';
      charArray0[2] = ']';
      charArray0[3] = '3';
      charArray0[4] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 1);
      IOUtil.toLines((Reader) lineNumberReader0);
      assertEquals(1, lineNumberReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1811);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        IOUtil.toLines((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "org.springside.modules.utils.io.IOUtil");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.springside.modules.utils.io.IOUtil");
      IOUtil.write("org.springside.modules.utils.io.IOUtil", (Writer) charArrayWriter0);
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.closeQuietly(charArrayWriter1);
      assertEquals("org.springside.modules.utils.io.IOUtilorg.springside.modules.utils.io.IOUtilorg.springside.modules.utils.io.IOUtil", charArrayWriter1.toString());
      assertEquals("org.springside.modules.utils.io.IOUtilorg.springside.modules.utils.io.IOUtilorg.springside.modules.utils.io.IOUtil", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputStream outputStream0 = null;
      IOUtil.write((String) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        IOUtil.write("3w", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.io.IOUtil", e);
      }
  }
}
