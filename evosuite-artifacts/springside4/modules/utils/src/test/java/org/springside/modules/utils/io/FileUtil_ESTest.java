/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:44:06 GMT 2022
 */

package org.springside.modules.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.CharBuffer;
import java.util.FormatFlagsConversionMismatchException;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.FileUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileUtil.getFileName("/..");
      FileUtil.makesureDirExists("..");
      File file0 = FileUtil.createTempFile("A^s]q%", "A^s]q%");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0A
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "D/`NKkH*");
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ".");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.asOututStream(".");
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile("/..");
      MockFile.createTempFile("/..", "/..", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("..");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/..");
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.getFileName("/..");
      try { 
        FileUtil.makesureDirExists("..");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists ..
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      file1.delete();
      FileUtil.moveDir(file0, file1);
      assertEquals("tmp-0.tmp", file1.getName());
      assertEquals("/tmp/tmp-0.tmp", file1.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileUtil.asOututStream(" is exist but it is a dir");
      FileUtil.isFileExists(" is exist but it is a dir");
      FileUtil.touch(" to a subdirectory of itself: ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "eD2G5%";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string1 = "com.google.common.io.ByteStreams$LimitedInputStream";
      File file0 = null;
      File file1 = MockFile.createTempFile("eD2G5%", "com.google.common.io.ByteStreams$LimitedInputStream", (File) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file1, file1);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = 0
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile("<((X|7xJO");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/1392409281320-0/tEp/132409281320-0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-62);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      File file1 = MockFile.createTempFile("<((X|7xJO", "<((X|7xJO", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      try { 
        FileUtil.copyDir(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile("<((X|7xJO", "<((X|7xJO");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/1392409281320-0/tEp/132409281320-0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      File file1 = MockFile.createTempFile("<((X|7xJO", "<((X|7xJO", (File) mockFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileUtil.moveDir(mockFile0, file0);
      try { 
        FileUtil.copyDir(file0, file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "eD2G5%";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string1 = "ovO\"fsA#n9";
      File file0 = null;
      File file1 = MockFile.createTempFile("eD2G5%", "ovO\"fsA#n9", (File) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file1, file1);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0o
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileUtil.createTempDir();
      FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "ynl";
      File file0 = MockFile.createTempFile("ynl", "ynl");
      FileUtil.makesureParentDirExists(file0);
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/ynl0ynl is not exist or not a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "_BkOL neE%~VxO;";
      FileUtil.getFileExtension("_BkOL neE%~VxO;");
      MockFile mockFile0 = new MockFile("", "");
      FileUtil.copy(mockFile0, mockFile0);
      FileUtil.isDirExists("_BkOL neE%~VxO;");
      try { 
        FileUtil.asBufferedReader("_BkOL neE%~VxO;");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        FileUtil.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        FileUtil.asInputStream("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.toLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.toLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.makesureDirExists(file0);
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/1392409281320-0 is not exist or not a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.asOututStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.asInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Mac OS X";
      File file0 = FileUtil.createTempFile("Mac OS X", "(l5@a*V!L");
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/Mac OS X0(l5@a*V!L and destination /tmp/Mac OS X0(l5@a*V!L must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream(file0);
      String string0 = "";
      // Undeclared exception!
      try { 
        FileUtil.asBufferedWriter("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharSequence charSequence0 = null;
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.append((CharSequence) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("erNiKctW%", "erNiKctW%");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0e
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        FileUtil.touch("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile("+D", "");
      MockFile mockFile0 = new MockFile("+D", "com.google.common.io.ByteSource");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/+D/com.google.common.io.ByteSource is exist but it is a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtil.toString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      File file0 = FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile(file0, "pT@j`Q>N=7H#*");
      try { 
        FileUtil.write(charBuffer0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtil.createTempFile("org.springside.modules.utils.io.FileUtil", "");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("", file0);
      File file1 = FileUtil.createTempDir();
      try { 
        FileUtil.toByteArray(file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "org.springside.modules.utils.io.FileUtil";
      FileUtil.isDirExists("org.springside.modules.utils.io.FileUtil");
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.copy((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "4il(5}R_>D?{P|";
      MockFile mockFile0 = new MockFile("4il(5}R_>D?{P|", "4il(5}R_>D?{P|");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile("4il(5}R_>D?{P|");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4il(5}R_>D?{P| is  exist but it is a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      String string0 = null;
      // Undeclared exception!
      try { 
        FileUtil.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = null;
      FileUtil.isDirExists((File) null);
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = FileUtil.getFileExtension(file0);
      assertEquals("", string0);
      
      try { 
        FileUtil.append("", file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "%bQj$!+|QfUG;ie";
      File file0 = FileUtil.createTempFile("%bQj$!+|QfUG;ie", "%bQj$!+|QfUG;ie");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%b'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileUtil.asOututStream("com.google.common.io.Files");
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.write("com.google.common.io.Files", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/mzJYB80");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "LHD";
      FileUtil.touch("LHD");
      String string1 = "mzJYB8";
      String string2 = "";
      File file0 = FileUtil.createTempFile("mzJYB8", "");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/mzJYB80 is not exist or not a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileUtil.isFileExists("' after copy to '");
      MockFile mockFile0 = new MockFile("n/|UB@ZmaJxtKp%O7", "&'hJNh9=4uaT?");
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileUtil.getFileExtension(" is not exist or not a dir");
      FileUtil.asBufferedWriter("e6^O;-lCH&/DV.q=b;Q");
      try { 
        FileUtil.makesureDirExists("e6^O;-lCH&/DV.q=b;Q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists e6^O;-lCH&/DV.q=b;Q
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileUtil.getFileName("toga-eval-issta-2023");
      MockFile mockFile0 = new MockFile("toga-eval-issta-2023");
      mockFile0.mkdir();
      FileUtil.asOututStream((File) mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1L));
      File file0 = FileUtil.createTempFile("toga-eval-issta-2023", "toga-eval-issta-2023");
      FileUtil.getFileName("toga-eval-issta-2023");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        FileUtil.makesureDirExists(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists /tmp/toga-eval-issta-20230toga-eval-issta-2023
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = " is exist but it is a dir";
      FileUtil.getFileExtension(" is exist but it is a dir");
      File file0 = FileUtil.createTempFile();
      FileUtil.isDirExists(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.isFileExists(file0);
      FileUtil.getFileExtension("");
      try { 
        FileUtil.toLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileUtil.asOututStream("G:VNU{7LK5~3+`$FQ,e");
      FileUtil.moveDir(file0, file0);
      FileUtil.isDirExists((String) null);
      FileUtil.getFileExtension("G:VNU{7LK5~3+`$FQ,e");
      FileUtil.createTempDir();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/tmp/1392409281320-0/S$(z% P]a18SGTYMu//tmp/1392409281320-0");
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileUtil.asBufferedWriter("e6^O;-lCH&/DV.q=b;Q");
      try { 
        FileUtil.makesureDirExists("e6^O;-lCH&/DV.q=b;Q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists e6^O;-lCH&/DV.q=b;Q
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("LINUX", "java.runtime.version");
      mockFile0.setWritable(true);
      mockFile0.deleteOnExit();
      MockFile.createTempFile("LINUX", "java.runtime.version");
      mockFile0.getAbsoluteFile();
      mockFile0.setExecutable(true);
      FileUtil.isFileExists((File) mockFile0);
      FileUtil.write("LINUX", mockFile0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileUtil.isDirExists(" to a subdirectory of itself: ");
      FileUtil.isFileExists((File) null);
      // Undeclared exception!
      try { 
        FileUtil.makesureParentDirExists((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("erNiKctW%", "erNiKctW%");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '/'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      File file0 = FileUtil.createTempDir();
      FileUtil.makesureDirExists(file0);
      FileUtil.isDirExists(file0);
      System.setCurrentTimeMillis(0L);
      String string0 = null;
      FileUtil.createTempFile("S_B`0sSK@^Rn!", (String) null);
      try { 
        FileUtil.asInputStream("3+iRD&L_7");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "media";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "media");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "media");
      File file0 = null;
      FileUtil.asOututStream("media");
      FileUtil.asBufferedReader("media");
      FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/' after copy to '0*H|_ e1BJv!~`:");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileUtil.asOututStream("zource %s and destination %s must be differet");
      FileUtil.asBufferedWriter("zource %s and destination %s must be differet");
      File file0 = FileUtil.createTempDir();
      FileUtil.moveDir(file0, file0);
      File file1 = FileUtil.createTempDir();
      FileUtil.copy(file1, file0);
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.deleteDir(file0);
      String string0 = "*L@;oRJl[]cS)r^k0d";
      FileUtil.isDirExists("*L@;oRJl[]cS)r^k0d");
      File file2 = FileUtil.createTempFile("' after copy to '", "*H|_ e1BJv!~`:");
      try { 
        FileUtil.asInputStream(file2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "pP78BA>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.getFileExtension("pP78BA>");
      String string1 = "[MPKjEc";
      String string2 = "";
      String string3 = "i=Qma1";
      try { 
        FileUtil.createTempFile("pP78BA>", "i=Qma1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "...";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = FileUtil.createTempFile("...", "...");
      byte[] byteArray0 = FileUtil.toByteArray(file0);
      FileUtil.isDirExists(file0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileUtil.asInputStream(file0);
      FileUtil.isDirExists("...");
      FileUtil.createTempDir();
      File file1 = MockFile.createTempFile(":s%@`m8n|Bo;[V++$j", "...");
      FileUtil.toLines(file1);
      FileUtil.createTempDir();
      FileUtil.asBufferedWriter("u.npS9e 1Q9x4b-:6 ");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file1, file1);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = null;
      FileUtil.isFileExists((File) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.createTempFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile("S$(z% P]a18SGTYMu", "S$(z% P]a18SGTYMu");
      String string0 = "javautil.prefs.PreferencesFactory";
      MockFile.createTempFile("javautil.prefs.PreferencesFactory", "S$(z% P]a18SGTYMu", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      mockFile0.mkdir();
      FileUtil.makesureDirExists("0X");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.toByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "{s6");
      FileUtil.makesureDirExists((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileUtil.asOututStream("+&|98'HS!OZ3");
      File file0 = FileUtil.createTempDir();
      System.setCurrentTimeMillis(0L);
      FileUtil.isDirExists(file0);
      File file1 = FileUtil.createTempFile();
      FileUtil.asInputStream(file1);
      FileUtil.toLines(file1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileUtil.getFileName("' after copy to '");
      FileUtil.asOututStream("' after copy to '");
      FileUtil.asBufferedReader("' after copy to '");
      File file0 = FileUtil.createTempDir();
      System.setCurrentTimeMillis((-5L));
      FileUtil.isDirExists(file0);
      FileUtil.isDirExists(file0);
      File file1 = FileUtil.createTempFile();
      FileUtil.asInputStream(file1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileUtil.createTempFile();
      System.setCurrentTimeMillis((-5851L));
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n#Nr8g$`wT6#(;t", "n#Nr8g$`wT6#(;t");
      mockFile0.toURL();
      mockFile0.toURL();
      mockFile0.mkdir();
      mockFile0.deleteOnExit();
      FileUtil.isDirExists((File) mockFile0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "~";
      FileUtil.isFileExists("~");
      // Undeclared exception!
      try { 
        FileUtil.getFileName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "nM]|=:3T";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("nM]|=:3T");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "nM]|=:3T");
      FileUtil.isDirExists("nM]|=:3T");
      MockFile mockFile0 = new MockFile("nM]|=:3T");
      try { 
        FileUtil.append("nM]|=:3T", mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "4Xi&l(5}R_K>D?{e|";
      MockFile mockFile0 = new MockFile("4Xi&l(5}R_K>D?{e|");
      mockFile0.setReadOnly();
      mockFile0.setExecutable(true, true);
      mockFile0.createNewFile();
      mockFile0.toURI();
      FileUtil.asInputStream((File) mockFile0);
      String string1 = "Cannot move directory: ";
      String string2 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4Xi&l(5}R_K>D?{e|");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      File file0 = FileUtil.createTempFile("Cannot move directory: ", "");
      try { 
        FileUtil.moveFile(mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete 4Xi&l(5}R_K>D?{e|
         //
         verifyException("com.google.common.io.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ".tmp";
      FileUtil.asBufferedWriter(".tmp");
      FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.touch("^uk*`");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile(file0, "S$(z% P]a18SGTYMu");
      String string0 = "java.util.prefs.PreferencesFactory";
      MockFile.createTempFile("java.util.prefs.PreferencesFactory", "S$(z% P]a18SGTYMu", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.copy(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "nM]|=:3T";
      FileUtil.isDirExists("nM]|=:3T");
      MockFile mockFile0 = new MockFile("nM]|=:3T");
      FileUtil.append("nM]|=:3T", mockFile0);
      FileUtil.append("nM]|=:3T", mockFile0);
      MockFile mockFile1 = new MockFile("nM]|=:3T", "nM]|=:3T");
      mockFile0.setExecutable(false);
      FileUtil.toByteArray(mockFile0);
      // Undeclared exception!
      try { 
        FileUtil.asOututStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "nM]|=:3T";
      FileUtil.isDirExists("nM]|=:3T");
      MockFile mockFile0 = new MockFile("nM]|=:3T");
      FileUtil.append("nM]|=:3T", mockFile0);
      FileUtil.append("nM]|=:3T", mockFile0);
      FileUtil.createTempDir();
      FileUtil.isDirExists("nM]|=:3T");
      FileUtil.toLines(mockFile0);
      String string1 = "";
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = FileUtil.createTempFile("org.springside.modules.utils.io.FileUtil", "");
      FileUtil.getFileExtension(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.deleteFile(file0);
      try { 
        FileUtil.write("", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileUtil.getFileExtension("Cannot move directory: ");
      File file0 = FileUtil.createTempFile();
      FileUtil.append("", file0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/S$(z%P]a18SGTYMu/";
      FileUtil.getFileName("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/S$(z%P]a18SGTYMu/");
      FileUtil.isDirExists("");
      String string1 = "8OLp&vm";
      String string2 = null;
      File file0 = MockFile.createTempFile("8OLp&vm", (String) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/8OLp&vm0.tmp is not exist or not a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileUtil.asOututStream("S$(z% P]a18SGTYMu0S$(z% P]a18SGTYMu");
      MockFile mockFile0 = new MockFile("/tmp/1392409281320-0/S$(z% P]a18SGTYMu/");
      MockFile.createTempFile("VGL5n$5;;jEz]C_1.&m", (String) null, (File) mockFile0);
      mockFile0.setWritable(true);
      mockFile0.getCanonicalPath();
      File file0 = MockFile.createTempFile("com.google.common.collect.AbstractIterator$1", "com.google.common.collect.AbstractIterator$1", (File) mockFile0);
      FileUtil.toByteArray(file0);
      FileUtil.asOututStream(file0);
      System.setCurrentTimeMillis(375L);
      FileUtil.isDirExists("com.google.common.collect.UnmodifiableIterator");
      FileUtil.isDirExists("/tmp/1392409281320-0/S$(z% P]a18SGTYMu/");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1313L);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtil.createTempFile("org.springside.modules.utils.io.FileUtil", "");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("", file0);
      // Undeclared exception!
      FileUtil.createTempDir();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileUtil.isDirExists("aw~<P]zdmVo<v,");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileUtil.getFileName("10.11");
      FileUtil.isDirExists("cmHVV]L_");
      File file0 = FileUtil.createTempFile("org.apache.commons.lang3.Validate", "Th|BVPQqKC%aV");
      file0.getAbsoluteFile();
      FileUtil.getFileExtension(file0);
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%a'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile(file0, "S$(z% P]a18SGTYMu");
      String string0 = "java.util.prefs.PreferencesFactory";
      MockFile.createTempFile("java.util.prefs.PreferencesFactory", "S$(z% P]a18SGTYMu", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4Xi&l(5}R_K>D?{e|");
      mockFile0.setReadOnly();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "java.util.prefs.PreferencesFactory0p>$z");
      mockFile0.setExecutable(true, true);
      mockFile0.createNewFile();
      mockFile0.toURI();
      FileUtil.asInputStream((File) mockFile0);
      String string0 = "Cannot move directory: ";
      File file0 = FileUtil.createTempFile("Cannot move directory: ", "");
      file0.setWritable(false);
      try { 
        FileUtil.moveFile(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+&9H'H:!OZ3");
      FileSystemHandling.createFolder(evoSuiteFile0);
      try { 
        FileUtil.asOututStream("+&9H'H:!OZ3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.createTempFile();
      FileUtil.asOututStream("zG4Mm:Vk'>j{");
      // Undeclared exception!
      try { 
        FileUtil.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream("zG4Mm:Vk'>j{");
      MockFile.createTempFile("zG4Mm:Vk'>j{", "java.til.prefs.PreferencesFatory0S$(z% P]a18SGTYMu");
      FileUtil.touch(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp-0.tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtil.makesureParentDirExists(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream("zG4Mm:Vk'>j{");
      FileUtil.touch(file0);
      FileUtil.makesureParentDirExists(file0);
      File file1 = file0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp-0.tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "zG4Mm:Vk'>j{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileUtil.toString(file1);
      FileUtil.isFileExists("");
      FileUtil.asOututStream(file0);
      // Undeclared exception!
      try { 
        FileUtil.toString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      String string0 = "-v&(Rh'A";
      FileUtil.getFileName("-v&(Rh'A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.asOututStream(file0);
      try { 
        FileUtil.toByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "/tmp/1392409281320-0/S$(z% P]a58SGTYMu/";
      MockFile mockFile0 = new MockFile("/tmp/1392409281320-0/S$(z% P]a58SGTYMu/");
      FileUtil.getFileExtension((File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(mockFile0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.asOututStream("zG4Mm:Vk'>j{");
      try { 
        FileUtil.touch(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp-0.tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file1 = FileUtil.createTempFile();
      FileUtil.moveDir(file0, file1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        FileUtil.touch((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = FileUtil.createTempFile("org.springside.modules.utils.io.FileUtil", "");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("", file0);
      FileUtil.toByteArray(file0);
      file0.mkdirs();
      FileUtil.touch("qng@wSWE");
      MockFile mockFile0 = new MockFile("qng@wSWE", "");
      FileUtil.getFileExtension((File) mockFile0);
      FileUtil.asInputStream((File) mockFile0);
      File file1 = null;
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "nQ]|=:3T";
      FileUtil.isFileExists("nQ]|=:3T");
      MockFile mockFile0 = new MockFile("nQ]|=:3T");
      FileUtil.asOututStream("nQ]|=:3T");
      mockFile0.setWritable(false, false);
      FileUtil.isDirExists("nQ]|=:3T");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H?ob1NC4h5h");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)1;
      mockFile0.toURL();
      FileUtil.getFileExtension("..");
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-106);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil.asBufferedReader("nQ]|=:3T");
      try { 
        FileUtil.asBufferedWriter("nQ]|=:3T");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "[-pV\"%";
      MockFile mockFile0 = new MockFile("[-pV\"%");
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(mockFile0, file0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileUtil.isFileExists("");
      try { 
        FileUtil.toString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch("Linux");
      FileUtil.asInputStream("Linux");
      FileUtil fileUtil0 = new FileUtil();
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtil.createTempFile("M>K&F41<7>!C1v#PB", "M>K&F41<7>!C1v#PB");
      FileUtil.write("M>K&F41<7>!C1v#PB", file0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.toByteArray(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileUtil.getFileExtension("S$(z% P]a18SGTYu");
      FileUtil.isDirExists("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedWriter("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4Xi&l(5}R_K>D?{e|", "4Xi&l(5}R_K>D?{e|");
      mockFile0.createNewFile();
      FileUtil.asInputStream((File) mockFile0);
      String string0 = "Cannot move directory: ";
      File file0 = FileUtil.createTempFile("Cannot move directory: ", "java.util.prefs.PreferencesFactory0p>$z");
      file0.toPath();
      FileUtil.moveFile(mockFile0, file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp-1.tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Cannot move directory: ");
      FileUtil.touch(file0);
      mockFile0.setWritable(true);
      File file1 = FileUtil.createTempFile();
      mockFile0.mkdirs();
      FileUtil.toLines(file1);
      String string1 = "org.springside.modules.utils.text.Charsets";
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp-1.tmp is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ":Hk5rDQ4<gi";
      File file0 = MockFile.createTempFile(":Hk5rDQ4<gi", ":Hk5rDQ4<gi");
      file0.setReadable(false, false);
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(":Hk5rDQ4<gi", ":Hk5rDQ4<gi");
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      MockFile mockFile0 = new MockFile("+&9H'H:!O3", "+&9H'H:!O3");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.copyDir(mockFile0, file0);
      try { 
        FileUtil.asInputStream("+&9H'H:!O3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "4Xi&l(5}R_K>D?{e|";
      MockFile mockFile0 = new MockFile("4Xi&l(5}R_K>D?{e|", "4Xi&l(5}R_K>D?{e|");
      mockFile0.createNewFile();
      File file0 = FileUtil.createTempFile("4Xi&l(5}R_K>D?{e|", "4Xi&l(5}R_K>D?{e|");
      FileUtil.moveFile(mockFile0, file0);
      mockFile0.mkdirs();
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/4Xi&l(5}R_K>D?{e|04Xi&l(5}R_K>D?{e| is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtil.createTempFile("%S)0Kt?&YEuTs?VKb7", "%S)0Kt?&YEuTs?VKb7");
      FileUtil.getFileExtension(file0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%S)0Kt?&YEuTs?VKb7");
      System.setCurrentTimeMillis((-1L));
      String string0 = "/tmp/1392409281320-0/vg0j6c =jJ/";
      FileUtil.asOututStream("/tmp/1392409281320-0/vg0j6c =jJ/");
      FileUtil.asInputStream(file0);
      FileUtil.asOututStream(file0);
      FileUtil.toLines(file0);
      System.setCurrentTimeMillis(0L);
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%S'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      String string0 = "/tmp/1392409281320-0/S$(z%P]a18SGTYMu/";
      MockFile mockFile0 = new MockFile(file0, "/tmp/1392409281320-0/S$(z%P]a18SGTYMu/");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/1392409281320-0/tmp/1392409281320-0/S$(z%P]a18SGTYMu/0/tmp/1392409281320-0/S$(z%P]a18SGTYMu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/tmp/1392409281320-0/S$(z%P]a18SGTYMu/");
      MockFile.createTempFile("/tmp/1392409281320-0/S$(z%P]a18SGTYMu/", "/tmp/1392409281320-0/S$(z%P]a18SGTYMu/", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.createTempFile();
      mockFile0.mkdir();
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ".");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.createTempFile();
      FileUtil.asOututStream(".");
      try { 
        FileUtil.asOututStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileUtil.createTempDir();
      FileUtil.createTempDir();
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile("", ":,krDP4%gi");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("1392409281320-0", file0.getName());
      assertEquals("/tmp/1392409281320-0", file0.toString());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      String string0 = "/";
      MockFile mockFile0 = new MockFile("/", "/");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      MockFile mockFile1 = new MockFile("/", "/");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      
      // Undeclared exception!
      FileUtil.moveDir(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "%s (%s) must be less than size (%s)";
      MockFile mockFile0 = new MockFile("%s (%s) must be less than size (%s)");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(mockFile0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/tmp-0.tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.canExecute());
      
      InputStream inputStream0 = FileUtil.asInputStream(file0);
      assertNotNull(inputStream0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/tmp-0.tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("tmp-0.tmp", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, "U'.*6YTo74K5^C");
      try { 
        FileUtil.moveDir(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp/1392409281320-0 to a subdirectory of itself: /tmp/1392409281320-0/U'.*6YTo74K5^C
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch(file0);
      // Undeclared exception!
      try { 
        FileUtil.asOututStream("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtil.createTempFile("tmp-", "Failed to delete original directory '");
      FileUtil.deleteFile(file0);
      assertEquals("/tmp/tmp-0Failed to delete original directory '", file0.toString());
      assertEquals("tmp-0Failed to delete original directory '", file0.getName());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadable(false);
      FileUtil.touch("@M/T");
      FileUtil.asInputStream("@M/T");
      FileUtil.createTempDir();
      try { 
        MockFile.createTempFile("@M/T", "@M/T", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      File file1 = FileUtil.createTempDir();
      FileUtil.copyDir(file0, file0);
      assertTrue(file0.equals((Object)file1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "4il(5}R_>D?{P|";
      MockFile mockFile0 = new MockFile("4il(5}R_>D?{P|", "4il(5}R_>D?{P|");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile("4il(5}R_>D?{P|");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = ":HkJrD4<z";
      File file0 = MockFile.createTempFile(":HkJrD4<z", ":HkJrD4<z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile(":HkJrD4<z", ":HkJrD4<z");
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)55;
      byte byte0 = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = FileUtil.createTempFile("_[Or%0STz4(Y<JCm", "RgB/");
      FileUtil.getFileExtension(file0);
      File file1 = FileUtil.createTempFile("_[Or%0STz4(Y<JCm", "4");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file1, file1);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = 0
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = "/tmp/132409281320-0/S$(zP]a18SGTYMu/";
      MockFile mockFile0 = new MockFile(file0, "/tmp/132409281320-0/S$(zP]a18SGTYMu/");
      MockFile.createTempFile("/tmp/132409281320-0/S$(zP]a18SGTYMu/", "/tmp/132409281320-0/S$(zP]a18SGTYMu/", (File) mockFile0);
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to delete original directory '/tmp/1392409281320-0/tmp/132409281320-0/S$(zP]a18SGTYMu' after copy to '/tmp/1392409281320-0'
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp-0.tmp is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      // Undeclared exception!
      try { 
        FileUtil.touch("//");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setExecutable(false, false);
      FileUtil.touch("@M/T");
      FileUtil.asInputStream("@M/T");
      FileUtil.createTempDir();
      MockFile.createTempFile("@M/T", "@M/T", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/@M/T0@M/T and destination /tmp/1392409281320-0/@M/T0@M/T must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtil.createTempFile("QF#G!mI9?", "wzx");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/QF#G!mI9?0wzx and destination /tmp/QF#G!mI9?0wzx must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("+D", "");
      File file1 = FileUtil.createTempFile("com.google.common.io.ByteSource", ">9L/4|");
      FileUtil.copyFile(file0, file1);
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/+D0 and destination /tmp/+D0 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = null;
      File file0 = FileUtil.createTempDir();
      FileUtil.copy(file0, file0);
      FileUtil.isFileExists(file0);
      try { 
        FileUtil.toLines(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch("@M/T");
      FileUtil.asInputStream("@M/T");
      MockFile.createTempFile("@M/T", "@M/T", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/@M/T0@M/T and destination /tmp/1392409281320-0/@M/T0@M/T must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "os.arch";
      FileUtil.getFileExtension("os.arch");
      File file0 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/tmp-0.tmp and destination /tmp/tmp-0.tmp must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+&9H'H:!O3");
      try { 
        FileUtil.asInputStream("+&9H'H:!O3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("+D", "+D");
      MockFile mockFile0 = new MockFile("+D", "+D");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/+D/+D is exist but it is a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileUtil.getFileName("/$q");
      FileUtil.makesureDirExists("$q");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0 and destination /tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ".");
      FileUtil.moveDir(file0, mockFile0);
      try { 
        FileUtil.asOututStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/1392409281320-0 is not exist or not a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "..";
      MockFile mockFile0 = new MockFile("..", "..");
      MockFile mockFile1 = new MockFile("..");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .. is  exist but it is a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile("/..", "/..");
      MockFile.createTempFile("/..", "/..", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("..");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "/..");
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.getFileName("/..");
      try { 
        FileUtil.makesureDirExists("..");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // There is a file exists ..
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("X.&");
      File file0 = MockFile.createTempFile("X.&", "X.&", (File) mockFile0);
      FileUtil.getFileName("X.&");
      FileUtil.makesureDirExists("X.&");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/X.&/X.&0X.& is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch("/6U/6");
      FileUtil.asInputStream("/6U/6");
      MockFile.createTempFile("/6U/6", "/6U/6", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/6U/60/6U/6 and destination /tmp/1392409281320-0/6U/60/6U/6 must be different
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      boolean boolean0 = FileUtil.isFileExists("");
      assertFalse(boolean0);
      
      FileUtil.toString(file0);
      assertEquals("tmp-0.tmp", file0.getName());
      assertEquals("/tmp/tmp-0.tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "4Xi&l(5}R_K>D?{e|";
      MockFile mockFile0 = new MockFile("4Xi&l(5}R_K>D?{e|", "4Xi&l(5}R_K>D?{e|");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile(",8Mdv", "4Xi&l(5}R_K>D?{e|");
      FileUtil.isDirExists("4Xi&l(5}R_K>D?{e|");
      FileUtil.moveFile(mockFile0, mockFile1);
      FileUtil.touch((File) mockFile1);
      mockFile0.mkdirs();
      FileUtil.toLines(mockFile1);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/,8Mdv/4Xi&l(5}R_K>D?{e| is exist but it is a file
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = FileUtil.createTempFile("org.springside.modules.utils.i1.FileUti#", "org.springside.modules.utils.i1.FileUti#");
      FileUtil.getFileExtension("org.springside.modules.utils.i1.FileUti#");
      FileUtil.write("org.springside.modules.utils.i1.FileUti#", file0);
      FileUtil.toByteArray(file0);
      FileUtil.asInputStream(file0);
      String string0 = FileUtil.getFileExtension(file0);
      assertEquals("FileUti#", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nQ]|=:3T");
      FileUtil.asOututStream("nQ]|=:3T");
      FileUtil.asBufferedWriter("nQ]|=:3T");
      FileUtil.append("nQ]|=:3T", mockFile0);
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.deleteDir((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not exist or not a dir
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      try { 
        FileUtil.moveDir(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to delete original directory '/tmp/1392409281320-0' after copy to '/tmp/1392409281320-0'
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/";
      MockFile mockFile0 = new MockFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/");
      MockFile mockFile1 = new MockFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/", "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/");
      try { 
        FileUtil.moveDir(mockFile0, mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils to a subdirectory of itself: /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils
         //
         verifyException("org.springside.modules.utils.io.FileUtil", e);
      }
  }
}
