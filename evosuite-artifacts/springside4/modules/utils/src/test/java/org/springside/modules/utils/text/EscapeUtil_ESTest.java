/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:07:13 GMT 2022
 */

package org.springside.modules.utils.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.text.EscapeUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EscapeUtil_ESTest extends EscapeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = EscapeUtil.urlEncode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = EscapeUtil.urlDecode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlEncode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlDecode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlDecode("jW}DejEx&%q:M$d9d!/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"q:\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml(":f$S0Mrg2");
      assertEquals(":f$S0Mrg2", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml(":f$S0Mrg2");
      assertEquals(":f$S0Mrg2", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = EscapeUtil.urlEncode(":f$S0Mrg2");
      assertEquals("%3Af%24S0Mrg2", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = EscapeUtil.urlDecode(":f$S0Mrg2");
      assertEquals(":f$S0Mrg2", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml(":f$S0Mrg2");
      assertEquals(":f$S0Mrg2", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EscapeUtil escapeUtil0 = new EscapeUtil();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml(":f$S0Mrg2");
      assertEquals(":f$S0Mrg2", string0);
  }
}
