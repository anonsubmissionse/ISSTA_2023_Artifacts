/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:01:34 GMT 2022
 */

package org.apache.commons.pool2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.TimerTask;
import org.apache.commons.pool2.KeyedObjectPool;
import org.apache.commons.pool2.KeyedPooledObjectFactory;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.PoolUtils;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.PooledObjectState;
import org.apache.commons.pool2.SwallowedExceptionListener;
import org.apache.commons.pool2.impl.AbandonedConfig;
import org.apache.commons.pool2.impl.BaseGenericObjectPool;
import org.apache.commons.pool2.impl.BaseObjectPoolConfig;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.EvictionPolicy;
import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.apache.commons.pool2.impl.SoftReferenceObjectPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoolUtils_ESTest extends PoolUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertNotNull(threadDeath0);
      
      DefaultPooledObject<ThreadDeath> defaultPooledObject0 = new DefaultPooledObject<ThreadDeath>(threadDeath0);
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(defaultPooledObject0);
      
      KeyedPooledObjectFactory<String, ThreadDeath> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, ThreadDeath>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("'", "'", ", lifo=", ", pool=").when(keyedPooledObjectFactory0).toString();
      doReturn(defaultPooledObject0, (PooledObject) null).when(keyedPooledObjectFactory0).makeObject(anyString());
      KeyedPooledObjectFactory<String, ThreadDeath> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, ThreadDeath> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, ThreadDeath>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<String, ThreadDeath> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<String, ThreadDeath>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      try { 
        PoolUtils.prefill(keyedObjectPool0, " x", 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        PoolUtils.prefill((KeyedObjectPool<StackOverflowError, OutOfMemoryError>) null, (Collection<StackOverflowError>) null, 3018);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<StackOverflowError> softReferenceObjectPool0 = new SoftReferenceObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(softReferenceObjectPool0);
      
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<StackOverflowError>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(objectPool0);
      
      ObjectPool<StackOverflowError> objectPool1 = PoolUtils.erodingPool(objectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(objectPool1.equals((Object)objectPool0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(objectPool1);
      
      KeyedPooledObjectFactory<String, UnknownError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, UnknownError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, UnknownError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<UnknownError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<UnknownError>();
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(abandonedConfig1);
      
      GenericKeyedObjectPool<String, UnknownError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, UnknownError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0, abandonedConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      int int0 = (-2146737803);
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<String, UnknownError>) genericKeyedObjectPool0, (String) null, (-2146737803), 439L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      SoftReference<OutOfMemoryError> softReference0 = new SoftReference<OutOfMemoryError>(outOfMemoryError0, referenceQueue0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertFalse(softReference0.isEnqueued());
      assertNotNull(softReference0);
      
      PooledSoftReference<OutOfMemoryError> pooledSoftReference0 = new PooledSoftReference<OutOfMemoryError>(softReference0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertNotNull(pooledSoftReference0);
      
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("").when(pooledObjectFactory0).toString();
      doReturn(pooledSoftReference0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertNotNull(genericObjectPoolConfig1);
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool0 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory1, genericObjectPoolConfig1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      int int0 = genericObjectPool0.getNumActive();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals(0, int0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      
      genericObjectPoolConfig1.setJmxEnabled(true);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      
      try { 
        PoolUtils.prefill((ObjectPool<OutOfMemoryError>) genericObjectPool0, 2031);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SoftReference<Object> softReference0 = new SoftReference<Object>((Object) null);
      assertFalse(softReference0.isEnqueued());
      assertNotNull(softReference0);
      
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      assertFalse(softReference0.isEnqueued());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertNotNull(pooledSoftReference0);
      
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("i@f%?3?#MAcN';Nw").when(pooledObjectFactory0).toString();
      doReturn(pooledSoftReference0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Object> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(softReference0.isEnqueued());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(softReference0.isEnqueued());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<Object> pooledObjectFactory2 = genericObjectPool0.getFactory();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(softReference0.isEnqueued());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory2);
      assertSame(pooledObjectFactory2, pooledObjectFactory1);
      assertNotNull(pooledObjectFactory2);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertNotNull(abandonedConfig0);
      
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory2, genericObjectPoolConfig0, abandonedConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPool1.equals((Object)genericObjectPool0));
      assertFalse(softReference0.isEnqueued());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertFalse(genericObjectPool1.isClosed());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertFalse(genericObjectPool1.getFairness());
      assertTrue(genericObjectPool1.getLifo());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertTrue(genericObjectPool1.isAbandonedConfig());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool1);
      
      try { 
        PoolUtils.prefill((ObjectPool<Object>) genericObjectPool1, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertNotNull(threadDeath0);
      
      SoftReference<ThreadDeath> softReference0 = new SoftReference<ThreadDeath>(threadDeath0);
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertFalse(softReference0.isEnqueued());
      assertNotNull(softReference0);
      
      PooledSoftReference<ThreadDeath> pooledSoftReference0 = new PooledSoftReference<ThreadDeath>(softReference0);
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertNotNull(pooledSoftReference0);
      
      PooledObjectFactory<ThreadDeath> pooledObjectFactory0 = (PooledObjectFactory<ThreadDeath>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("M4}&+3!- {Hz").when(pooledObjectFactory0).toString();
      doReturn(pooledSoftReference0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      doReturn(false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      PooledObjectFactory<ThreadDeath> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<ThreadDeath> softReferenceObjectPool0 = new SoftReferenceObjectPool<ThreadDeath>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      assertFalse(softReference0.isEnqueued());
      assertEquals(0L, pooledSoftReference0.getBorrowedCount());
      assertEquals(PooledObjectState.IDLE, pooledSoftReference0.getState());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(softReferenceObjectPool0);
      
      try { 
        PoolUtils.prefill((ObjectPool<ThreadDeath>) softReferenceObjectPool0, 2447);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<StackOverflowError, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, Object>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      String string0 = genericKeyedObjectPool0.getEvictionPolicyClassName();
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", string0);
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(string0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      int int0 = (-293);
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<StackOverflowError, Object>) genericKeyedObjectPool0, stackOverflowError0, (-293), 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<OutOfMemoryError> softReferenceObjectPool0 = new SoftReferenceObjectPool<OutOfMemoryError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(softReferenceObjectPool0);
      
      ObjectPool<OutOfMemoryError> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<OutOfMemoryError>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(objectPool0);
      
      try { 
        PoolUtils.checkMinIdle(objectPool0, (-1), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnknownError unknownError0 = new UnknownError();
      assertEquals("java.lang.UnknownError", unknownError0.toString());
      assertNull(unknownError0.getMessage());
      assertNotNull(unknownError0);
      
      UnknownError unknownError1 = new UnknownError(", evictionIterator=");
      assertFalse(unknownError1.equals((Object)unknownError0));
      assertEquals(", evictionIterator=", unknownError1.getMessage());
      assertEquals("java.lang.UnknownError: , evictionIterator=", unknownError1.toString());
      assertNotNull(unknownError1);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.pool2.PoolUtils$SynchronizedObjectPool", "e", "e", 2132);
      assertEquals("e", stackTraceElement0.getMethodName());
      assertEquals(2132, stackTraceElement0.getLineNumber());
      assertEquals("org.apache.commons.pool2.PoolUtils$SynchronizedObjectPool.e(e:2132)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("e", stackTraceElement0.getFileName());
      assertEquals("org.apache.commons.pool2.PoolUtils$SynchronizedObjectPool", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("%Pm?\"af5rVw[}|W#UZ1", ", evictionIterator=", "maxTotal=", 225);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("maxTotal=", stackTraceElement1.getFileName());
      assertEquals(225, stackTraceElement1.getLineNumber());
      assertEquals(", evictionIterator=", stackTraceElement1.getMethodName());
      assertEquals("%Pm?\"af5rVw[}|W#UZ1., evictionIterator=(maxTotal=:225)", stackTraceElement1.toString());
      assertEquals("%Pm?\"af5rVw[}|W#UZ1", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(", softMinEvictableIdleTime=", "\"@?3]ur$3=$QS?,:r", "", 225);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertEquals("\"@?3]ur$3=$QS?,:r", stackTraceElement2.getMethodName());
      assertEquals(225, stackTraceElement2.getLineNumber());
      assertEquals(", softMinEvictableIdleTime=.\"@?3]ur$3=$QS?,:r(:225)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("", stackTraceElement2.getFileName());
      assertEquals(", softMinEvictableIdleTime=", stackTraceElement2.getClassName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      unknownError1.setStackTrace(stackTraceElementArray0);
      assertFalse(unknownError1.equals((Object)unknownError0));
      assertEquals(", evictionIterator=", unknownError1.getMessage());
      assertEquals("java.lang.UnknownError: , evictionIterator=", unknownError1.toString());
      assertNotSame(unknownError1, unknownError0);
      assertEquals(3, stackTraceElementArray0.length);
      
      unknownError0.addSuppressed(unknownError1);
      assertFalse(unknownError0.equals((Object)unknownError1));
      assertFalse(unknownError1.equals((Object)unknownError0));
      assertEquals("java.lang.UnknownError", unknownError0.toString());
      assertNull(unknownError0.getMessage());
      assertEquals(", evictionIterator=", unknownError1.getMessage());
      assertEquals("java.lang.UnknownError: , evictionIterator=", unknownError1.toString());
      assertNotSame(unknownError0, unknownError1);
      assertNotSame(unknownError1, unknownError0);
      
      StackTraceElement[] stackTraceElementArray1 = unknownError0.getStackTrace();
      assertFalse(unknownError0.equals((Object)unknownError1));
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals("java.lang.UnknownError", unknownError0.toString());
      assertNull(unknownError0.getMessage());
      assertNotSame(unknownError0, unknownError1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      
      String string0 = unknownError0.getLocalizedMessage();
      assertFalse(unknownError0.equals((Object)unknownError1));
      assertEquals("java.lang.UnknownError", unknownError0.toString());
      assertNull(unknownError0.getMessage());
      assertNotSame(unknownError0, unknownError1);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(unknownError0);
        fail("Expecting exception: UnknownError");
      
      } catch(UnknownError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        PoolUtils.checkMinIdle((ObjectPool<Object>) null, 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "41.'C'oTJlshUl<h", (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool0 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory1, genericObjectPoolConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      String string0 = genericObjectPool0.toString();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(string0);
      
      ObjectPool<OutOfMemoryError> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<OutOfMemoryError>) genericObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(objectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Object, OutOfMemoryError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        PoolUtils.prefill((ObjectPool<Object>) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
      assertNotNull(keyedPooledObjectFactory2);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<Object, UnknownError>) null, (Object) outOfMemoryError0, 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertNotNull(softReferenceObjectPool0);
      
      int int0 = softReferenceObjectPool0.getNumIdle();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, int0);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Integer>) softReferenceObjectPool0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertNotNull(genericObjectPoolConfig1);
      
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory1, genericObjectPoolConfig1, (AbandonedConfig) null);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Integer>) genericObjectPool0, (-1310.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory0);
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<Object> pooledObjectFactory1 = genericObjectPool0.getFactory();
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<Object> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory2);
      
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory2);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(softReferenceObjectPool0);
      
      PoolUtils.prefill((ObjectPool<Object>) softReferenceObjectPool0, 0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoolUtils poolUtils0 = new PoolUtils();
      assertNotNull(poolUtils0);
      
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<OutOfMemoryError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(abandonedConfig1);
      
      GenericKeyedObjectPool<OutOfMemoryError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, abandonedConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<OutOfMemoryError, InternalError>) genericKeyedObjectPool0, outOfMemoryError0, 700, (-3437L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNotNull(threadDeath0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("ErodingObjectPool{factor=");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append(']');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      threadDeath0.printStackTrace(printStream0);
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      threadDeath0.printStackTrace();
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(threadDeath0);
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(softReferenceObjectPool0);
      
      ObjectPool<Integer> objectPool0 = PoolUtils.erodingPool((ObjectPool<Integer>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      assertNotNull(objectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<ThreadDeath>) null, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNotNull(threadDeath0);
      
      threadDeath0.printStackTrace();
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      
      threadDeath0.printStackTrace();
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      
      try { 
        PoolUtils.prefill((KeyedObjectPool<Object, Object>) null, (Object) threadDeath0, 4054);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertNotNull(abandonedConfig0);
      
      GenericKeyedObjectPool<StackOverflowError, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, Object>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0, abandonedConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<StackOverflowError, Object> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<StackOverflowError, Object>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool(keyedObjectPool0, (float) (-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig1);
      
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory1, genericObjectPoolConfig1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle((ObjectPool<Integer>) genericObjectPool0, 0, 320L);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((ObjectPool<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((ObjectPool<InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError("Bb@Q*/9N[P}|U");
      assertEquals("Bb@Q*/9N[P}|U", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: Bb@Q*/9N[P}|U", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      stackOverflowError0.printStackTrace();
      assertEquals("Bb@Q*/9N[P}|U", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: Bb@Q*/9N[P}|U", stackOverflowError0.toString());
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(stackOverflowError0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KeyedPooledObjectFactory<InternalError, StackOverflowError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<InternalError, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any(java.lang.InternalError.class));
      KeyedPooledObjectFactory<InternalError, StackOverflowError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<InternalError, StackOverflowError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<InternalError, StackOverflowError>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<InternalError, StackOverflowError> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<InternalError, StackOverflowError>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      KeyedObjectPool<InternalError, StackOverflowError> keyedObjectPool1 = PoolUtils.erodingPool(keyedObjectPool0, (float) 100, true);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool1);
      
      LinkedHashSet<InternalError> linkedHashSet0 = new LinkedHashSet<InternalError>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      InternalError internalError0 = new InternalError("Fl^wzZtbkN:'slrC");
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError0.toString());
      assertEquals("Fl^wzZtbkN:'slrC", internalError0.getMessage());
      assertNotNull(internalError0);
      
      InternalError internalError1 = new InternalError(internalError0);
      assertFalse(internalError1.equals((Object)internalError0));
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError0.toString());
      assertEquals("Fl^wzZtbkN:'slrC", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.getMessage());
      assertEquals("java.lang.InternalError: java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.toString());
      assertNotNull(internalError1);
      
      internalError1.printStackTrace();
      assertFalse(internalError0.equals((Object)internalError1));
      assertFalse(internalError1.equals((Object)internalError0));
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError0.toString());
      assertEquals("Fl^wzZtbkN:'slrC", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.getMessage());
      assertEquals("java.lang.InternalError: java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.toString());
      assertNotSame(internalError0, internalError1);
      assertNotSame(internalError1, internalError0);
      
      boolean boolean0 = linkedHashSet0.add(internalError1);
      assertFalse(internalError0.equals((Object)internalError1));
      assertFalse(internalError1.equals((Object)internalError0));
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError0.toString());
      assertEquals("Fl^wzZtbkN:'slrC", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.getMessage());
      assertEquals("java.lang.InternalError: java.lang.InternalError: Fl^wzZtbkN:'slrC", internalError1.toString());
      assertNotSame(internalError0, internalError1);
      assertNotSame(internalError1, internalError0);
      assertFalse(linkedHashSet0.contains(internalError0));
      assertTrue(linkedHashSet0.contains(internalError1));
      
      try { 
        PoolUtils.prefill(keyedObjectPool1, (Collection<InternalError>) linkedHashSet0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      PoolUtils.prefill((KeyedObjectPool<Integer, Object>) genericKeyedObjectPool0, (Collection<Integer>) linkedHashSet0, 125);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertFalse(linkedHashSet0.contains(125));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      genericKeyedObjectPoolConfig1.setNumTestsPerEvictionRun(4151);
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(4151, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPool<Integer, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(4151, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(4151, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<Integer, InternalError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<Integer, InternalError>) genericKeyedObjectPool0, (float) 100, false);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(4151, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(4151, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(keyedObjectPool0);
      
      KeyedPooledObjectFactory<InternalError, Integer> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<InternalError, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<InternalError, Integer> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(keyedPooledObjectFactory3);
      
      GenericKeyedObjectPool<InternalError, Integer> genericKeyedObjectPool1 = null;
      try {
        genericKeyedObjectPool1 = new GenericKeyedObjectPool<InternalError, Integer>(keyedPooledObjectFactory3, (GenericKeyedObjectPoolConfig<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      genericObjectPoolConfig0.setMinIdle(3372);
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      
      KeyedPooledObjectFactory<StackOverflowError, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      GenericKeyedObjectPool<StackOverflowError, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, Object>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, abandonedConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      genericKeyedObjectPool0.setSwallowedExceptionListener((SwallowedExceptionListener) null);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      EvictionPolicy<Object> evictionPolicy0 = genericKeyedObjectPool0.getEvictionPolicy();
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(evictionPolicy0);
      
      genericObjectPoolConfig0.setEvictionPolicy(evictionPolicy0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory0, genericObjectPoolConfig0, abandonedConfig0);
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(8, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      genericObjectPool0.setMaxTotal((-814));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(8, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals((-814), genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      
      PooledObjectFactory<Object> pooledObjectFactory1 = genericObjectPool0.getFactory();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(8, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals((-814), genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<Object> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(8, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals((-814), genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory2);
      
      PooledObjectFactory<Object> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3372, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(8, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals((-814), genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(pooledObjectFactory3, pooledObjectFactory2);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotSame(pooledObjectFactory2, pooledObjectFactory3);
      assertNotNull(pooledObjectFactory3);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<InternalError, Object>) null, (float) (-814), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertNotNull(abandonedConfig0);
      
      genericKeyedObjectPoolConfig1.setMaxIdlePerKey(16);
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(16, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(abandonedConfig1);
      
      abandonedConfig1.setLogAbandoned(true);
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      
      GenericKeyedObjectPool<Integer, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, abandonedConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(16, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(16, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<Integer, String> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<Integer, String>) genericKeyedObjectPool0, (float) 8);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(16, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(16, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(keyedObjectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<OutOfMemoryError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Object>) null, (-337.6754F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KeyedPooledObjectFactory<String, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      GenericKeyedObjectPool<String, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<String, InternalError>) genericKeyedObjectPool0, (-4656.4287F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PoolUtils poolUtils0 = new PoolUtils();
      //  // Unstable assertion: assertNotNull(poolUtils0);
      
      KeyedPooledObjectFactory<InternalError, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<InternalError, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<InternalError, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPoolConfig1);
      
      AbandonedConfig abandonedConfig0 = null;
      GenericKeyedObjectPool<InternalError, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<InternalError, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, (AbandonedConfig) null);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPool0);
      
      genericKeyedObjectPoolConfig1.setJmxNameBase((String) null);
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      InternalError internalError0 = new InternalError();
      //  // Unstable assertion: assertEquals("java.lang.InternalError", internalError0.toString());
      //  // Unstable assertion: assertNull(internalError0.getMessage());
      //  // Unstable assertion: assertNotNull(internalError0);
      
      Throwable throwable0 = internalError0.fillInStackTrace();
      //  // Unstable assertion: assertEquals("java.lang.InternalError", internalError0.toString());
      //  // Unstable assertion: assertNull(internalError0.getMessage());
      //  // Unstable assertion: assertNull(throwable0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.InternalError", throwable0.toString());
      //  // Unstable assertion: assertSame(internalError0, throwable0);
      //  // Unstable assertion: assertSame(throwable0, internalError0);
      //  // Unstable assertion: assertNotNull(throwable0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<InternalError, String>) genericKeyedObjectPool0, internalError0, 8, (long) 100);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPooledFactory((PooledObjectFactory<StackOverflowError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Object, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPooledFactory((PooledObjectFactory<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertNotNull(genericObjectPoolConfig1);
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool0 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory1, genericObjectPoolConfig1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      int int0 = genericObjectPool0.getNumActive();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertEquals(0, int0);
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      
      genericObjectPoolConfig1.setJmxEnabled(true);
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      
      try { 
        PoolUtils.prefill((ObjectPool<OutOfMemoryError>) genericObjectPool0, 2031);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InternalError internalError0 = new InternalError("M)KVD");
      assertEquals("java.lang.InternalError: M)KVD", internalError0.toString());
      assertEquals("M)KVD", internalError0.getMessage());
      assertNotNull(internalError0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(internalError0);
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory0);
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory1 = genericObjectPool0.getFactory();
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<InternalError> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory2);
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<InternalError>();
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertNotNull(genericObjectPoolConfig1);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      GenericObjectPool<InternalError> genericObjectPool1 = new GenericObjectPool<InternalError>(pooledObjectFactory2, genericObjectPoolConfig1, abandonedConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertFalse(genericObjectPool1.equals((Object)genericObjectPool0));
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertTrue(genericObjectPool0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertFalse(genericObjectPool1.getFairness());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertFalse(genericObjectPool1.isClosed());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPool1.isAbandonedConfig());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertTrue(genericObjectPool1.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool1);
      
      try { 
        PoolUtils.prefill((ObjectPool<InternalError>) genericObjectPool1, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      //  // Unstable assertion: assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      //  // Unstable assertion: assertNull(outOfMemoryError0.getMessage());
      //  // Unstable assertion: assertNotNull(outOfMemoryError0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      //  // Unstable assertion: assertNull(stackOverflowError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      //  // Unstable assertion: assertNotNull(stackOverflowError0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("FfgrD)vEpF", "FfgrD)vEpF", "FfgrD)vEpF", (-459));
      //  // Unstable assertion: assertEquals("FfgrD)vEpF.FfgrD)vEpF(FfgrD)vEpF)", stackTraceElement0.toString());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", stackTraceElement0.getFileName());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", stackTraceElement0.getClassName());
      //  // Unstable assertion: assertEquals((-459), stackTraceElement0.getLineNumber());
      //  // Unstable assertion: assertFalse(stackTraceElement0.isNativeMethod());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", stackTraceElement0.getMethodName());
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("qW%OMWo3z2m)3@t l>H", ")Jlgs", "FfgrD)vEpF", 0);
      //  // Unstable assertion: assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertEquals("qW%OMWo3z2m)3@t l>H", stackTraceElement1.getClassName());
      //  // Unstable assertion: assertEquals("qW%OMWo3z2m)3@t l>H.)Jlgs(FfgrD)vEpF:0)", stackTraceElement1.toString());
      //  // Unstable assertion: assertEquals(0, stackTraceElement1.getLineNumber());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", stackTraceElement1.getFileName());
      //  // Unstable assertion: assertEquals(")Jlgs", stackTraceElement1.getMethodName());
      //  // Unstable assertion: assertFalse(stackTraceElement1.isNativeMethod());
      //  // Unstable assertion: assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("{U.15;)n(YOwuG", ")Jlgs", "{U.15;)n(YOwuG", 0);
      //  // Unstable assertion: assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      //  // Unstable assertion: assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertEquals("{U.15;)n(YOwuG.)Jlgs({U.15;)n(YOwuG:0)", stackTraceElement2.toString());
      //  // Unstable assertion: assertEquals("{U.15;)n(YOwuG", stackTraceElement2.getClassName());
      //  // Unstable assertion: assertEquals(0, stackTraceElement2.getLineNumber());
      //  // Unstable assertion: assertFalse(stackTraceElement2.isNativeMethod());
      //  // Unstable assertion: assertEquals(")Jlgs", stackTraceElement2.getMethodName());
      //  // Unstable assertion: assertEquals("{U.15;)n(YOwuG", stackTraceElement2.getFileName());
      //  // Unstable assertion: assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(";W|Ig'", "V9w1:", "MN0/>z=t", (-459));
      //  // Unstable assertion: assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      //  // Unstable assertion: assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      //  // Unstable assertion: assertFalse(stackTraceElement3.isNativeMethod());
      //  // Unstable assertion: assertEquals((-459), stackTraceElement3.getLineNumber());
      //  // Unstable assertion: assertEquals("V9w1:", stackTraceElement3.getMethodName());
      //  // Unstable assertion: assertEquals("MN0/>z=t", stackTraceElement3.getFileName());
      //  // Unstable assertion: assertEquals(";W|Ig'.V9w1:(MN0/>z=t)", stackTraceElement3.toString());
      //  // Unstable assertion: assertEquals(";W|Ig'", stackTraceElement3.getClassName());
      //  // Unstable assertion: assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("{U.15;)n(YOwuG", "A_vSz?Qm", "qW%OMWo3z2m)3@t l>H", 0);
      //  // Unstable assertion: assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      //  // Unstable assertion: assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      //  // Unstable assertion: assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      //  // Unstable assertion: assertEquals("{U.15;)n(YOwuG.A_vSz?Qm(qW%OMWo3z2m)3@t l>H:0)", stackTraceElement4.toString());
      //  // Unstable assertion: assertFalse(stackTraceElement4.isNativeMethod());
      //  // Unstable assertion: assertEquals(0, stackTraceElement4.getLineNumber());
      //  // Unstable assertion: assertEquals("qW%OMWo3z2m)3@t l>H", stackTraceElement4.getFileName());
      //  // Unstable assertion: assertEquals("A_vSz?Qm", stackTraceElement4.getMethodName());
      //  // Unstable assertion: assertEquals("{U.15;)n(YOwuG", stackTraceElement4.getClassName());
      //  // Unstable assertion: assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "4=AHRz!:i:vx~s", "FfgrD)vEpF", 0);
      //  // Unstable assertion: assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      //  // Unstable assertion: assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      //  // Unstable assertion: assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      //  // Unstable assertion: assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      //  // Unstable assertion: assertEquals(".4=AHRz!:i:vx~s(FfgrD)vEpF:0)", stackTraceElement5.toString());
      //  // Unstable assertion: assertEquals(0, stackTraceElement5.getLineNumber());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", stackTraceElement5.getFileName());
      //  // Unstable assertion: assertEquals("", stackTraceElement5.getClassName());
      //  // Unstable assertion: assertEquals("4=AHRz!:i:vx~s", stackTraceElement5.getMethodName());
      //  // Unstable assertion: assertFalse(stackTraceElement5.isNativeMethod());
      //  // Unstable assertion: assertNotNull(stackTraceElement5);
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("qW%OMWo3z2m)3@t l>H", "W6**BkmE", "{keyedFactory=", (-1405));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      //  // Unstable assertion: assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      //  // Unstable assertion: assertEquals("W6**BkmE", stackTraceElement6.getMethodName());
      //  // Unstable assertion: assertEquals("qW%OMWo3z2m)3@t l>H", stackTraceElement6.getClassName());
      //  // Unstable assertion: assertFalse(stackTraceElement6.isNativeMethod());
      //  // Unstable assertion: assertEquals((-1405), stackTraceElement6.getLineNumber());
      //  // Unstable assertion: assertEquals("{keyedFactory=", stackTraceElement6.getFileName());
      //  // Unstable assertion: assertEquals("qW%OMWo3z2m)3@t l>H.W6**BkmE({keyedFactory=)", stackTraceElement6.toString());
      //  // Unstable assertion: assertNotNull(stackTraceElement6);
      
      stackTraceElementArray0[6] = stackTraceElement6;
      outOfMemoryError0.setStackTrace(stackTraceElementArray0);
      //  // Unstable assertion: assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      //  // Unstable assertion: assertNull(outOfMemoryError0.getMessage());
      //  // Unstable assertion: assertEquals(7, stackTraceElementArray0.length);
      
      stackOverflowError0.printStackTrace();
      //  // Unstable assertion: assertNull(stackOverflowError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      MockFile mockFile0 = new MockFile("/Dx4RY uFw^LZ");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      String string0 = mockFile0.getCanonicalPath();
      //  // Unstable assertion: assertEquals("/Dx4RY uFw^LZ", string0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/", mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals("Dx4RY uFw^LZ", mockFile0.getName());
      //  // Unstable assertion: assertEquals("/Dx4RY uFw^LZ", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertNotNull(string0);
      
      mockPrintStream0.print((-1494));
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/", mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals("Dx4RY uFw^LZ", mockFile0.getName());
      //  // Unstable assertion: assertEquals("/Dx4RY uFw^LZ", mockFile0.toString());
      //  // Unstable assertion: assertEquals(5L, mockFile0.length());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      
      stackOverflowError0.printStackTrace((PrintStream) mockPrintStream0);
      //  // Unstable assertion: assertNull(stackOverflowError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals("/", mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1092L, mockFile0.length());
      //  // Unstable assertion: assertEquals("Dx4RY uFw^LZ", mockFile0.getName());
      //  // Unstable assertion: assertEquals("/Dx4RY uFw^LZ", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      
      outOfMemoryError0.addSuppressed(stackOverflowError0);
      //  // Unstable assertion: assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      //  // Unstable assertion: assertNull(outOfMemoryError0.getMessage());
      //  // Unstable assertion: assertNull(stackOverflowError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      InternalError internalError0 = new InternalError("FfgrD)vEpF", outOfMemoryError0);
      //  // Unstable assertion: assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      //  // Unstable assertion: assertNull(outOfMemoryError0.getMessage());
      //  // Unstable assertion: assertEquals("FfgrD)vEpF", internalError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.InternalError: FfgrD)vEpF", internalError0.toString());
      //  // Unstable assertion: assertNotNull(internalError0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(internalError0);
       //  fail("Expecting exception: InternalError");
       // Unstable assertion
      } catch(InternalError e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, StackOverflowError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, StackOverflowError>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<String, StackOverflowError>) genericKeyedObjectPool0, (float) 100, true);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      String string0 = genericKeyedObjectPool0.toString();
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(string0);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool1 = PoolUtils.erodingPool(keyedObjectPool0, (float) 100);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool1);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool2 = PoolUtils.synchronizedPool(keyedObjectPool1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool0.equals((Object)keyedObjectPool1));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertFalse(keyedObjectPool2.equals((Object)keyedObjectPool1));
      assertFalse(keyedObjectPool2.equals((Object)keyedObjectPool0));
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool2);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<OutOfMemoryError, Integer>) null, (-2862.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((KeyedObjectPool<ThreadDeath, OutOfMemoryError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<InternalError, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any(java.lang.StackOverflowError.class));
      KeyedPooledObjectFactory<StackOverflowError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      AbandonedConfig abandonedConfig0 = null;
      GenericKeyedObjectPool<StackOverflowError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, (AbandonedConfig) null);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      genericKeyedObjectPoolConfig1.setTestOnCreate(true);
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      try { 
        PoolUtils.prefill((KeyedObjectPool<StackOverflowError, InternalError>) genericKeyedObjectPool0, stackOverflowError0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      //  // Unstable assertion: assertNotNull(poolUtils_TimerHolder0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory0);
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory1 = genericObjectPool0.getFactory();
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<InternalError> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory2);
      
      PooledObjectFactory<InternalError> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotSame(pooledObjectFactory2, pooledObjectFactory3);
      //  // Unstable assertion: assertNotSame(pooledObjectFactory3, pooledObjectFactory2);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory3);
      
      KeyedPooledObjectFactory<String, OutOfMemoryError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, OutOfMemoryError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, OutOfMemoryError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, OutOfMemoryError>(keyedPooledObjectFactory1);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPool0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      //  // Unstable assertion: assertEquals(600, set0.size());
      //  // Unstable assertion: assertFalse(set0.isEmpty());
      //  // Unstable assertion: assertNotNull(set0);
      
      long long0 = 1379L;
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<String, OutOfMemoryError>) genericKeyedObjectPool0, (Collection<String>) set0, 100, 1379L);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("#bv`d>DEt8", "#bv`d>DEt8", "uE7-n.", "uE7-n.", "uE7-n.").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, StackOverflowError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, StackOverflowError>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<String, StackOverflowError>) genericKeyedObjectPool0, (float) 100, true);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      String string0 = genericKeyedObjectPool0.toString();
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(string0);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool1 = PoolUtils.erodingPool(keyedObjectPool0, (float) 100);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool1);
      
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool2 = PoolUtils.synchronizedPool(keyedObjectPool1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool0.equals((Object)keyedObjectPool1));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertFalse(keyedObjectPool2.equals((Object)keyedObjectPool1));
      assertFalse(keyedObjectPool2.equals((Object)keyedObjectPool0));
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<Object, String> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<Object, String>) genericKeyedObjectPool0, 60000.0F, true);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(keyedObjectPool0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      //  // Unstable assertion: assertNull(outOfMemoryError0.getMessage());
      //  // Unstable assertion: assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      //  // Unstable assertion: assertNotNull(outOfMemoryError0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool0, (Object) outOfMemoryError0, 0, (long) 8);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<Integer, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, String>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<Integer, String> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<Integer, String>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Map<Integer, TimerTask> map0 = PoolUtils.checkMinIdle(keyedObjectPool0, (Collection<Integer>) linkedList0, 0, (-766L));
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0, linkedList0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(map0);
      assertFalse(linkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((KeyedObjectPool<OutOfMemoryError, OutOfMemoryError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<Integer, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<OutOfMemoryError, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      KeyedPooledObjectFactory<String, ThreadDeath> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, ThreadDeath>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(anyString());
      KeyedPooledObjectFactory<String, ThreadDeath> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, ThreadDeath> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, ThreadDeath>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<String, ThreadDeath> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<String, ThreadDeath>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      try { 
        PoolUtils.prefill(keyedObjectPool0, "DxJ", 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPool<StackOverflowError> genericObjectPool0 = new GenericObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.erodingPool((ObjectPool<StackOverflowError>) genericObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(objectPool0);
      
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory2 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory2).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertNotNull(pooledObjectFactory3);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertNotNull(genericObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertNotNull(abandonedConfig0);
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool1 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory3, genericObjectPoolConfig0, abandonedConfig0);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertTrue(genericObjectPool1.getLifo());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertTrue(genericObjectPool1.isAbandonedConfig());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool1.isClosed());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertFalse(genericObjectPool1.getFairness());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool1);
      
      try { 
        PoolUtils.checkMinIdle((ObjectPool<OutOfMemoryError>) genericObjectPool1, 4827, (-705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      //  // Unstable assertion: assertFalse(abandonedConfig0.getUseUsageTracking());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertTrue(abandonedConfig0.getRequireFullStackTrace());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertNotNull(abandonedConfig0);
      
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getUseUsageTracking());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertTrue(abandonedConfig0.getRequireFullStackTrace());
      //  // Unstable assertion: assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle((ObjectPool<Integer>) genericObjectPool0, 3, (long) 100);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      InternalError internalError0 = new InternalError((String) null, mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNotNull(internalError0);
      
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<InternalError, Object>) null, internalError0, 3042, (long) 3042);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InternalError internalError0 = new InternalError("closed=");
      assertEquals("closed=", internalError0.getMessage());
      assertEquals("java.lang.InternalError: closed=", internalError0.toString());
      assertNotNull(internalError0);
      
      DefaultPooledObject<InternalError> defaultPooledObject0 = new DefaultPooledObject<InternalError>(internalError0);
      assertEquals("closed=", internalError0.getMessage());
      assertEquals("java.lang.InternalError: closed=", internalError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(defaultPooledObject0);
      
      KeyedPooledObjectFactory<StackOverflowError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("closed=").when(keyedPooledObjectFactory0).toString();
      doReturn(defaultPooledObject0, defaultPooledObject0, defaultPooledObject0).when(keyedPooledObjectFactory0).makeObject(any(java.lang.StackOverflowError.class));
      KeyedPooledObjectFactory<StackOverflowError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("closed=", internalError0.getMessage());
      assertEquals("java.lang.InternalError: closed=", internalError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      GenericKeyedObjectPool<StackOverflowError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1, (AbandonedConfig) null);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertEquals("closed=", internalError0.getMessage());
      assertEquals("java.lang.InternalError: closed=", internalError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      genericKeyedObjectPoolConfig1.setTestOnCreate(true);
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      PoolUtils.prefill((KeyedObjectPool<StackOverflowError, InternalError>) genericKeyedObjectPool0, stackOverflowError0, 3);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertEquals("closed=", internalError0.getMessage());
      assertEquals("java.lang.InternalError: closed=", internalError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertTrue(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(3L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pool");
      assertFalse(boolean0);
      
      stackOverflowError0.printStackTrace((PrintStream) mockPrintStream0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InternalError internalError1 = new InternalError(stackOverflowError0);
      assertFalse(internalError1.equals((Object)internalError0));
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertEquals("java.lang.StackOverflowError", internalError1.getMessage());
      assertEquals("java.lang.InternalError: java.lang.StackOverflowError", internalError1.toString());
      assertNotNull(internalError1);
      
      DefaultPooledObject<Object> defaultPooledObject1 = new DefaultPooledObject<Object>(internalError1);
      assertFalse(internalError1.equals((Object)internalError0));
      assertEquals(PooledObjectState.IDLE, defaultPooledObject1.getState());
      assertEquals(0L, defaultPooledObject1.getBorrowedCount());
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertEquals("java.lang.StackOverflowError", internalError1.getMessage());
      assertEquals("java.lang.InternalError: java.lang.StackOverflowError", internalError1.toString());
      assertNotNull(defaultPooledObject1);
      
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertNotNull(genericObjectPoolConfig0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory1 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.pool2.impl.DefaultEvictionPolicy").when(pooledObjectFactory1).toString();
      PooledObjectFactory<InternalError> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertNotNull(pooledObjectFactory2);
      
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory2);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory3 = genericObjectPool0.getFactory();
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory1));
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory2, pooledObjectFactory3);
      assertSame(pooledObjectFactory3, pooledObjectFactory2);
      assertNotNull(pooledObjectFactory3);
      
      System.setCurrentTimeMillis(8);
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory4 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("pool").when(pooledObjectFactory4).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory5 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory4);
      assertFalse(pooledObjectFactory5.equals((Object)pooledObjectFactory4));
      assertNotNull(pooledObjectFactory5);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig1 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertNotNull(genericObjectPoolConfig1);
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool1 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory5, genericObjectPoolConfig1, (AbandonedConfig) null);
      assertFalse(pooledObjectFactory5.equals((Object)pooledObjectFactory4));
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertTrue(genericObjectPool1.getLifo());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertFalse(genericObjectPool1.getFairness());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertFalse(genericObjectPool1.isAbandonedConfig());
      assertFalse(genericObjectPool1.isClosed());
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool1);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<OutOfMemoryError>) genericObjectPool1, (-4656.4287F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      KeyedPooledObjectFactory<UnknownError, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<UnknownError, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("<*~4i:2S/q?").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<UnknownError, Integer> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      GenericKeyedObjectPool<UnknownError, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<UnknownError, Integer>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0, abandonedConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      ArrayDeque<UnknownError> arrayDeque0 = new ArrayDeque<UnknownError>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      PoolUtils.prefill((KeyedObjectPool<UnknownError, Integer>) genericKeyedObjectPool0, (Collection<UnknownError>) arrayDeque0, (-1));
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", ", evictionKey=").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Object, Integer> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      GenericKeyedObjectPool<Object, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Integer>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<Object, Integer> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<Object, Integer>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool0);
      
      KeyedObjectPool<Object, Integer> keyedObjectPool1 = PoolUtils.erodingPool(keyedObjectPool0, (float) 3, false);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool1);
      
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("pool", "N", "").when(pooledObjectFactory0).toString();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory0, genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<Object> pooledObjectFactory1 = genericObjectPool0.getFactory();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<Object> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotNull(pooledObjectFactory2);
      
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory2);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(genericObjectPool1.equals((Object)genericObjectPool0));
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool1.isAbandonedConfig());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool1.isClosed());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertTrue(genericObjectPool1.getLifo());
      assertFalse(genericObjectPool1.getFairness());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool1);
      
      ObjectPool<Object> objectPool0 = PoolUtils.erodingPool((ObjectPool<Object>) genericObjectPool1);
      assertFalse(genericObjectPool0.equals((Object)genericObjectPool1));
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(genericObjectPool1.equals((Object)genericObjectPool0));
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(8, genericObjectPool1.getMaxIdle());
      assertEquals(0, genericObjectPool1.getMinIdle());
      assertEquals(0L, genericObjectPool1.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool1.getCreatedCount());
      assertEquals(0L, genericObjectPool1.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool1.isAbandonedConfig());
      assertFalse(genericObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericObjectPool1.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool1.isClosed());
      assertEquals(0L, genericObjectPool1.getReturnedCount());
      assertFalse(genericObjectPool1.getMessageStatistics());
      assertEquals(0L, genericObjectPool1.getDestroyedCount());
      assertTrue(genericObjectPool1.getLifo());
      assertFalse(genericObjectPool1.getFairness());
      assertFalse(genericObjectPool1.getTestOnCreate());
      assertEquals(0L, genericObjectPool1.getBorrowedCount());
      assertFalse(genericObjectPool1.getTestOnReturn());
      assertEquals(0L, genericObjectPool1.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool1.getLogAbandoned());
      assertEquals(8, genericObjectPool1.getMaxTotal());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool1.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool1.getBlockWhenExhausted());
      assertFalse(genericObjectPool1.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool1.getTestWhileIdle());
      assertEquals(3, genericObjectPool1.getNumTestsPerEvictionRun());
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(genericObjectPool0, genericObjectPool1);
      assertSame(pooledObjectFactory1, pooledObjectFactory0);
      assertNotSame(genericObjectPool1, genericObjectPool0);
      assertNotNull(objectPool0);
      
      KeyedPooledObjectFactory<OutOfMemoryError, Object> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<OutOfMemoryError, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(":$C<@`B$Qp{R").when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<OutOfMemoryError, Object> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(keyedPooledObjectFactory3);
      
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<String, InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Object>) null, (-338.06085F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError("mtE[D((%7");
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      DefaultPooledObject<StackOverflowError> defaultPooledObject0 = new DefaultPooledObject<StackOverflowError>(stackOverflowError0);
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(defaultPooledObject0);
      
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("~").when(pooledObjectFactory0).toString();
      doReturn(defaultPooledObject0).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPool<StackOverflowError> genericObjectPool0 = new GenericObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericObjectPool0);
      
      String string0 = genericObjectPool0.getEvictionPolicyClassName();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", string0);
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(string0);
      
      long long0 = defaultPooledObject0.getActiveTimeMillis();
      assertEquals(0L, long0);
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      
      StackOverflowError stackOverflowError1 = genericObjectPool0.borrowObject();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertEquals("mtE[D((%7", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError0.toString());
      assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getMessageStatistics());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(1L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(1L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals("java.lang.StackOverflowError: mtE[D((%7", stackOverflowError1.toString());
      assertEquals("mtE[D((%7", stackOverflowError1.getMessage());
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertSame(stackOverflowError0, stackOverflowError1);
      assertSame(stackOverflowError1, stackOverflowError0);
      assertNotNull(stackOverflowError1);
      
      int int0 = (-1189);
      try { 
        PoolUtils.checkMinIdle((ObjectPool<StackOverflowError>) genericObjectPool0, (-1189), (long) 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig0);
      
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory1, genericObjectPoolConfig0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      
      ObjectPool<Integer> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<Integer>) genericObjectPool0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_TOTAL);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      //  // Unstable assertion: assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertEquals(8, GenericObjectPoolConfig.DEFAULT_MAX_IDLE);
      //  // Unstable assertion: assertEquals(0, GenericObjectPoolConfig.DEFAULT_MIN_IDLE);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      //  // Unstable assertion: assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      //  // Unstable assertion: assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      //  // Unstable assertion: assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      //  // Unstable assertion: assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(objectPool0);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle(objectPool0, 3, (long) 8);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PoolUtils.checkRethrow((Throwable) null);
      PoolUtils poolUtils0 = new PoolUtils();
      assertNotNull(poolUtils0);
      
      try { 
        PoolUtils.prefill((ObjectPool<StackOverflowError>) null, 2123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      KeyedPooledObjectFactory<ThreadDeath, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<ThreadDeath, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("{keyedPool=", "org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<ThreadDeath, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertNotNull(genericKeyedObjectPoolConfig0);
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertNotNull(abandonedConfig0);
      
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(abandonedConfig1);
      
      GenericKeyedObjectPool<ThreadDeath, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<ThreadDeath, Object>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0, abandonedConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool0);
      
      KeyedObjectPool<ThreadDeath, Object> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<ThreadDeath, Object>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(keyedObjectPool0);
      
      genericKeyedObjectPoolConfig0.setTestOnReturn(false);
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      
      genericKeyedObjectPoolConfig0.setTestOnBorrow(true);
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      
      LinkedList<ThreadDeath> linkedList0 = new LinkedList<ThreadDeath>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Map<ThreadDeath, TimerTask> map0 = PoolUtils.checkMinIdle(keyedObjectPool0, (Collection<ThreadDeath>) linkedList0, 6, 34L);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertTrue(genericKeyedObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(map0);
      
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, ".x", "<C1~uTe}", "org.apache.commons.pool2.impl.DefaultEvictionPolicy").when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(keyedPooledObjectFactory3);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = new GenericKeyedObjectPoolConfig<String>();
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertNotNull(genericKeyedObjectPoolConfig1);
      
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory3, genericKeyedObjectPoolConfig1);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPool1.getTestOnCreate());
      assertTrue(genericKeyedObjectPool1.getLifo());
      assertFalse(genericKeyedObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool1.getBorrowedCount());
      assertFalse(genericKeyedObjectPool1.getFairness());
      assertFalse(genericKeyedObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool1.getMessageStatistics());
      assertEquals((-1), genericKeyedObjectPool1.getMaxTotal());
      assertFalse(genericKeyedObjectPool1.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool1.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedCount());
      assertFalse(genericKeyedObjectPool1.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool1.isClosed());
      assertEquals(0, genericKeyedObjectPool1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool1.getLogAbandoned());
      assertEquals(8, genericKeyedObjectPool1.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool1.getCreatedCount());
      assertFalse(genericKeyedObjectPool1.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool1.getBlockWhenExhausted());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(genericKeyedObjectPool1);
      
      String string0 = abandonedConfig1.toString();
      assertFalse(abandonedConfig0.equals((Object)abandonedConfig1));
      assertFalse(abandonedConfig1.equals((Object)abandonedConfig0));
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig1.getUseUsageTracking());
      assertFalse(abandonedConfig1.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig1.getLogAbandoned());
      assertTrue(abandonedConfig1.getRequireFullStackTrace());
      assertNotSame(abandonedConfig0, abandonedConfig1);
      assertNotSame(abandonedConfig1, abandonedConfig0);
      assertNotNull(string0);
      
      KeyedObjectPool<Object, String> keyedObjectPool1 = PoolUtils.erodingPool((KeyedObjectPool<Object, String>) genericKeyedObjectPool1);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPool1.getTestOnCreate());
      assertTrue(genericKeyedObjectPool1.getLifo());
      assertFalse(genericKeyedObjectPool1.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericKeyedObjectPool1.getBorrowedCount());
      assertFalse(genericKeyedObjectPool1.getFairness());
      assertFalse(genericKeyedObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool1.getMessageStatistics());
      assertEquals((-1), genericKeyedObjectPool1.getMaxTotal());
      assertFalse(genericKeyedObjectPool1.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool1.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedCount());
      assertFalse(genericKeyedObjectPool1.isAbandonedConfig());
      assertEquals(3, genericKeyedObjectPool1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool1.isClosed());
      assertEquals(0, genericKeyedObjectPool1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool1.getLogAbandoned());
      assertEquals(8, genericKeyedObjectPool1.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool1.getCreatedCount());
      assertFalse(genericKeyedObjectPool1.getRemoveAbandonedOnBorrow());
      assertEquals(8, genericKeyedObjectPool1.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool1.getBlockWhenExhausted());
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_IDLE_PER_KEY);
      assertEquals(3, BaseObjectPoolConfig.DEFAULT_NUM_TESTS_PER_EVICTION_RUN);
      assertTrue(BaseObjectPoolConfig.DEFAULT_JMX_ENABLE);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS);
      assertEquals(10000L, BaseObjectPoolConfig.DEFAULT_EVICTOR_SHUTDOWN_TIMEOUT_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_RETURN);
      assertFalse(BaseObjectPoolConfig.DEFAULT_FAIRNESS);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_WHILE_IDLE);
      assertEquals(8, GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL_PER_KEY);
      assertEquals(1800000L, BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_BLOCK_WHEN_EXHAUSTED);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_BORROW);
      assertEquals((-1), GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL);
      assertEquals(0, GenericKeyedObjectPoolConfig.DEFAULT_MIN_IDLE_PER_KEY);
      assertEquals((-1L), BaseObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS);
      assertTrue(BaseObjectPoolConfig.DEFAULT_LIFO);
      assertFalse(BaseObjectPoolConfig.DEFAULT_TEST_ON_CREATE);
      assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      assertNotNull(keyedObjectPool1);
      
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool1, (Object) abandonedConfig1, 0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      //  // Unstable assertion: assertNotNull(poolUtils_TimerHolder0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(pooledObjectFactory0).toString();
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory0);
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory1 = genericObjectPool0.getFactory();
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<InternalError> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory2);
      
      PooledObjectFactory<InternalError> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory1));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertSame(pooledObjectFactory1, pooledObjectFactory0);
      //  // Unstable assertion: assertNotSame(pooledObjectFactory2, pooledObjectFactory3);
      //  // Unstable assertion: assertNotSame(pooledObjectFactory3, pooledObjectFactory2);
      //  // Unstable assertion: assertNotNull(pooledObjectFactory3);
      
      KeyedPooledObjectFactory<String, OutOfMemoryError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, OutOfMemoryError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<String, OutOfMemoryError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, OutOfMemoryError>(keyedPooledObjectFactory1);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getMessageStatistics());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(100, BaseGenericObjectPool.MEAN_TIMING_STATS_CACHE_SIZE);
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPool0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      //  // Unstable assertion: assertFalse(set0.isEmpty());
      //  // Unstable assertion: assertEquals(600, set0.size());
      //  // Unstable assertion: assertNotNull(set0);
      //  // Unstable assertion: assertFalse(set0.contains(""));
      
      long long0 = 1379L;
      // Undeclared exception!
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<String, OutOfMemoryError>) genericKeyedObjectPool0, (Collection<String>) set0, 100, 1379L);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("{factory=", "QaeF", "9roc8#K<i5}EZ", "&0X/rh=%v^`|\"?4A", "{factory=").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, StackOverflowError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      GenericKeyedObjectPool<String, StackOverflowError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, StackOverflowError>(keyedPooledObjectFactory1);
      KeyedObjectPool<String, StackOverflowError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<String, StackOverflowError>) genericKeyedObjectPool0, (float) 100, true);
      genericKeyedObjectPool0.toString();
      PoolUtils.erodingPool(keyedObjectPool0, (float) 100);
      KeyedPooledObjectFactory<StackOverflowError, OutOfMemoryError> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<StackOverflowError, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<StackOverflowError, OutOfMemoryError> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      GenericKeyedObjectPoolConfig<OutOfMemoryError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<OutOfMemoryError>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericKeyedObjectPool<StackOverflowError, OutOfMemoryError> genericKeyedObjectPool1 = new GenericKeyedObjectPool<StackOverflowError, OutOfMemoryError>(keyedPooledObjectFactory3, genericKeyedObjectPoolConfig0, abandonedConfig1);
      StackOverflowError stackOverflowError0 = new StackOverflowError("&0X/rh=%v^`|\"?4A");
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<StackOverflowError, OutOfMemoryError>) genericKeyedObjectPool1, stackOverflowError0, (-1), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("SynchronizedKeyedObjectPool", "SynchronizedKeyedObjectPool").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      GenericKeyedObjectPool<Integer, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, String>(keyedPooledObjectFactory1);
      KeyedObjectPool<Integer, String> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<Integer, String>) genericKeyedObjectPool0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PoolUtils.checkMinIdle(keyedObjectPool0, (Collection<Integer>) linkedList0, 0, (-766L));
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPooledFactory((PooledObjectFactory<OutOfMemoryError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("{factory=", "{factory=").when(pooledObjectFactory0).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<OutOfMemoryError> genericObjectPool0 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig1);
      String string0 = genericObjectPool0.toString();
      genericObjectPoolConfig0.setJmxNameBase(string0);
      InternalError internalError0 = new InternalError();
      SoftReference<InternalError> softReference0 = new SoftReference<InternalError>(internalError0);
      PooledSoftReference<InternalError> pooledSoftReference0 = new PooledSoftReference<InternalError>(softReference0);
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<OutOfMemoryError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("pool", "", string0, "").when(keyedPooledObjectFactory0).toString();
      doReturn(pooledSoftReference0, (PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any(java.lang.OutOfMemoryError.class));
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      GenericKeyedObjectPool<OutOfMemoryError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      KeyedObjectPool<OutOfMemoryError, InternalError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<OutOfMemoryError, InternalError>) genericKeyedObjectPool0);
      ArrayDeque<OutOfMemoryError> arrayDeque0 = new ArrayDeque<OutOfMemoryError>();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      arrayDeque0.add(outOfMemoryError0);
      try { 
        PoolUtils.prefill(keyedObjectPool0, (Collection<OutOfMemoryError>) arrayDeque0, 519);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SoftReference<ThreadDeath> softReference0 = new SoftReference<ThreadDeath>((ThreadDeath) null);
      PooledSoftReference<ThreadDeath> pooledSoftReference0 = new PooledSoftReference<ThreadDeath>(softReference0);
      PooledObjectFactory<ThreadDeath> pooledObjectFactory0 = (PooledObjectFactory<ThreadDeath>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("8:Y2r/Uxp?").when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<ThreadDeath> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      softReference0.enqueue();
      SoftReferenceObjectPool<ThreadDeath> softReferenceObjectPool0 = new SoftReferenceObjectPool<ThreadDeath>(pooledObjectFactory1);
      try { 
        PoolUtils.prefill((ObjectPool<ThreadDeath>) softReferenceObjectPool0, 2447);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      PooledObjectFactory<ThreadDeath> pooledObjectFactory2 = (PooledObjectFactory<ThreadDeath>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("").when(pooledObjectFactory2).toString();
      PooledObjectFactory<ThreadDeath> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      GenericObjectPoolConfig<ThreadDeath> genericObjectPoolConfig0 = new GenericObjectPoolConfig<ThreadDeath>();
      GenericObjectPoolConfig<ThreadDeath> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<ThreadDeath> genericObjectPool0 = new GenericObjectPool<ThreadDeath>(pooledObjectFactory3, genericObjectPoolConfig1);
      genericObjectPoolConfig1.setTestOnReturn(false);
      int int0 = 2;
      genericObjectPool0.setMaxIdle(2);
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((KeyedObjectPool<Object, StackOverflowError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      KeyedPooledObjectFactory<InternalError, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<InternalError, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<InternalError, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      GenericKeyedObjectPool<InternalError, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<InternalError, String>(keyedPooledObjectFactory1);
      InternalError internalError0 = new InternalError();
      internalError0.fillInStackTrace();
      internalError0.printStackTrace();
      internalError0.fillInStackTrace();
      PoolUtils.prefill((KeyedObjectPool<InternalError, String>) genericKeyedObjectPool0, internalError0, 0);
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      GenericObjectPool<StackOverflowError> genericObjectPool0 = new GenericObjectPool<StackOverflowError>(pooledObjectFactory1);
      genericObjectPool0.setTestOnBorrow(false);
      genericObjectPool0.setMaxTotal((-609));
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.erodingPool((ObjectPool<StackOverflowError>) genericObjectPool0);
      PoolUtils.synchronizedPool(objectPool0);
      KeyedPooledObjectFactory<Integer, InternalError> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<Integer, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<Integer, InternalError> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory3);
      MockThrowable mockThrowable0 = new MockThrowable();
      PoolUtils.checkRethrow(mockThrowable0);
      PoolUtils poolUtils0 = new PoolUtils();
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory4 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory4).toString();
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory5 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory4);
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory5);
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Object, Object>) genericKeyedObjectPool1, (float) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }
}
