/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:03:59 GMT 2022
 */

package org.apache.commons.pool2.proxy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.reflect.Array;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.AbandonedConfig;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.apache.commons.pool2.impl.SoftReferenceObjectPool;
import org.apache.commons.pool2.proxy.CglibProxySource;
import org.apache.commons.pool2.proxy.JdkProxySource;
import org.apache.commons.pool2.proxy.ProxiedObjectPool;
import org.apache.commons.pool2.proxy.ProxySource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProxiedObjectPool_ESTest extends ProxiedObjectPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PooledObjectFactory<GenericKeyedObjectPool<Integer, Object>> pooledObjectFactory0 = (PooledObjectFactory<GenericKeyedObjectPool<Integer, Object>>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<GenericKeyedObjectPool<Integer, Object>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<GenericKeyedObjectPool<Integer, Object>>();
      GenericObjectPoolConfig<GenericKeyedObjectPool<Integer, Object>> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<GenericKeyedObjectPool<Integer, Object>> genericObjectPool0 = new GenericObjectPool<GenericKeyedObjectPool<Integer, Object>>(pooledObjectFactory0, genericObjectPoolConfig1, abandonedConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      JdkProxySource<GenericKeyedObjectPool<Integer, Object>> jdkProxySource0 = new JdkProxySource<GenericKeyedObjectPool<Integer, Object>>(classLoader1, classArray0);
      ProxiedObjectPool<GenericKeyedObjectPool<Integer, Object>> proxiedObjectPool0 = new ProxiedObjectPool<GenericKeyedObjectPool<Integer, Object>>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.getNumActive();
      DefaultPooledObject<GenericKeyedObjectPool<Object, Object>> defaultPooledObject0 = new DefaultPooledObject<GenericKeyedObjectPool<Object, Object>>((GenericKeyedObjectPool<Object, Object>) null);
      PooledObjectFactory<GenericKeyedObjectPool<Object, Object>> pooledObjectFactory1 = (PooledObjectFactory<GenericKeyedObjectPool<Object, Object>>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory1).makeObject();
      SoftReferenceObjectPool<GenericKeyedObjectPool<Object, Object>> softReferenceObjectPool0 = new SoftReferenceObjectPool<GenericKeyedObjectPool<Object, Object>>(pooledObjectFactory1);
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray1[0] = class0;
      Class<String> class1 = String.class;
      classArray1[1] = class1;
      Class<String> class2 = String.class;
      classArray1[2] = class2;
      Class<String> class3 = String.class;
      classArray1[3] = class3;
      Class<String> class4 = String.class;
      classArray1[4] = class4;
      Class<String> class5 = String.class;
      classArray1[5] = class5;
      Class<String> class6 = String.class;
      classArray1[6] = class6;
      Class<String> class7 = String.class;
      classArray1[7] = class7;
      Class<String> class8 = String.class;
      classArray1[8] = class8;
      JdkProxySource<GenericKeyedObjectPool<Object, Object>> jdkProxySource1 = new JdkProxySource<GenericKeyedObjectPool<Object, Object>>(classLoader1, classArray1);
      ProxiedObjectPool<GenericKeyedObjectPool<Object, Object>> proxiedObjectPool1 = new ProxiedObjectPool<GenericKeyedObjectPool<Object, Object>>(softReferenceObjectPool0, jdkProxySource1);
      try { 
        proxiedObjectPool1.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0, genericObjectPoolConfig1);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      genericObjectPoolConfig0.clone();
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      JdkProxySource<Integer> jdkProxySource0 = new JdkProxySource<Integer>((ClassLoader) null, classArray0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.getNumIdle();
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>(proxiedObjectPool0);
      PooledObjectFactory<Object> pooledObjectFactory1 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPooledObject0).when(pooledObjectFactory1).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      PooledObjectFactory<Object> pooledObjectFactory2 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig2 = new GenericObjectPoolConfig<Object>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig3 = genericObjectPoolConfig2.clone();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory2, genericObjectPoolConfig3, abandonedConfig0);
      JdkProxySource<Object> jdkProxySource1 = new JdkProxySource<Object>((ClassLoader) null, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool1 = new ProxiedObjectPool<Object>(genericObjectPool1, jdkProxySource1);
      try { 
        proxiedObjectPool1.borrowObject();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String is not an interface
         //
         verifyException("java.lang.reflect.Proxy$ProxyClassFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReferenceQueue<String> referenceQueue0 = new ReferenceQueue<String>();
      SoftReference<String> softReference0 = new SoftReference<String>("String[]", referenceQueue0);
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      JdkProxySource<String> jdkProxySource0 = new JdkProxySource<String>(classLoader1, classArray0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.addObject();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1, genericObjectPoolConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      genericObjectPool0.close();
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      JdkProxySource<String> jdkProxySource0 = new JdkProxySource<String>(classLoader0, classArray0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.addObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.impl.BaseGenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PooledObjectFactory<GenericKeyedObjectPool<String, Object>> pooledObjectFactory0 = (PooledObjectFactory<GenericKeyedObjectPool<String, Object>>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPool<GenericKeyedObjectPool<String, Object>> genericObjectPool0 = new GenericObjectPool<GenericKeyedObjectPool<String, Object>>(pooledObjectFactory0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      genericObjectPool0.clear();
      JdkProxySource<GenericKeyedObjectPool<String, Object>> jdkProxySource0 = new JdkProxySource<GenericKeyedObjectPool<String, Object>>(classLoader0, classArray0);
      ProxiedObjectPool<GenericKeyedObjectPool<String, Object>> proxiedObjectPool0 = new ProxiedObjectPool<GenericKeyedObjectPool<String, Object>>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.close();
      try { 
        proxiedObjectPool0.borrowObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.impl.BaseGenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      classLoader0.setClassAssertionStatus("'}d=WeF-U", false);
      JdkProxySource<String> jdkProxySource0 = new JdkProxySource<String>(classLoader0, classArray0);
      jdkProxySource0.toString();
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>((ObjectPool<String>) null, jdkProxySource0);
      try { 
        proxiedObjectPool0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      CglibProxySource<String> cglibProxySource0 = new CglibProxySource<String>(class0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>((ObjectPool<String>) null, cglibProxySource0);
      try { 
        proxiedObjectPool0.returnObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.CglibProxySource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CglibProxySource<Object> cglibProxySource0 = new CglibProxySource<Object>(class0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>((ObjectPool<Object>) null, cglibProxySource0);
      // Undeclared exception!
      try { 
        proxiedObjectPool0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PooledObjectFactory<GenericKeyedObjectPool<Object, Object>> pooledObjectFactory0 = (PooledObjectFactory<GenericKeyedObjectPool<Object, Object>>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPool<GenericKeyedObjectPool<Object, Object>> genericObjectPool0 = new GenericObjectPool<GenericKeyedObjectPool<Object, Object>>(pooledObjectFactory0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      JdkProxySource<GenericKeyedObjectPool<Object, Object>> jdkProxySource0 = new JdkProxySource<GenericKeyedObjectPool<Object, Object>>(classLoader0, classArray0);
      ProxiedObjectPool<GenericKeyedObjectPool<Object, Object>> proxiedObjectPool0 = new ProxiedObjectPool<GenericKeyedObjectPool<Object, Object>>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.clear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader1, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>((ObjectPool<Object>) null, jdkProxySource0);
      jdkProxySource0.toString();
      jdkProxySource0.toString();
      // Undeclared exception!
      try { 
        proxiedObjectPool0.getNumIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      JdkProxySource<Integer> jdkProxySource0 = new JdkProxySource<Integer>(classLoader1, classArray0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>((ObjectPool<Integer>) null, jdkProxySource0);
      Integer integer0 = new Integer(0);
      try { 
        proxiedObjectPool0.invalidateObject(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a proxy instance
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0, genericObjectPoolConfig1, abandonedConfig0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>(genericObjectPool0, (ProxySource<Integer>) null);
      int int0 = proxiedObjectPool0.getNumActive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1, genericObjectPoolConfig1);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, (ProxySource<String>) null);
      String string0 = proxiedObjectPool0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>((PooledObjectFactory<String>) null);
      Class<String> class0 = String.class;
      CglibProxySource<String> cglibProxySource0 = new CglibProxySource<String>(class0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(softReferenceObjectPool0, cglibProxySource0);
      proxiedObjectPool0.close();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      JdkProxySource<Integer> jdkProxySource0 = new JdkProxySource<Integer>(classLoader1, classArray0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>((ObjectPool<Integer>) null, jdkProxySource0);
      // Undeclared exception!
      try { 
        proxiedObjectPool0.getNumActive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0, genericObjectPoolConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      JdkProxySource<Integer> jdkProxySource0 = new JdkProxySource<Integer>(classLoader1, classArray0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      CglibProxySource<Object> cglibProxySource0 = new CglibProxySource<Object>(class0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>((ObjectPool<Object>) null, cglibProxySource0);
      try { 
        proxiedObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, (ProxySource<String>) null);
      int int0 = proxiedObjectPool0.getNumIdle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader1, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.addObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      JdkProxySource<String> jdkProxySource0 = new JdkProxySource<String>(classLoader0, classArray0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.returnObject("2itK/XaX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a proxy instance
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1, genericObjectPoolConfig0);
      Class<String> class0 = String.class;
      CglibProxySource<String> cglibProxySource0 = new CglibProxySource<String>(class0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, cglibProxySource0);
      try { 
        proxiedObjectPool0.invalidateObject("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to net.sf.cglib.proxy.Factory
         //
         verifyException("org.apache.commons.pool2.proxy.CglibProxySource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[3] = class2;
      Class<Object> class3 = Object.class;
      classArray0[4] = class3;
      Class<Object> class4 = Object.class;
      classArray0[5] = class4;
      Class<Object> class5 = Object.class;
      classArray0[6] = class5;
      classArray0[7] = class0;
      JdkProxySource<String> jdkProxySource0 = new JdkProxySource<String>(classLoader1, classArray0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>((ObjectPool<String>) null, jdkProxySource0);
      // Undeclared exception!
      try { 
        proxiedObjectPool0.getNumIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CglibProxySource<Integer> cglibProxySource0 = new CglibProxySource<Integer>(class0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>((ObjectPool<Integer>) null, cglibProxySource0);
      try { 
        proxiedObjectPool0.addObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader1, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>((ObjectPool<Object>) null, jdkProxySource0);
      try { 
        proxiedObjectPool0.returnObject(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a proxy instance
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      JdkProxySource<GenericObjectPool<Object>> jdkProxySource0 = new JdkProxySource<GenericObjectPool<Object>>(classLoader1, classArray0);
      ProxiedObjectPool<GenericObjectPool<Object>> proxiedObjectPool0 = new ProxiedObjectPool<GenericObjectPool<Object>>((ObjectPool<GenericObjectPool<Object>>) null, jdkProxySource0);
      try { 
        proxiedObjectPool0.invalidateObject((GenericObjectPool<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>((ObjectPool<String>) null, (ProxySource<String>) null);
      // Undeclared exception!
      try { 
        proxiedObjectPool0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.proxy.ProxiedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0, genericObjectPoolConfig0, abandonedConfig1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      JdkProxySource<Integer> jdkProxySource0 = new JdkProxySource<Integer>(classLoader1, classArray0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(71303178);
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader0, classArray0);
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObjectFactory<String> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = new GenericObjectPoolConfig<String>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig2 = genericObjectPoolConfig1.clone();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1, genericObjectPoolConfig2);
      JdkProxySource<String> jdkProxySource1 = new JdkProxySource<String>(classLoader0, classArray0);
      ProxiedObjectPool<String> proxiedObjectPool0 = new ProxiedObjectPool<String>(genericObjectPool0, jdkProxySource1);
      proxiedObjectPool0.close();
      int int0 = proxiedObjectPool0.getNumIdle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CglibProxySource<Integer> cglibProxySource0 = new CglibProxySource<Integer>(class0);
      Integer integer0 = new Integer(2374);
      System.setCurrentTimeMillis(0L);
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader0, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>(genericObjectPool0, jdkProxySource0);
      try { 
        proxiedObjectPool0.returnObject(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a proxy instance
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PooledObject<Integer> pooledObject0 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      Class<Integer> class0 = Integer.class;
      CglibProxySource<Integer> cglibProxySource0 = new CglibProxySource<Integer>(class0);
      ProxiedObjectPool<Integer> proxiedObjectPool0 = new ProxiedObjectPool<Integer>(softReferenceObjectPool0, cglibProxySource0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[1] = class0;
      Class<Object> class1 = Object.class;
      classArray0[2] = class1;
      JdkProxySource<Object> jdkProxySource0 = new JdkProxySource<Object>(classLoader0, classArray0);
      ProxiedObjectPool<Object> proxiedObjectPool0 = new ProxiedObjectPool<Object>(genericObjectPool0, jdkProxySource0);
      proxiedObjectPool0.getNumIdle();
      PooledObjectFactory<String> pooledObjectFactory2 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool1 = new SoftReferenceObjectPool<String>(pooledObjectFactory2);
      PooledObjectFactory<String> pooledObjectFactory3 = softReferenceObjectPool1.getFactory();
      GenericObjectPool<String> genericObjectPool1 = new GenericObjectPool<String>(pooledObjectFactory3);
      ProxiedObjectPool<String> proxiedObjectPool1 = new ProxiedObjectPool<String>(genericObjectPool1, (ProxySource<String>) null);
      classLoader0.clearAssertionStatus();
      proxiedObjectPool1.clear();
      Object object0 = new Object();
      try { 
        proxiedObjectPool0.invalidateObject(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a proxy instance
         //
         verifyException("java.lang.reflect.Proxy", e);
      }
  }
}
