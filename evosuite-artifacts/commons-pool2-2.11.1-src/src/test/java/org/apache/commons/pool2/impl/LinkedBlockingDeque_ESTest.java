/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:13:37 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseEra;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalUnit;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Spliterator;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.apache.commons.pool2.impl.LinkedBlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedBlockingDeque_ESTest extends LinkedBlockingDeque_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean0);
      
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offer(integer0, 1337000000L, timeUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      String string0 = linkedBlockingDeque1.remove();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertFalse(linkedBlockingDeque1.contains(string0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals("'4y,DH|]Y?", string0);
      
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertFalse(linkedBlockingDeque1.contains(string0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = new Integer(2);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque2);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertTrue(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object0 = linkedBlockingDeque2.peek();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertTrue(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertEquals("'4y,DH|]Y?", object0);
      
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertTrue(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      linkedBlockingDeque2.addLast(timeUnit0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertTrue(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object1 = linkedBlockingDeque2.getLast();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(string0));
      assertTrue(linkedBlockingDeque2.contains(object1));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertNotNull(linkedBlockingDeque3);
      
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque2.contains(object1));
      assertFalse(linkedBlockingDeque2.contains(2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNull(chronoLocalDate0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      assertEquals(ChronoUnit.HOURS, chronoUnit0);
      
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      assertNotNull(linkedBlockingDeque0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertTrue(linkedBlockingDeque0.contains(locale0));
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(boolean0);
      
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertFalse(linkedBlockingDeque0.contains(locale0));
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(locale0));
      assertFalse(linkedBlockingDeque1.contains(false));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.contains(1379));
      
      Integer integer0 = new Integer(1379);
      assertNotNull(integer0);
      assertEquals(1379, (int)integer0);
      
      Duration duration0 = Duration.ofSeconds((-1415000000000L), (long) 457);
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque3.offerFirst(integer0, duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertFalse(boolean0);
      
      LinkedBlockingDeque<Locale> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale>();
      assertNotNull(linkedBlockingDeque1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.drainTo((Collection<? super Locale>) linkedBlockingDeque1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(1));
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.addAll(set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Deque full
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      assertNotNull(linkedBlockingDeque0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-2485));
      assertNotNull(integer0);
      assertEquals((-2485), (int)integer0);
      
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      assertNotNull(stream0);
      assertFalse(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNull(object0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      
      Integer integer1 = new Integer((-514));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-514), (int)integer1);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      
      linkedBlockingDeque3.putLast("");
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertTrue(boolean4);
      
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque3.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertTrue(boolean5);
      
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertNotSame(duration0, duration1);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean6);
      
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      assertNotNull(object1);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      linkedBlockingDeque1.putFirst(timeUnit0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      Object object2 = linkedBlockingDeque1.removeFirst();
      assertNotNull(object2);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains(object2));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      
      Integer integer2 = new Integer((-2485));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-2485), (int)integer2);
      
      linkedBlockingDeque0.addLast(integer2);
      assertTrue(linkedBlockingDeque0.contains(integer2));
      assertFalse(linkedBlockingDeque0.contains(integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      String string0 = linkedBlockingDeque2.peek();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertEquals("org.apache.commons.pool2.impl.LinkedBlockingDeque", string0);
      
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(linkedBlockingDeque0.contains(integer2));
      assertFalse(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedBlockingDeque1.contains(object2));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7);
      
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(integer2));
      assertFalse(linkedBlockingDeque1.contains(object2));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      String string1 = linkedBlockingDeque1.remove();
      assertNotNull(string1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("'4y,DH|]Y?", string1);
      
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object0 = linkedBlockingDeque2.peek();
      assertNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      linkedBlockingDeque2.addLast(timeUnit0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object1 = linkedBlockingDeque2.getLast();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque2.contains(object1));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertNotNull(linkedBlockingDeque3);
      
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNull(chronoLocalDate0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      assertEquals(ChronoUnit.HOURS, chronoUnit0);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      assertNotNull(object2);
      assertSame(timeUnit1, timeUnit0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertSame(object2, object1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      assertTrue(linkedBlockingDeque0.contains(string0));
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.drainTo((Collection<? super String>) set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-673), (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-673), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.poll((long) integerArray0[2], (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-2485));
      assertNotNull(integer0);
      assertEquals((-2485), (int)integer0);
      
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      assertNotNull(stream0);
      assertFalse(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNull(object0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      Integer integer1 = new Integer((-514));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-514), (int)integer1);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains((-514)));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertTrue(linkedBlockingDeque1.contains((-514)));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Object object1 = linkedBlockingDeque1.takeLast();
      assertNotNull(object1);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertFalse(object1.equals((Object)integer0));
      assertEquals((-514), object1);
      
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      
      linkedBlockingDeque3.putLast("");
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque3.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertTrue(boolean5);
      
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertNotSame(duration0, duration1);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean6);
      
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      assertNotNull(object2);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      linkedBlockingDeque1.putFirst(timeUnit0);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      Object object3 = linkedBlockingDeque1.removeFirst();
      assertNotNull(object3);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      Integer integer2 = new Integer((-2485));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2485), (int)integer2);
      
      linkedBlockingDeque0.addLast(integer2);
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      
      String string0 = linkedBlockingDeque2.peek();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertEquals("org.apache.commons.pool2.impl.LinkedBlockingDeque", string0);
      
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(linkedBlockingDeque0.contains((-2485)));
      assertFalse(linkedBlockingDeque0.contains(object1));
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(5));
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      linkedBlockingDeque0.putFirst(integer1);
      assertTrue(linkedBlockingDeque0.contains(5));
      assertFalse(integer1.equals((Object)integer0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      assertFalse(linkedBlockingDeque0.contains(5));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(boolean1);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque1);
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));
      
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNull(string0);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque2));
      
      int int0 = 915;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertNotNull(linkedBlockingDeque3);
      
      // Undeclared exception!
      try { 
        MockLocalDate.of((-632), Integer.MAX_VALUE, 961);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 2147483647
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      assertNotNull(linkedBlockingDeque0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertTrue(linkedBlockingDeque0.contains(locale0));
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(boolean0);
      
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertFalse(linkedBlockingDeque0.contains(locale0));
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(locale0));
      assertFalse(linkedBlockingDeque1.contains(1379));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = linkedBlockingDeque0.pollFirst();
      assertNull(string0);
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertNotNull(linkedBlockingDeque1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offerLast((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(5, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(linkedBlockingDeque0.contains(5));
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNull(integer1);
      assertFalse(linkedBlockingDeque0.contains(5));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      assertNotNull(linkedBlockingDeque1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offer((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(linkedBlockingDeque0.contains(integer0));
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNull(integer1);
      assertFalse(linkedBlockingDeque0.contains(integer0));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      assertNotNull(linkedBlockingDeque1);
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      assertNotNull(linkedBlockingDeque2);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque2.pollLast((long) 5, timeUnit0);
      assertNull(object0);
      
      boolean boolean0 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.drainTo((Collection<? super ChronoLocalDate>) null, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // c
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      linkedBlockingDeque0.putFirst(integer0);
      assertTrue(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer1 = linkedBlockingDeque0.pollLast();
      assertNotNull(integer1);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque1);
      
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNull(string0);
      
      int int0 = 915;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertNotNull(linkedBlockingDeque2);
      
      int int1 = 968;
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque3 = null;
      try {
        linkedBlockingDeque3 = new LinkedBlockingDeque<Locale.LanguageRange>((-632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      assertNotNull(integer0);
      assertEquals((-21), (int)integer0);
      
      Duration duration0 = Duration.ofHours(685L);
      assertNotNull(duration0);
      
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Locale.setDefault(locale_Category0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't set default locale to NULL
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(false));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      long long0 = 5704L;
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.pollFirst((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      linkedBlockingDeque0.putFirst(integer0);
      assertTrue(linkedBlockingDeque0.contains(int0));
      assertTrue(integer0.equals((Object)int0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque1);
      
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNull(string0);
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertNotNull(linkedBlockingDeque2);
      
      int int1 = 968;
      // Undeclared exception!
      try { 
        MockLocalDate.of((-632), Integer.MAX_VALUE, 968);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 2147483647
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer((-2147449131));
      assertNotNull(integer0);
      assertEquals((-2147449131), (int)integer0);
      
      linkedBlockingDeque0.putLast(integer0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(5, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertFalse(linkedBlockingDeque0.contains(5));
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Integer integer2 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer2);
      assertFalse(linkedBlockingDeque0.contains(integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2147449131), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(boolean0);
      
      String string0 = linkedBlockingDeque0.remove();
      assertNotNull(string0);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertEquals("'4y,DH|]Y?", string0);
      
      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      linkedBlockingDeque0.put(iterator0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(699));
      
      Integer integer0 = new Integer(699);
      assertNotNull(integer0);
      assertEquals(699, (int)integer0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      assertTrue(linkedBlockingDeque1.contains(699));
      assertTrue(boolean0);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque0.poll((-3675L), timeUnit1);
      assertNotNull(object0);
      assertFalse(linkedBlockingDeque0.contains(699));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>();
      assertNotNull(linkedBlockingDeque2);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(1271);
      assertNotNull(integer0);
      assertEquals(1271, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertFalse(linkedBlockingDeque0.contains(1271));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(1271));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(1271));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(1271));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2);
      
      Integer integer1 = new Integer((-1016));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1016), (int)integer1);
      
      boolean boolean3 = linkedHashSet0.add(integer1);
      assertTrue(linkedHashSet0.contains(1271));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean3);
      
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(1271));
      assertFalse(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedHashSet0.contains(integer1));
      assertTrue(linkedHashSet0.contains(1271));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean4);
      
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedBlockingDeque0.contains(1271));
      assertFalse(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedHashSet0.contains(integer1));
      assertTrue(linkedHashSet0.contains(1271));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean5);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertTrue(linkedBlockingDeque0.contains(1271));
      assertFalse(linkedBlockingDeque0.contains(integer1));
      assertEquals(2, objectArray0.length);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(1271));
      
      int int0 = linkedBlockingDeque1.size();
      assertFalse(linkedBlockingDeque1.contains(1271));
      assertEquals(0, int0);
      
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(1271));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(1271);
      assertNotNull(integer0);
      assertEquals(1271, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertFalse(linkedBlockingDeque0.contains(integer0));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(integer0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2);
      
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean3);
      
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean4);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertEquals(2, objectArray0.length);
      
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offerLast("lti1QId\"R2brSeS", (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque0.pollLast((-1029L), timeUnit0);
      assertNull(chronoLocalDate0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.poll(1555200000000000L, timeUnit1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      assertTrue(linkedBlockingDeque0.contains("evdRh1)ced"));
      
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
      assertFalse(linkedBlockingDeque0.contains("evdRh1)ced"));
      assertEquals("evdRh1)ced", string0);
      
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale.LanguageRange>(false);
      assertNotNull(linkedBlockingDeque1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(77));
      
      Integer integer0 = new Integer(77);
      assertNotNull(integer0);
      assertEquals(77, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(linkedBlockingDeque0.contains(77));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(77));
      assertTrue(linkedBlockingDeque1.contains(77));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("Japanese", string0);
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("Japanese", string1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(set0.contains(string0));
      assertFalse(linkedBlockingDeque2.contains(false));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      linkedBlockingDeque2.putLast(set0);
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string0));
      assertFalse(linkedBlockingDeque2.contains(false));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.contains(string0));
      
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque3.contains(string0));
      
      Duration duration0 = Duration.ofSeconds((-16138800000000000L));
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.pollLast(duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMinutes(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      Duration duration2 = duration0.minus(duration1);
      assertNotNull(duration2);
      assertSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertSame(duration1, duration2);
      assertSame(duration2, duration1);
      assertSame(duration2, duration0);
      
      Integer integer0 = new Integer((-4017));
      assertNotNull(integer0);
      assertEquals((-4017), (int)integer0);
      
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(integer0));
      
      Integer integer1 = new Integer((-2144));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2144), (int)integer1);
      
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      assertTrue(linkedBlockingDeque2.contains(integer1));
      assertFalse(linkedBlockingDeque2.contains(integer0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
      assertSame(duration0, duration1);
      assertSame(duration0, object0);
      assertSame(duration0, duration2);
      assertSame(object0, duration0);
      assertSame(object0, duration2);
      assertSame(object0, duration1);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator1);
      assertTrue(linkedBlockingDeque2.contains(integer1));
      assertFalse(linkedBlockingDeque2.contains(integer0));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      assertNotNull(linkedBlockingDeque3);
      
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      assertNull(chronoLocalDate0);
      
      Iterator<Object> iterator2 = linkedBlockingDeque1.iterator();
      assertNotNull(iterator2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      Object object1 = linkedBlockingDeque1.peekLast();
      assertNotNull(object1);
      assertFalse(linkedBlockingDeque1.contains(0L));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(6));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertNotNull(linkedBlockingDeque1);
      
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(6));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(6));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(6));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(false));
      
      linkedBlockingDeque2.push("");
      assertFalse(linkedBlockingDeque2.contains(6));
      assertTrue(linkedBlockingDeque2.contains(""));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque2.contains(6));
      assertTrue(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque3.contains(6));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      
      Object object0 = linkedBlockingDeque3.element();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(6));
      assertTrue(linkedBlockingDeque2.contains(""));
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque3.contains(6));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertEquals("", object0);
      
      Object object1 = linkedBlockingDeque2.take();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque2.contains(6));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertEquals("", object1);
      
      Locale locale0 = new Locale("", "", "defaultValue");
      assertNotNull(locale0);
      assertEquals("defaultValue", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(object1));
      assertEquals("defaultValue", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(linkedBlockingDeque4);
      assertFalse(set0.contains(object1));
      assertFalse(linkedBlockingDeque4.contains(object1));
      assertEquals("defaultValue", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(linkedBlockingDeque5);
      assertFalse(set0.contains(object1));
      assertFalse(linkedBlockingDeque5.contains(object1));
      assertFalse(linkedBlockingDeque5.equals((Object)linkedBlockingDeque4));
      assertEquals("defaultValue", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque5.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMinutes(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      Duration duration2 = duration1.withSeconds(78180000000000L);
      assertNotNull(duration2);
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      
      long long0 = duration1.toDays();
      assertSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertFalse(duration1.equals((Object)duration2));
      assertEquals(0L, long0);
      
      Duration duration3 = duration0.minus(duration1);
      assertNotNull(duration3);
      assertSame(duration0, duration3);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration1, duration0);
      assertSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration3, duration2);
      assertSame(duration3, duration1);
      assertSame(duration3, duration0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration2));
      
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertSame(duration0, duration3);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(duration0.equals((Object)duration2));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque2);
      
      Integer integer0 = new Integer((-2144));
      assertNotNull(integer0);
      assertEquals((-2144), (int)integer0);
      
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(linkedBlockingDeque2.contains((-2144)));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      assertTrue(linkedBlockingDeque2.contains((-2144)));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
      assertSame(duration0, duration3);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertSame(duration0, object0);
      assertSame(object0, duration0);
      assertSame(object0, duration3);
      assertSame(object0, duration1);
      assertNotSame(object0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(object0.equals((Object)duration2));
      
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Integer integer1 = linkedBlockingDeque2.pop();
      assertNotNull(integer1);
      assertFalse(linkedBlockingDeque2.contains((-2144)));
      assertEquals((-2144), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMinutes(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      Duration duration2 = duration0.minus(duration1);
      assertNotNull(duration2);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertSame(duration2, duration0);
      assertSame(duration2, duration1);
      
      Integer integer0 = new Integer((-4017));
      assertNotNull(integer0);
      assertEquals((-4017), (int)integer0);
      
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(integer0));
      
      Duration duration3 = duration0.withSeconds((-4017));
      assertNotNull(duration3);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration2));
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertSame(duration0, object0);
      assertNotSame(duration0, duration3);
      assertSame(object0, duration1);
      assertNotSame(object0, duration3);
      assertSame(object0, duration0);
      assertSame(object0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(object0.equals((Object)duration3));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oaw";
      stringArray0[1] = ",_`8:fl8h\"E_";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "dzRIElK![.(";
      stringArray0[5] = "`";
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.pool2.impl.LinkedBlockingDeque
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(734);
      assertNotNull(integer0);
      assertEquals(734, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      assertFalse(linkedBlockingDeque0.contains(object0));
      assertFalse(boolean0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(734));
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      assertNull(integer1);
      assertFalse(linkedBlockingDeque1.contains(734));
      
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      assertNull(integer2);
      assertFalse(linkedBlockingDeque1.contains(734));
      
      String string0 = linkedBlockingDeque1.toString();
      assertNotNull(string0);
      assertFalse(linkedBlockingDeque1.contains(734));
      assertEquals("[]", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(linkedBlockingDeque2.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque2.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(linkedBlockingDeque3.contains(string0));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = linkedBlockingDeque3.remainingCapacity();
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(linkedBlockingDeque3.contains(string0));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(Integer.MAX_VALUE, int0);
      
      linkedBlockingDeque3.putFirst(">");
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(">"));
      assertFalse(list0.contains(">"));
      assertFalse(linkedBlockingDeque3.contains(string0));
      assertTrue(linkedBlockingDeque3.contains(">"));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(linkedBlockingDeque0.contains(734));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray1.length);
      
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque4);
      assertFalse(linkedBlockingDeque4.contains(">"));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque2));
      
      Object object1 = linkedBlockingDeque4.peekLast();
      assertNull(object1);
      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque4.contains(">"));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque2));
      
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(linkedBlockingDeque1.contains(734));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      linkedBlockingDeque0.clear();
      assertFalse(linkedBlockingDeque0.contains(734));
      
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque3);
      assertNotSame(linkedBlockingDeque4, linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque4.contains(">"));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque3));
      assertFalse(linkedBlockingDeque4.equals((Object)linkedBlockingDeque2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offerFirst((Object) null, 33L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(2787));
      
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedBlockingDeque0.contains(2787));
      
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque1);
      
      String string0 = linkedBlockingDeque1.poll();
      assertNull(string0);
      
      Object object0 = linkedBlockingDeque1.pollLast();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.push((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertFalse(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque1);
      
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      assertNotNull(linkedBlockingDeque2);
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      assertNotNull(linkedBlockingDeque3);
      
      Object object0 = linkedBlockingDeque3.peekLast();
      assertNull(object0);
      
      boolean boolean1 = linkedBlockingDeque2.removeLastOccurrence((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      linkedBlockingDeque0.clear();
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      int int0 = 1234;
      String string0 = "F!DG2ay&TTB;rOAY";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("F!DG2ay&TTB;rOAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=f!dg2ay&ttb;roay
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("_[aVP."));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-422));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-422), (int)integer0);
      
      linkedBlockingDeque1.addFirst("_[aVP.");
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains("_[aVP."));
      assertFalse(linkedBlockingDeque1.contains((-422)));
      assertTrue(linkedBlockingDeque1.contains("_[aVP."));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains("_[aVP."));
      assertFalse(linkedBlockingDeque1.contains((-422)));
      assertTrue(linkedBlockingDeque1.contains("_[aVP."));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains("_[aVP."));
      assertTrue(linkedBlockingDeque1.contains("_[aVP."));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offerFirst((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(642);
      assertNotNull(integer0);
      assertEquals(642, (int)integer0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(642));
      assertTrue(boolean0);
      
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      assertNotNull(integer1);
      assertTrue(linkedBlockingDeque0.contains(integer1));
      assertEquals(642, (int)integer1);
      
      Integer integer2 = linkedBlockingDeque0.removeLast();
      assertNotNull(integer2);
      assertFalse(linkedBlockingDeque0.contains(integer2));
      assertEquals(642, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMinutes(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      long long0 = duration1.toDays();
      assertSame(duration1, duration0);
      assertEquals(0L, long0);
      
      Duration duration2 = duration0.minus(duration1);
      assertNotNull(duration2);
      assertSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertSame(duration2, duration0);
      assertSame(duration2, duration1);
      
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNotNull(object0);
      assertSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque2);
      
      Integer integer0 = new Integer((-2144));
      assertNotNull(integer0);
      assertEquals((-2144), (int)integer0);
      
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(linkedBlockingDeque2.contains((-2144)));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      assertTrue(linkedBlockingDeque2.contains((-2144)));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      assertNull(object1);
      assertSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      assertNull(object2);
      assertSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-650), (int)integer0);
      
      linkedBlockingDeque1.putLast(integer0);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object0.equals((Object)int0));
      assertEquals((-650), object0);
      
      linkedBlockingDeque0.putLast(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object0.equals((Object)int0));
      
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object1 = linkedBlockingDeque1.getLast();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object1.equals((Object)int0));
      assertEquals((-650), object1);
      
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertNotNull(object2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertTrue(object2.equals((Object)int0));
      assertEquals((-650), object2);
      
      Duration duration0 = Duration.ofMinutes(Integer.MAX_VALUE);
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.pollFirst(duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer((-2559));
      assertNotNull(integer0);
      assertEquals((-2559), (int)integer0);
      
      Duration duration0 = Duration.ofMinutes((-4483L));
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ZERO;
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration1.withSeconds((-2559));
      assertNotNull(duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      
      Duration duration3 = duration1.negated();
      assertNotNull(duration3);
      assertSame(duration1, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration3, duration0);
      assertSame(duration3, duration1);
      assertNotSame(duration3, duration2);
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration2));
      
      Duration duration4 = duration0.minus(duration1);
      assertNotNull(duration4);
      assertSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertSame(duration1, duration3);
      assertNotSame(duration1, duration4);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration4, duration1);
      assertNotSame(duration4, duration2);
      assertSame(duration4, duration0);
      assertNotSame(duration4, duration3);
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration4.equals((Object)duration1));
      assertFalse(duration4.equals((Object)duration2));
      assertFalse(duration4.equals((Object)duration3));
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      assertNull(object0);
      assertFalse(linkedBlockingDeque0.contains((-4483L)));
      
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      assertSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      assertSame(duration0, duration4);
      assertNotSame(duration0, duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertFalse(linkedBlockingDeque0.contains("D/`lB_3eHv~m"));
      assertTrue(linkedBlockingDeque0.contains((-2559)));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object1 = linkedBlockingDeque0.getFirst();
      assertNotNull(object1);
      assertFalse(linkedBlockingDeque0.contains("D/`lB_3eHv~m"));
      assertTrue(linkedBlockingDeque0.contains((-2559)));
      assertEquals((-2559), object1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("D/`lB_3eHv~m"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.subList((-2559), (-2559));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2559
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
      
      Duration duration0 = Duration.ofSeconds(0L);
      assertNotNull(duration0);
      
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      Object object0 = linkedBlockingDeque1.peekLast();
      assertNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(boolean0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      int int0 = 0;
      Duration duration1 = duration0.withNanos(0);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertTrue(duration1.equals((Object)duration0));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offer((Object) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      assertNotNull(duration0);
      
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Integer integer0 = linkedBlockingDeque0.pollFirst(1L, timeUnit0);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offerFirst((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      assertNotNull(linkedBlockingDeque0);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("defaultValue"));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains("defaultValue"));
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(0L));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));
      
      String string0 = linkedBlockingDeque2.toString();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque2.contains(0L));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque1));
      assertEquals("[]", string0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(3625);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.contains(3625));
      
      Object object0 = linkedBlockingDeque3.pollFirst();
      assertNull(object0);
      assertFalse(linkedBlockingDeque3.contains(3625));
      
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.offerLast((Object) null, 0L, timeUnit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = linkedBlockingDeque0.size();
      assertEquals(0, int0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      assertFalse(boolean0);
      
      String string0 = linkedBlockingDeque1.peekFirst();
      assertNull(string0);
      
      String string1 = linkedBlockingDeque1.peekFirst();
      assertNull(string1);
      
      boolean boolean1 = linkedBlockingDeque0.removeAll(linkedBlockingDeque1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.addFirst((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
      
      Spliterator<String> spliterator0 = linkedBlockingDeque0.spliterator();
      assertNotNull(spliterator0);
      
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.poll((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.pollLast((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      String string0 = linkedBlockingDeque1.remove();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals("'4y,DH|]Y?", string0);
      
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque1.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object0 = linkedBlockingDeque2.peek();
      assertNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      linkedBlockingDeque2.addLast(timeUnit0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object1 = linkedBlockingDeque2.getLast();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains("'4y,DH|]Y?"));
      assertTrue(linkedBlockingDeque2.contains(object1));
      assertFalse(linkedBlockingDeque2.contains("'4y,DH|]Y?"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertNotNull(linkedBlockingDeque3);
      
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNull(chronoLocalDate0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      assertEquals(ChronoUnit.HOURS, chronoUnit0);
      
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(3858));
      
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      assertNull(integer0);
      assertFalse(linkedBlockingDeque0.contains(3858));
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertFalse(linkedBlockingDeque0.contains(3858));
      assertEquals(0, objectArray0.length);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(3858));
      
      Duration duration0 = Duration.ofMinutes(3858);
      assertNotNull(duration0);
      
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      assertTrue(linkedBlockingDeque1.contains(""));
      assertFalse(linkedBlockingDeque1.contains(3858));
      
      long long0 = duration0.toMinutes();
      assertEquals(3858L, long0);
      
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      assertNotNull(object0);
      assertFalse(linkedBlockingDeque1.contains(3858));
      assertTrue(object0.equals((Object)string0));
      assertEquals("", object0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(string0));
      
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      assertFalse(linkedBlockingDeque2.contains(string0));
      assertFalse(boolean0);
      
      Duration duration1 = duration0.minusHours(3858L);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = linkedBlockingDeque0.remainingCapacity();
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = linkedBlockingDeque0.getTakeQueueLength();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
      
      Duration duration0 = Duration.ofMillis(628L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      int int0 = duration0.compareTo(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals((-1), int0);
      
      Integer integer0 = linkedBlockingDeque0.pollLast(duration0);
      assertNull(integer0);
      assertNotSame(duration0, duration1);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1618, true);
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast("v0hW13;.\"DK<%f|K5", (long) 1618, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("v0hW13;.\"DK<%f|K5"));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.putFirst((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      assertNotNull(linkedBlockingDeque0);
      
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      assertTrue(linkedBlockingDeque0.contains(""));
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofSeconds((long) 7, 0L);
      assertNotNull(duration0);
      
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
      assertFalse(linkedBlockingDeque0.contains(string0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      assertNull(string0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("&9"));
      assertTrue(boolean0);
      
      String string1 = linkedBlockingDeque0.peekFirst();
      assertNotNull(string1);
      assertTrue(linkedBlockingDeque0.contains("&9"));
      assertEquals("&9", string1);
      
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      assertTrue(linkedBlockingDeque0.contains("&9"));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains("&9"));
      
      Duration duration0 = Duration.ofNanos((-336L));
      assertNotNull(duration0);
      
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNull(object0);
      assertFalse(linkedBlockingDeque1.contains("&9"));
      
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(linkedBlockingDeque1.contains("&9"));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Object object1 = linkedBlockingDeque1.pollLast();
      assertNotNull(object1);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(object1.equals((Object)string1));
      assertEquals("&9", object1);
      
      int int1 = linkedBlockingDeque1.size();
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      linkedBlockingDeque0.addLast("defaultValue");
      assertTrue(linkedBlockingDeque0.contains("&9"));
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = null;
      try {
        linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      assertTrue(linkedBlockingDeque0.contains(string0));
      
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      assertNotNull(stream0);
      assertTrue(linkedBlockingDeque0.contains(string0));
      
      String string1 = linkedBlockingDeque0.take();
      assertNotNull(string1);
      assertFalse(linkedBlockingDeque0.contains(string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("defaultValue", string1);
      
      int int0 = 7;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(7);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(false));
      
      Duration duration0 = Duration.ofMinutes(7);
      assertNotNull(duration0);
      
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      assertNotNull(japaneseEra0);
      
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.from(japaneseEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: Taisho of type java.time.chrono.JapaneseEra
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      linkedBlockingDeque0.interuptTakeWaiters();
      Iterator<Object> iterator1 = linkedBlockingDeque1.descendingIterator();
      assertNotNull(iterator1);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(iterator1.equals((Object)iterator0));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.putLast((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(677);
      assertNotNull(linkedBlockingDeque1);
      
      Duration duration0 = Duration.ofNanos(1L);
      assertNotNull(duration0);
      
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.put((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 402;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(402, true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offer((Object) null, (long) 402, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-243), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-673), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-774), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-243), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll((-1820L), timeUnit0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.addLast((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(1271);
      assertNotNull(integer0);
      assertEquals(1271, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertFalse(linkedBlockingDeque0.contains(integer0));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean2);
      
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean3);
      
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean4);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertEquals(2, objectArray0.length);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(false));
      
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      assertFalse(linkedBlockingDeque1.contains(false));
      assertEquals(0, int0);
      
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      assertFalse(linkedBlockingDeque0.contains(0));
      assertFalse(linkedHashSet0.contains(0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.getFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedList0, (-2108));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedList0.contains((-2108)));
      assertEquals(0, linkedList0.size());
      assertEquals((-2108), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Collection<Integer> collection0 = null;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      assertNotNull(linkedBlockingDeque0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      assertNull(string0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(1));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque2.contains(1));
      
      int int0 = linkedBlockingDeque1.drainTo((Collection<? super Integer>) linkedBlockingDeque2, (-1903));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque2.contains(1));
      assertEquals((-1903), int0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.offerFirst((Object) null, 705L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque1.contains(false));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      assertNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque1.contains(false));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.putLast((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      assertTrue(boolean0);
      
      String string0 = linkedBlockingDeque0.poll();
      assertNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean1);
      
      String string1 = linkedBlockingDeque0.poll();
      assertNull(string1);
      
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      assertNotNull(stream0);
      
      int int0 = linkedBlockingDeque0.remainingCapacity();
      assertEquals(Integer.MAX_VALUE, int0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      assertTrue(linkedBlockingDeque0.contains("Deque full"));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = linkedBlockingDeque0.take();
      assertNotNull(string2);
      assertFalse(linkedBlockingDeque0.contains("Deque full"));
      assertEquals("Deque full", string2);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      assertFalse(linkedBlockingDeque0.contains("Deque full"));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.getLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(584));
      
      Integer integer0 = new Integer(584);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(584, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(linkedBlockingDeque0.contains(584));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      int int1 = linkedBlockingDeque0.size();
      assertFalse(linkedBlockingDeque0.contains(int1));
      assertTrue(linkedBlockingDeque0.contains(584));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(584));
      
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      assertFalse(linkedBlockingDeque1.contains(584));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Duration duration0 = Duration.ofSeconds((-3802L));
      assertNotNull(duration0);
      
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNull(object0);
      assertFalse(linkedBlockingDeque1.contains(584));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertNotNull(linkedBlockingDeque0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer(3924);
      assertNotNull(integer0);
      assertEquals(3924, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.contains(1));
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.getLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = linkedBlockingDeque0.remainingCapacity();
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertEquals(Integer.MAX_VALUE, int0);
      
      Integer integer0 = new Integer(2327);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2327, (int)integer0);
      
      linkedBlockingDeque0.addFirst(integer0);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(integer0.equals((Object)int0));
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      linkedBlockingDeque2.interuptTakeWaiters();
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Integer integer1 = linkedBlockingDeque1.getLast();
      assertNotNull(integer1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(2327, (int)integer1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      assertNotNull(linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque3.contains("pN!M43{CE%"));
      assertTrue(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int1 = linkedBlockingDeque3.remainingCapacity();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.contains(int1));
      assertFalse(linkedBlockingDeque1.contains(int1));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque3.contains("pN!M43{CE%"));
      assertTrue(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(2147483646, int1);
      
      Object object0 = linkedBlockingDeque3.pop();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedBlockingDeque0.contains(int1));
      assertFalse(linkedBlockingDeque1.contains(int1));
      assertTrue(linkedBlockingDeque1.contains(integer1));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertEquals(2327, object0);
      
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque1.contains(int2));
      assertTrue(linkedBlockingDeque1.contains(integer1));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Integer integer2 = linkedBlockingDeque0.peekLast();
      assertNotNull(integer2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(integer1));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertEquals(2327, (int)integer2);
      
      Integer integer3 = linkedBlockingDeque1.pop();
      assertNotNull(integer3);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer3));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque1.contains(int2));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(2327, (int)integer3);
      
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer3));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque1.contains(int2));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(0, int3);
      
      Object object1 = linkedBlockingDeque3.poll();
      assertNull(object1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer3));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque1.contains(int2));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int4 = linkedBlockingDeque2.size();
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(integer3));
      assertFalse(linkedBlockingDeque0.contains(int2));
      assertFalse(linkedBlockingDeque1.contains(int2));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      Object object0 = linkedBlockingDeque0.poll();
      assertNull(object0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(2513));
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      linkedBlockingDeque1.push(integer0);
      assertTrue(linkedBlockingDeque1.contains(integer0));
      assertFalse(linkedBlockingDeque1.contains(2513));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      String string0 = linkedBlockingDeque0.pollFirst();
      assertNull(string0);
      
      String string1 = linkedBlockingDeque0.peekLast();
      assertNull(string1);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque1);
      
      Duration duration0 = Duration.ofMinutes((-2065L));
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offer((Object) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      int int0 = 7;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(7);
      assertNotNull(linkedBlockingDeque1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      linkedBlockingDeque0.put(";?");
      assertTrue(linkedBlockingDeque0.contains(";?"));
      
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      assertTrue(linkedBlockingDeque0.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr"));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr"));
      
      Object object0 = linkedBlockingDeque1.pollLast();
      assertNull(object0);
      assertFalse(linkedBlockingDeque1.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr"));
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedBlockingDeque0.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr"));
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.offerLast((Object) null, 4523L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      linkedBlockingDeque0.put(iterator0);
      assertFalse(linkedBlockingDeque0.contains(699));
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(699));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(false));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertFalse(linkedBlockingDeque0.contains(false));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charBuffer0.length());
      assertEquals("|)[x", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'|', ')', '[', 'x'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string0 = "Os{UN@F";
      // Undeclared exception!
      try { 
        charBuffer0.subSequence(0, 346);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      assertNotNull(integer0);
      assertEquals((-460), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3069), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2035, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(4, integerArray0.length);
      assertEquals((-460), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = null;
      try {
        linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(1));
      
      Integer integer0 = new Integer(2757);
      assertNotNull(integer0);
      assertEquals(2757, (int)integer0);
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(boolean0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertFalse(linkedBlockingDeque1.contains(true));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque2);
      
      String string0 = linkedBlockingDeque2.peek();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(true));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      assertTrue(linkedBlockingDeque0.contains((-1)));
      assertFalse(linkedBlockingDeque0.contains(true));
      assertTrue(boolean0);
      
      Object object0 = linkedBlockingDeque0.removeFirst();
      assertNotNull(object0);
      assertFalse(linkedBlockingDeque0.contains(true));
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(77));
      
      Integer integer0 = new Integer(77);
      assertNotNull(integer0);
      assertEquals(77, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(linkedBlockingDeque0.contains(77));
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(77));
      assertTrue(linkedBlockingDeque1.contains(77));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int0 = linkedBlockingDeque1.size();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains(77));
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(77));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(1, int0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("Japanese", string0);
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("Japanese", string1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string1));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      assertNotNull(linkedBlockingDeque2);
      assertFalse(set0.contains(string1));
      assertFalse(linkedBlockingDeque2.contains(77));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      linkedBlockingDeque2.putLast(set0);
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string1));
      assertFalse(linkedBlockingDeque2.contains(77));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.contains(string1));
      
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque3.contains(string1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(574));
      
      Integer integer0 = new Integer(574);
      assertNotNull(integer0);
      assertEquals(574, (int)integer0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      assertFalse(linkedBlockingDeque0.contains(0L));
      assertTrue(linkedBlockingDeque0.contains(574));
      assertTrue(boolean0);
      
      String string0 = linkedBlockingDeque0.toString();
      assertNotNull(string0);
      assertFalse(linkedBlockingDeque0.contains(0L));
      assertTrue(linkedBlockingDeque0.contains(574));
      assertEquals("[574]", string0);
      
      Object object0 = linkedBlockingDeque0.poll();
      assertNotNull(object0);
      assertFalse(linkedBlockingDeque0.contains(574));
      assertEquals(574, object0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(string0));
      
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque1.contains(string0));
      
      String string1 = linkedBlockingDeque1.pollLast();
      assertNull(string1);
      assertFalse(linkedBlockingDeque1.contains(string0));
      
      String string2 = linkedBlockingDeque1.peekFirst();
      assertNull(string2);
      assertFalse(linkedBlockingDeque1.contains(string0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean0);
      
      Duration duration0 = Duration.ofNanos(0L);
      assertNotNull(duration0);
      
      Duration duration1 = Duration.ofMinutes(0L);
      assertNotNull(duration1);
      assertSame(duration1, duration0);
      
      long long0 = duration1.toDays();
      assertSame(duration1, duration0);
      assertEquals(0L, long0);
      
      Duration duration2 = duration0.minus(duration1);
      assertNotNull(duration2);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertSame(duration1, duration2);
      assertSame(duration1, duration0);
      assertSame(duration2, duration1);
      assertSame(duration2, duration0);
      
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNotNull(object0);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque2);
      
      Integer integer0 = new Integer((-2144));
      assertNotNull(integer0);
      assertEquals((-2144), (int)integer0);
      
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertFalse(linkedBlockingDeque2.contains(integer0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      assertTrue(linkedBlockingDeque2.contains(integer0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object1);
      assertSame(duration0, duration2);
      assertSame(duration0, duration1);
      assertSame(duration0, object1);
      assertSame(object1, duration1);
      assertSame(object1, duration0);
      assertSame(object1, duration2);
      assertFalse(linkedBlockingDeque1.contains(0L));
      
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      assertFalse(linkedBlockingDeque1.contains(0L));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      assertTrue(linkedBlockingDeque0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = 569;
      Integer integer0 = new Integer(569);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(569, (int)integer0);
      
      Duration duration0 = null;
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.offerFirst(integer0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      
      Integer integer0 = linkedBlockingDeque0.poll(duration0);
      assertNull(integer0);
      
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.getFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(int0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      assertNotNull(linkedBlockingDeque0);
      assertTrue(linkedList0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(int0));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedList0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(0));
      assertEquals(2, linkedList0.size());
      
      Object object0 = linkedBlockingDeque0.removeLast();
      assertNotNull(object0);
      assertTrue(linkedList0.contains(int0));
      assertFalse(linkedBlockingDeque0.contains(0));
      assertTrue(object0.equals((Object)int0));
      assertEquals(2, linkedList0.size());
      assertEquals(0, object0);
      
      String string0 = linkedBlockingDeque0.toString();
      assertNotNull(string0);
      assertTrue(linkedList0.contains(int0));
      assertFalse(linkedBlockingDeque0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals("[]", string0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = null;
      try {
        linkedBlockingDeque1 = new LinkedBlockingDeque<String>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(set0);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = linkedBlockingDeque0.size();
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertEquals(0, int0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains(0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.drainTo((Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // c
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(1));
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedHashSet0.contains(1));
      assertFalse(linkedBlockingDeque1.contains(1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Duration duration0 = Duration.ofMillis(0L);
      assertNotNull(duration0);
      
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNull(object0);
      assertFalse(linkedHashSet0.contains(1));
      assertFalse(linkedBlockingDeque1.contains(1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      assertFalse(linkedBlockingDeque0.contains(0L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, int0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      assertNotNull(linkedBlockingDeque1);
      assertEquals(0, linkedList0.size());
      
      int int1 = linkedBlockingDeque1.size();
      assertTrue(int1 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int1);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollLast((long) 0, timeUnit0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(3));
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(linkedBlockingDeque0.contains(3));
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Integer integer0 = linkedBlockingDeque0.pollFirst();
      assertNull(integer0);
      assertFalse(linkedBlockingDeque0.contains(3));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertNotNull(linkedBlockingDeque0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean0);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque1);
      
      int int0 = linkedBlockingDeque1.remainingCapacity();
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      Iterator<Object> iterator0 = linkedBlockingDeque1.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(linkedBlockingDeque1.contains(true));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
      
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-1);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-1877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
      
      Object object0 = linkedBlockingDeque0.peekLast();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      assertNotNull(linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(false));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-650), (int)integer0);
      
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(boolean0);
      
      linkedBlockingDeque1.putLast(integer0);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque1.contains(false));
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque1.contains(false));
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object0.equals((Object)int0));
      assertEquals((-650), object0);
      
      linkedBlockingDeque0.putLast(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque1.contains(false));
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object0.equals((Object)int0));
      
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      Object object1 = linkedBlockingDeque1.getLast();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque1.contains(false));
      assertTrue(linkedBlockingDeque1.contains((-650)));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(object1.equals((Object)int0));
      assertEquals((-650), object1);
      
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertNotNull(object2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertTrue(linkedBlockingDeque0.contains((-650)));
      assertFalse(linkedBlockingDeque0.contains(false));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertTrue(object2.equals((Object)int0));
      assertEquals((-650), object2);
      
      Duration duration0 = Duration.ofMinutes(Integer.MAX_VALUE);
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.pollFirst(duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
      
      int int0 = linkedBlockingDeque0.remainingCapacity();
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertEquals(Integer.MAX_VALUE, int0);
      
      Integer integer0 = new Integer(2327);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2327, (int)integer0);
      
      linkedBlockingDeque0.addFirst(integer0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(integer0.equals((Object)int0));
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertTrue(linkedBlockingDeque1.contains(2327));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      linkedBlockingDeque1.putLast(integer1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      linkedBlockingDeque2.interuptTakeWaiters();
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque3.contains("pN!M43{CE%"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      int int1 = linkedBlockingDeque3.remainingCapacity();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(int1));
      assertTrue(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque3.contains("pN!M43{CE%"));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(int1 == int0);
      assertEquals(2147483645, int1);
      
      Object object0 = linkedBlockingDeque3.pop();
      assertNotNull(object0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(int1));
      assertTrue(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)integer2));
      assertEquals(2327, object0);
      
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(int1));
      assertTrue(linkedBlockingDeque1.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque3.contains(2327));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(0, int2);
      
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean3);
      
      Integer integer3 = linkedBlockingDeque0.peekLast();
      assertNotNull(integer3);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(Integer.MAX_VALUE));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(2327, (int)integer3);
      
      Integer integer4 = linkedBlockingDeque1.pop();
      assertNotNull(integer4);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(2327, (int)integer4);
      
      Object object1 = linkedBlockingDeque3.poll();
      assertNotNull(object1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(object1.equals((Object)integer4));
      assertTrue(object1.equals((Object)integer2));
      assertTrue(object1.equals((Object)int0));
      assertFalse(object1.equals((Object)int2));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer3));
      assertFalse(object1.equals((Object)int1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertEquals(Integer.MAX_VALUE, object1);
      
      int int3 = linkedBlockingDeque2.size();
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      assertTrue(linkedBlockingDeque2.contains("pN!M43{CE%"));
      
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      assertNotNull(iterator0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertTrue(linkedBlockingDeque0.contains(2327));
      assertFalse(linkedBlockingDeque1.contains(2327));
      assertTrue(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque3.contains(Integer.MAX_VALUE));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque2.offerLast((String) null, 1676L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
      
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque1.contains(true));
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(linkedBlockingDeque1.contains(true));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-2485));
      assertNotNull(integer0);
      assertEquals((-2485), (int)integer0);
      
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      assertNotNull(stream0);
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNull(object0);
      assertFalse(linkedBlockingDeque1.contains((-2485)));
      
      Integer integer1 = new Integer((-2485));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2485), (int)integer1);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
      
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      assertFalse(linkedBlockingDeque1.contains(1L));
      assertTrue(linkedBlockingDeque1.contains((-2485)));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertNotNull(linkedBlockingDeque2);
      
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      assertNotNull(linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      
      linkedBlockingDeque3.putLast("");
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque3.contains(""));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertTrue(boolean4);
      
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean5);
      
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertNotSame(duration0, duration1);
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean6);
      
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      assertNotNull(object1);
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      linkedBlockingDeque1.putFirst(timeUnit0);
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      
      Object object2 = linkedBlockingDeque1.removeFirst();
      assertNotNull(object2);
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      
      Integer integer2 = new Integer((-2485));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-2485), (int)integer2);
      
      linkedBlockingDeque0.addLast(integer2);
      assertTrue(linkedBlockingDeque0.contains(integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      String string0 = linkedBlockingDeque2.toString();
      assertNotNull(string0);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertEquals("[org.apache.commons.pool2.impl.LinkedBlockingDeque]", string0);
      
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertFalse(linkedBlockingDeque1.contains((-3932L)));
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7);
      
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      assertNotSame(duration0, duration1);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(""));
      assertFalse(duration0.equals((Object)duration1));
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertTrue(boolean8);
      
      String string1 = linkedBlockingDeque3.take();
      assertNotNull(string1);
      assertNotSame(linkedBlockingDeque3, linkedBlockingDeque2);
      assertNotSame(linkedBlockingDeque2, linkedBlockingDeque3);
      assertFalse(linkedBlockingDeque3.contains(string1));
      assertTrue(linkedBlockingDeque2.contains("org.apache.commons.pool2.impl.LinkedBlockingDeque"));
      assertFalse(linkedBlockingDeque2.contains(string1));
      assertFalse(linkedBlockingDeque3.equals((Object)linkedBlockingDeque2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedBlockingDeque2.equals((Object)linkedBlockingDeque3));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
      
      Integer integer0 = linkedBlockingDeque0.peekLast();
      assertNull(integer0);
      
      Integer integer1 = new Integer((-596));
      assertNotNull(integer1);
      assertEquals((-596), (int)integer1);
      
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertNotNull(linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains((-596)));
      assertFalse(linkedBlockingDeque1.contains((-596)));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains((-596)));
      assertFalse(linkedBlockingDeque1.contains((-596)));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertFalse(boolean0);
      
      int int0 = linkedBlockingDeque0.size();
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertEquals(0, int0);
      
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      assertNull(integer2);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      assertNotSame(linkedBlockingDeque0, linkedBlockingDeque1);
      assertNotSame(linkedBlockingDeque1, linkedBlockingDeque0);
      assertFalse(linkedBlockingDeque0.contains(int0));
      assertFalse(linkedBlockingDeque1.contains(int0));
      assertFalse(linkedBlockingDeque0.equals((Object)linkedBlockingDeque1));
      assertFalse(linkedBlockingDeque1.equals((Object)linkedBlockingDeque0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      linkedBlockingDeque0.removeIf(predicate0);
      linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      linkedBlockingDeque1.stream();
      linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      linkedBlockingDeque1.offerLast((Object) integer0, duration0);
      Duration.ofSeconds((-3932L), (-3932L));
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque1.pollLast((long) (-514), timeUnit0);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.removeFirst();
      linkedBlockingDeque2.clear();
      Integer integer1 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer1);
      linkedBlockingDeque2.peek();
      linkedBlockingDeque1.hasTakeWaiters();
      linkedBlockingDeque1.remove((Object) duration0);
      String string0 = linkedBlockingDeque3.pollLast();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, false);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      linkedBlockingDeque1.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(968, Integer.MAX_VALUE);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 2147483647
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      linkedBlockingDeque0.add(integer0);
      linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-2146965931));
      linkedHashSet0.add(integer1);
      linkedHashSet0.retainAll(linkedBlockingDeque0);
      linkedBlockingDeque0.addAll(linkedHashSet0);
      linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, true);
      linkedBlockingDeque1.getTakeQueueLength();
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.poll(0L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      linkedBlockingDeque1.remove();
      linkedBlockingDeque1.hasTakeWaiters();
      linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque2.peek();
      linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.drainTo((Collection<? super String>) linkedBlockingDeque0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-774));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[4] = integer3;
      linkedBlockingDeque1.toArray(integerArray0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.poll((-1820L), timeUnit0);
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.addLast((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1337;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.push("");
      linkedBlockingDeque1.pollFirst((long) 1337, timeUnit0);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = null;
      try {
        linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>((-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1337;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.pollFirst((long) 1337, timeUnit0);
      linkedBlockingDeque0.removeLastOccurrence((Object) null);
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(3);
      linkedBlockingDeque0.putLast(integer1);
      integerArray0[0] = integer0;
      linkedBlockingDeque0.toArray(integerArray0);
      assertTrue(linkedBlockingDeque0.contains(3));
      
      linkedBlockingDeque0.pollFirst();
      assertFalse(linkedBlockingDeque0.contains(3));
      
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      linkedBlockingDeque1.removeFirstOccurrence("Uj");
      Integer integer2 = new Integer((-2147447738));
      linkedBlockingDeque1.contains(integer2);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      linkedBlockingDeque2.parallelStream();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque2.pollLast((long) 5, timeUnit0);
      boolean boolean0 = linkedBlockingDeque1.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      Duration duration1 = duration0.negated();
      linkedBlockingDeque0.pollLast(duration0);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale.LanguageRange>(false);
      linkedBlockingDeque1.removeLastOccurrence(duration1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      linkedBlockingDeque0.offerFirst("evdRh1)ced", 3203L, timeUnit0);
      LinkedBlockingDeque<Locale> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale>();
      linkedBlockingDeque2.remainingCapacity();
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
}
