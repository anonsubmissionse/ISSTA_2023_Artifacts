/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:02:11 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import org.apache.commons.pool2.impl.EvictionConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvictionConfig_ESTest extends EvictionConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((Duration) null, (Duration) null, 0);
      int int0 = evictionConfig0.getMinIdle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 2437);
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      assertEquals(2437, evictionConfig0.getMinIdle());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L, 709L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 748);
      long long0 = evictionConfig0.getIdleEvictTime();
      assertEquals(0L, long0);
      assertEquals(748, evictionConfig0.getMinIdle());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 895);
      // Undeclared exception!
      try { 
        evictionConfig0.getIdleEvictTime();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ofHours((-646L));
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 1);
      int int0 = evictionConfig0.getMinIdle();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig((Duration) null, duration0, 409);
      // Undeclared exception!
      try { 
        evictionConfig0.getIdleSoftEvictTime();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig(736, 518L, 736);
      evictionConfig0.getIdleSoftEvictDuration();
      assertEquals(736, evictionConfig0.getMinIdle());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleEvictTime();
      assertEquals((-125), evictionConfig0.getMinIdle());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      evictionConfig0.getIdleSoftEvictTimeDuration();
      assertEquals((-125), evictionConfig0.getMinIdle());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      evictionConfig0.getIdleEvictTimeDuration();
      assertEquals((-125), evictionConfig0.getMinIdle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 895);
      Duration duration1 = evictionConfig0.getIdleEvictDuration();
      assertEquals(895, evictionConfig0.getMinIdle());
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      String string0 = evictionConfig0.toString();
      assertEquals("EvictionConfig [idleEvictDuration=PT2562047788015H12M55.807S, idleSoftEvictDuration=PT2562047788015H12M55.807S, minIdle=-125]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      assertEquals(9223372036854775807L, long0);
      assertEquals((-125), evictionConfig0.getMinIdle());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      int int0 = evictionConfig0.getMinIdle();
      assertEquals((-125), int0);
  }
}
